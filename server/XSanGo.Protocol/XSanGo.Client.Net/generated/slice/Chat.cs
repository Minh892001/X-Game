// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public enum ChatChannel
            {
                Announce,
                System,
                @Private,
                World,
                Faction,
                Group
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class MessageAttachObject : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public byte[] content;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public MessageAttachObject()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public MessageAttachObject(int id, byte[] content)
                {
                    this.id = id;
                    this.content = content;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::MessageAttachObject");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, content);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    MessageAttachObject o__ = (MessageAttachObject)other__;
                    if(!id.Equals(o__.id))
                    {
                        return false;
                    }
                    if(content == null)
                    {
                        if(o__.content != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(content, o__.content))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(MessageAttachObject lhs__, MessageAttachObject rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(MessageAttachObject lhs__, MessageAttachObject rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(id);
                    com.XSanGo.Protocol.ByteSeqHelper.write(os__, content);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readInt();
                    content = com.XSanGo.Protocol.ByteSeqHelper.read(is__);
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class ChatRole : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string name;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public short level;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vip;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string icon;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int OfficalRankId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string chatTime;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string targetId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string targetName;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public short targetLevel;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int targetVip;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string targetIcon;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int targetOfficalRankId;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChatRole()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChatRole(string id, string name, short level, int vip, string icon, int OfficalRankId, string chatTime, string targetId, string targetName, short targetLevel, int targetVip, string targetIcon, int targetOfficalRankId)
                {
                    this.id = id;
                    this.name = name;
                    this.level = level;
                    this.vip = vip;
                    this.icon = icon;
                    this.OfficalRankId = OfficalRankId;
                    this.chatTime = chatTime;
                    this.targetId = targetId;
                    this.targetName = targetName;
                    this.targetLevel = targetLevel;
                    this.targetVip = targetVip;
                    this.targetIcon = targetIcon;
                    this.targetOfficalRankId = targetOfficalRankId;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::ChatRole");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, name);
                    IceInternal.HashUtil.hashAdd(ref h__, level);
                    IceInternal.HashUtil.hashAdd(ref h__, vip);
                    IceInternal.HashUtil.hashAdd(ref h__, icon);
                    IceInternal.HashUtil.hashAdd(ref h__, OfficalRankId);
                    IceInternal.HashUtil.hashAdd(ref h__, chatTime);
                    IceInternal.HashUtil.hashAdd(ref h__, targetId);
                    IceInternal.HashUtil.hashAdd(ref h__, targetName);
                    IceInternal.HashUtil.hashAdd(ref h__, targetLevel);
                    IceInternal.HashUtil.hashAdd(ref h__, targetVip);
                    IceInternal.HashUtil.hashAdd(ref h__, targetIcon);
                    IceInternal.HashUtil.hashAdd(ref h__, targetOfficalRankId);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    ChatRole o__ = (ChatRole)other__;
                    if(id == null)
                    {
                        if(o__.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!id.Equals(o__.id))
                        {
                            return false;
                        }
                    }
                    if(name == null)
                    {
                        if(o__.name != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!name.Equals(o__.name))
                        {
                            return false;
                        }
                    }
                    if(!level.Equals(o__.level))
                    {
                        return false;
                    }
                    if(!vip.Equals(o__.vip))
                    {
                        return false;
                    }
                    if(icon == null)
                    {
                        if(o__.icon != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!icon.Equals(o__.icon))
                        {
                            return false;
                        }
                    }
                    if(!OfficalRankId.Equals(o__.OfficalRankId))
                    {
                        return false;
                    }
                    if(chatTime == null)
                    {
                        if(o__.chatTime != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!chatTime.Equals(o__.chatTime))
                        {
                            return false;
                        }
                    }
                    if(targetId == null)
                    {
                        if(o__.targetId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!targetId.Equals(o__.targetId))
                        {
                            return false;
                        }
                    }
                    if(targetName == null)
                    {
                        if(o__.targetName != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!targetName.Equals(o__.targetName))
                        {
                            return false;
                        }
                    }
                    if(!targetLevel.Equals(o__.targetLevel))
                    {
                        return false;
                    }
                    if(!targetVip.Equals(o__.targetVip))
                    {
                        return false;
                    }
                    if(targetIcon == null)
                    {
                        if(o__.targetIcon != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!targetIcon.Equals(o__.targetIcon))
                        {
                            return false;
                        }
                    }
                    if(!targetOfficalRankId.Equals(o__.targetOfficalRankId))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(ChatRole lhs__, ChatRole rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(ChatRole lhs__, ChatRole rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(id);
                    os__.writeString(name);
                    os__.writeShort(level);
                    os__.writeInt(vip);
                    os__.writeString(icon);
                    os__.writeInt(OfficalRankId);
                    os__.writeString(chatTime);
                    os__.writeString(targetId);
                    os__.writeString(targetName);
                    os__.writeShort(targetLevel);
                    os__.writeInt(targetVip);
                    os__.writeString(targetIcon);
                    os__.writeInt(targetOfficalRankId);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readString();
                    name = is__.readString();
                    level = is__.readShort();
                    vip = is__.readInt();
                    icon = is__.readString();
                    OfficalRankId = is__.readInt();
                    chatTime = is__.readString();
                    targetId = is__.readString();
                    targetName = is__.readString();
                    targetLevel = is__.readShort();
                    targetVip = is__.readInt();
                    targetIcon = is__.readString();
                    targetOfficalRankId = is__.readInt();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class TextMessage : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.ChatChannel channel;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.MessageAttachObject[] attachs;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.ChatRole cRole;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int type;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string content;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public TextMessage()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public TextMessage(com.XSanGo.Protocol.ChatChannel channel, com.XSanGo.Protocol.MessageAttachObject[] attachs, com.XSanGo.Protocol.ChatRole cRole, int type, string content)
                {
                    this.channel = channel;
                    this.attachs = attachs;
                    this.cRole = cRole;
                    this.type = type;
                    this.content = content;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::TextMessage");
                    IceInternal.HashUtil.hashAdd(ref h__, channel);
                    IceInternal.HashUtil.hashAdd(ref h__, attachs);
                    IceInternal.HashUtil.hashAdd(ref h__, cRole);
                    IceInternal.HashUtil.hashAdd(ref h__, type);
                    IceInternal.HashUtil.hashAdd(ref h__, content);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    TextMessage o__ = (TextMessage)other__;
                    if(!channel.Equals(o__.channel))
                    {
                        return false;
                    }
                    if(attachs == null)
                    {
                        if(o__.attachs != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(attachs, o__.attachs))
                        {
                            return false;
                        }
                    }
                    if(cRole == null)
                    {
                        if(o__.cRole != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!cRole.Equals(o__.cRole))
                        {
                            return false;
                        }
                    }
                    if(!type.Equals(o__.type))
                    {
                        return false;
                    }
                    if(content == null)
                    {
                        if(o__.content != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!content.Equals(o__.content))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(TextMessage lhs__, TextMessage rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(TextMessage lhs__, TextMessage rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeEnum((int)channel, 5);
                    com.XSanGo.Protocol.MessageAttachObjectSeqHelper.write(os__, attachs);
                    if(cRole == null)
                    {
                        com.XSanGo.Protocol.ChatRole tmp__ = new com.XSanGo.Protocol.ChatRole();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        cRole.write__(os__);
                    }
                    os__.writeInt(type);
                    os__.writeString(content);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    channel = (com.XSanGo.Protocol.ChatChannel)is__.readEnum(5);
                    attachs = com.XSanGo.Protocol.MessageAttachObjectSeqHelper.read(is__);
                    if(cRole == null)
                    {
                        cRole = new com.XSanGo.Protocol.ChatRole();
                    }
                    cRole.read__(is__);
                    type = is__.readInt();
                    content = is__.readString();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class ChatSetView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int privateSet;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string privateColor;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string privateUserColor;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int worldSet;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string worldColor;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string worldUserColor;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int factionSet;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string factionColor;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string factionUserColor;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int groupSet;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string groupColor;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string groupUserColor;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChatSetView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChatSetView(int privateSet, string privateColor, string privateUserColor, int worldSet, string worldColor, string worldUserColor, int factionSet, string factionColor, string factionUserColor, int groupSet, string groupColor, string groupUserColor)
                {
                    this.privateSet = privateSet;
                    this.privateColor = privateColor;
                    this.privateUserColor = privateUserColor;
                    this.worldSet = worldSet;
                    this.worldColor = worldColor;
                    this.worldUserColor = worldUserColor;
                    this.factionSet = factionSet;
                    this.factionColor = factionColor;
                    this.factionUserColor = factionUserColor;
                    this.groupSet = groupSet;
                    this.groupColor = groupColor;
                    this.groupUserColor = groupUserColor;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::ChatSetView");
                    IceInternal.HashUtil.hashAdd(ref h__, privateSet);
                    IceInternal.HashUtil.hashAdd(ref h__, privateColor);
                    IceInternal.HashUtil.hashAdd(ref h__, privateUserColor);
                    IceInternal.HashUtil.hashAdd(ref h__, worldSet);
                    IceInternal.HashUtil.hashAdd(ref h__, worldColor);
                    IceInternal.HashUtil.hashAdd(ref h__, worldUserColor);
                    IceInternal.HashUtil.hashAdd(ref h__, factionSet);
                    IceInternal.HashUtil.hashAdd(ref h__, factionColor);
                    IceInternal.HashUtil.hashAdd(ref h__, factionUserColor);
                    IceInternal.HashUtil.hashAdd(ref h__, groupSet);
                    IceInternal.HashUtil.hashAdd(ref h__, groupColor);
                    IceInternal.HashUtil.hashAdd(ref h__, groupUserColor);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    ChatSetView o__ = (ChatSetView)other__;
                    if(!privateSet.Equals(o__.privateSet))
                    {
                        return false;
                    }
                    if(privateColor == null)
                    {
                        if(o__.privateColor != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!privateColor.Equals(o__.privateColor))
                        {
                            return false;
                        }
                    }
                    if(privateUserColor == null)
                    {
                        if(o__.privateUserColor != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!privateUserColor.Equals(o__.privateUserColor))
                        {
                            return false;
                        }
                    }
                    if(!worldSet.Equals(o__.worldSet))
                    {
                        return false;
                    }
                    if(worldColor == null)
                    {
                        if(o__.worldColor != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!worldColor.Equals(o__.worldColor))
                        {
                            return false;
                        }
                    }
                    if(worldUserColor == null)
                    {
                        if(o__.worldUserColor != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!worldUserColor.Equals(o__.worldUserColor))
                        {
                            return false;
                        }
                    }
                    if(!factionSet.Equals(o__.factionSet))
                    {
                        return false;
                    }
                    if(factionColor == null)
                    {
                        if(o__.factionColor != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!factionColor.Equals(o__.factionColor))
                        {
                            return false;
                        }
                    }
                    if(factionUserColor == null)
                    {
                        if(o__.factionUserColor != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!factionUserColor.Equals(o__.factionUserColor))
                        {
                            return false;
                        }
                    }
                    if(!groupSet.Equals(o__.groupSet))
                    {
                        return false;
                    }
                    if(groupColor == null)
                    {
                        if(o__.groupColor != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!groupColor.Equals(o__.groupColor))
                        {
                            return false;
                        }
                    }
                    if(groupUserColor == null)
                    {
                        if(o__.groupUserColor != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!groupUserColor.Equals(o__.groupUserColor))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(ChatSetView lhs__, ChatSetView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(ChatSetView lhs__, ChatSetView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(privateSet);
                    os__.writeString(privateColor);
                    os__.writeString(privateUserColor);
                    os__.writeInt(worldSet);
                    os__.writeString(worldColor);
                    os__.writeString(worldUserColor);
                    os__.writeInt(factionSet);
                    os__.writeString(factionColor);
                    os__.writeString(factionUserColor);
                    os__.writeInt(groupSet);
                    os__.writeString(groupColor);
                    os__.writeString(groupUserColor);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    privateSet = is__.readInt();
                    privateColor = is__.readString();
                    privateUserColor = is__.readString();
                    worldSet = is__.readInt();
                    worldColor = is__.readString();
                    worldUserColor = is__.readString();
                    factionSet = is__.readInt();
                    factionColor = is__.readString();
                    factionUserColor = is__.readString();
                    groupSet = is__.readInt();
                    groupColor = is__.readString();
                    groupUserColor = is__.readString();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class ChatSetColorView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int pos;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string color;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChatSetColorView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChatSetColorView(int pos, string color)
                {
                    this.pos = pos;
                    this.color = color;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::ChatSetColorView");
                    IceInternal.HashUtil.hashAdd(ref h__, pos);
                    IceInternal.HashUtil.hashAdd(ref h__, color);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    ChatSetColorView o__ = (ChatSetColorView)other__;
                    if(!pos.Equals(o__.pos))
                    {
                        return false;
                    }
                    if(color == null)
                    {
                        if(o__.color != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!color.Equals(o__.color))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(ChatSetColorView lhs__, ChatSetColorView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(ChatSetColorView lhs__, ChatSetColorView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(pos);
                    os__.writeString(color);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    pos = is__.readInt();
                    color = is__.readString();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class ChallengeResult : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string movieId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int star;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChallengeResult()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChallengeResult(string movieId, int star)
                {
                    this.movieId = movieId;
                    this.star = star;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::ChallengeResult");
                    IceInternal.HashUtil.hashAdd(ref h__, movieId);
                    IceInternal.HashUtil.hashAdd(ref h__, star);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    ChallengeResult o__ = (ChallengeResult)other__;
                    if(movieId == null)
                    {
                        if(o__.movieId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!movieId.Equals(o__.movieId))
                        {
                            return false;
                        }
                    }
                    if(!star.Equals(o__.star))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(ChallengeResult lhs__, ChallengeResult rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(ChallengeResult lhs__, ChallengeResult rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(movieId);
                    os__.writeInt(star);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    movieId = is__.readString();
                    star = is__.readInt();
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface ChatCallback : Ice.Object, ChatCallbackOperations_, ChatCallbackOperationsNC_
            {
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface Chat : Ice.Object, ChatOperations_, ChatOperationsNC_
            {
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ChatCallback_messageReceived();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ChatCallback_confirm();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ChatCallback_redPointSmit();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_speak();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_speakAction();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_speakTo();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_getAttachObject(byte[] ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_selSet(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_saveSet();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_saveSetColor();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_viewEquip(com.XSanGo.Protocol.ItemView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_viewItem(com.XSanGo.Protocol.ItemView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_viewHero(com.XSanGo.Protocol.HeroView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_selectOfflineMess();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_selectChallenge(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_beginChallenge(com.XSanGo.Protocol.PvpOpponentFormationView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Chat_endChallenge(string ret__);
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ChatCallbackPrx : Ice.ObjectPrx
            {
                void messageReceived(string senderId, string senderName, string msg);
                void messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived> begin_messageReceived(string senderId, string senderName, string msg);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived> begin_messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_messageReceived(string senderId, string senderName, string msg, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_messageReceived(Ice.AsyncResult r__);

                bool messageReceived_async(com.XSanGo.Protocol.AMI_ChatCallback_messageReceived cb__, string senderId, string senderName, string msg);
                bool messageReceived_async(com.XSanGo.Protocol.AMI_ChatCallback_messageReceived cb__, string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void confirm(string text);
                void confirm(string text, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_confirm> begin_confirm(string text);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_confirm> begin_confirm(string text, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_confirm(string text, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_confirm(string text, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_confirm(Ice.AsyncResult r__);

                bool confirm_async(com.XSanGo.Protocol.AMI_ChatCallback_confirm cb__, string text);
                bool confirm_async(com.XSanGo.Protocol.AMI_ChatCallback_confirm cb__, string text, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void redPointSmit(int type, bool show);
                void redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit> begin_redPointSmit(int type, bool show);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit> begin_redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_redPointSmit(int type, bool show, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_redPointSmit(Ice.AsyncResult r__);

                bool redPointSmit_async(com.XSanGo.Protocol.AMI_ChatCallback_redPointSmit cb__, int type, bool show);
                bool redPointSmit_async(com.XSanGo.Protocol.AMI_ChatCallback_redPointSmit cb__, int type, bool show, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ChatPrx : Ice.ObjectPrx
            {
                void speak(string msg);
                void speak(string msg, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speak> begin_speak(string msg);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speak> begin_speak(string msg, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_speak(string msg, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_speak(string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_speak(Ice.AsyncResult r__);

                bool speak_async(com.XSanGo.Protocol.AMI_Chat_speak cb__, string msg);
                bool speak_async(com.XSanGo.Protocol.AMI_Chat_speak cb__, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void speakAction(string msg, string targetId);
                void speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakAction> begin_speakAction(string msg, string targetId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakAction> begin_speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_speakAction(string msg, string targetId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_speakAction(Ice.AsyncResult r__);

                bool speakAction_async(com.XSanGo.Protocol.AMI_Chat_speakAction cb__, string msg, string targetId);
                bool speakAction_async(com.XSanGo.Protocol.AMI_Chat_speakAction cb__, string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void speakTo(string targetId, string msg);
                void speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakTo> begin_speakTo(string targetId, string msg);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakTo> begin_speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_speakTo(string targetId, string msg, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_speakTo(Ice.AsyncResult r__);

                bool speakTo_async(com.XSanGo.Protocol.AMI_Chat_speakTo cb__, string targetId, string msg);
                bool speakTo_async(com.XSanGo.Protocol.AMI_Chat_speakTo cb__, string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__);

                byte[] getAttachObject(int id);
                byte[] getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_getAttachObject> begin_getAttachObject(int id);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_getAttachObject> begin_getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_getAttachObject(int id, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                byte[] end_getAttachObject(Ice.AsyncResult r__);

                bool getAttachObject_async(com.XSanGo.Protocol.AMI_Chat_getAttachObject cb__, int id);
                bool getAttachObject_async(com.XSanGo.Protocol.AMI_Chat_getAttachObject cb__, int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string selSet();
                string selSet(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selSet> begin_selSet();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selSet> begin_selSet(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_selSet(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_selSet(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_selSet(Ice.AsyncResult r__);

                bool selSet_async(com.XSanGo.Protocol.AMI_Chat_selSet cb__);
                bool selSet_async(com.XSanGo.Protocol.AMI_Chat_selSet cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void saveSet(string set);
                void saveSet(string set, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSet> begin_saveSet(string set);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSet> begin_saveSet(string set, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_saveSet(string set, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_saveSet(string set, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_saveSet(Ice.AsyncResult r__);

                bool saveSet_async(com.XSanGo.Protocol.AMI_Chat_saveSet cb__, string set);
                bool saveSet_async(com.XSanGo.Protocol.AMI_Chat_saveSet cb__, string set, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void saveSetColor(int type, string userColor);
                void saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSetColor> begin_saveSetColor(int type, string userColor);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSetColor> begin_saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_saveSetColor(int type, string userColor, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_saveSetColor(Ice.AsyncResult r__);

                bool saveSetColor_async(com.XSanGo.Protocol.AMI_Chat_saveSetColor cb__, int type, string userColor);
                bool saveSetColor_async(com.XSanGo.Protocol.AMI_Chat_saveSetColor cb__, int type, string userColor, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.ItemView viewEquip(string itemId);
                com.XSanGo.Protocol.ItemView viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewEquip> begin_viewEquip(string itemId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewEquip> begin_viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_viewEquip(string itemId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.ItemView end_viewEquip(Ice.AsyncResult r__);

                bool viewEquip_async(com.XSanGo.Protocol.AMI_Chat_viewEquip cb__, string itemId);
                bool viewEquip_async(com.XSanGo.Protocol.AMI_Chat_viewEquip cb__, string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.ItemView viewItem(string itemId);
                com.XSanGo.Protocol.ItemView viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewItem> begin_viewItem(string itemId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewItem> begin_viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_viewItem(string itemId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.ItemView end_viewItem(Ice.AsyncResult r__);

                bool viewItem_async(com.XSanGo.Protocol.AMI_Chat_viewItem cb__, string itemId);
                bool viewItem_async(com.XSanGo.Protocol.AMI_Chat_viewItem cb__, string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.HeroView viewHero(string heroId);
                com.XSanGo.Protocol.HeroView viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewHero> begin_viewHero(string heroId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewHero> begin_viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_viewHero(string heroId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.HeroView end_viewHero(Ice.AsyncResult r__);

                bool viewHero_async(com.XSanGo.Protocol.AMI_Chat_viewHero cb__, string heroId);
                bool viewHero_async(com.XSanGo.Protocol.AMI_Chat_viewHero cb__, string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void selectOfflineMess();
                void selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess> begin_selectOfflineMess();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess> begin_selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_selectOfflineMess(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_selectOfflineMess(Ice.AsyncResult r__);

                bool selectOfflineMess_async(com.XSanGo.Protocol.AMI_Chat_selectOfflineMess cb__);
                bool selectOfflineMess_async(com.XSanGo.Protocol.AMI_Chat_selectOfflineMess cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string selectChallenge(string targetId);
                string selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectChallenge> begin_selectChallenge(string targetId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectChallenge> begin_selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_selectChallenge(string targetId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_selectChallenge(Ice.AsyncResult r__);

                bool selectChallenge_async(com.XSanGo.Protocol.AMI_Chat_selectChallenge cb__, string targetId);
                bool selectChallenge_async(com.XSanGo.Protocol.AMI_Chat_selectChallenge cb__, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId);
                com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_beginChallenge> begin_beginChallenge(string targetId, string formationId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_beginChallenge> begin_beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_beginChallenge(string targetId, string formationId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.PvpOpponentFormationView end_beginChallenge(Ice.AsyncResult r__);

                bool beginChallenge_async(com.XSanGo.Protocol.AMI_Chat_beginChallenge cb__, string targetId, string formationId);
                bool beginChallenge_async(com.XSanGo.Protocol.AMI_Chat_beginChallenge cb__, string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string endChallenge(string targetId, int resFlag, byte remainHero);
                string endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_endChallenge> begin_endChallenge(string targetId, int resFlag, byte remainHero);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_endChallenge> begin_endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_endChallenge(string targetId, int resFlag, byte remainHero, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_endChallenge(Ice.AsyncResult r__);

                bool endChallenge_async(com.XSanGo.Protocol.AMI_Chat_endChallenge cb__, string targetId, int resFlag, byte remainHero);
                bool endChallenge_async(com.XSanGo.Protocol.AMI_Chat_endChallenge cb__, string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ChatCallbackOperations_
            {
                void messageReceived(string senderId, string senderName, string msg, Ice.Current current__);

                void confirm(string text, Ice.Current current__);

                void redPointSmit(int type, bool show, Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ChatCallbackOperationsNC_
            {
                void messageReceived(string senderId, string senderName, string msg);

                void confirm(string text);

                void redPointSmit(int type, bool show);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ChatOperations_
            {
                void speak(string msg, Ice.Current current__);

                void speakAction(string msg, string targetId, Ice.Current current__);

                void speakTo_async(com.XSanGo.Protocol.AMD_Chat_speakTo cb__, string targetId, string msg, Ice.Current current__);

                byte[] getAttachObject(int id, Ice.Current current__);

                string selSet(Ice.Current current__);

                void saveSet(string set, Ice.Current current__);

                void saveSetColor(int type, string userColor, Ice.Current current__);

                com.XSanGo.Protocol.ItemView viewEquip(string itemId, Ice.Current current__);

                com.XSanGo.Protocol.ItemView viewItem(string itemId, Ice.Current current__);

                com.XSanGo.Protocol.HeroView viewHero(string heroId, Ice.Current current__);

                void selectOfflineMess(Ice.Current current__);

                void selectChallenge_async(com.XSanGo.Protocol.AMD_Chat_selectChallenge cb__, string targetId, Ice.Current current__);

                com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId, Ice.Current current__);

                string endChallenge(string targetId, int resFlag, byte remainHero, Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ChatOperationsNC_
            {
                void speak(string msg);

                void speakAction(string msg, string targetId);

                void speakTo_async(com.XSanGo.Protocol.AMD_Chat_speakTo cb__, string targetId, string msg);

                byte[] getAttachObject(int id);

                string selSet();

                void saveSet(string set);

                void saveSetColor(int type, string userColor);

                com.XSanGo.Protocol.ItemView viewEquip(string itemId);

                com.XSanGo.Protocol.ItemView viewItem(string itemId);

                com.XSanGo.Protocol.HeroView viewHero(string heroId);

                void selectOfflineMess();

                void selectChallenge_async(com.XSanGo.Protocol.AMD_Chat_selectChallenge cb__, string targetId);

                com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId);

                string endChallenge(string targetId, int resFlag, byte remainHero);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class MessageAttachObjectSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.MessageAttachObject[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.MessageAttachObject() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.MessageAttachObject[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.MessageAttachObject[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(5);
                        v__ = new com.XSanGo.Protocol.MessageAttachObject[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.MessageAttachObject();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TextMessageSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.TextMessage[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.TextMessage() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.TextMessage[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.TextMessage[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(34);
                        v__ = new com.XSanGo.Protocol.TextMessage[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.TextMessage();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ChatCallbackPrxHelper : Ice.ObjectPrxHelperBase, ChatCallbackPrx
            {
                #region Synchronous operations

                public void confirm(string text)
                {
                    confirm(text, null, false);
                }

                public void confirm(string text, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    confirm(text, context__, true);
                }

                private void confirm(string text, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __confirm_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                ChatCallbackDel_ del__ = (ChatCallbackDel_)delBase__;
                                del__.confirm(text, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void messageReceived(string senderId, string senderName, string msg)
                {
                    messageReceived(senderId, senderName, msg, null, false);
                }

                public void messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    messageReceived(senderId, senderName, msg, context__, true);
                }

                private void messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __messageReceived_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                ChatCallbackDel_ del__ = (ChatCallbackDel_)delBase__;
                                del__.messageReceived(senderId, senderName, msg, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void redPointSmit(int type, bool show)
                {
                    redPointSmit(type, show, null, false);
                }

                public void redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    redPointSmit(type, show, context__, true);
                }

                private void redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __redPointSmit_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                ChatCallbackDel_ del__ = (ChatCallbackDel_)delBase__;
                                del__.redPointSmit(type, show, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_confirm> begin_confirm(string text)
                {
                    return begin_confirm(text, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_confirm> begin_confirm(string text, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_confirm(text, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_confirm(string text, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_confirm(text, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_confirm(string text, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_confirm(text, ctx__, true, cb__, cookie__);
                }

                private const string __confirm_name = "confirm";

                public void end_confirm(Ice.AsyncResult r__)
                {
                    end__(r__, __confirm_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_confirm> begin_confirm(string text, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_ChatCallback_confirm> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_ChatCallback_confirm>(this, __confirm_name, confirm_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__confirm_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(text);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void confirm_completed__(com.XSanGo.Protocol.Callback_ChatCallback_confirm cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool confirm_async(com.XSanGo.Protocol.AMI_ChatCallback_confirm cb__, string text)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_confirm> result__ = begin_confirm(text);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool confirm_async(com.XSanGo.Protocol.AMI_ChatCallback_confirm cb__, string text, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_confirm> result__ = begin_confirm(text, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived> begin_messageReceived(string senderId, string senderName, string msg)
                {
                    return begin_messageReceived(senderId, senderName, msg, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived> begin_messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_messageReceived(senderId, senderName, msg, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_messageReceived(string senderId, string senderName, string msg, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_messageReceived(senderId, senderName, msg, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_messageReceived(senderId, senderName, msg, ctx__, true, cb__, cookie__);
                }

                private const string __messageReceived_name = "messageReceived";

                public void end_messageReceived(Ice.AsyncResult r__)
                {
                    end__(r__, __messageReceived_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived> begin_messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived>(this, __messageReceived_name, messageReceived_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__messageReceived_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(senderId);
                        os__.writeString(senderName);
                        os__.writeString(msg);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void messageReceived_completed__(com.XSanGo.Protocol.Callback_ChatCallback_messageReceived cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool messageReceived_async(com.XSanGo.Protocol.AMI_ChatCallback_messageReceived cb__, string senderId, string senderName, string msg)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived> result__ = begin_messageReceived(senderId, senderName, msg);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool messageReceived_async(com.XSanGo.Protocol.AMI_ChatCallback_messageReceived cb__, string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_messageReceived> result__ = begin_messageReceived(senderId, senderName, msg, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit> begin_redPointSmit(int type, bool show)
                {
                    return begin_redPointSmit(type, show, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit> begin_redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_redPointSmit(type, show, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_redPointSmit(int type, bool show, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_redPointSmit(type, show, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_redPointSmit(type, show, ctx__, true, cb__, cookie__);
                }

                private const string __redPointSmit_name = "redPointSmit";

                public void end_redPointSmit(Ice.AsyncResult r__)
                {
                    end__(r__, __redPointSmit_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit> begin_redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit>(this, __redPointSmit_name, redPointSmit_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__redPointSmit_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(type);
                        os__.writeBool(show);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void redPointSmit_completed__(com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool redPointSmit_async(com.XSanGo.Protocol.AMI_ChatCallback_redPointSmit cb__, int type, bool show)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit> result__ = begin_redPointSmit(type, show);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool redPointSmit_async(com.XSanGo.Protocol.AMI_ChatCallback_redPointSmit cb__, int type, bool show, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ChatCallback_redPointSmit> result__ = begin_redPointSmit(type, show, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static ChatCallbackPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ChatCallbackPrx r = b as ChatCallbackPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        ChatCallbackPrxHelper h = new ChatCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ChatCallbackPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ChatCallbackPrx r = b as ChatCallbackPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        ChatCallbackPrxHelper h = new ChatCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ChatCallbackPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            ChatCallbackPrxHelper h = new ChatCallbackPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static ChatCallbackPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            ChatCallbackPrxHelper h = new ChatCallbackPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static ChatCallbackPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ChatCallbackPrx r = b as ChatCallbackPrx;
                    if(r == null)
                    {
                        ChatCallbackPrxHelper h = new ChatCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ChatCallbackPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    ChatCallbackPrxHelper h = new ChatCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::ChatCallback"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new ChatCallbackDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new ChatCallbackDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, ChatCallbackPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static ChatCallbackPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        ChatCallbackPrxHelper result = new ChatCallbackPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ChatPrxHelper : Ice.ObjectPrxHelperBase, ChatPrx
            {
                #region Synchronous operations

                public com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId)
                {
                    return beginChallenge(targetId, formationId, null, false);
                }

                public com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return beginChallenge(targetId, formationId, context__, true);
                }

                private com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __beginChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__beginChallenge_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                return del__.beginChallenge(targetId, formationId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string endChallenge(string targetId, int resFlag, byte remainHero)
                {
                    return endChallenge(targetId, resFlag, remainHero, null, false);
                }

                public string endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return endChallenge(targetId, resFlag, remainHero, context__, true);
                }

                private string endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __endChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__endChallenge_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                return del__.endChallenge(targetId, resFlag, remainHero, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public byte[] getAttachObject(int id)
                {
                    return getAttachObject(id, null, false);
                }

                public byte[] getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return getAttachObject(id, context__, true);
                }

                private byte[] getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getAttachObject_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__getAttachObject_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                return del__.getAttachObject(id, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void saveSet(string set)
                {
                    saveSet(set, null, false);
                }

                public void saveSet(string set, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    saveSet(set, context__, true);
                }

                private void saveSet(string set, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __saveSet_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__saveSet_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                del__.saveSet(set, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void saveSetColor(int type, string userColor)
                {
                    saveSetColor(type, userColor, null, false);
                }

                public void saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    saveSetColor(type, userColor, context__, true);
                }

                private void saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __saveSetColor_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__saveSetColor_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                del__.saveSetColor(type, userColor, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string selSet()
                {
                    return selSet(null, false);
                }

                public string selSet(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return selSet(context__, true);
                }

                private string selSet(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __selSet_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__selSet_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                return del__.selSet(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string selectChallenge(string targetId)
                {
                    return selectChallenge(targetId, null, false);
                }

                public string selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return selectChallenge(targetId, context__, true);
                }

                private string selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __selectChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__selectChallenge_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                return del__.selectChallenge(targetId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void selectOfflineMess()
                {
                    selectOfflineMess(null, false);
                }

                public void selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    selectOfflineMess(context__, true);
                }

                private void selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __selectOfflineMess_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__selectOfflineMess_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                del__.selectOfflineMess(context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void speak(string msg)
                {
                    speak(msg, null, false);
                }

                public void speak(string msg, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    speak(msg, context__, true);
                }

                private void speak(string msg, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __speak_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__speak_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                del__.speak(msg, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void speakAction(string msg, string targetId)
                {
                    speakAction(msg, targetId, null, false);
                }

                public void speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    speakAction(msg, targetId, context__, true);
                }

                private void speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __speakAction_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__speakAction_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                del__.speakAction(msg, targetId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void speakTo(string targetId, string msg)
                {
                    speakTo(targetId, msg, null, false);
                }

                public void speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    speakTo(targetId, msg, context__, true);
                }

                private void speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __speakTo_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__speakTo_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                del__.speakTo(targetId, msg, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public com.XSanGo.Protocol.ItemView viewEquip(string itemId)
                {
                    return viewEquip(itemId, null, false);
                }

                public com.XSanGo.Protocol.ItemView viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return viewEquip(itemId, context__, true);
                }

                private com.XSanGo.Protocol.ItemView viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __viewEquip_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__viewEquip_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                return del__.viewEquip(itemId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public com.XSanGo.Protocol.HeroView viewHero(string heroId)
                {
                    return viewHero(heroId, null, false);
                }

                public com.XSanGo.Protocol.HeroView viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return viewHero(heroId, context__, true);
                }

                private com.XSanGo.Protocol.HeroView viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __viewHero_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__viewHero_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                return del__.viewHero(heroId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public com.XSanGo.Protocol.ItemView viewItem(string itemId)
                {
                    return viewItem(itemId, null, false);
                }

                public com.XSanGo.Protocol.ItemView viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return viewItem(itemId, context__, true);
                }

                private com.XSanGo.Protocol.ItemView viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __viewItem_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__viewItem_name);
                                delBase__ = getDelegate__(false);
                                ChatDel_ del__ = (ChatDel_)delBase__;
                                return del__.viewItem(itemId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_beginChallenge> begin_beginChallenge(string targetId, string formationId)
                {
                    return begin_beginChallenge(targetId, formationId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_beginChallenge> begin_beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_beginChallenge(targetId, formationId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_beginChallenge(string targetId, string formationId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginChallenge(targetId, formationId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginChallenge(targetId, formationId, ctx__, true, cb__, cookie__);
                }

                private const string __beginChallenge_name = "beginChallenge";

                public com.XSanGo.Protocol.PvpOpponentFormationView end_beginChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __beginChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_beginChallenge> begin_beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__beginChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_beginChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__beginChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        os__.writeString(formationId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void beginChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_beginChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                    try
                    {
                        ret__ = end_beginChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool beginChallenge_async(com.XSanGo.Protocol.AMI_Chat_beginChallenge cb__, string targetId, string formationId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_beginChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginChallenge_name);
                        result__ = begin_beginChallenge(targetId, formationId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool beginChallenge_async(com.XSanGo.Protocol.AMI_Chat_beginChallenge cb__, string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_beginChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginChallenge_name);
                        result__ = begin_beginChallenge(targetId, formationId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_endChallenge> begin_endChallenge(string targetId, int resFlag, byte remainHero)
                {
                    return begin_endChallenge(targetId, resFlag, remainHero, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_endChallenge> begin_endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_endChallenge(targetId, resFlag, remainHero, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_endChallenge(string targetId, int resFlag, byte remainHero, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endChallenge(targetId, resFlag, remainHero, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endChallenge(targetId, resFlag, remainHero, ctx__, true, cb__, cookie__);
                }

                private const string __endChallenge_name = "endChallenge";

                public string end_endChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __endChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_endChallenge> begin_endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__endChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_endChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_endChallenge>(this, __endChallenge_name, endChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__endChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        os__.writeInt(resFlag);
                        os__.writeByte(remainHero);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void endChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_endChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_endChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool endChallenge_async(com.XSanGo.Protocol.AMI_Chat_endChallenge cb__, string targetId, int resFlag, byte remainHero)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_endChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endChallenge_name);
                        result__ = begin_endChallenge(targetId, resFlag, remainHero);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_endChallenge>(this, __endChallenge_name, endChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool endChallenge_async(com.XSanGo.Protocol.AMI_Chat_endChallenge cb__, string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_endChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endChallenge_name);
                        result__ = begin_endChallenge(targetId, resFlag, remainHero, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_endChallenge>(this, __endChallenge_name, endChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_getAttachObject> begin_getAttachObject(int id)
                {
                    return begin_getAttachObject(id, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_getAttachObject> begin_getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_getAttachObject(id, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_getAttachObject(int id, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getAttachObject(id, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getAttachObject(id, ctx__, true, cb__, cookie__);
                }

                private const string __getAttachObject_name = "getAttachObject";

                public byte[] end_getAttachObject(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __getAttachObject_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        byte[] ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = com.XSanGo.Protocol.ByteSeqHelper.read(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_getAttachObject> begin_getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__getAttachObject_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_getAttachObject> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_getAttachObject>(this, __getAttachObject_name, getAttachObject_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__getAttachObject_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(id);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void getAttachObject_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_getAttachObject cb__, Ice.ExceptionCallback excb__)
                {
                    byte[] ret__;
                    try
                    {
                        ret__ = end_getAttachObject(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool getAttachObject_async(com.XSanGo.Protocol.AMI_Chat_getAttachObject cb__, int id)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_getAttachObject> result__;
                    try
                    {
                        checkTwowayOnly__(__getAttachObject_name);
                        result__ = begin_getAttachObject(id);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_getAttachObject>(this, __getAttachObject_name, getAttachObject_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool getAttachObject_async(com.XSanGo.Protocol.AMI_Chat_getAttachObject cb__, int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_getAttachObject> result__;
                    try
                    {
                        checkTwowayOnly__(__getAttachObject_name);
                        result__ = begin_getAttachObject(id, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_getAttachObject>(this, __getAttachObject_name, getAttachObject_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSet> begin_saveSet(string set)
                {
                    return begin_saveSet(set, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSet> begin_saveSet(string set, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_saveSet(set, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_saveSet(string set, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_saveSet(set, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_saveSet(string set, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_saveSet(set, ctx__, true, cb__, cookie__);
                }

                private const string __saveSet_name = "saveSet";

                public void end_saveSet(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __saveSet_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSet> begin_saveSet(string set, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__saveSet_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_saveSet> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_saveSet>(this, __saveSet_name, saveSet_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__saveSet_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(set);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void saveSet_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_saveSet cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_saveSet(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool saveSet_async(com.XSanGo.Protocol.AMI_Chat_saveSet cb__, string set)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSet> result__;
                    try
                    {
                        checkTwowayOnly__(__saveSet_name);
                        result__ = begin_saveSet(set);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_saveSet>(this, __saveSet_name, saveSet_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool saveSet_async(com.XSanGo.Protocol.AMI_Chat_saveSet cb__, string set, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSet> result__;
                    try
                    {
                        checkTwowayOnly__(__saveSet_name);
                        result__ = begin_saveSet(set, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_saveSet>(this, __saveSet_name, saveSet_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSetColor> begin_saveSetColor(int type, string userColor)
                {
                    return begin_saveSetColor(type, userColor, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSetColor> begin_saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_saveSetColor(type, userColor, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_saveSetColor(int type, string userColor, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_saveSetColor(type, userColor, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_saveSetColor(type, userColor, ctx__, true, cb__, cookie__);
                }

                private const string __saveSetColor_name = "saveSetColor";

                public void end_saveSetColor(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __saveSetColor_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSetColor> begin_saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__saveSetColor_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_saveSetColor> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_saveSetColor>(this, __saveSetColor_name, saveSetColor_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__saveSetColor_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(type);
                        os__.writeString(userColor);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void saveSetColor_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_saveSetColor cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_saveSetColor(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool saveSetColor_async(com.XSanGo.Protocol.AMI_Chat_saveSetColor cb__, int type, string userColor)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSetColor> result__;
                    try
                    {
                        checkTwowayOnly__(__saveSetColor_name);
                        result__ = begin_saveSetColor(type, userColor);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_saveSetColor>(this, __saveSetColor_name, saveSetColor_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool saveSetColor_async(com.XSanGo.Protocol.AMI_Chat_saveSetColor cb__, int type, string userColor, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_saveSetColor> result__;
                    try
                    {
                        checkTwowayOnly__(__saveSetColor_name);
                        result__ = begin_saveSetColor(type, userColor, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_saveSetColor>(this, __saveSetColor_name, saveSetColor_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selSet> begin_selSet()
                {
                    return begin_selSet(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selSet> begin_selSet(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_selSet(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_selSet(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_selSet(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_selSet(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_selSet(ctx__, true, cb__, cookie__);
                }

                private const string __selSet_name = "selSet";

                public string end_selSet(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __selSet_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selSet> begin_selSet(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__selSet_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selSet> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selSet>(this, __selSet_name, selSet_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__selSet_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void selSet_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_selSet cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_selSet(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool selSet_async(com.XSanGo.Protocol.AMI_Chat_selSet cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selSet> result__;
                    try
                    {
                        checkTwowayOnly__(__selSet_name);
                        result__ = begin_selSet();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selSet>(this, __selSet_name, selSet_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool selSet_async(com.XSanGo.Protocol.AMI_Chat_selSet cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selSet> result__;
                    try
                    {
                        checkTwowayOnly__(__selSet_name);
                        result__ = begin_selSet(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selSet>(this, __selSet_name, selSet_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectChallenge> begin_selectChallenge(string targetId)
                {
                    return begin_selectChallenge(targetId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectChallenge> begin_selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_selectChallenge(targetId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_selectChallenge(string targetId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_selectChallenge(targetId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_selectChallenge(targetId, ctx__, true, cb__, cookie__);
                }

                private const string __selectChallenge_name = "selectChallenge";

                public string end_selectChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __selectChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectChallenge> begin_selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__selectChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selectChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selectChallenge>(this, __selectChallenge_name, selectChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__selectChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void selectChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_selectChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_selectChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool selectChallenge_async(com.XSanGo.Protocol.AMI_Chat_selectChallenge cb__, string targetId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__selectChallenge_name);
                        result__ = begin_selectChallenge(targetId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selectChallenge>(this, __selectChallenge_name, selectChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool selectChallenge_async(com.XSanGo.Protocol.AMI_Chat_selectChallenge cb__, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__selectChallenge_name);
                        result__ = begin_selectChallenge(targetId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selectChallenge>(this, __selectChallenge_name, selectChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess> begin_selectOfflineMess()
                {
                    return begin_selectOfflineMess(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess> begin_selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_selectOfflineMess(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_selectOfflineMess(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_selectOfflineMess(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_selectOfflineMess(ctx__, true, cb__, cookie__);
                }

                private const string __selectOfflineMess_name = "selectOfflineMess";

                public void end_selectOfflineMess(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __selectOfflineMess_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess> begin_selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__selectOfflineMess_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess>(this, __selectOfflineMess_name, selectOfflineMess_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__selectOfflineMess_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void selectOfflineMess_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_selectOfflineMess cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_selectOfflineMess(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool selectOfflineMess_async(com.XSanGo.Protocol.AMI_Chat_selectOfflineMess cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess> result__;
                    try
                    {
                        checkTwowayOnly__(__selectOfflineMess_name);
                        result__ = begin_selectOfflineMess();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess>(this, __selectOfflineMess_name, selectOfflineMess_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool selectOfflineMess_async(com.XSanGo.Protocol.AMI_Chat_selectOfflineMess cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess> result__;
                    try
                    {
                        checkTwowayOnly__(__selectOfflineMess_name);
                        result__ = begin_selectOfflineMess(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_selectOfflineMess>(this, __selectOfflineMess_name, selectOfflineMess_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speak> begin_speak(string msg)
                {
                    return begin_speak(msg, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speak> begin_speak(string msg, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_speak(msg, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_speak(string msg, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_speak(msg, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_speak(string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_speak(msg, ctx__, true, cb__, cookie__);
                }

                private const string __speak_name = "speak";

                public void end_speak(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __speak_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoFactionException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoGroupException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speak> begin_speak(string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__speak_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speak> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speak>(this, __speak_name, speak_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__speak_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(msg);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void speak_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_speak cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_speak(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool speak_async(com.XSanGo.Protocol.AMI_Chat_speak cb__, string msg)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speak> result__;
                    try
                    {
                        checkTwowayOnly__(__speak_name);
                        result__ = begin_speak(msg);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speak>(this, __speak_name, speak_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool speak_async(com.XSanGo.Protocol.AMI_Chat_speak cb__, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speak> result__;
                    try
                    {
                        checkTwowayOnly__(__speak_name);
                        result__ = begin_speak(msg, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speak>(this, __speak_name, speak_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakAction> begin_speakAction(string msg, string targetId)
                {
                    return begin_speakAction(msg, targetId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakAction> begin_speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_speakAction(msg, targetId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_speakAction(string msg, string targetId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_speakAction(msg, targetId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_speakAction(msg, targetId, ctx__, true, cb__, cookie__);
                }

                private const string __speakAction_name = "speakAction";

                public void end_speakAction(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __speakAction_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoFactionException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoGroupException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakAction> begin_speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__speakAction_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speakAction> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speakAction>(this, __speakAction_name, speakAction_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__speakAction_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(msg);
                        os__.writeString(targetId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void speakAction_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_speakAction cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_speakAction(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool speakAction_async(com.XSanGo.Protocol.AMI_Chat_speakAction cb__, string msg, string targetId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakAction> result__;
                    try
                    {
                        checkTwowayOnly__(__speakAction_name);
                        result__ = begin_speakAction(msg, targetId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speakAction>(this, __speakAction_name, speakAction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool speakAction_async(com.XSanGo.Protocol.AMI_Chat_speakAction cb__, string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakAction> result__;
                    try
                    {
                        checkTwowayOnly__(__speakAction_name);
                        result__ = begin_speakAction(msg, targetId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speakAction>(this, __speakAction_name, speakAction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakTo> begin_speakTo(string targetId, string msg)
                {
                    return begin_speakTo(targetId, msg, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakTo> begin_speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_speakTo(targetId, msg, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_speakTo(string targetId, string msg, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_speakTo(targetId, msg, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_speakTo(targetId, msg, ctx__, true, cb__, cookie__);
                }

                private const string __speakTo_name = "speakTo";

                public void end_speakTo(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __speakTo_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakTo> begin_speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__speakTo_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speakTo> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speakTo>(this, __speakTo_name, speakTo_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__speakTo_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        os__.writeString(msg);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void speakTo_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_speakTo cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_speakTo(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool speakTo_async(com.XSanGo.Protocol.AMI_Chat_speakTo cb__, string targetId, string msg)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakTo> result__;
                    try
                    {
                        checkTwowayOnly__(__speakTo_name);
                        result__ = begin_speakTo(targetId, msg);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speakTo>(this, __speakTo_name, speakTo_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool speakTo_async(com.XSanGo.Protocol.AMI_Chat_speakTo cb__, string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_speakTo> result__;
                    try
                    {
                        checkTwowayOnly__(__speakTo_name);
                        result__ = begin_speakTo(targetId, msg, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_speakTo>(this, __speakTo_name, speakTo_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewEquip> begin_viewEquip(string itemId)
                {
                    return begin_viewEquip(itemId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewEquip> begin_viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_viewEquip(itemId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_viewEquip(string itemId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_viewEquip(itemId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_viewEquip(itemId, ctx__, true, cb__, cookie__);
                }

                private const string __viewEquip_name = "viewEquip";

                public com.XSanGo.Protocol.ItemView end_viewEquip(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __viewEquip_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.ItemView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.ItemView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewEquip> begin_viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__viewEquip_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewEquip> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewEquip>(this, __viewEquip_name, viewEquip_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__viewEquip_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(itemId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void viewEquip_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_viewEquip cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.ItemView ret__;
                    try
                    {
                        ret__ = end_viewEquip(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool viewEquip_async(com.XSanGo.Protocol.AMI_Chat_viewEquip cb__, string itemId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewEquip> result__;
                    try
                    {
                        checkTwowayOnly__(__viewEquip_name);
                        result__ = begin_viewEquip(itemId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewEquip>(this, __viewEquip_name, viewEquip_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool viewEquip_async(com.XSanGo.Protocol.AMI_Chat_viewEquip cb__, string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewEquip> result__;
                    try
                    {
                        checkTwowayOnly__(__viewEquip_name);
                        result__ = begin_viewEquip(itemId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewEquip>(this, __viewEquip_name, viewEquip_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewHero> begin_viewHero(string heroId)
                {
                    return begin_viewHero(heroId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewHero> begin_viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_viewHero(heroId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_viewHero(string heroId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_viewHero(heroId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_viewHero(heroId, ctx__, true, cb__, cookie__);
                }

                private const string __viewHero_name = "viewHero";

                public com.XSanGo.Protocol.HeroView end_viewHero(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __viewHero_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.HeroView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.HeroView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewHero> begin_viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__viewHero_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewHero> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewHero>(this, __viewHero_name, viewHero_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__viewHero_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(heroId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void viewHero_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_viewHero cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.HeroView ret__;
                    try
                    {
                        ret__ = end_viewHero(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool viewHero_async(com.XSanGo.Protocol.AMI_Chat_viewHero cb__, string heroId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewHero> result__;
                    try
                    {
                        checkTwowayOnly__(__viewHero_name);
                        result__ = begin_viewHero(heroId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewHero>(this, __viewHero_name, viewHero_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool viewHero_async(com.XSanGo.Protocol.AMI_Chat_viewHero cb__, string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewHero> result__;
                    try
                    {
                        checkTwowayOnly__(__viewHero_name);
                        result__ = begin_viewHero(heroId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewHero>(this, __viewHero_name, viewHero_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewItem> begin_viewItem(string itemId)
                {
                    return begin_viewItem(itemId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewItem> begin_viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_viewItem(itemId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_viewItem(string itemId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_viewItem(itemId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_viewItem(itemId, ctx__, true, cb__, cookie__);
                }

                private const string __viewItem_name = "viewItem";

                public com.XSanGo.Protocol.ItemView end_viewItem(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __viewItem_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.ItemView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.ItemView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewItem> begin_viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__viewItem_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewItem> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewItem>(this, __viewItem_name, viewItem_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__viewItem_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(itemId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void viewItem_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Chat_viewItem cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.ItemView ret__;
                    try
                    {
                        ret__ = end_viewItem(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool viewItem_async(com.XSanGo.Protocol.AMI_Chat_viewItem cb__, string itemId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewItem> result__;
                    try
                    {
                        checkTwowayOnly__(__viewItem_name);
                        result__ = begin_viewItem(itemId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewItem>(this, __viewItem_name, viewItem_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool viewItem_async(com.XSanGo.Protocol.AMI_Chat_viewItem cb__, string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Chat_viewItem> result__;
                    try
                    {
                        checkTwowayOnly__(__viewItem_name);
                        result__ = begin_viewItem(itemId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Chat_viewItem>(this, __viewItem_name, viewItem_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static ChatPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ChatPrx r = b as ChatPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        ChatPrxHelper h = new ChatPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ChatPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ChatPrx r = b as ChatPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        ChatPrxHelper h = new ChatPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ChatPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            ChatPrxHelper h = new ChatPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static ChatPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            ChatPrxHelper h = new ChatPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static ChatPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ChatPrx r = b as ChatPrx;
                    if(r == null)
                    {
                        ChatPrxHelper h = new ChatPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ChatPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    ChatPrxHelper h = new ChatPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::Chat"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new ChatDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new ChatDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, ChatPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static ChatPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        ChatPrxHelper result = new ChatPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ChatCallbackDel_ : Ice.ObjectDel_
            {
                void messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void confirm(string text, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ChatDel_ : Ice.ObjectDel_
            {
                void speak(string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                byte[] getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string selSet(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void saveSet(string set, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.ItemView viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.ItemView viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.HeroView viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ChatCallbackDelM_ : Ice.ObjectDelM_, ChatCallbackDel_
            {
                public void confirm(string text, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("confirm", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(text);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("messageReceived", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(senderId);
                            os__.writeString(senderName);
                            os__.writeString(msg);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("redPointSmit", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeInt(type);
                            os__.writeBool(show);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ChatDelM_ : Ice.ObjectDelM_, ChatDel_
            {
                public com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("beginChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            os__.writeString(formationId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("endChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            os__.writeInt(resFlag);
                            os__.writeByte(remainHero);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public byte[] getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("getAttachObject", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeInt(id);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            byte[] ret__;
                            ret__ = com.XSanGo.Protocol.ByteSeqHelper.read(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void saveSet(string set, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("saveSet", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(set);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("saveSetColor", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeInt(type);
                            os__.writeString(userColor);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string selSet(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("selSet", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("selectChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("selectOfflineMess", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void speak(string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("speak", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(msg);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoFactionException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoGroupException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("speakAction", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(msg);
                            os__.writeString(targetId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoFactionException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoGroupException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("speakTo", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            os__.writeString(msg);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public com.XSanGo.Protocol.ItemView viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("viewEquip", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(itemId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.ItemView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.ItemView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public com.XSanGo.Protocol.HeroView viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("viewHero", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(heroId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.HeroView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.HeroView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public com.XSanGo.Protocol.ItemView viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("viewItem", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(itemId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.ItemView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.ItemView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ChatCallbackDelD_ : Ice.ObjectDelD_, ChatCallbackDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void confirm(string text, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "confirm", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ChatCallback servant__ = null;
                        try
                        {
                            servant__ = (ChatCallback)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.confirm(text, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void messageReceived(string senderId, string senderName, string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "messageReceived", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ChatCallback servant__ = null;
                        try
                        {
                            servant__ = (ChatCallback)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.messageReceived(senderId, senderName, msg, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void redPointSmit(int type, bool show, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "redPointSmit", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ChatCallback servant__ = null;
                        try
                        {
                            servant__ = (ChatCallback)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.redPointSmit(type, show, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ChatDelD_ : Ice.ObjectDelD_, ChatDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "beginChallenge", Ice.OperationMode.Normal, context__);
                    com.XSanGo.Protocol.PvpOpponentFormationView result__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.beginChallenge(targetId, formationId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string endChallenge(string targetId, int resFlag, byte remainHero, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "endChallenge", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.endChallenge(targetId, resFlag, remainHero, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public byte[] getAttachObject(int id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "getAttachObject", Ice.OperationMode.Normal, context__);
                    byte[] result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.getAttachObject(id, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void saveSet(string set, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "saveSet", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.saveSet(set, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void saveSetColor(int type, string userColor, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "saveSetColor", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.saveSetColor(type, userColor, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string selSet(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "selSet", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.selSet(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string selectChallenge(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void selectOfflineMess(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "selectOfflineMess", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.selectOfflineMess(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void speak(string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "speak", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.speak(msg, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoFactionException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoGroupException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void speakAction(string msg, string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "speakAction", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.speakAction(msg, targetId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoFactionException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoGroupException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void speakTo(string targetId, string msg, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.ItemView viewEquip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "viewEquip", Ice.OperationMode.Normal, context__);
                    com.XSanGo.Protocol.ItemView result__ = new com.XSanGo.Protocol.ItemView();
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.viewEquip(itemId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.HeroView viewHero(string heroId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "viewHero", Ice.OperationMode.Normal, context__);
                    com.XSanGo.Protocol.HeroView result__ = new com.XSanGo.Protocol.HeroView();
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.viewHero(heroId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.ItemView viewItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "viewItem", Ice.OperationMode.Normal, context__);
                    com.XSanGo.Protocol.ItemView result__ = new com.XSanGo.Protocol.ItemView();
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Chat servant__ = null;
                        try
                        {
                            servant__ = (Chat)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.viewItem(itemId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class ChatCallbackDisp_ : Ice.ObjectImpl, ChatCallback
            {
                #region Slice operations

                public void messageReceived(string senderId, string senderName, string msg)
                {
                    messageReceived(senderId, senderName, msg, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void messageReceived(string senderId, string senderName, string msg, Ice.Current current__);

                public void confirm(string text)
                {
                    confirm(text, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void confirm(string text, Ice.Current current__);

                public void redPointSmit(int type, bool show)
                {
                    redPointSmit(type, show, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void redPointSmit(int type, bool show, Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::ChatCallback"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus messageReceived___(ChatCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string senderId;
                    string senderName;
                    string msg;
                    senderId = is__.readString();
                    senderName = is__.readString();
                    msg = is__.readString();
                    inS__.endReadParams();
                    obj__.messageReceived(senderId, senderName, msg, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus confirm___(ChatCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string text;
                    text = is__.readString();
                    inS__.endReadParams();
                    obj__.confirm(text, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus redPointSmit___(ChatCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    int type;
                    bool show;
                    type = is__.readInt();
                    show = is__.readBool();
                    inS__.endReadParams();
                    obj__.redPointSmit(type, show, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                private static string[] all__ =
                {
                    "confirm",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "messageReceived",
                    "redPointSmit"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return confirm___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return messageReceived___(this, inS__, current__);
                        }
                        case 6:
                        {
                            return redPointSmit___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class ChatDisp_ : Ice.ObjectImpl, Chat
            {
                #region Slice operations

                public void speak(string msg)
                {
                    speak(msg, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void speak(string msg, Ice.Current current__);

                public void speakAction(string msg, string targetId)
                {
                    speakAction(msg, targetId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void speakAction(string msg, string targetId, Ice.Current current__);

                public void speakTo_async(com.XSanGo.Protocol.AMD_Chat_speakTo cb__, string targetId, string msg)
                {
                    speakTo_async(cb__, targetId, msg, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void speakTo_async(com.XSanGo.Protocol.AMD_Chat_speakTo cb__, string targetId, string msg, Ice.Current current__);

                public byte[] getAttachObject(int id)
                {
                    return getAttachObject(id, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract byte[] getAttachObject(int id, Ice.Current current__);

                public string selSet()
                {
                    return selSet(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string selSet(Ice.Current current__);

                public void saveSet(string set)
                {
                    saveSet(set, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void saveSet(string set, Ice.Current current__);

                public void saveSetColor(int type, string userColor)
                {
                    saveSetColor(type, userColor, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void saveSetColor(int type, string userColor, Ice.Current current__);

                public com.XSanGo.Protocol.ItemView viewEquip(string itemId)
                {
                    return viewEquip(itemId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract com.XSanGo.Protocol.ItemView viewEquip(string itemId, Ice.Current current__);

                public com.XSanGo.Protocol.ItemView viewItem(string itemId)
                {
                    return viewItem(itemId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract com.XSanGo.Protocol.ItemView viewItem(string itemId, Ice.Current current__);

                public com.XSanGo.Protocol.HeroView viewHero(string heroId)
                {
                    return viewHero(heroId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract com.XSanGo.Protocol.HeroView viewHero(string heroId, Ice.Current current__);

                public void selectOfflineMess()
                {
                    selectOfflineMess(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void selectOfflineMess(Ice.Current current__);

                public void selectChallenge_async(com.XSanGo.Protocol.AMD_Chat_selectChallenge cb__, string targetId)
                {
                    selectChallenge_async(cb__, targetId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void selectChallenge_async(com.XSanGo.Protocol.AMD_Chat_selectChallenge cb__, string targetId, Ice.Current current__);

                public com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId)
                {
                    return beginChallenge(targetId, formationId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract com.XSanGo.Protocol.PvpOpponentFormationView beginChallenge(string targetId, string formationId, Ice.Current current__);

                public string endChallenge(string targetId, int resFlag, byte remainHero)
                {
                    return endChallenge(targetId, resFlag, remainHero, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string endChallenge(string targetId, int resFlag, byte remainHero, Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::Chat"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus speak___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string msg;
                    msg = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.speak(msg, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoFactionException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoGroupException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus speakAction___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string msg;
                    string targetId;
                    msg = is__.readString();
                    targetId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.speakAction(msg, targetId, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoFactionException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoGroupException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus speakTo___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    string msg;
                    targetId = is__.readString();
                    msg = is__.readString();
                    inS__.endReadParams();
                    AMD_Chat_speakTo cb__ = new _AMD_Chat_speakTo(inS__);
                    try
                    {
                        obj__.speakTo_async(cb__, targetId, msg, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus getAttachObject___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    int id;
                    id = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        byte[] ret__ = obj__.getAttachObject(id, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        com.XSanGo.Protocol.ByteSeqHelper.write(os__, ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus selSet___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.selSet(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus saveSet___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string set;
                    set = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.saveSet(set, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus saveSetColor___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    int type;
                    string userColor;
                    type = is__.readInt();
                    userColor = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.saveSetColor(type, userColor, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus viewEquip___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string itemId;
                    itemId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        com.XSanGo.Protocol.ItemView ret__ = obj__.viewEquip(itemId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        if(ret__ == null)
                        {
                            com.XSanGo.Protocol.ItemView tmp__ = new com.XSanGo.Protocol.ItemView();
                            tmp__.write__(os__);
                        }
                        else
                        {
                            ret__.write__(os__);
                        }
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus viewItem___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string itemId;
                    itemId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        com.XSanGo.Protocol.ItemView ret__ = obj__.viewItem(itemId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        if(ret__ == null)
                        {
                            com.XSanGo.Protocol.ItemView tmp__ = new com.XSanGo.Protocol.ItemView();
                            tmp__.write__(os__);
                        }
                        else
                        {
                            ret__.write__(os__);
                        }
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus viewHero___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string heroId;
                    heroId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        com.XSanGo.Protocol.HeroView ret__ = obj__.viewHero(heroId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        if(ret__ == null)
                        {
                            com.XSanGo.Protocol.HeroView tmp__ = new com.XSanGo.Protocol.HeroView();
                            tmp__.write__(os__);
                        }
                        else
                        {
                            ret__.write__(os__);
                        }
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus selectOfflineMess___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        obj__.selectOfflineMess(current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus selectChallenge___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    targetId = is__.readString();
                    inS__.endReadParams();
                    AMD_Chat_selectChallenge cb__ = new _AMD_Chat_selectChallenge(inS__);
                    try
                    {
                        obj__.selectChallenge_async(cb__, targetId, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus beginChallenge___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    string formationId;
                    targetId = is__.readString();
                    formationId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        com.XSanGo.Protocol.PvpOpponentFormationView ret__ = obj__.beginChallenge(targetId, formationId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        if(ret__ == null)
                        {
                            com.XSanGo.Protocol.PvpOpponentFormationView tmp__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                            tmp__.write__(os__);
                        }
                        else
                        {
                            ret__.write__(os__);
                        }
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus endChallenge___(Chat obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    int resFlag;
                    byte remainHero;
                    targetId = is__.readString();
                    resFlag = is__.readInt();
                    remainHero = is__.readByte();
                    inS__.endReadParams();
                    try
                    {
                        string ret__ = obj__.endChallenge(targetId, resFlag, remainHero, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                private static string[] all__ =
                {
                    "beginChallenge",
                    "endChallenge",
                    "getAttachObject",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "saveSet",
                    "saveSetColor",
                    "selSet",
                    "selectChallenge",
                    "selectOfflineMess",
                    "speak",
                    "speakAction",
                    "speakTo",
                    "viewEquip",
                    "viewHero",
                    "viewItem"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return beginChallenge___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return endChallenge___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return getAttachObject___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 6:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                        case 7:
                        {
                            return saveSet___(this, inS__, current__);
                        }
                        case 8:
                        {
                            return saveSetColor___(this, inS__, current__);
                        }
                        case 9:
                        {
                            return selSet___(this, inS__, current__);
                        }
                        case 10:
                        {
                            return selectChallenge___(this, inS__, current__);
                        }
                        case 11:
                        {
                            return selectOfflineMess___(this, inS__, current__);
                        }
                        case 12:
                        {
                            return speak___(this, inS__, current__);
                        }
                        case 13:
                        {
                            return speakAction___(this, inS__, current__);
                        }
                        case 14:
                        {
                            return speakTo___(this, inS__, current__);
                        }
                        case 15:
                        {
                            return viewEquip___(this, inS__, current__);
                        }
                        case 16:
                        {
                            return viewHero___(this, inS__, current__);
                        }
                        case 17:
                        {
                            return viewItem___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ChatCallback_messageReceived : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ChatCallback_confirm : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ChatCallback_redPointSmit : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_speak : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_speakAction : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_speakTo : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Chat_speakTo : Ice.AMDCallback
            {
                void ice_response();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Chat_speakTo : IceInternal.IncomingAsync, AMD_Chat_speakTo
            {
                public _AMD_Chat_speakTo(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response()
                {
                    if(validateResponse__(true))
                    {
                        writeEmptyParams__();
                        response__();
                    }
                }

                override public void ice_exception(_System.Exception ex)
                {
                    try
                    {
                        throw ex;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(_System.Exception ex__)
                    {
                        base.ice_exception(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_getAttachObject : Ice.AMICallbackBase
            {
                public abstract void ice_response(byte[] ret__);

                public void response__(byte[] ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_selSet : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_saveSet : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_saveSetColor : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_viewEquip : Ice.AMICallbackBase
            {
                public abstract void ice_response(com.XSanGo.Protocol.ItemView ret__);

                public void response__(com.XSanGo.Protocol.ItemView ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_viewItem : Ice.AMICallbackBase
            {
                public abstract void ice_response(com.XSanGo.Protocol.ItemView ret__);

                public void response__(com.XSanGo.Protocol.ItemView ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_viewHero : Ice.AMICallbackBase
            {
                public abstract void ice_response(com.XSanGo.Protocol.HeroView ret__);

                public void response__(com.XSanGo.Protocol.HeroView ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_selectOfflineMess : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_selectChallenge : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Chat_selectChallenge : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Chat_selectChallenge : IceInternal.IncomingAsync, AMD_Chat_selectChallenge
            {
                public _AMD_Chat_selectChallenge(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }

                override public void ice_exception(_System.Exception ex)
                {
                    try
                    {
                        throw ex;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(_System.Exception ex__)
                    {
                        base.ice_exception(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_beginChallenge : Ice.AMICallbackBase
            {
                public abstract void ice_response(com.XSanGo.Protocol.PvpOpponentFormationView ret__);

                public void response__(com.XSanGo.Protocol.PvpOpponentFormationView ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Chat_endChallenge : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }
        }
    }
}
