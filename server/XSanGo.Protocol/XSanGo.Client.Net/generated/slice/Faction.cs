// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class FactionListView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string icon;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string name;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int level;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string qq;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int memberSize;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public bool apply;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionListView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionListView(string id, string icon, string name, int level, string qq, int memberSize, bool apply)
                {
                    this.id = id;
                    this.icon = icon;
                    this.name = name;
                    this.level = level;
                    this.qq = qq;
                    this.memberSize = memberSize;
                    this.apply = apply;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::FactionListView");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, icon);
                    IceInternal.HashUtil.hashAdd(ref h__, name);
                    IceInternal.HashUtil.hashAdd(ref h__, level);
                    IceInternal.HashUtil.hashAdd(ref h__, qq);
                    IceInternal.HashUtil.hashAdd(ref h__, memberSize);
                    IceInternal.HashUtil.hashAdd(ref h__, apply);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    FactionListView o__ = (FactionListView)other__;
                    if(id == null)
                    {
                        if(o__.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!id.Equals(o__.id))
                        {
                            return false;
                        }
                    }
                    if(icon == null)
                    {
                        if(o__.icon != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!icon.Equals(o__.icon))
                        {
                            return false;
                        }
                    }
                    if(name == null)
                    {
                        if(o__.name != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!name.Equals(o__.name))
                        {
                            return false;
                        }
                    }
                    if(!level.Equals(o__.level))
                    {
                        return false;
                    }
                    if(qq == null)
                    {
                        if(o__.qq != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!qq.Equals(o__.qq))
                        {
                            return false;
                        }
                    }
                    if(!memberSize.Equals(o__.memberSize))
                    {
                        return false;
                    }
                    if(!apply.Equals(o__.apply))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(FactionListView lhs__, FactionListView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(FactionListView lhs__, FactionListView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(id);
                    os__.writeString(icon);
                    os__.writeString(name);
                    os__.writeInt(level);
                    os__.writeString(qq);
                    os__.writeInt(memberSize);
                    os__.writeBool(apply);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readString();
                    icon = is__.readString();
                    name = is__.readString();
                    level = is__.readInt();
                    qq = is__.readString();
                    memberSize = is__.readInt();
                    apply = is__.readBool();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class FactionReqView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string reqId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string candidateId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string name;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int level;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vipLevel;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string headImage;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionReqView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionReqView(string reqId, string candidateId, string name, int level, int vipLevel, string headImage)
                {
                    this.reqId = reqId;
                    this.candidateId = candidateId;
                    this.name = name;
                    this.level = level;
                    this.vipLevel = vipLevel;
                    this.headImage = headImage;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::FactionReqView");
                    IceInternal.HashUtil.hashAdd(ref h__, reqId);
                    IceInternal.HashUtil.hashAdd(ref h__, candidateId);
                    IceInternal.HashUtil.hashAdd(ref h__, name);
                    IceInternal.HashUtil.hashAdd(ref h__, level);
                    IceInternal.HashUtil.hashAdd(ref h__, vipLevel);
                    IceInternal.HashUtil.hashAdd(ref h__, headImage);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    FactionReqView o__ = (FactionReqView)other__;
                    if(reqId == null)
                    {
                        if(o__.reqId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!reqId.Equals(o__.reqId))
                        {
                            return false;
                        }
                    }
                    if(candidateId == null)
                    {
                        if(o__.candidateId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!candidateId.Equals(o__.candidateId))
                        {
                            return false;
                        }
                    }
                    if(name == null)
                    {
                        if(o__.name != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!name.Equals(o__.name))
                        {
                            return false;
                        }
                    }
                    if(!level.Equals(o__.level))
                    {
                        return false;
                    }
                    if(!vipLevel.Equals(o__.vipLevel))
                    {
                        return false;
                    }
                    if(headImage == null)
                    {
                        if(o__.headImage != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!headImage.Equals(o__.headImage))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(FactionReqView lhs__, FactionReqView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(FactionReqView lhs__, FactionReqView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(reqId);
                    os__.writeString(candidateId);
                    os__.writeString(name);
                    os__.writeInt(level);
                    os__.writeInt(vipLevel);
                    os__.writeString(headImage);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    reqId = is__.readString();
                    candidateId = is__.readString();
                    name = is__.readString();
                    level = is__.readInt();
                    vipLevel = is__.readInt();
                    headImage = is__.readString();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class FactionMemberView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string roleId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string name;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string headImage;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int level;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int duty;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vipLevel;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int contribution;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionMemberView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionMemberView(string id, string roleId, string name, string headImage, int level, int duty, int vipLevel, int contribution)
                {
                    this.id = id;
                    this.roleId = roleId;
                    this.name = name;
                    this.headImage = headImage;
                    this.level = level;
                    this.duty = duty;
                    this.vipLevel = vipLevel;
                    this.contribution = contribution;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::FactionMemberView");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, roleId);
                    IceInternal.HashUtil.hashAdd(ref h__, name);
                    IceInternal.HashUtil.hashAdd(ref h__, headImage);
                    IceInternal.HashUtil.hashAdd(ref h__, level);
                    IceInternal.HashUtil.hashAdd(ref h__, duty);
                    IceInternal.HashUtil.hashAdd(ref h__, vipLevel);
                    IceInternal.HashUtil.hashAdd(ref h__, contribution);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    FactionMemberView o__ = (FactionMemberView)other__;
                    if(id == null)
                    {
                        if(o__.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!id.Equals(o__.id))
                        {
                            return false;
                        }
                    }
                    if(roleId == null)
                    {
                        if(o__.roleId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!roleId.Equals(o__.roleId))
                        {
                            return false;
                        }
                    }
                    if(name == null)
                    {
                        if(o__.name != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!name.Equals(o__.name))
                        {
                            return false;
                        }
                    }
                    if(headImage == null)
                    {
                        if(o__.headImage != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!headImage.Equals(o__.headImage))
                        {
                            return false;
                        }
                    }
                    if(!level.Equals(o__.level))
                    {
                        return false;
                    }
                    if(!duty.Equals(o__.duty))
                    {
                        return false;
                    }
                    if(!vipLevel.Equals(o__.vipLevel))
                    {
                        return false;
                    }
                    if(!contribution.Equals(o__.contribution))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(FactionMemberView lhs__, FactionMemberView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(FactionMemberView lhs__, FactionMemberView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(id);
                    os__.writeString(roleId);
                    os__.writeString(name);
                    os__.writeString(headImage);
                    os__.writeInt(level);
                    os__.writeInt(duty);
                    os__.writeInt(vipLevel);
                    os__.writeInt(contribution);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readString();
                    roleId = is__.readString();
                    name = is__.readString();
                    headImage = is__.readString();
                    level = is__.readInt();
                    duty = is__.readInt();
                    vipLevel = is__.readInt();
                    contribution = is__.readInt();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class FactionView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string icon;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string name;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int level;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int currentExp;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int levelUpExp;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string qq;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string announce;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int joinType;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int maxPeople;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.FactionMemberView[] members;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionView(string id, string icon, string name, int level, int currentExp, int levelUpExp, string qq, string announce, int joinType, int maxPeople, com.XSanGo.Protocol.FactionMemberView[] members)
                {
                    this.id = id;
                    this.icon = icon;
                    this.name = name;
                    this.level = level;
                    this.currentExp = currentExp;
                    this.levelUpExp = levelUpExp;
                    this.qq = qq;
                    this.announce = announce;
                    this.joinType = joinType;
                    this.maxPeople = maxPeople;
                    this.members = members;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::FactionView");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, icon);
                    IceInternal.HashUtil.hashAdd(ref h__, name);
                    IceInternal.HashUtil.hashAdd(ref h__, level);
                    IceInternal.HashUtil.hashAdd(ref h__, currentExp);
                    IceInternal.HashUtil.hashAdd(ref h__, levelUpExp);
                    IceInternal.HashUtil.hashAdd(ref h__, qq);
                    IceInternal.HashUtil.hashAdd(ref h__, announce);
                    IceInternal.HashUtil.hashAdd(ref h__, joinType);
                    IceInternal.HashUtil.hashAdd(ref h__, maxPeople);
                    IceInternal.HashUtil.hashAdd(ref h__, members);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    FactionView o__ = (FactionView)other__;
                    if(id == null)
                    {
                        if(o__.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!id.Equals(o__.id))
                        {
                            return false;
                        }
                    }
                    if(icon == null)
                    {
                        if(o__.icon != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!icon.Equals(o__.icon))
                        {
                            return false;
                        }
                    }
                    if(name == null)
                    {
                        if(o__.name != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!name.Equals(o__.name))
                        {
                            return false;
                        }
                    }
                    if(!level.Equals(o__.level))
                    {
                        return false;
                    }
                    if(!currentExp.Equals(o__.currentExp))
                    {
                        return false;
                    }
                    if(!levelUpExp.Equals(o__.levelUpExp))
                    {
                        return false;
                    }
                    if(qq == null)
                    {
                        if(o__.qq != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!qq.Equals(o__.qq))
                        {
                            return false;
                        }
                    }
                    if(announce == null)
                    {
                        if(o__.announce != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!announce.Equals(o__.announce))
                        {
                            return false;
                        }
                    }
                    if(!joinType.Equals(o__.joinType))
                    {
                        return false;
                    }
                    if(!maxPeople.Equals(o__.maxPeople))
                    {
                        return false;
                    }
                    if(members == null)
                    {
                        if(o__.members != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(members, o__.members))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(FactionView lhs__, FactionView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(FactionView lhs__, FactionView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(id);
                    os__.writeString(icon);
                    os__.writeString(name);
                    os__.writeInt(level);
                    os__.writeInt(currentExp);
                    os__.writeInt(levelUpExp);
                    os__.writeString(qq);
                    os__.writeString(announce);
                    os__.writeInt(joinType);
                    os__.writeInt(maxPeople);
                    com.XSanGo.Protocol.FactionMemberViewSeqHelper.write(os__, members);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readString();
                    icon = is__.readString();
                    name = is__.readString();
                    level = is__.readInt();
                    currentExp = is__.readInt();
                    levelUpExp = is__.readInt();
                    qq = is__.readString();
                    announce = is__.readString();
                    joinType = is__.readInt();
                    maxPeople = is__.readInt();
                    members = com.XSanGo.Protocol.FactionMemberViewSeqHelper.read(is__);
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class FactionHistoryView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string time;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string roleName;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string content;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vipLivel;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionHistoryView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionHistoryView(string time, string roleName, string content, int vipLivel)
                {
                    this.time = time;
                    this.roleName = roleName;
                    this.content = content;
                    this.vipLivel = vipLivel;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::FactionHistoryView");
                    IceInternal.HashUtil.hashAdd(ref h__, time);
                    IceInternal.HashUtil.hashAdd(ref h__, roleName);
                    IceInternal.HashUtil.hashAdd(ref h__, content);
                    IceInternal.HashUtil.hashAdd(ref h__, vipLivel);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    FactionHistoryView o__ = (FactionHistoryView)other__;
                    if(time == null)
                    {
                        if(o__.time != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!time.Equals(o__.time))
                        {
                            return false;
                        }
                    }
                    if(roleName == null)
                    {
                        if(o__.roleName != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!roleName.Equals(o__.roleName))
                        {
                            return false;
                        }
                    }
                    if(content == null)
                    {
                        if(o__.content != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!content.Equals(o__.content))
                        {
                            return false;
                        }
                    }
                    if(!vipLivel.Equals(o__.vipLivel))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(FactionHistoryView lhs__, FactionHistoryView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(FactionHistoryView lhs__, FactionHistoryView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(time);
                    os__.writeString(roleName);
                    os__.writeString(content);
                    os__.writeInt(vipLivel);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    time = is__.readString();
                    roleName = is__.readString();
                    content = is__.readString();
                    vipLivel = is__.readInt();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class MonsterView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int blood;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int anger;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public MonsterView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public MonsterView(string id, int blood, int anger)
                {
                    this.id = id;
                    this.blood = blood;
                    this.anger = anger;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::MonsterView");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, blood);
                    IceInternal.HashUtil.hashAdd(ref h__, anger);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    MonsterView o__ = (MonsterView)other__;
                    if(id == null)
                    {
                        if(o__.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!id.Equals(o__.id))
                        {
                            return false;
                        }
                    }
                    if(!blood.Equals(o__.blood))
                    {
                        return false;
                    }
                    if(!anger.Equals(o__.anger))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(MonsterView lhs__, MonsterView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(MonsterView lhs__, MonsterView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(id);
                    os__.writeInt(blood);
                    os__.writeInt(anger);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readString();
                    blood = is__.readInt();
                    anger = is__.readInt();
                }

                #endregion
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public enum AdditionType
            {
                NONE,
                WEIGUO,
                SHUGUO,
                WUGUO,
                OTHER
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class FactionCopyInfoView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int stageNum;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int progress;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.IntIntPair challengeNum;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string roleName;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string icon;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vipLevel;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int limitTime;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.AdditionType addType;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int addValue;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionCopyInfoView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionCopyInfoView(int stageNum, int progress, com.XSanGo.Protocol.IntIntPair challengeNum, string roleName, string icon, int vipLevel, int limitTime, com.XSanGo.Protocol.AdditionType addType, int addValue)
                {
                    this.stageNum = stageNum;
                    this.progress = progress;
                    this.challengeNum = challengeNum;
                    this.roleName = roleName;
                    this.icon = icon;
                    this.vipLevel = vipLevel;
                    this.limitTime = limitTime;
                    this.addType = addType;
                    this.addValue = addValue;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::FactionCopyInfoView");
                    IceInternal.HashUtil.hashAdd(ref h__, stageNum);
                    IceInternal.HashUtil.hashAdd(ref h__, progress);
                    IceInternal.HashUtil.hashAdd(ref h__, challengeNum);
                    IceInternal.HashUtil.hashAdd(ref h__, roleName);
                    IceInternal.HashUtil.hashAdd(ref h__, icon);
                    IceInternal.HashUtil.hashAdd(ref h__, vipLevel);
                    IceInternal.HashUtil.hashAdd(ref h__, limitTime);
                    IceInternal.HashUtil.hashAdd(ref h__, addType);
                    IceInternal.HashUtil.hashAdd(ref h__, addValue);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    FactionCopyInfoView o__ = (FactionCopyInfoView)other__;
                    if(!stageNum.Equals(o__.stageNum))
                    {
                        return false;
                    }
                    if(!progress.Equals(o__.progress))
                    {
                        return false;
                    }
                    if(!challengeNum.Equals(o__.challengeNum))
                    {
                        return false;
                    }
                    if(roleName == null)
                    {
                        if(o__.roleName != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!roleName.Equals(o__.roleName))
                        {
                            return false;
                        }
                    }
                    if(icon == null)
                    {
                        if(o__.icon != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!icon.Equals(o__.icon))
                        {
                            return false;
                        }
                    }
                    if(!vipLevel.Equals(o__.vipLevel))
                    {
                        return false;
                    }
                    if(!limitTime.Equals(o__.limitTime))
                    {
                        return false;
                    }
                    if(!addType.Equals(o__.addType))
                    {
                        return false;
                    }
                    if(!addValue.Equals(o__.addValue))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(FactionCopyInfoView lhs__, FactionCopyInfoView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(FactionCopyInfoView lhs__, FactionCopyInfoView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(stageNum);
                    os__.writeInt(progress);
                    challengeNum.write__(os__);
                    os__.writeString(roleName);
                    os__.writeString(icon);
                    os__.writeInt(vipLevel);
                    os__.writeInt(limitTime);
                    os__.writeEnum((int)addType, 4);
                    os__.writeInt(addValue);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    stageNum = is__.readInt();
                    progress = is__.readInt();
                    challengeNum.read__(is__);
                    roleName = is__.readString();
                    icon = is__.readString();
                    vipLevel = is__.readInt();
                    limitTime = is__.readInt();
                    addType = (com.XSanGo.Protocol.AdditionType)is__.readEnum(4);
                    addValue = is__.readInt();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class FactionCopyResultView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int copyId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int stageNum;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.MonsterView[] monsters;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.ItemView[] items;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.ItemView[] killItems;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.ItemView[] bloodItems;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.AdditionType addType;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int addValue;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionCopyResultView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public FactionCopyResultView(int copyId, int stageNum, com.XSanGo.Protocol.MonsterView[] monsters, com.XSanGo.Protocol.ItemView[] items, com.XSanGo.Protocol.ItemView[] killItems, com.XSanGo.Protocol.ItemView[] bloodItems, com.XSanGo.Protocol.AdditionType addType, int addValue)
                {
                    this.copyId = copyId;
                    this.stageNum = stageNum;
                    this.monsters = monsters;
                    this.items = items;
                    this.killItems = killItems;
                    this.bloodItems = bloodItems;
                    this.addType = addType;
                    this.addValue = addValue;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::FactionCopyResultView");
                    IceInternal.HashUtil.hashAdd(ref h__, copyId);
                    IceInternal.HashUtil.hashAdd(ref h__, stageNum);
                    IceInternal.HashUtil.hashAdd(ref h__, monsters);
                    IceInternal.HashUtil.hashAdd(ref h__, items);
                    IceInternal.HashUtil.hashAdd(ref h__, killItems);
                    IceInternal.HashUtil.hashAdd(ref h__, bloodItems);
                    IceInternal.HashUtil.hashAdd(ref h__, addType);
                    IceInternal.HashUtil.hashAdd(ref h__, addValue);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    FactionCopyResultView o__ = (FactionCopyResultView)other__;
                    if(!copyId.Equals(o__.copyId))
                    {
                        return false;
                    }
                    if(!stageNum.Equals(o__.stageNum))
                    {
                        return false;
                    }
                    if(monsters == null)
                    {
                        if(o__.monsters != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(monsters, o__.monsters))
                        {
                            return false;
                        }
                    }
                    if(items == null)
                    {
                        if(o__.items != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(items, o__.items))
                        {
                            return false;
                        }
                    }
                    if(killItems == null)
                    {
                        if(o__.killItems != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(killItems, o__.killItems))
                        {
                            return false;
                        }
                    }
                    if(bloodItems == null)
                    {
                        if(o__.bloodItems != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(bloodItems, o__.bloodItems))
                        {
                            return false;
                        }
                    }
                    if(!addType.Equals(o__.addType))
                    {
                        return false;
                    }
                    if(!addValue.Equals(o__.addValue))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(FactionCopyResultView lhs__, FactionCopyResultView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(FactionCopyResultView lhs__, FactionCopyResultView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(copyId);
                    os__.writeInt(stageNum);
                    com.XSanGo.Protocol.MonsterViewSeqHelper.write(os__, monsters);
                    com.XSanGo.Protocol.ItemViewSeqHelper.write(os__, items);
                    com.XSanGo.Protocol.ItemViewSeqHelper.write(os__, killItems);
                    com.XSanGo.Protocol.ItemViewSeqHelper.write(os__, bloodItems);
                    os__.writeEnum((int)addType, 4);
                    os__.writeInt(addValue);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    copyId = is__.readInt();
                    stageNum = is__.readInt();
                    monsters = com.XSanGo.Protocol.MonsterViewSeqHelper.read(is__);
                    items = com.XSanGo.Protocol.ItemViewSeqHelper.read(is__);
                    killItems = com.XSanGo.Protocol.ItemViewSeqHelper.read(is__);
                    bloodItems = com.XSanGo.Protocol.ItemViewSeqHelper.read(is__);
                    addType = (com.XSanGo.Protocol.AdditionType)is__.readEnum(4);
                    addValue = is__.readInt();
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface Faction : Ice.Object, FactionOperations_, FactionOperationsNC_
            {
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_createFaction();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_getFactionList(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_applyFor();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_cancelApplication();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_getMyFaction(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_getJoinRequestList(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_approveJoin();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_denyJoin();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_divorce();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_deleteMember();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_updateNotice();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_findFaction(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_transferFaction();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_upElder();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_setCommon();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_factionConfig();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_getFactionHistorys(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_donation();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_factionCopyList(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_openFactionCopy(int ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_closeFactionCopy();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_factionCopyInfo(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_beginChallenge(com.XSanGo.Protocol.FactionCopyResultView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Faction_endChallenge();
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface FactionPrx : Ice.ObjectPrx
            {
                void createFaction(string name, string icon);
                void createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_createFaction> begin_createFaction(string name, string icon);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_createFaction> begin_createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_createFaction(string name, string icon, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_createFaction(Ice.AsyncResult r__);

                bool createFaction_async(com.XSanGo.Protocol.AMI_Faction_createFaction cb__, string name, string icon);
                bool createFaction_async(com.XSanGo.Protocol.AMI_Faction_createFaction cb__, string name, string icon, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string getFactionList();
                string getFactionList(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionList> begin_getFactionList();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionList> begin_getFactionList(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_getFactionList(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_getFactionList(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_getFactionList(Ice.AsyncResult r__);

                bool getFactionList_async(com.XSanGo.Protocol.AMI_Faction_getFactionList cb__);
                bool getFactionList_async(com.XSanGo.Protocol.AMI_Faction_getFactionList cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void applyFor(string factionId);
                void applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_applyFor> begin_applyFor(string factionId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_applyFor> begin_applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_applyFor(string factionId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_applyFor(Ice.AsyncResult r__);

                bool applyFor_async(com.XSanGo.Protocol.AMI_Faction_applyFor cb__, string factionId);
                bool applyFor_async(com.XSanGo.Protocol.AMI_Faction_applyFor cb__, string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void cancelApplication(string factionId);
                void cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_cancelApplication> begin_cancelApplication(string factionId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_cancelApplication> begin_cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_cancelApplication(string factionId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_cancelApplication(Ice.AsyncResult r__);

                bool cancelApplication_async(com.XSanGo.Protocol.AMI_Faction_cancelApplication cb__, string factionId);
                bool cancelApplication_async(com.XSanGo.Protocol.AMI_Faction_cancelApplication cb__, string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string getMyFaction();
                string getMyFaction(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getMyFaction> begin_getMyFaction();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getMyFaction> begin_getMyFaction(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_getMyFaction(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_getMyFaction(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_getMyFaction(Ice.AsyncResult r__);

                bool getMyFaction_async(com.XSanGo.Protocol.AMI_Faction_getMyFaction cb__);
                bool getMyFaction_async(com.XSanGo.Protocol.AMI_Faction_getMyFaction cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string getJoinRequestList();
                string getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList> begin_getJoinRequestList();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList> begin_getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_getJoinRequestList(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_getJoinRequestList(Ice.AsyncResult r__);

                bool getJoinRequestList_async(com.XSanGo.Protocol.AMI_Faction_getJoinRequestList cb__);
                bool getJoinRequestList_async(com.XSanGo.Protocol.AMI_Faction_getJoinRequestList cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void approveJoin(string applyId);
                void approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_approveJoin> begin_approveJoin(string applyId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_approveJoin> begin_approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_approveJoin(string applyId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_approveJoin(Ice.AsyncResult r__);

                bool approveJoin_async(com.XSanGo.Protocol.AMI_Faction_approveJoin cb__, string applyId);
                bool approveJoin_async(com.XSanGo.Protocol.AMI_Faction_approveJoin cb__, string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void denyJoin(string applyId);
                void denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_denyJoin> begin_denyJoin(string applyId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_denyJoin> begin_denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_denyJoin(string applyId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_denyJoin(Ice.AsyncResult r__);

                bool denyJoin_async(com.XSanGo.Protocol.AMI_Faction_denyJoin cb__, string applyId);
                bool denyJoin_async(com.XSanGo.Protocol.AMI_Faction_denyJoin cb__, string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void divorce();
                void divorce(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_divorce> begin_divorce();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_divorce> begin_divorce(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_divorce(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_divorce(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_divorce(Ice.AsyncResult r__);

                bool divorce_async(com.XSanGo.Protocol.AMI_Faction_divorce cb__);
                bool divorce_async(com.XSanGo.Protocol.AMI_Faction_divorce cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void deleteMember(string roleId);
                void deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_deleteMember> begin_deleteMember(string roleId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_deleteMember> begin_deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_deleteMember(string roleId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_deleteMember(Ice.AsyncResult r__);

                bool deleteMember_async(com.XSanGo.Protocol.AMI_Faction_deleteMember cb__, string roleId);
                bool deleteMember_async(com.XSanGo.Protocol.AMI_Faction_deleteMember cb__, string roleId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void updateNotice(string newNotice);
                void updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_updateNotice> begin_updateNotice(string newNotice);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_updateNotice> begin_updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_updateNotice(string newNotice, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_updateNotice(Ice.AsyncResult r__);

                bool updateNotice_async(com.XSanGo.Protocol.AMI_Faction_updateNotice cb__, string newNotice);
                bool updateNotice_async(com.XSanGo.Protocol.AMI_Faction_updateNotice cb__, string newNotice, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string findFaction(string factionId);
                string findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_findFaction> begin_findFaction(string factionId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_findFaction> begin_findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_findFaction(string factionId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_findFaction(Ice.AsyncResult r__);

                bool findFaction_async(com.XSanGo.Protocol.AMI_Faction_findFaction cb__, string factionId);
                bool findFaction_async(com.XSanGo.Protocol.AMI_Faction_findFaction cb__, string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void transferFaction(string targetId);
                void transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_transferFaction> begin_transferFaction(string targetId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_transferFaction> begin_transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_transferFaction(string targetId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_transferFaction(Ice.AsyncResult r__);

                bool transferFaction_async(com.XSanGo.Protocol.AMI_Faction_transferFaction cb__, string targetId);
                bool transferFaction_async(com.XSanGo.Protocol.AMI_Faction_transferFaction cb__, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void upElder(string targetId);
                void upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_upElder> begin_upElder(string targetId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_upElder> begin_upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_upElder(string targetId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_upElder(Ice.AsyncResult r__);

                bool upElder_async(com.XSanGo.Protocol.AMI_Faction_upElder cb__, string targetId);
                bool upElder_async(com.XSanGo.Protocol.AMI_Faction_upElder cb__, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void setCommon(string targetId);
                void setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_setCommon> begin_setCommon(string targetId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_setCommon> begin_setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_setCommon(string targetId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_setCommon(Ice.AsyncResult r__);

                bool setCommon_async(com.XSanGo.Protocol.AMI_Faction_setCommon cb__, string targetId);
                bool setCommon_async(com.XSanGo.Protocol.AMI_Faction_setCommon cb__, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void factionConfig(string icon, string qq, string notice, int joinType);
                void factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionConfig> begin_factionConfig(string icon, string qq, string notice, int joinType);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionConfig> begin_factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_factionConfig(string icon, string qq, string notice, int joinType, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_factionConfig(Ice.AsyncResult r__);

                bool factionConfig_async(com.XSanGo.Protocol.AMI_Faction_factionConfig cb__, string icon, string qq, string notice, int joinType);
                bool factionConfig_async(com.XSanGo.Protocol.AMI_Faction_factionConfig cb__, string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string getFactionHistorys();
                string getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys> begin_getFactionHistorys();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys> begin_getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_getFactionHistorys(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_getFactionHistorys(Ice.AsyncResult r__);

                bool getFactionHistorys_async(com.XSanGo.Protocol.AMI_Faction_getFactionHistorys cb__);
                bool getFactionHistorys_async(com.XSanGo.Protocol.AMI_Faction_getFactionHistorys cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void donation(int num);
                void donation(int num, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_donation> begin_donation(int num);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_donation> begin_donation(int num, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_donation(int num, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_donation(int num, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_donation(Ice.AsyncResult r__);

                bool donation_async(com.XSanGo.Protocol.AMI_Faction_donation cb__, int num);
                bool donation_async(com.XSanGo.Protocol.AMI_Faction_donation cb__, int num, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string factionCopyList();
                string factionCopyList(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyList> begin_factionCopyList();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyList> begin_factionCopyList(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_factionCopyList(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_factionCopyList(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_factionCopyList(Ice.AsyncResult r__);

                bool factionCopyList_async(com.XSanGo.Protocol.AMI_Faction_factionCopyList cb__);
                bool factionCopyList_async(com.XSanGo.Protocol.AMI_Faction_factionCopyList cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                int openFactionCopy(int copyId);
                int openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_openFactionCopy> begin_openFactionCopy(int copyId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_openFactionCopy> begin_openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_openFactionCopy(int copyId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                int end_openFactionCopy(Ice.AsyncResult r__);

                bool openFactionCopy_async(com.XSanGo.Protocol.AMI_Faction_openFactionCopy cb__, int copyId);
                bool openFactionCopy_async(com.XSanGo.Protocol.AMI_Faction_openFactionCopy cb__, int copyId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void closeFactionCopy();
                void closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy> begin_closeFactionCopy();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy> begin_closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_closeFactionCopy(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_closeFactionCopy(Ice.AsyncResult r__);

                bool closeFactionCopy_async(com.XSanGo.Protocol.AMI_Faction_closeFactionCopy cb__);
                bool closeFactionCopy_async(com.XSanGo.Protocol.AMI_Faction_closeFactionCopy cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string factionCopyInfo();
                string factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo> begin_factionCopyInfo();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo> begin_factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_factionCopyInfo(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_factionCopyInfo(Ice.AsyncResult r__);

                bool factionCopyInfo_async(com.XSanGo.Protocol.AMI_Faction_factionCopyInfo cb__);
                bool factionCopyInfo_async(com.XSanGo.Protocol.AMI_Faction_factionCopyInfo cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.FactionCopyResultView beginChallenge();
                com.XSanGo.Protocol.FactionCopyResultView beginChallenge(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_beginChallenge> begin_beginChallenge();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_beginChallenge> begin_beginChallenge(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_beginChallenge(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_beginChallenge(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.FactionCopyResultView end_beginChallenge(Ice.AsyncResult r__);

                bool beginChallenge_async(com.XSanGo.Protocol.AMI_Faction_beginChallenge cb__);
                bool beginChallenge_async(com.XSanGo.Protocol.AMI_Faction_beginChallenge cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood);
                void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_endChallenge> begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_endChallenge> begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_endChallenge(Ice.AsyncResult r__);

                bool endChallenge_async(com.XSanGo.Protocol.AMI_Faction_endChallenge cb__, com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood);
                bool endChallenge_async(com.XSanGo.Protocol.AMI_Faction_endChallenge cb__, com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface FactionOperations_
            {
                void createFaction_async(com.XSanGo.Protocol.AMD_Faction_createFaction cb__, string name, string icon, Ice.Current current__);

                string getFactionList(Ice.Current current__);

                void applyFor(string factionId, Ice.Current current__);

                void cancelApplication(string factionId, Ice.Current current__);

                void getMyFaction_async(com.XSanGo.Protocol.AMD_Faction_getMyFaction cb__, Ice.Current current__);

                void getJoinRequestList_async(com.XSanGo.Protocol.AMD_Faction_getJoinRequestList cb__, Ice.Current current__);

                void approveJoin_async(com.XSanGo.Protocol.AMD_Faction_approveJoin cb__, string applyId, Ice.Current current__);

                void denyJoin(string applyId, Ice.Current current__);

                /// <summary>
                /// 退出公会
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void divorce(Ice.Current current__);

                void deleteMember(string roleId, Ice.Current current__);

                /// <summary>
                /// 修改公会公告
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void updateNotice(string newNotice, Ice.Current current__);

                /// <summary>
                /// 查找公会 返回FactionListView的lua
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                string findFaction(string factionId, Ice.Current current__);

                /// <summary>
                /// 转让公会(升为会长)
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void transferFaction(string targetId, Ice.Current current__);

                /// <summary>
                /// 升为长老
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void upElder(string targetId, Ice.Current current__);

                /// <summary>
                /// 设置成普通会员
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void setCommon(string targetId, Ice.Current current__);

                /// <summary>
                /// 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void factionConfig(string icon, string qq, string notice, int joinType, Ice.Current current__);

                /// <summary>
                /// 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                string getFactionHistorys(Ice.Current current__);

                /// <summary>
                /// 公会捐赠 num-捐赠数量
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void donation(int num, Ice.Current current__);

                /// <summary>
                /// 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                string factionCopyList(Ice.Current current__);

                /// <summary>
                /// 开启副本 返回还可开启的次数
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                int openFactionCopy(int copyId, Ice.Current current__);

                /// <summary>
                /// 关闭开启的副本
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void closeFactionCopy(Ice.Current current__);

                /// <summary>
                /// 副本进度等信息 返回FactionCopyInfoView的lua
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                string factionCopyInfo(Ice.Current current__);

                /// <summary>
                /// 开始挑战副本 返回FactionCopyResultView
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                com.XSanGo.Protocol.FactionCopyResultView beginChallenge(Ice.Current current__);

                /// <summary>
                /// 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface FactionOperationsNC_
            {
                void createFaction_async(com.XSanGo.Protocol.AMD_Faction_createFaction cb__, string name, string icon);

                string getFactionList();

                void applyFor(string factionId);

                void cancelApplication(string factionId);

                void getMyFaction_async(com.XSanGo.Protocol.AMD_Faction_getMyFaction cb__);

                void getJoinRequestList_async(com.XSanGo.Protocol.AMD_Faction_getJoinRequestList cb__);

                void approveJoin_async(com.XSanGo.Protocol.AMD_Faction_approveJoin cb__, string applyId);

                void denyJoin(string applyId);

                /// <summary>
                /// 退出公会
                /// </summary>
                
                void divorce();

                void deleteMember(string roleId);

                /// <summary>
                /// 修改公会公告
                /// </summary>
                
                void updateNotice(string newNotice);

                /// <summary>
                /// 查找公会 返回FactionListView的lua
                /// </summary>
                
                string findFaction(string factionId);

                /// <summary>
                /// 转让公会(升为会长)
                /// </summary>
                
                void transferFaction(string targetId);

                /// <summary>
                /// 升为长老
                /// </summary>
                
                void upElder(string targetId);

                /// <summary>
                /// 设置成普通会员
                /// </summary>
                
                void setCommon(string targetId);

                /// <summary>
                /// 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
                /// </summary>
                
                void factionConfig(string icon, string qq, string notice, int joinType);

                /// <summary>
                /// 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
                /// </summary>
                
                string getFactionHistorys();

                /// <summary>
                /// 公会捐赠 num-捐赠数量
                /// </summary>
                
                void donation(int num);

                /// <summary>
                /// 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
                /// </summary>
                
                string factionCopyList();

                /// <summary>
                /// 开启副本 返回还可开启的次数
                /// </summary>
                
                int openFactionCopy(int copyId);

                /// <summary>
                /// 关闭开启的副本
                /// </summary>
                
                void closeFactionCopy();

                /// <summary>
                /// 副本进度等信息 返回FactionCopyInfoView的lua
                /// </summary>
                
                string factionCopyInfo();

                /// <summary>
                /// 开始挑战副本 返回FactionCopyResultView
                /// </summary>
                
                com.XSanGo.Protocol.FactionCopyResultView beginChallenge();

                /// <summary>
                /// 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
                /// </summary>
                
                void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class FactionListViewSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.FactionListView[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.FactionListView() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.FactionListView[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.FactionListView[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(13);
                        v__ = new com.XSanGo.Protocol.FactionListView[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.FactionListView();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class FactionReqViewSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.FactionReqView[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.FactionReqView() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.FactionReqView[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.FactionReqView[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(12);
                        v__ = new com.XSanGo.Protocol.FactionReqView[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.FactionReqView();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class FactionMemberViewSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.FactionMemberView[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.FactionMemberView() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.FactionMemberView[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.FactionMemberView[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(20);
                        v__ = new com.XSanGo.Protocol.FactionMemberView[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.FactionMemberView();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class MonsterViewSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.MonsterView[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.MonsterView() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.MonsterView[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.MonsterView[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(9);
                        v__ = new com.XSanGo.Protocol.MonsterView[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.MonsterView();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class FactionPrxHelper : Ice.ObjectPrxHelperBase, FactionPrx
            {
                #region Synchronous operations

                public void applyFor(string factionId)
                {
                    applyFor(factionId, null, false);
                }

                public void applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    applyFor(factionId, context__, true);
                }

                private void applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __applyFor_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__applyFor_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.applyFor(factionId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void approveJoin(string applyId)
                {
                    approveJoin(applyId, null, false);
                }

                public void approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    approveJoin(applyId, context__, true);
                }

                private void approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __approveJoin_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__approveJoin_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.approveJoin(applyId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 开始挑战副本 返回FactionCopyResultView
                /// </summary>
                
                public com.XSanGo.Protocol.FactionCopyResultView beginChallenge()
                {
                    return beginChallenge(null, false);
                }

                /// <summary>
                /// 开始挑战副本 返回FactionCopyResultView
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public com.XSanGo.Protocol.FactionCopyResultView beginChallenge(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return beginChallenge(context__, true);
                }

                private com.XSanGo.Protocol.FactionCopyResultView beginChallenge(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __beginChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__beginChallenge_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.beginChallenge(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void cancelApplication(string factionId)
                {
                    cancelApplication(factionId, null, false);
                }

                public void cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    cancelApplication(factionId, context__, true);
                }

                private void cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __cancelApplication_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.cancelApplication(factionId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 关闭开启的副本
                /// </summary>
                
                public void closeFactionCopy()
                {
                    closeFactionCopy(null, false);
                }

                /// <summary>
                /// 关闭开启的副本
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    closeFactionCopy(context__, true);
                }

                private void closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __closeFactionCopy_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__closeFactionCopy_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.closeFactionCopy(context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void createFaction(string name, string icon)
                {
                    createFaction(name, icon, null, false);
                }

                public void createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    createFaction(name, icon, context__, true);
                }

                private void createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __createFaction_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__createFaction_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.createFaction(name, icon, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void deleteMember(string roleId)
                {
                    deleteMember(roleId, null, false);
                }

                public void deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    deleteMember(roleId, context__, true);
                }

                private void deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __deleteMember_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__deleteMember_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.deleteMember(roleId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void denyJoin(string applyId)
                {
                    denyJoin(applyId, null, false);
                }

                public void denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    denyJoin(applyId, context__, true);
                }

                private void denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __denyJoin_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.denyJoin(applyId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 退出公会
                /// </summary>
                
                public void divorce()
                {
                    divorce(null, false);
                }

                /// <summary>
                /// 退出公会
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void divorce(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    divorce(context__, true);
                }

                private void divorce(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __divorce_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__divorce_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.divorce(context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 公会捐赠 num-捐赠数量
                /// </summary>
                
                public void donation(int num)
                {
                    donation(num, null, false);
                }

                /// <summary>
                /// 公会捐赠 num-捐赠数量
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void donation(int num, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    donation(num, context__, true);
                }

                private void donation(int num, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __donation_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__donation_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.donation(num, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
                /// </summary>
                
                public void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood)
                {
                    endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null, false);
                }

                /// <summary>
                /// 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, context__, true);
                }

                private void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __endChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__endChallenge_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
                /// </summary>
                
                public void factionConfig(string icon, string qq, string notice, int joinType)
                {
                    factionConfig(icon, qq, notice, joinType, null, false);
                }

                /// <summary>
                /// 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    factionConfig(icon, qq, notice, joinType, context__, true);
                }

                private void factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __factionConfig_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__factionConfig_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.factionConfig(icon, qq, notice, joinType, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 副本进度等信息 返回FactionCopyInfoView的lua
                /// </summary>
                
                public string factionCopyInfo()
                {
                    return factionCopyInfo(null, false);
                }

                /// <summary>
                /// 副本进度等信息 返回FactionCopyInfoView的lua
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public string factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return factionCopyInfo(context__, true);
                }

                private string factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __factionCopyInfo_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__factionCopyInfo_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.factionCopyInfo(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
                /// </summary>
                
                public string factionCopyList()
                {
                    return factionCopyList(null, false);
                }

                /// <summary>
                /// 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public string factionCopyList(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return factionCopyList(context__, true);
                }

                private string factionCopyList(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __factionCopyList_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__factionCopyList_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.factionCopyList(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 查找公会 返回FactionListView的lua
                /// </summary>
                
                public string findFaction(string factionId)
                {
                    return findFaction(factionId, null, false);
                }

                /// <summary>
                /// 查找公会 返回FactionListView的lua
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public string findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return findFaction(factionId, context__, true);
                }

                private string findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __findFaction_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__findFaction_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.findFaction(factionId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
                /// </summary>
                
                public string getFactionHistorys()
                {
                    return getFactionHistorys(null, false);
                }

                /// <summary>
                /// 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public string getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return getFactionHistorys(context__, true);
                }

                private string getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getFactionHistorys_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__getFactionHistorys_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.getFactionHistorys(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string getFactionList()
                {
                    return getFactionList(null, false);
                }

                public string getFactionList(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return getFactionList(context__, true);
                }

                private string getFactionList(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getFactionList_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__getFactionList_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.getFactionList(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string getJoinRequestList()
                {
                    return getJoinRequestList(null, false);
                }

                public string getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return getJoinRequestList(context__, true);
                }

                private string getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getJoinRequestList_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__getJoinRequestList_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.getJoinRequestList(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string getMyFaction()
                {
                    return getMyFaction(null, false);
                }

                public string getMyFaction(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return getMyFaction(context__, true);
                }

                private string getMyFaction(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getMyFaction_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__getMyFaction_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.getMyFaction(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 开启副本 返回还可开启的次数
                /// </summary>
                
                public int openFactionCopy(int copyId)
                {
                    return openFactionCopy(copyId, null, false);
                }

                /// <summary>
                /// 开启副本 返回还可开启的次数
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public int openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return openFactionCopy(copyId, context__, true);
                }

                private int openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __openFactionCopy_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__openFactionCopy_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                return del__.openFactionCopy(copyId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 设置成普通会员
                /// </summary>
                
                public void setCommon(string targetId)
                {
                    setCommon(targetId, null, false);
                }

                /// <summary>
                /// 设置成普通会员
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    setCommon(targetId, context__, true);
                }

                private void setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __setCommon_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__setCommon_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.setCommon(targetId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 转让公会(升为会长)
                /// </summary>
                
                public void transferFaction(string targetId)
                {
                    transferFaction(targetId, null, false);
                }

                /// <summary>
                /// 转让公会(升为会长)
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    transferFaction(targetId, context__, true);
                }

                private void transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __transferFaction_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__transferFaction_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.transferFaction(targetId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 升为长老
                /// </summary>
                
                public void upElder(string targetId)
                {
                    upElder(targetId, null, false);
                }

                /// <summary>
                /// 升为长老
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    upElder(targetId, context__, true);
                }

                private void upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __upElder_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__upElder_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.upElder(targetId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 修改公会公告
                /// </summary>
                
                public void updateNotice(string newNotice)
                {
                    updateNotice(newNotice, null, false);
                }

                /// <summary>
                /// 修改公会公告
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    updateNotice(newNotice, context__, true);
                }

                private void updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __updateNotice_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__updateNotice_name);
                                delBase__ = getDelegate__(false);
                                FactionDel_ del__ = (FactionDel_)delBase__;
                                del__.updateNotice(newNotice, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_applyFor> begin_applyFor(string factionId)
                {
                    return begin_applyFor(factionId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_applyFor> begin_applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_applyFor(factionId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_applyFor(string factionId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_applyFor(factionId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_applyFor(factionId, ctx__, true, cb__, cookie__);
                }

                private const string __applyFor_name = "applyFor";

                public void end_applyFor(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __applyFor_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_applyFor> begin_applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__applyFor_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_applyFor> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_applyFor>(this, __applyFor_name, applyFor_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__applyFor_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(factionId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void applyFor_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_applyFor cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_applyFor(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool applyFor_async(com.XSanGo.Protocol.AMI_Faction_applyFor cb__, string factionId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_applyFor> result__;
                    try
                    {
                        checkTwowayOnly__(__applyFor_name);
                        result__ = begin_applyFor(factionId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_applyFor>(this, __applyFor_name, applyFor_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool applyFor_async(com.XSanGo.Protocol.AMI_Faction_applyFor cb__, string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_applyFor> result__;
                    try
                    {
                        checkTwowayOnly__(__applyFor_name);
                        result__ = begin_applyFor(factionId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_applyFor>(this, __applyFor_name, applyFor_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_approveJoin> begin_approveJoin(string applyId)
                {
                    return begin_approveJoin(applyId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_approveJoin> begin_approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_approveJoin(applyId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_approveJoin(string applyId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_approveJoin(applyId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_approveJoin(applyId, ctx__, true, cb__, cookie__);
                }

                private const string __approveJoin_name = "approveJoin";

                public void end_approveJoin(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __approveJoin_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_approveJoin> begin_approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__approveJoin_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_approveJoin> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_approveJoin>(this, __approveJoin_name, approveJoin_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__approveJoin_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(applyId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void approveJoin_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_approveJoin cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_approveJoin(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool approveJoin_async(com.XSanGo.Protocol.AMI_Faction_approveJoin cb__, string applyId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_approveJoin> result__;
                    try
                    {
                        checkTwowayOnly__(__approveJoin_name);
                        result__ = begin_approveJoin(applyId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_approveJoin>(this, __approveJoin_name, approveJoin_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool approveJoin_async(com.XSanGo.Protocol.AMI_Faction_approveJoin cb__, string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_approveJoin> result__;
                    try
                    {
                        checkTwowayOnly__(__approveJoin_name);
                        result__ = begin_approveJoin(applyId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_approveJoin>(this, __approveJoin_name, approveJoin_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_beginChallenge> begin_beginChallenge()
                {
                    return begin_beginChallenge(null, false, null, null);
                }

                /// <summary>
                /// 开始挑战副本 返回FactionCopyResultView
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_beginChallenge> begin_beginChallenge(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_beginChallenge(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_beginChallenge(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginChallenge(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_beginChallenge(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginChallenge(ctx__, true, cb__, cookie__);
                }

                private const string __beginChallenge_name = "beginChallenge";

                public com.XSanGo.Protocol.FactionCopyResultView end_beginChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __beginChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.FactionCopyResultView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.FactionCopyResultView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_beginChallenge> begin_beginChallenge(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__beginChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_beginChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__beginChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void beginChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_beginChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.FactionCopyResultView ret__;
                    try
                    {
                        ret__ = end_beginChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 开始挑战副本 返回FactionCopyResultView
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool beginChallenge_async(com.XSanGo.Protocol.AMI_Faction_beginChallenge cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_beginChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginChallenge_name);
                        result__ = begin_beginChallenge();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 开始挑战副本 返回FactionCopyResultView
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool beginChallenge_async(com.XSanGo.Protocol.AMI_Faction_beginChallenge cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_beginChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginChallenge_name);
                        result__ = begin_beginChallenge(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_cancelApplication> begin_cancelApplication(string factionId)
                {
                    return begin_cancelApplication(factionId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_cancelApplication> begin_cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_cancelApplication(factionId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_cancelApplication(string factionId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_cancelApplication(factionId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_cancelApplication(factionId, ctx__, true, cb__, cookie__);
                }

                private const string __cancelApplication_name = "cancelApplication";

                public void end_cancelApplication(Ice.AsyncResult r__)
                {
                    end__(r__, __cancelApplication_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_cancelApplication> begin_cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_cancelApplication> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_cancelApplication>(this, __cancelApplication_name, cancelApplication_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__cancelApplication_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(factionId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void cancelApplication_completed__(com.XSanGo.Protocol.Callback_Faction_cancelApplication cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool cancelApplication_async(com.XSanGo.Protocol.AMI_Faction_cancelApplication cb__, string factionId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_cancelApplication> result__ = begin_cancelApplication(factionId);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool cancelApplication_async(com.XSanGo.Protocol.AMI_Faction_cancelApplication cb__, string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_cancelApplication> result__ = begin_cancelApplication(factionId, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy> begin_closeFactionCopy()
                {
                    return begin_closeFactionCopy(null, false, null, null);
                }

                /// <summary>
                /// 关闭开启的副本
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy> begin_closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_closeFactionCopy(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_closeFactionCopy(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_closeFactionCopy(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_closeFactionCopy(ctx__, true, cb__, cookie__);
                }

                private const string __closeFactionCopy_name = "closeFactionCopy";

                public void end_closeFactionCopy(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __closeFactionCopy_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy> begin_closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__closeFactionCopy_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy>(this, __closeFactionCopy_name, closeFactionCopy_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__closeFactionCopy_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void closeFactionCopy_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_closeFactionCopy cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_closeFactionCopy(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 关闭开启的副本
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool closeFactionCopy_async(com.XSanGo.Protocol.AMI_Faction_closeFactionCopy cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy> result__;
                    try
                    {
                        checkTwowayOnly__(__closeFactionCopy_name);
                        result__ = begin_closeFactionCopy();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy>(this, __closeFactionCopy_name, closeFactionCopy_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 关闭开启的副本
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool closeFactionCopy_async(com.XSanGo.Protocol.AMI_Faction_closeFactionCopy cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy> result__;
                    try
                    {
                        checkTwowayOnly__(__closeFactionCopy_name);
                        result__ = begin_closeFactionCopy(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_closeFactionCopy>(this, __closeFactionCopy_name, closeFactionCopy_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_createFaction> begin_createFaction(string name, string icon)
                {
                    return begin_createFaction(name, icon, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_createFaction> begin_createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_createFaction(name, icon, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_createFaction(string name, string icon, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_createFaction(name, icon, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_createFaction(name, icon, ctx__, true, cb__, cookie__);
                }

                private const string __createFaction_name = "createFaction";

                public void end_createFaction(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __createFaction_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_createFaction> begin_createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__createFaction_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_createFaction> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_createFaction>(this, __createFaction_name, createFaction_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__createFaction_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(name);
                        os__.writeString(icon);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void createFaction_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_createFaction cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_createFaction(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool createFaction_async(com.XSanGo.Protocol.AMI_Faction_createFaction cb__, string name, string icon)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_createFaction> result__;
                    try
                    {
                        checkTwowayOnly__(__createFaction_name);
                        result__ = begin_createFaction(name, icon);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_createFaction>(this, __createFaction_name, createFaction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool createFaction_async(com.XSanGo.Protocol.AMI_Faction_createFaction cb__, string name, string icon, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_createFaction> result__;
                    try
                    {
                        checkTwowayOnly__(__createFaction_name);
                        result__ = begin_createFaction(name, icon, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_createFaction>(this, __createFaction_name, createFaction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_deleteMember> begin_deleteMember(string roleId)
                {
                    return begin_deleteMember(roleId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_deleteMember> begin_deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_deleteMember(roleId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_deleteMember(string roleId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_deleteMember(roleId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_deleteMember(roleId, ctx__, true, cb__, cookie__);
                }

                private const string __deleteMember_name = "deleteMember";

                public void end_deleteMember(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __deleteMember_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_deleteMember> begin_deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__deleteMember_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_deleteMember> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_deleteMember>(this, __deleteMember_name, deleteMember_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__deleteMember_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(roleId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void deleteMember_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_deleteMember cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_deleteMember(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool deleteMember_async(com.XSanGo.Protocol.AMI_Faction_deleteMember cb__, string roleId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_deleteMember> result__;
                    try
                    {
                        checkTwowayOnly__(__deleteMember_name);
                        result__ = begin_deleteMember(roleId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_deleteMember>(this, __deleteMember_name, deleteMember_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool deleteMember_async(com.XSanGo.Protocol.AMI_Faction_deleteMember cb__, string roleId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_deleteMember> result__;
                    try
                    {
                        checkTwowayOnly__(__deleteMember_name);
                        result__ = begin_deleteMember(roleId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_deleteMember>(this, __deleteMember_name, deleteMember_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_denyJoin> begin_denyJoin(string applyId)
                {
                    return begin_denyJoin(applyId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_denyJoin> begin_denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_denyJoin(applyId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_denyJoin(string applyId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_denyJoin(applyId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_denyJoin(applyId, ctx__, true, cb__, cookie__);
                }

                private const string __denyJoin_name = "denyJoin";

                public void end_denyJoin(Ice.AsyncResult r__)
                {
                    end__(r__, __denyJoin_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_denyJoin> begin_denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_denyJoin> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_denyJoin>(this, __denyJoin_name, denyJoin_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__denyJoin_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(applyId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void denyJoin_completed__(com.XSanGo.Protocol.Callback_Faction_denyJoin cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool denyJoin_async(com.XSanGo.Protocol.AMI_Faction_denyJoin cb__, string applyId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_denyJoin> result__ = begin_denyJoin(applyId);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool denyJoin_async(com.XSanGo.Protocol.AMI_Faction_denyJoin cb__, string applyId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_denyJoin> result__ = begin_denyJoin(applyId, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_divorce> begin_divorce()
                {
                    return begin_divorce(null, false, null, null);
                }

                /// <summary>
                /// 退出公会
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_divorce> begin_divorce(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_divorce(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_divorce(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_divorce(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_divorce(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_divorce(ctx__, true, cb__, cookie__);
                }

                private const string __divorce_name = "divorce";

                public void end_divorce(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __divorce_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_divorce> begin_divorce(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__divorce_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_divorce> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_divorce>(this, __divorce_name, divorce_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__divorce_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void divorce_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_divorce cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_divorce(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 退出公会
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool divorce_async(com.XSanGo.Protocol.AMI_Faction_divorce cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_divorce> result__;
                    try
                    {
                        checkTwowayOnly__(__divorce_name);
                        result__ = begin_divorce();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_divorce>(this, __divorce_name, divorce_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 退出公会
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool divorce_async(com.XSanGo.Protocol.AMI_Faction_divorce cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_divorce> result__;
                    try
                    {
                        checkTwowayOnly__(__divorce_name);
                        result__ = begin_divorce(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_divorce>(this, __divorce_name, divorce_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_donation> begin_donation(int num)
                {
                    return begin_donation(num, null, false, null, null);
                }

                /// <summary>
                /// 公会捐赠 num-捐赠数量
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_donation> begin_donation(int num, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_donation(num, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_donation(int num, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_donation(num, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_donation(int num, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_donation(num, ctx__, true, cb__, cookie__);
                }

                private const string __donation_name = "donation";

                public void end_donation(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __donation_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_donation> begin_donation(int num, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__donation_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_donation> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_donation>(this, __donation_name, donation_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__donation_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(num);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void donation_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_donation cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_donation(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 公会捐赠 num-捐赠数量
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool donation_async(com.XSanGo.Protocol.AMI_Faction_donation cb__, int num)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_donation> result__;
                    try
                    {
                        checkTwowayOnly__(__donation_name);
                        result__ = begin_donation(num);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_donation>(this, __donation_name, donation_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 公会捐赠 num-捐赠数量
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool donation_async(com.XSanGo.Protocol.AMI_Faction_donation cb__, int num, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_donation> result__;
                    try
                    {
                        checkTwowayOnly__(__donation_name);
                        result__ = begin_donation(num, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_donation>(this, __donation_name, donation_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_endChallenge> begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood)
                {
                    return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null, false, null, null);
                }

                /// <summary>
                /// 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_endChallenge> begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, ctx__, true, cb__, cookie__);
                }

                private const string __endChallenge_name = "endChallenge";

                public void end_endChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __endChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_endChallenge> begin_endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__endChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_endChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_endChallenge>(this, __endChallenge_name, endChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__endChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        com.XSanGo.Protocol.MonsterViewSeqHelper.write(os__, monsterViews);
                        os__.writeBool(isKill);
                        os__.writeBool(isHurtBlood);
                        os__.writeInt(dropBlood);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void endChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_endChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_endChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool endChallenge_async(com.XSanGo.Protocol.AMI_Faction_endChallenge cb__, com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_endChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endChallenge_name);
                        result__ = begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_endChallenge>(this, __endChallenge_name, endChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool endChallenge_async(com.XSanGo.Protocol.AMI_Faction_endChallenge cb__, com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_endChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endChallenge_name);
                        result__ = begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_endChallenge>(this, __endChallenge_name, endChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionConfig> begin_factionConfig(string icon, string qq, string notice, int joinType)
                {
                    return begin_factionConfig(icon, qq, notice, joinType, null, false, null, null);
                }

                /// <summary>
                /// 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionConfig> begin_factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_factionConfig(icon, qq, notice, joinType, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_factionConfig(string icon, string qq, string notice, int joinType, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_factionConfig(icon, qq, notice, joinType, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_factionConfig(icon, qq, notice, joinType, ctx__, true, cb__, cookie__);
                }

                private const string __factionConfig_name = "factionConfig";

                public void end_factionConfig(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __factionConfig_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionConfig> begin_factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__factionConfig_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionConfig> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionConfig>(this, __factionConfig_name, factionConfig_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__factionConfig_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(icon);
                        os__.writeString(qq);
                        os__.writeString(notice);
                        os__.writeInt(joinType);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void factionConfig_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_factionConfig cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_factionConfig(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool factionConfig_async(com.XSanGo.Protocol.AMI_Faction_factionConfig cb__, string icon, string qq, string notice, int joinType)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionConfig> result__;
                    try
                    {
                        checkTwowayOnly__(__factionConfig_name);
                        result__ = begin_factionConfig(icon, qq, notice, joinType);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionConfig>(this, __factionConfig_name, factionConfig_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool factionConfig_async(com.XSanGo.Protocol.AMI_Faction_factionConfig cb__, string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionConfig> result__;
                    try
                    {
                        checkTwowayOnly__(__factionConfig_name);
                        result__ = begin_factionConfig(icon, qq, notice, joinType, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionConfig>(this, __factionConfig_name, factionConfig_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo> begin_factionCopyInfo()
                {
                    return begin_factionCopyInfo(null, false, null, null);
                }

                /// <summary>
                /// 副本进度等信息 返回FactionCopyInfoView的lua
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo> begin_factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_factionCopyInfo(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_factionCopyInfo(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_factionCopyInfo(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_factionCopyInfo(ctx__, true, cb__, cookie__);
                }

                private const string __factionCopyInfo_name = "factionCopyInfo";

                public string end_factionCopyInfo(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __factionCopyInfo_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo> begin_factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__factionCopyInfo_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo>(this, __factionCopyInfo_name, factionCopyInfo_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__factionCopyInfo_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void factionCopyInfo_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_factionCopyInfo cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_factionCopyInfo(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 副本进度等信息 返回FactionCopyInfoView的lua
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool factionCopyInfo_async(com.XSanGo.Protocol.AMI_Faction_factionCopyInfo cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo> result__;
                    try
                    {
                        checkTwowayOnly__(__factionCopyInfo_name);
                        result__ = begin_factionCopyInfo();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo>(this, __factionCopyInfo_name, factionCopyInfo_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 副本进度等信息 返回FactionCopyInfoView的lua
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool factionCopyInfo_async(com.XSanGo.Protocol.AMI_Faction_factionCopyInfo cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo> result__;
                    try
                    {
                        checkTwowayOnly__(__factionCopyInfo_name);
                        result__ = begin_factionCopyInfo(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionCopyInfo>(this, __factionCopyInfo_name, factionCopyInfo_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyList> begin_factionCopyList()
                {
                    return begin_factionCopyList(null, false, null, null);
                }

                /// <summary>
                /// 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyList> begin_factionCopyList(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_factionCopyList(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_factionCopyList(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_factionCopyList(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_factionCopyList(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_factionCopyList(ctx__, true, cb__, cookie__);
                }

                private const string __factionCopyList_name = "factionCopyList";

                public string end_factionCopyList(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __factionCopyList_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyList> begin_factionCopyList(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__factionCopyList_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionCopyList> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionCopyList>(this, __factionCopyList_name, factionCopyList_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__factionCopyList_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void factionCopyList_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_factionCopyList cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_factionCopyList(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool factionCopyList_async(com.XSanGo.Protocol.AMI_Faction_factionCopyList cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyList> result__;
                    try
                    {
                        checkTwowayOnly__(__factionCopyList_name);
                        result__ = begin_factionCopyList();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionCopyList>(this, __factionCopyList_name, factionCopyList_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool factionCopyList_async(com.XSanGo.Protocol.AMI_Faction_factionCopyList cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_factionCopyList> result__;
                    try
                    {
                        checkTwowayOnly__(__factionCopyList_name);
                        result__ = begin_factionCopyList(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_factionCopyList>(this, __factionCopyList_name, factionCopyList_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_findFaction> begin_findFaction(string factionId)
                {
                    return begin_findFaction(factionId, null, false, null, null);
                }

                /// <summary>
                /// 查找公会 返回FactionListView的lua
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_findFaction> begin_findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_findFaction(factionId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_findFaction(string factionId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_findFaction(factionId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_findFaction(factionId, ctx__, true, cb__, cookie__);
                }

                private const string __findFaction_name = "findFaction";

                public string end_findFaction(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __findFaction_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_findFaction> begin_findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__findFaction_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_findFaction> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_findFaction>(this, __findFaction_name, findFaction_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__findFaction_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(factionId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void findFaction_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_findFaction cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_findFaction(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 查找公会 返回FactionListView的lua
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool findFaction_async(com.XSanGo.Protocol.AMI_Faction_findFaction cb__, string factionId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_findFaction> result__;
                    try
                    {
                        checkTwowayOnly__(__findFaction_name);
                        result__ = begin_findFaction(factionId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_findFaction>(this, __findFaction_name, findFaction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 查找公会 返回FactionListView的lua
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool findFaction_async(com.XSanGo.Protocol.AMI_Faction_findFaction cb__, string factionId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_findFaction> result__;
                    try
                    {
                        checkTwowayOnly__(__findFaction_name);
                        result__ = begin_findFaction(factionId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_findFaction>(this, __findFaction_name, findFaction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys> begin_getFactionHistorys()
                {
                    return begin_getFactionHistorys(null, false, null, null);
                }

                /// <summary>
                /// 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys> begin_getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_getFactionHistorys(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_getFactionHistorys(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getFactionHistorys(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getFactionHistorys(ctx__, true, cb__, cookie__);
                }

                private const string __getFactionHistorys_name = "getFactionHistorys";

                public string end_getFactionHistorys(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __getFactionHistorys_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys> begin_getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__getFactionHistorys_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys>(this, __getFactionHistorys_name, getFactionHistorys_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__getFactionHistorys_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void getFactionHistorys_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_getFactionHistorys cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_getFactionHistorys(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool getFactionHistorys_async(com.XSanGo.Protocol.AMI_Faction_getFactionHistorys cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys> result__;
                    try
                    {
                        checkTwowayOnly__(__getFactionHistorys_name);
                        result__ = begin_getFactionHistorys();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys>(this, __getFactionHistorys_name, getFactionHistorys_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool getFactionHistorys_async(com.XSanGo.Protocol.AMI_Faction_getFactionHistorys cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys> result__;
                    try
                    {
                        checkTwowayOnly__(__getFactionHistorys_name);
                        result__ = begin_getFactionHistorys(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getFactionHistorys>(this, __getFactionHistorys_name, getFactionHistorys_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionList> begin_getFactionList()
                {
                    return begin_getFactionList(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionList> begin_getFactionList(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_getFactionList(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_getFactionList(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getFactionList(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_getFactionList(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getFactionList(ctx__, true, cb__, cookie__);
                }

                private const string __getFactionList_name = "getFactionList";

                public string end_getFactionList(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __getFactionList_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionList> begin_getFactionList(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__getFactionList_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getFactionList> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getFactionList>(this, __getFactionList_name, getFactionList_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__getFactionList_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void getFactionList_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_getFactionList cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_getFactionList(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool getFactionList_async(com.XSanGo.Protocol.AMI_Faction_getFactionList cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionList> result__;
                    try
                    {
                        checkTwowayOnly__(__getFactionList_name);
                        result__ = begin_getFactionList();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getFactionList>(this, __getFactionList_name, getFactionList_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool getFactionList_async(com.XSanGo.Protocol.AMI_Faction_getFactionList cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getFactionList> result__;
                    try
                    {
                        checkTwowayOnly__(__getFactionList_name);
                        result__ = begin_getFactionList(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getFactionList>(this, __getFactionList_name, getFactionList_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList> begin_getJoinRequestList()
                {
                    return begin_getJoinRequestList(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList> begin_getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_getJoinRequestList(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_getJoinRequestList(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getJoinRequestList(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getJoinRequestList(ctx__, true, cb__, cookie__);
                }

                private const string __getJoinRequestList_name = "getJoinRequestList";

                public string end_getJoinRequestList(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __getJoinRequestList_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList> begin_getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__getJoinRequestList_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList>(this, __getJoinRequestList_name, getJoinRequestList_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__getJoinRequestList_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void getJoinRequestList_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_getJoinRequestList cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_getJoinRequestList(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool getJoinRequestList_async(com.XSanGo.Protocol.AMI_Faction_getJoinRequestList cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList> result__;
                    try
                    {
                        checkTwowayOnly__(__getJoinRequestList_name);
                        result__ = begin_getJoinRequestList();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList>(this, __getJoinRequestList_name, getJoinRequestList_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool getJoinRequestList_async(com.XSanGo.Protocol.AMI_Faction_getJoinRequestList cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList> result__;
                    try
                    {
                        checkTwowayOnly__(__getJoinRequestList_name);
                        result__ = begin_getJoinRequestList(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getJoinRequestList>(this, __getJoinRequestList_name, getJoinRequestList_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getMyFaction> begin_getMyFaction()
                {
                    return begin_getMyFaction(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getMyFaction> begin_getMyFaction(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_getMyFaction(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_getMyFaction(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getMyFaction(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_getMyFaction(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getMyFaction(ctx__, true, cb__, cookie__);
                }

                private const string __getMyFaction_name = "getMyFaction";

                public string end_getMyFaction(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __getMyFaction_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getMyFaction> begin_getMyFaction(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__getMyFaction_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getMyFaction> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getMyFaction>(this, __getMyFaction_name, getMyFaction_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__getMyFaction_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void getMyFaction_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_getMyFaction cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_getMyFaction(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool getMyFaction_async(com.XSanGo.Protocol.AMI_Faction_getMyFaction cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getMyFaction> result__;
                    try
                    {
                        checkTwowayOnly__(__getMyFaction_name);
                        result__ = begin_getMyFaction();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getMyFaction>(this, __getMyFaction_name, getMyFaction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool getMyFaction_async(com.XSanGo.Protocol.AMI_Faction_getMyFaction cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_getMyFaction> result__;
                    try
                    {
                        checkTwowayOnly__(__getMyFaction_name);
                        result__ = begin_getMyFaction(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_getMyFaction>(this, __getMyFaction_name, getMyFaction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_openFactionCopy> begin_openFactionCopy(int copyId)
                {
                    return begin_openFactionCopy(copyId, null, false, null, null);
                }

                /// <summary>
                /// 开启副本 返回还可开启的次数
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_openFactionCopy> begin_openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_openFactionCopy(copyId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_openFactionCopy(int copyId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_openFactionCopy(copyId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_openFactionCopy(copyId, ctx__, true, cb__, cookie__);
                }

                private const string __openFactionCopy_name = "openFactionCopy";

                public int end_openFactionCopy(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __openFactionCopy_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        int ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readInt();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_openFactionCopy> begin_openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__openFactionCopy_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_openFactionCopy> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_openFactionCopy>(this, __openFactionCopy_name, openFactionCopy_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__openFactionCopy_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(copyId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void openFactionCopy_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_openFactionCopy cb__, Ice.ExceptionCallback excb__)
                {
                    int ret__;
                    try
                    {
                        ret__ = end_openFactionCopy(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 开启副本 返回还可开启的次数
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool openFactionCopy_async(com.XSanGo.Protocol.AMI_Faction_openFactionCopy cb__, int copyId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_openFactionCopy> result__;
                    try
                    {
                        checkTwowayOnly__(__openFactionCopy_name);
                        result__ = begin_openFactionCopy(copyId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_openFactionCopy>(this, __openFactionCopy_name, openFactionCopy_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 开启副本 返回还可开启的次数
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool openFactionCopy_async(com.XSanGo.Protocol.AMI_Faction_openFactionCopy cb__, int copyId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_openFactionCopy> result__;
                    try
                    {
                        checkTwowayOnly__(__openFactionCopy_name);
                        result__ = begin_openFactionCopy(copyId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_openFactionCopy>(this, __openFactionCopy_name, openFactionCopy_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_setCommon> begin_setCommon(string targetId)
                {
                    return begin_setCommon(targetId, null, false, null, null);
                }

                /// <summary>
                /// 设置成普通会员
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_setCommon> begin_setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_setCommon(targetId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_setCommon(string targetId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_setCommon(targetId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_setCommon(targetId, ctx__, true, cb__, cookie__);
                }

                private const string __setCommon_name = "setCommon";

                public void end_setCommon(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __setCommon_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_setCommon> begin_setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__setCommon_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_setCommon> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_setCommon>(this, __setCommon_name, setCommon_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__setCommon_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void setCommon_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_setCommon cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_setCommon(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 设置成普通会员
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool setCommon_async(com.XSanGo.Protocol.AMI_Faction_setCommon cb__, string targetId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_setCommon> result__;
                    try
                    {
                        checkTwowayOnly__(__setCommon_name);
                        result__ = begin_setCommon(targetId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_setCommon>(this, __setCommon_name, setCommon_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 设置成普通会员
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool setCommon_async(com.XSanGo.Protocol.AMI_Faction_setCommon cb__, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_setCommon> result__;
                    try
                    {
                        checkTwowayOnly__(__setCommon_name);
                        result__ = begin_setCommon(targetId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_setCommon>(this, __setCommon_name, setCommon_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_transferFaction> begin_transferFaction(string targetId)
                {
                    return begin_transferFaction(targetId, null, false, null, null);
                }

                /// <summary>
                /// 转让公会(升为会长)
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_transferFaction> begin_transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_transferFaction(targetId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_transferFaction(string targetId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_transferFaction(targetId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_transferFaction(targetId, ctx__, true, cb__, cookie__);
                }

                private const string __transferFaction_name = "transferFaction";

                public void end_transferFaction(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __transferFaction_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_transferFaction> begin_transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__transferFaction_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_transferFaction> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_transferFaction>(this, __transferFaction_name, transferFaction_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__transferFaction_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void transferFaction_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_transferFaction cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_transferFaction(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 转让公会(升为会长)
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool transferFaction_async(com.XSanGo.Protocol.AMI_Faction_transferFaction cb__, string targetId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_transferFaction> result__;
                    try
                    {
                        checkTwowayOnly__(__transferFaction_name);
                        result__ = begin_transferFaction(targetId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_transferFaction>(this, __transferFaction_name, transferFaction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 转让公会(升为会长)
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool transferFaction_async(com.XSanGo.Protocol.AMI_Faction_transferFaction cb__, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_transferFaction> result__;
                    try
                    {
                        checkTwowayOnly__(__transferFaction_name);
                        result__ = begin_transferFaction(targetId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_transferFaction>(this, __transferFaction_name, transferFaction_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_upElder> begin_upElder(string targetId)
                {
                    return begin_upElder(targetId, null, false, null, null);
                }

                /// <summary>
                /// 升为长老
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_upElder> begin_upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_upElder(targetId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_upElder(string targetId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_upElder(targetId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_upElder(targetId, ctx__, true, cb__, cookie__);
                }

                private const string __upElder_name = "upElder";

                public void end_upElder(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __upElder_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_upElder> begin_upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__upElder_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_upElder> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_upElder>(this, __upElder_name, upElder_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__upElder_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void upElder_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_upElder cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_upElder(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 升为长老
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool upElder_async(com.XSanGo.Protocol.AMI_Faction_upElder cb__, string targetId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_upElder> result__;
                    try
                    {
                        checkTwowayOnly__(__upElder_name);
                        result__ = begin_upElder(targetId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_upElder>(this, __upElder_name, upElder_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 升为长老
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool upElder_async(com.XSanGo.Protocol.AMI_Faction_upElder cb__, string targetId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_upElder> result__;
                    try
                    {
                        checkTwowayOnly__(__upElder_name);
                        result__ = begin_upElder(targetId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_upElder>(this, __upElder_name, upElder_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_updateNotice> begin_updateNotice(string newNotice)
                {
                    return begin_updateNotice(newNotice, null, false, null, null);
                }

                /// <summary>
                /// 修改公会公告
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_updateNotice> begin_updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_updateNotice(newNotice, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_updateNotice(string newNotice, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_updateNotice(newNotice, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_updateNotice(newNotice, ctx__, true, cb__, cookie__);
                }

                private const string __updateNotice_name = "updateNotice";

                public void end_updateNotice(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __updateNotice_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_updateNotice> begin_updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__updateNotice_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_updateNotice> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_updateNotice>(this, __updateNotice_name, updateNotice_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__updateNotice_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(newNotice);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void updateNotice_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Faction_updateNotice cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_updateNotice(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                /// <summary>
                /// 修改公会公告
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool updateNotice_async(com.XSanGo.Protocol.AMI_Faction_updateNotice cb__, string newNotice)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_updateNotice> result__;
                    try
                    {
                        checkTwowayOnly__(__updateNotice_name);
                        result__ = begin_updateNotice(newNotice);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_updateNotice>(this, __updateNotice_name, updateNotice_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 修改公会公告
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool updateNotice_async(com.XSanGo.Protocol.AMI_Faction_updateNotice cb__, string newNotice, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Faction_updateNotice> result__;
                    try
                    {
                        checkTwowayOnly__(__updateNotice_name);
                        result__ = begin_updateNotice(newNotice, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Faction_updateNotice>(this, __updateNotice_name, updateNotice_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static FactionPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    FactionPrx r = b as FactionPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        FactionPrxHelper h = new FactionPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static FactionPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    FactionPrx r = b as FactionPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        FactionPrxHelper h = new FactionPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static FactionPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            FactionPrxHelper h = new FactionPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static FactionPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            FactionPrxHelper h = new FactionPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static FactionPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    FactionPrx r = b as FactionPrx;
                    if(r == null)
                    {
                        FactionPrxHelper h = new FactionPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static FactionPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    FactionPrxHelper h = new FactionPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::Faction"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new FactionDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new FactionDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, FactionPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static FactionPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        FactionPrxHelper result = new FactionPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface FactionDel_ : Ice.ObjectDel_
            {
                void createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string getFactionList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string getMyFaction(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void divorce(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void donation(int num, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string factionCopyList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                int openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.FactionCopyResultView beginChallenge(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class FactionDelM_ : Ice.ObjectDelM_, FactionDel_
            {
                public void applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("applyFor", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(factionId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("approveJoin", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(applyId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public com.XSanGo.Protocol.FactionCopyResultView beginChallenge(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("beginChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.FactionCopyResultView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.FactionCopyResultView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("cancelApplication", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(factionId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("closeFactionCopy", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("createFaction", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(name);
                            os__.writeString(icon);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("deleteMember", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(roleId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("denyJoin", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(applyId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void divorce(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("divorce", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void donation(int num, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("donation", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeInt(num);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("endChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            com.XSanGo.Protocol.MonsterViewSeqHelper.write(os__, monsterViews);
                            os__.writeBool(isKill);
                            os__.writeBool(isHurtBlood);
                            os__.writeInt(dropBlood);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("factionConfig", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(icon);
                            os__.writeString(qq);
                            os__.writeString(notice);
                            os__.writeInt(joinType);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("factionCopyInfo", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string factionCopyList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("factionCopyList", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("findFaction", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(factionId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("getFactionHistorys", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string getFactionList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("getFactionList", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("getJoinRequestList", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string getMyFaction(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("getMyFaction", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public int openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("openFactionCopy", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeInt(copyId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            int ret__;
                            ret__ = is__.readInt();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("setCommon", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("transferFaction", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("upElder", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("updateNotice", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(newNotice);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class FactionDelD_ : Ice.ObjectDelD_, FactionDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void applyFor(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "applyFor", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.applyFor(factionId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void approveJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.FactionCopyResultView beginChallenge(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "beginChallenge", Ice.OperationMode.Normal, context__);
                    com.XSanGo.Protocol.FactionCopyResultView result__ = new com.XSanGo.Protocol.FactionCopyResultView();
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.beginChallenge(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void cancelApplication(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "cancelApplication", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.cancelApplication(factionId, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void closeFactionCopy(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "closeFactionCopy", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.closeFactionCopy(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void createFaction(string name, string icon, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void deleteMember(string roleId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "deleteMember", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.deleteMember(roleId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void denyJoin(string applyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "denyJoin", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.denyJoin(applyId, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void divorce(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "divorce", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.divorce(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void donation(int num, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "donation", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.donation(num, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "endChallenge", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void factionConfig(string icon, string qq, string notice, int joinType, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "factionConfig", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.factionConfig(icon, qq, notice, joinType, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string factionCopyInfo(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "factionCopyInfo", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.factionCopyInfo(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string factionCopyList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "factionCopyList", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.factionCopyList(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string findFaction(string factionId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "findFaction", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.findFaction(factionId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string getFactionHistorys(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "getFactionHistorys", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        result__ = servant__.getFactionHistorys(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string getFactionList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "getFactionList", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        result__ = servant__.getFactionList(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string getJoinRequestList(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string getMyFaction(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public int openFactionCopy(int copyId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "openFactionCopy", Ice.OperationMode.Normal, context__);
                    int result__ = 0;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.openFactionCopy(copyId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void setCommon(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "setCommon", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.setCommon(targetId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void transferFaction(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "transferFaction", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.transferFaction(targetId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void upElder(string targetId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "upElder", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.upElder(targetId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void updateNotice(string newNotice, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "updateNotice", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Faction servant__ = null;
                        try
                        {
                            servant__ = (Faction)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.updateNotice(newNotice, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class FactionDisp_ : Ice.ObjectImpl, Faction
            {
                #region Slice operations

                public void createFaction_async(com.XSanGo.Protocol.AMD_Faction_createFaction cb__, string name, string icon)
                {
                    createFaction_async(cb__, name, icon, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void createFaction_async(com.XSanGo.Protocol.AMD_Faction_createFaction cb__, string name, string icon, Ice.Current current__);

                public string getFactionList()
                {
                    return getFactionList(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string getFactionList(Ice.Current current__);

                public void applyFor(string factionId)
                {
                    applyFor(factionId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void applyFor(string factionId, Ice.Current current__);

                public void cancelApplication(string factionId)
                {
                    cancelApplication(factionId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void cancelApplication(string factionId, Ice.Current current__);

                public void getMyFaction_async(com.XSanGo.Protocol.AMD_Faction_getMyFaction cb__)
                {
                    getMyFaction_async(cb__, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void getMyFaction_async(com.XSanGo.Protocol.AMD_Faction_getMyFaction cb__, Ice.Current current__);

                public void getJoinRequestList_async(com.XSanGo.Protocol.AMD_Faction_getJoinRequestList cb__)
                {
                    getJoinRequestList_async(cb__, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void getJoinRequestList_async(com.XSanGo.Protocol.AMD_Faction_getJoinRequestList cb__, Ice.Current current__);

                public void approveJoin_async(com.XSanGo.Protocol.AMD_Faction_approveJoin cb__, string applyId)
                {
                    approveJoin_async(cb__, applyId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void approveJoin_async(com.XSanGo.Protocol.AMD_Faction_approveJoin cb__, string applyId, Ice.Current current__);

                public void denyJoin(string applyId)
                {
                    denyJoin(applyId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void denyJoin(string applyId, Ice.Current current__);

                public void divorce()
                {
                    divorce(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void divorce(Ice.Current current__);

                public void deleteMember(string roleId)
                {
                    deleteMember(roleId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void deleteMember(string roleId, Ice.Current current__);

                public void updateNotice(string newNotice)
                {
                    updateNotice(newNotice, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void updateNotice(string newNotice, Ice.Current current__);

                public string findFaction(string factionId)
                {
                    return findFaction(factionId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string findFaction(string factionId, Ice.Current current__);

                public void transferFaction(string targetId)
                {
                    transferFaction(targetId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void transferFaction(string targetId, Ice.Current current__);

                public void upElder(string targetId)
                {
                    upElder(targetId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void upElder(string targetId, Ice.Current current__);

                public void setCommon(string targetId)
                {
                    setCommon(targetId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void setCommon(string targetId, Ice.Current current__);

                public void factionConfig(string icon, string qq, string notice, int joinType)
                {
                    factionConfig(icon, qq, notice, joinType, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void factionConfig(string icon, string qq, string notice, int joinType, Ice.Current current__);

                public string getFactionHistorys()
                {
                    return getFactionHistorys(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string getFactionHistorys(Ice.Current current__);

                public void donation(int num)
                {
                    donation(num, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void donation(int num, Ice.Current current__);

                public string factionCopyList()
                {
                    return factionCopyList(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string factionCopyList(Ice.Current current__);

                public int openFactionCopy(int copyId)
                {
                    return openFactionCopy(copyId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract int openFactionCopy(int copyId, Ice.Current current__);

                public void closeFactionCopy()
                {
                    closeFactionCopy(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void closeFactionCopy(Ice.Current current__);

                public string factionCopyInfo()
                {
                    return factionCopyInfo(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string factionCopyInfo(Ice.Current current__);

                public com.XSanGo.Protocol.FactionCopyResultView beginChallenge()
                {
                    return beginChallenge(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract com.XSanGo.Protocol.FactionCopyResultView beginChallenge(Ice.Current current__);

                public void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood)
                {
                    endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void endChallenge(com.XSanGo.Protocol.MonsterView[] monsterViews, bool isKill, bool isHurtBlood, int dropBlood, Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::Faction"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus createFaction___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string name;
                    string icon;
                    name = is__.readString();
                    icon = is__.readString();
                    inS__.endReadParams();
                    AMD_Faction_createFaction cb__ = new _AMD_Faction_createFaction(inS__);
                    try
                    {
                        obj__.createFaction_async(cb__, name, icon, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus getFactionList___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    string ret__ = obj__.getFactionList(current__);
                    IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                    os__.writeString(ret__);
                    inS__.endWriteParams__(true);
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus applyFor___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string factionId;
                    factionId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.applyFor(factionId, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus cancelApplication___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string factionId;
                    factionId = is__.readString();
                    inS__.endReadParams();
                    obj__.cancelApplication(factionId, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus getMyFaction___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    AMD_Faction_getMyFaction cb__ = new _AMD_Faction_getMyFaction(inS__);
                    try
                    {
                        obj__.getMyFaction_async(cb__, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus getJoinRequestList___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    AMD_Faction_getJoinRequestList cb__ = new _AMD_Faction_getJoinRequestList(inS__);
                    try
                    {
                        obj__.getJoinRequestList_async(cb__, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus approveJoin___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string applyId;
                    applyId = is__.readString();
                    inS__.endReadParams();
                    AMD_Faction_approveJoin cb__ = new _AMD_Faction_approveJoin(inS__);
                    try
                    {
                        obj__.approveJoin_async(cb__, applyId, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus denyJoin___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string applyId;
                    applyId = is__.readString();
                    inS__.endReadParams();
                    obj__.denyJoin(applyId, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus divorce___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        obj__.divorce(current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus deleteMember___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string roleId;
                    roleId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.deleteMember(roleId, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus updateNotice___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string newNotice;
                    newNotice = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.updateNotice(newNotice, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus findFaction___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string factionId;
                    factionId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        string ret__ = obj__.findFaction(factionId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus transferFaction___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    targetId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.transferFaction(targetId, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus upElder___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    targetId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.upElder(targetId, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus setCommon___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    targetId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.setCommon(targetId, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus factionConfig___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string icon;
                    string qq;
                    string notice;
                    int joinType;
                    icon = is__.readString();
                    qq = is__.readString();
                    notice = is__.readString();
                    joinType = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        obj__.factionConfig(icon, qq, notice, joinType, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus getFactionHistorys___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    string ret__ = obj__.getFactionHistorys(current__);
                    IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                    os__.writeString(ret__);
                    inS__.endWriteParams__(true);
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus donation___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    int num;
                    num = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        obj__.donation(num, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus factionCopyList___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.factionCopyList(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus openFactionCopy___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    int copyId;
                    copyId = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        int ret__ = obj__.openFactionCopy(copyId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus closeFactionCopy___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        obj__.closeFactionCopy(current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus factionCopyInfo___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.factionCopyInfo(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus beginChallenge___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        com.XSanGo.Protocol.FactionCopyResultView ret__ = obj__.beginChallenge(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        if(ret__ == null)
                        {
                            com.XSanGo.Protocol.FactionCopyResultView tmp__ = new com.XSanGo.Protocol.FactionCopyResultView();
                            tmp__.write__(os__);
                        }
                        else
                        {
                            ret__.write__(os__);
                        }
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus endChallenge___(Faction obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    com.XSanGo.Protocol.MonsterView[] monsterViews;
                    bool isKill;
                    bool isHurtBlood;
                    int dropBlood;
                    monsterViews = com.XSanGo.Protocol.MonsterViewSeqHelper.read(is__);
                    isKill = is__.readBool();
                    isHurtBlood = is__.readBool();
                    dropBlood = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        obj__.endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                private static string[] all__ =
                {
                    "applyFor",
                    "approveJoin",
                    "beginChallenge",
                    "cancelApplication",
                    "closeFactionCopy",
                    "createFaction",
                    "deleteMember",
                    "denyJoin",
                    "divorce",
                    "donation",
                    "endChallenge",
                    "factionConfig",
                    "factionCopyInfo",
                    "factionCopyList",
                    "findFaction",
                    "getFactionHistorys",
                    "getFactionList",
                    "getJoinRequestList",
                    "getMyFaction",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "openFactionCopy",
                    "setCommon",
                    "transferFaction",
                    "upElder",
                    "updateNotice"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return applyFor___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return approveJoin___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return beginChallenge___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return cancelApplication___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return closeFactionCopy___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return createFaction___(this, inS__, current__);
                        }
                        case 6:
                        {
                            return deleteMember___(this, inS__, current__);
                        }
                        case 7:
                        {
                            return denyJoin___(this, inS__, current__);
                        }
                        case 8:
                        {
                            return divorce___(this, inS__, current__);
                        }
                        case 9:
                        {
                            return donation___(this, inS__, current__);
                        }
                        case 10:
                        {
                            return endChallenge___(this, inS__, current__);
                        }
                        case 11:
                        {
                            return factionConfig___(this, inS__, current__);
                        }
                        case 12:
                        {
                            return factionCopyInfo___(this, inS__, current__);
                        }
                        case 13:
                        {
                            return factionCopyList___(this, inS__, current__);
                        }
                        case 14:
                        {
                            return findFaction___(this, inS__, current__);
                        }
                        case 15:
                        {
                            return getFactionHistorys___(this, inS__, current__);
                        }
                        case 16:
                        {
                            return getFactionList___(this, inS__, current__);
                        }
                        case 17:
                        {
                            return getJoinRequestList___(this, inS__, current__);
                        }
                        case 18:
                        {
                            return getMyFaction___(this, inS__, current__);
                        }
                        case 19:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 20:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 21:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 22:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                        case 23:
                        {
                            return openFactionCopy___(this, inS__, current__);
                        }
                        case 24:
                        {
                            return setCommon___(this, inS__, current__);
                        }
                        case 25:
                        {
                            return transferFaction___(this, inS__, current__);
                        }
                        case 26:
                        {
                            return upElder___(this, inS__, current__);
                        }
                        case 27:
                        {
                            return updateNotice___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_createFaction : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Faction_createFaction : Ice.AMDCallback
            {
                void ice_response();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Faction_createFaction : IceInternal.IncomingAsync, AMD_Faction_createFaction
            {
                public _AMD_Faction_createFaction(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response()
                {
                    if(validateResponse__(true))
                    {
                        writeEmptyParams__();
                        response__();
                    }
                }

                override public void ice_exception(_System.Exception ex)
                {
                    try
                    {
                        throw ex;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(_System.Exception ex__)
                    {
                        base.ice_exception(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_getFactionList : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_applyFor : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_cancelApplication : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_getMyFaction : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Faction_getMyFaction : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Faction_getMyFaction : IceInternal.IncomingAsync, AMD_Faction_getMyFaction
            {
                public _AMD_Faction_getMyFaction(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_getJoinRequestList : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Faction_getJoinRequestList : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Faction_getJoinRequestList : IceInternal.IncomingAsync, AMD_Faction_getJoinRequestList
            {
                public _AMD_Faction_getJoinRequestList(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }

                override public void ice_exception(_System.Exception ex)
                {
                    try
                    {
                        throw ex;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(_System.Exception ex__)
                    {
                        base.ice_exception(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_approveJoin : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Faction_approveJoin : Ice.AMDCallback
            {
                void ice_response();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Faction_approveJoin : IceInternal.IncomingAsync, AMD_Faction_approveJoin
            {
                public _AMD_Faction_approveJoin(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response()
                {
                    if(validateResponse__(true))
                    {
                        writeEmptyParams__();
                        response__();
                    }
                }

                override public void ice_exception(_System.Exception ex)
                {
                    try
                    {
                        throw ex;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(_System.Exception ex__)
                    {
                        base.ice_exception(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_denyJoin : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 退出公会
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_divorce : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_deleteMember : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 修改公会公告
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_updateNotice : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 查找公会 返回FactionListView的lua
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_findFaction : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 转让公会(升为会长)
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_transferFaction : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 升为长老
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_upElder : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 设置成普通会员
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_setCommon : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_factionConfig : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_getFactionHistorys : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 公会捐赠 num-捐赠数量
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_donation : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_factionCopyList : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 开启副本 返回还可开启的次数
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_openFactionCopy : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(int ret__);

                public void response__(int ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 关闭开启的副本
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_closeFactionCopy : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            /// <summary>
            /// 副本进度等信息 返回FactionCopyInfoView的lua
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_factionCopyInfo : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 开始挑战副本 返回FactionCopyResultView
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_beginChallenge : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(com.XSanGo.Protocol.FactionCopyResultView ret__);

                public void response__(com.XSanGo.Protocol.FactionCopyResultView ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Faction_endChallenge : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }
        }
    }
}
