// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `GameSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface GameSessionCallback : Ice.Object, GameSessionCallbackOperations_, GameSessionCallbackOperationsNC_
            {
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface GameSession : Ice.Object, GameSessionOperations_, GameSessionOperationsNC_, Glacier2.Session
            {
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_GameSessionCallback_timeSyncronized();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_GameSessionCallback_close();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_GameSession_destroyWarp();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_GameSession_setCallback();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_GameSession_syncTime();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_GameSession_getRole(com.XSanGo.Protocol.RolePrx ret__);
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface GameSessionCallbackPrx : Ice.ObjectPrx
            {
                void timeSyncronized(string time);
                void timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_timeSyncronized> begin_timeSyncronized(string time);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_timeSyncronized> begin_timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_timeSyncronized(string time, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_timeSyncronized(Ice.AsyncResult r__);

                void close(string note);
                void close(string note, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_close> begin_close(string note);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_close> begin_close(string note, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_close(string note, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_close(string note, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_close(Ice.AsyncResult r__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface GameSessionPrx : Glacier2.SessionPrx
            {
                void destroyWarp(bool reconnectable);
                void destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_destroyWarp> begin_destroyWarp(bool reconnectable);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_destroyWarp> begin_destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_destroyWarp(bool reconnectable, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_destroyWarp(Ice.AsyncResult r__);

                bool destroyWarp_async(com.XSanGo.Protocol.AMI_GameSession_destroyWarp cb__, bool reconnectable);
                bool destroyWarp_async(com.XSanGo.Protocol.AMI_GameSession_destroyWarp cb__, bool reconnectable, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb);
                void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_setCallback> begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_setCallback> begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_setCallback(Ice.AsyncResult r__);

                bool setCallback_async(com.XSanGo.Protocol.AMI_GameSession_setCallback cb__, com.XSanGo.Protocol.GameSessionCallbackPrx cb);
                bool setCallback_async(com.XSanGo.Protocol.AMI_GameSession_setCallback cb__, com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void syncTime();
                void syncTime(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_syncTime> begin_syncTime();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_syncTime> begin_syncTime(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_syncTime(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_syncTime(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_syncTime(Ice.AsyncResult r__);

                bool syncTime_async(com.XSanGo.Protocol.AMI_GameSession_syncTime cb__);
                bool syncTime_async(com.XSanGo.Protocol.AMI_GameSession_syncTime cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.RolePrx getRole();
                com.XSanGo.Protocol.RolePrx getRole(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_getRole> begin_getRole();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_getRole> begin_getRole(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_getRole(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_getRole(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.RolePrx end_getRole(Ice.AsyncResult r__);

                bool getRole_async(com.XSanGo.Protocol.AMI_GameSession_getRole cb__);
                bool getRole_async(com.XSanGo.Protocol.AMI_GameSession_getRole cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface GameSessionCallbackOperations_
            {
                void timeSyncronized(string time, Ice.Current current__);

                void close(string note, Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface GameSessionCallbackOperationsNC_
            {
                void timeSyncronized(string time);

                void close(string note);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface GameSessionOperations_ : Glacier2.SessionOperations_
            {
                void destroyWarp(bool reconnectable, Ice.Current current__);

                void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, Ice.Current current__);

                void syncTime(Ice.Current current__);

                com.XSanGo.Protocol.RolePrx getRole(Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface GameSessionOperationsNC_ : Glacier2.SessionOperationsNC_
            {
                void destroyWarp(bool reconnectable);

                void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb);

                void syncTime();

                com.XSanGo.Protocol.RolePrx getRole();
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class GameSessionCallbackPrxHelper : Ice.ObjectPrxHelperBase, GameSessionCallbackPrx
            {
                #region Synchronous operations

                public void close(string note)
                {
                    close(note, null, false);
                }

                public void close(string note, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    close(note, context__, true);
                }

                private void close(string note, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __close_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                GameSessionCallbackDel_ del__ = (GameSessionCallbackDel_)delBase__;
                                del__.close(note, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void timeSyncronized(string time)
                {
                    timeSyncronized(time, null, false);
                }

                public void timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    timeSyncronized(time, context__, true);
                }

                private void timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __timeSyncronized_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                GameSessionCallbackDel_ del__ = (GameSessionCallbackDel_)delBase__;
                                del__.timeSyncronized(time, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_close> begin_close(string note)
                {
                    return begin_close(note, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_close> begin_close(string note, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_close(note, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_close(string note, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_close(note, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_close(string note, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_close(note, ctx__, true, cb__, cookie__);
                }

                private const string __close_name = "close";

                public void end_close(Ice.AsyncResult r__)
                {
                    end__(r__, __close_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_close> begin_close(string note, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSessionCallback_close> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSessionCallback_close>(this, __close_name, close_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__close_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(note);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void close_completed__(com.XSanGo.Protocol.Callback_GameSessionCallback_close cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_timeSyncronized> begin_timeSyncronized(string time)
                {
                    return begin_timeSyncronized(time, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_timeSyncronized> begin_timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_timeSyncronized(time, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_timeSyncronized(string time, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_timeSyncronized(time, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_timeSyncronized(time, ctx__, true, cb__, cookie__);
                }

                private const string __timeSyncronized_name = "timeSyncronized";

                public void end_timeSyncronized(Ice.AsyncResult r__)
                {
                    end__(r__, __timeSyncronized_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSessionCallback_timeSyncronized> begin_timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSessionCallback_timeSyncronized> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSessionCallback_timeSyncronized>(this, __timeSyncronized_name, timeSyncronized_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__timeSyncronized_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(time);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void timeSyncronized_completed__(com.XSanGo.Protocol.Callback_GameSessionCallback_timeSyncronized cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                #endregion

                #region Checked and unchecked cast operations

                public static GameSessionCallbackPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    GameSessionCallbackPrx r = b as GameSessionCallbackPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        GameSessionCallbackPrxHelper h = new GameSessionCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static GameSessionCallbackPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    GameSessionCallbackPrx r = b as GameSessionCallbackPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        GameSessionCallbackPrxHelper h = new GameSessionCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static GameSessionCallbackPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            GameSessionCallbackPrxHelper h = new GameSessionCallbackPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static GameSessionCallbackPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            GameSessionCallbackPrxHelper h = new GameSessionCallbackPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static GameSessionCallbackPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    GameSessionCallbackPrx r = b as GameSessionCallbackPrx;
                    if(r == null)
                    {
                        GameSessionCallbackPrxHelper h = new GameSessionCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static GameSessionCallbackPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    GameSessionCallbackPrxHelper h = new GameSessionCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::GameSessionCallback"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new GameSessionCallbackDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new GameSessionCallbackDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, GameSessionCallbackPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static GameSessionCallbackPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        GameSessionCallbackPrxHelper result = new GameSessionCallbackPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class GameSessionPrxHelper : Ice.ObjectPrxHelperBase, GameSessionPrx
            {
                #region Synchronous operations

                /// <summary>
                /// Destroy the session.
                /// This is called automatically when the
                /// Router is destroyed.
                /// </summary>
                
                public void destroy()
                {
                    destroy(null, false);
                }

                /// <summary>
                /// Destroy the session.
                /// This is called automatically when the
                /// Router is destroyed.
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public void destroy(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    destroy(context__, true);
                }

                private void destroy(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __destroy_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                GameSessionDel_ del__ = (GameSessionDel_)delBase__;
                                del__.destroy(context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void destroyWarp(bool reconnectable)
                {
                    destroyWarp(reconnectable, null, false);
                }

                public void destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    destroyWarp(reconnectable, context__, true);
                }

                private void destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __destroyWarp_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                GameSessionDel_ del__ = (GameSessionDel_)delBase__;
                                del__.destroyWarp(reconnectable, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public com.XSanGo.Protocol.RolePrx getRole()
                {
                    return getRole(null, false);
                }

                public com.XSanGo.Protocol.RolePrx getRole(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return getRole(context__, true);
                }

                private com.XSanGo.Protocol.RolePrx getRole(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getRole_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__getRole_name);
                                delBase__ = getDelegate__(false);
                                GameSessionDel_ del__ = (GameSessionDel_)delBase__;
                                return del__.getRole(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb)
                {
                    setCallback(cb, null, false);
                }

                public void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    setCallback(cb, context__, true);
                }

                private void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __setCallback_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                GameSessionDel_ del__ = (GameSessionDel_)delBase__;
                                del__.setCallback(cb, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void syncTime()
                {
                    syncTime(null, false);
                }

                public void syncTime(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    syncTime(context__, true);
                }

                private void syncTime(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __syncTime_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                GameSessionDel_ del__ = (GameSessionDel_)delBase__;
                                del__.syncTime(context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<Glacier2.Callback_Session_destroy> begin_destroy()
                {
                    return begin_destroy(null, false, null, null);
                }

                /// <summary>
                /// Destroy the session.
                /// This is called automatically when the
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<Glacier2.Callback_Session_destroy> begin_destroy(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_destroy(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_destroy(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_destroy(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_destroy(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_destroy(ctx__, true, cb__, cookie__);
                }

                private const string __destroy_name = "destroy";

                public void end_destroy(Ice.AsyncResult r__)
                {
                    end__(r__, __destroy_name);
                }

                private Ice.AsyncResult<Glacier2.Callback_Session_destroy> begin_destroy(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<Glacier2.Callback_Session_destroy> result__ = new IceInternal.OnewayOutgoingAsync<Glacier2.Callback_Session_destroy>(this, __destroy_name, destroy_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__destroy_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void destroy_completed__(Glacier2.Callback_Session_destroy cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_destroyWarp> begin_destroyWarp(bool reconnectable)
                {
                    return begin_destroyWarp(reconnectable, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_destroyWarp> begin_destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_destroyWarp(reconnectable, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_destroyWarp(bool reconnectable, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_destroyWarp(reconnectable, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_destroyWarp(reconnectable, ctx__, true, cb__, cookie__);
                }

                private const string __destroyWarp_name = "destroyWarp";

                public void end_destroyWarp(Ice.AsyncResult r__)
                {
                    end__(r__, __destroyWarp_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_destroyWarp> begin_destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_destroyWarp> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_destroyWarp>(this, __destroyWarp_name, destroyWarp_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__destroyWarp_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeBool(reconnectable);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void destroyWarp_completed__(com.XSanGo.Protocol.Callback_GameSession_destroyWarp cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool destroyWarp_async(com.XSanGo.Protocol.AMI_GameSession_destroyWarp cb__, bool reconnectable)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_destroyWarp> result__ = begin_destroyWarp(reconnectable);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool destroyWarp_async(com.XSanGo.Protocol.AMI_GameSession_destroyWarp cb__, bool reconnectable, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_destroyWarp> result__ = begin_destroyWarp(reconnectable, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_getRole> begin_getRole()
                {
                    return begin_getRole(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_getRole> begin_getRole(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_getRole(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_getRole(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getRole(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_getRole(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getRole(ctx__, true, cb__, cookie__);
                }

                private const string __getRole_name = "getRole";

                public com.XSanGo.Protocol.RolePrx end_getRole(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __getRole_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.RolePrx ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = com.XSanGo.Protocol.RolePrxHelper.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_getRole> begin_getRole(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__getRole_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_getRole> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_getRole>(this, __getRole_name, getRole_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__getRole_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void getRole_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_GameSession_getRole cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.RolePrx ret__;
                    try
                    {
                        ret__ = end_getRole(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool getRole_async(com.XSanGo.Protocol.AMI_GameSession_getRole cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_getRole> result__;
                    try
                    {
                        checkTwowayOnly__(__getRole_name);
                        result__ = begin_getRole();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_getRole>(this, __getRole_name, getRole_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool getRole_async(com.XSanGo.Protocol.AMI_GameSession_getRole cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_getRole> result__;
                    try
                    {
                        checkTwowayOnly__(__getRole_name);
                        result__ = begin_getRole(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_getRole>(this, __getRole_name, getRole_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_setCallback> begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb)
                {
                    return begin_setCallback(cb, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_setCallback> begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_setCallback(cb, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_setCallback(cb, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_setCallback(cb, ctx__, true, cb__, cookie__);
                }

                private const string __setCallback_name = "setCallback";

                public void end_setCallback(Ice.AsyncResult r__)
                {
                    end__(r__, __setCallback_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_setCallback> begin_setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_setCallback> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_setCallback>(this, __setCallback_name, setCallback_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__setCallback_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        com.XSanGo.Protocol.GameSessionCallbackPrxHelper.write__(os__, cb);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void setCallback_completed__(com.XSanGo.Protocol.Callback_GameSession_setCallback cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool setCallback_async(com.XSanGo.Protocol.AMI_GameSession_setCallback cb__, com.XSanGo.Protocol.GameSessionCallbackPrx cb)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_setCallback> result__ = begin_setCallback(cb);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool setCallback_async(com.XSanGo.Protocol.AMI_GameSession_setCallback cb__, com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_setCallback> result__ = begin_setCallback(cb, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_syncTime> begin_syncTime()
                {
                    return begin_syncTime(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_syncTime> begin_syncTime(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_syncTime(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_syncTime(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_syncTime(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_syncTime(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_syncTime(ctx__, true, cb__, cookie__);
                }

                private const string __syncTime_name = "syncTime";

                public void end_syncTime(Ice.AsyncResult r__)
                {
                    end__(r__, __syncTime_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_syncTime> begin_syncTime(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_syncTime> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_GameSession_syncTime>(this, __syncTime_name, syncTime_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__syncTime_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void syncTime_completed__(com.XSanGo.Protocol.Callback_GameSession_syncTime cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool syncTime_async(com.XSanGo.Protocol.AMI_GameSession_syncTime cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_syncTime> result__ = begin_syncTime();
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool syncTime_async(com.XSanGo.Protocol.AMI_GameSession_syncTime cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_GameSession_syncTime> result__ = begin_syncTime(ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static GameSessionPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    GameSessionPrx r = b as GameSessionPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        GameSessionPrxHelper h = new GameSessionPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static GameSessionPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    GameSessionPrx r = b as GameSessionPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        GameSessionPrxHelper h = new GameSessionPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static GameSessionPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            GameSessionPrxHelper h = new GameSessionPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static GameSessionPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            GameSessionPrxHelper h = new GameSessionPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static GameSessionPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    GameSessionPrx r = b as GameSessionPrx;
                    if(r == null)
                    {
                        GameSessionPrxHelper h = new GameSessionPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static GameSessionPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    GameSessionPrxHelper h = new GameSessionPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Glacier2::Session",
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::GameSession"
                };

                public static string ice_staticId()
                {
                    return ids__[2];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new GameSessionDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new GameSessionDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, GameSessionPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static GameSessionPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        GameSessionPrxHelper result = new GameSessionPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface GameSessionCallbackDel_ : Ice.ObjectDel_
            {
                void timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void close(string note, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface GameSessionDel_ : Glacier2.SessionDel_
            {
                void destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void syncTime(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.RolePrx getRole(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class GameSessionCallbackDelM_ : Ice.ObjectDelM_, GameSessionCallbackDel_
            {
                public void close(string note, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("close", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(note);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("timeSyncronized", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(time);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class GameSessionDelM_ : Ice.ObjectDelM_, GameSessionDel_
            {
                public void destroy(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("destroy", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("destroyWarp", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeBool(reconnectable);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public com.XSanGo.Protocol.RolePrx getRole(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("getRole", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.RolePrx ret__;
                            ret__ = com.XSanGo.Protocol.RolePrxHelper.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("setCallback", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            com.XSanGo.Protocol.GameSessionCallbackPrxHelper.write__(os__, cb);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void syncTime(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("syncTime", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class GameSessionCallbackDelD_ : Ice.ObjectDelD_, GameSessionCallbackDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void close(string note, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "close", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        GameSessionCallback servant__ = null;
                        try
                        {
                            servant__ = (GameSessionCallback)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.close(note, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void timeSyncronized(string time, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "timeSyncronized", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        GameSessionCallback servant__ = null;
                        try
                        {
                            servant__ = (GameSessionCallback)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.timeSyncronized(time, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class GameSessionDelD_ : Ice.ObjectDelD_, GameSessionDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void destroy(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "destroy", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        GameSession servant__ = null;
                        try
                        {
                            servant__ = (GameSession)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.destroy(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void destroyWarp(bool reconnectable, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "destroyWarp", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        GameSession servant__ = null;
                        try
                        {
                            servant__ = (GameSession)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.destroyWarp(reconnectable, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.RolePrx getRole(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "getRole", Ice.OperationMode.Normal, context__);
                    com.XSanGo.Protocol.RolePrx result__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        GameSession servant__ = null;
                        try
                        {
                            servant__ = (GameSession)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        result__ = servant__.getRole(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "setCallback", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        GameSession servant__ = null;
                        try
                        {
                            servant__ = (GameSession)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.setCallback(cb, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void syncTime(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "syncTime", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        GameSession servant__ = null;
                        try
                        {
                            servant__ = (GameSession)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.syncTime(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class GameSessionCallbackDisp_ : Ice.ObjectImpl, GameSessionCallback
            {
                #region Slice operations

                public void timeSyncronized(string time)
                {
                    timeSyncronized(time, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void timeSyncronized(string time, Ice.Current current__);

                public void close(string note)
                {
                    close(note, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void close(string note, Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::GameSessionCallback"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus timeSyncronized___(GameSessionCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string time;
                    time = is__.readString();
                    inS__.endReadParams();
                    obj__.timeSyncronized(time, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus close___(GameSessionCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string note;
                    note = is__.readString();
                    inS__.endReadParams();
                    obj__.close(note, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                private static string[] all__ =
                {
                    "close",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "timeSyncronized"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return close___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return timeSyncronized___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class GameSessionDisp_ : Ice.ObjectImpl, GameSession
            {
                #region Slice operations

                public void destroyWarp(bool reconnectable)
                {
                    destroyWarp(reconnectable, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void destroyWarp(bool reconnectable, Ice.Current current__);

                public void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb)
                {
                    setCallback(cb, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void setCallback(com.XSanGo.Protocol.GameSessionCallbackPrx cb, Ice.Current current__);

                public void syncTime()
                {
                    syncTime(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void syncTime(Ice.Current current__);

                public com.XSanGo.Protocol.RolePrx getRole()
                {
                    return getRole(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract com.XSanGo.Protocol.RolePrx getRole(Ice.Current current__);

                #endregion

                #region Inherited Slice operations

                public void destroy()
                {
                    destroy(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void destroy(Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Glacier2::Session",
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::GameSession"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[2];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[2];
                }

                public static new string ice_staticId()
                {
                    return ids__[2];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus destroyWarp___(GameSession obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    bool reconnectable;
                    reconnectable = is__.readBool();
                    inS__.endReadParams();
                    obj__.destroyWarp(reconnectable, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus setCallback___(GameSession obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    com.XSanGo.Protocol.GameSessionCallbackPrx cb;
                    cb = com.XSanGo.Protocol.GameSessionCallbackPrxHelper.read__(is__);
                    inS__.endReadParams();
                    obj__.setCallback(cb, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus syncTime___(GameSession obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    obj__.syncTime(current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus getRole___(GameSession obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    com.XSanGo.Protocol.RolePrx ret__ = obj__.getRole(current__);
                    IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                    com.XSanGo.Protocol.RolePrxHelper.write__(os__, ret__);
                    inS__.endWriteParams__(true);
                    return Ice.DispatchStatus.DispatchOK;
                }

                private static string[] all__ =
                {
                    "destroy",
                    "destroyWarp",
                    "getRole",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "setCallback",
                    "syncTime"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return Glacier2.SessionDisp_.destroy___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return destroyWarp___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return getRole___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 6:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                        case 7:
                        {
                            return setCallback___(this, inS__, current__);
                        }
                        case 8:
                        {
                            return syncTime___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_GameSession_destroyWarp : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_GameSession_setCallback : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_GameSession_syncTime : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_GameSession_getRole : Ice.AMICallbackBase
            {
                public abstract void ice_response(com.XSanGo.Protocol.RolePrx ret__);

                public void response__(com.XSanGo.Protocol.RolePrx ret__)
                {
                    ice_response(ret__);
                }
            }
        }
    }
}
