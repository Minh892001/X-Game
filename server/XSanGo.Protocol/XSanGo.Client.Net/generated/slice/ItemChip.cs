// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ItemChip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public enum ChipResult
            {
                failed,
                noChip,
                noNum,
                sucessess
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial struct RobResult
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.ChipResult chipRs;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int fightStar;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int money;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int exp;

                #endregion

                #region Constructor

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public RobResult(com.XSanGo.Protocol.ChipResult chipRs, int fightStar, int money, int exp)
                {
                    this.chipRs = chipRs;
                    this.fightStar = fightStar;
                    this.money = money;
                    this.exp = exp;
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::RobResult");
                    IceInternal.HashUtil.hashAdd(ref h__, chipRs);
                    IceInternal.HashUtil.hashAdd(ref h__, fightStar);
                    IceInternal.HashUtil.hashAdd(ref h__, money);
                    IceInternal.HashUtil.hashAdd(ref h__, exp);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(!(other__ is RobResult))
                    {
                        return false;
                    }
                    RobResult o__ = (RobResult)other__;
                    if(!chipRs.Equals(o__.chipRs))
                    {
                        return false;
                    }
                    if(!fightStar.Equals(o__.fightStar))
                    {
                        return false;
                    }
                    if(!money.Equals(o__.money))
                    {
                        return false;
                    }
                    if(!exp.Equals(o__.exp))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(RobResult lhs__, RobResult rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(RobResult lhs__, RobResult rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeEnum((int)chipRs, 3);
                    os__.writeInt(fightStar);
                    os__.writeInt(money);
                    os__.writeInt(exp);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    chipRs = (com.XSanGo.Protocol.ChipResult)is__.readEnum(3);
                    fightStar = is__.readInt();
                    money = is__.readInt();
                    exp = is__.readInt();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class ChipPropertyView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string formationId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.Property[] chipSeq;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChipPropertyView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChipPropertyView(string formationId, com.XSanGo.Protocol.Property[] chipSeq)
                {
                    this.formationId = formationId;
                    this.chipSeq = chipSeq;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::ChipPropertyView");
                    IceInternal.HashUtil.hashAdd(ref h__, formationId);
                    IceInternal.HashUtil.hashAdd(ref h__, chipSeq);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    ChipPropertyView o__ = (ChipPropertyView)other__;
                    if(formationId == null)
                    {
                        if(o__.formationId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!formationId.Equals(o__.formationId))
                        {
                            return false;
                        }
                    }
                    if(chipSeq == null)
                    {
                        if(o__.chipSeq != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(chipSeq, o__.chipSeq))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(ChipPropertyView lhs__, ChipPropertyView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(ChipPropertyView lhs__, ChipPropertyView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(formationId);
                    com.XSanGo.Protocol.PropertySeqHelper.write(os__, chipSeq);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    formationId = is__.readString();
                    chipSeq = com.XSanGo.Protocol.PropertySeqHelper.read(is__);
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class RobRole : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string name;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public short level;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string icon;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int sex;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int relation;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vip;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int compositeCombat;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int successRate;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.FormationSummaryView[] guardHeroArr;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public RobRole()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public RobRole(string id, string name, short level, string icon, int sex, int relation, int vip, int compositeCombat, int successRate, com.XSanGo.Protocol.FormationSummaryView[] guardHeroArr)
                {
                    this.id = id;
                    this.name = name;
                    this.level = level;
                    this.icon = icon;
                    this.sex = sex;
                    this.relation = relation;
                    this.vip = vip;
                    this.compositeCombat = compositeCombat;
                    this.successRate = successRate;
                    this.guardHeroArr = guardHeroArr;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::RobRole");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, name);
                    IceInternal.HashUtil.hashAdd(ref h__, level);
                    IceInternal.HashUtil.hashAdd(ref h__, icon);
                    IceInternal.HashUtil.hashAdd(ref h__, sex);
                    IceInternal.HashUtil.hashAdd(ref h__, relation);
                    IceInternal.HashUtil.hashAdd(ref h__, vip);
                    IceInternal.HashUtil.hashAdd(ref h__, compositeCombat);
                    IceInternal.HashUtil.hashAdd(ref h__, successRate);
                    IceInternal.HashUtil.hashAdd(ref h__, guardHeroArr);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    RobRole o__ = (RobRole)other__;
                    if(id == null)
                    {
                        if(o__.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!id.Equals(o__.id))
                        {
                            return false;
                        }
                    }
                    if(name == null)
                    {
                        if(o__.name != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!name.Equals(o__.name))
                        {
                            return false;
                        }
                    }
                    if(!level.Equals(o__.level))
                    {
                        return false;
                    }
                    if(icon == null)
                    {
                        if(o__.icon != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!icon.Equals(o__.icon))
                        {
                            return false;
                        }
                    }
                    if(!sex.Equals(o__.sex))
                    {
                        return false;
                    }
                    if(!relation.Equals(o__.relation))
                    {
                        return false;
                    }
                    if(!vip.Equals(o__.vip))
                    {
                        return false;
                    }
                    if(!compositeCombat.Equals(o__.compositeCombat))
                    {
                        return false;
                    }
                    if(!successRate.Equals(o__.successRate))
                    {
                        return false;
                    }
                    if(guardHeroArr == null)
                    {
                        if(o__.guardHeroArr != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(guardHeroArr, o__.guardHeroArr))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(RobRole lhs__, RobRole rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(RobRole lhs__, RobRole rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(id);
                    os__.writeString(name);
                    os__.writeShort(level);
                    os__.writeString(icon);
                    os__.writeInt(sex);
                    os__.writeInt(relation);
                    os__.writeInt(vip);
                    os__.writeInt(compositeCombat);
                    os__.writeInt(successRate);
                    com.XSanGo.Protocol.FormationSummaryViewSeqHelper.write(os__, guardHeroArr);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readString();
                    name = is__.readString();
                    level = is__.readShort();
                    icon = is__.readString();
                    sex = is__.readInt();
                    relation = is__.readInt();
                    vip = is__.readInt();
                    compositeCombat = is__.readInt();
                    successRate = is__.readInt();
                    guardHeroArr = com.XSanGo.Protocol.FormationSummaryViewSeqHelper.read(is__);
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class RobRoleShow : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vit;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vitNum;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.RobRole[] RobRoleList;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public RobRoleShow()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public RobRoleShow(int vit, int vitNum, com.XSanGo.Protocol.RobRole[] RobRoleList)
                {
                    this.vit = vit;
                    this.vitNum = vitNum;
                    this.RobRoleList = RobRoleList;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::RobRoleShow");
                    IceInternal.HashUtil.hashAdd(ref h__, vit);
                    IceInternal.HashUtil.hashAdd(ref h__, vitNum);
                    IceInternal.HashUtil.hashAdd(ref h__, RobRoleList);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    RobRoleShow o__ = (RobRoleShow)other__;
                    if(!vit.Equals(o__.vit))
                    {
                        return false;
                    }
                    if(!vitNum.Equals(o__.vitNum))
                    {
                        return false;
                    }
                    if(RobRoleList == null)
                    {
                        if(o__.RobRoleList != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(RobRoleList, o__.RobRoleList))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(RobRoleShow lhs__, RobRoleShow rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(RobRoleShow lhs__, RobRoleShow rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(vit);
                    os__.writeInt(vitNum);
                    com.XSanGo.Protocol.RobRoleViewSeqHelper.write(os__, RobRoleList);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    vit = is__.readInt();
                    vitNum = is__.readInt();
                    RobRoleList = com.XSanGo.Protocol.RobRoleViewSeqHelper.read(is__);
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class ReportView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string name;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public short level;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string icon;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int sex;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vip;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int flag;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int compositeCombat;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string fightId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public long reportTime;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string chipId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int chipNum;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string reportId;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ReportView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ReportView(string id, string name, short level, string icon, int sex, int vip, int flag, int compositeCombat, string fightId, long reportTime, string chipId, int chipNum, string reportId)
                {
                    this.id = id;
                    this.name = name;
                    this.level = level;
                    this.icon = icon;
                    this.sex = sex;
                    this.vip = vip;
                    this.flag = flag;
                    this.compositeCombat = compositeCombat;
                    this.fightId = fightId;
                    this.reportTime = reportTime;
                    this.chipId = chipId;
                    this.chipNum = chipNum;
                    this.reportId = reportId;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::ReportView");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, name);
                    IceInternal.HashUtil.hashAdd(ref h__, level);
                    IceInternal.HashUtil.hashAdd(ref h__, icon);
                    IceInternal.HashUtil.hashAdd(ref h__, sex);
                    IceInternal.HashUtil.hashAdd(ref h__, vip);
                    IceInternal.HashUtil.hashAdd(ref h__, flag);
                    IceInternal.HashUtil.hashAdd(ref h__, compositeCombat);
                    IceInternal.HashUtil.hashAdd(ref h__, fightId);
                    IceInternal.HashUtil.hashAdd(ref h__, reportTime);
                    IceInternal.HashUtil.hashAdd(ref h__, chipId);
                    IceInternal.HashUtil.hashAdd(ref h__, chipNum);
                    IceInternal.HashUtil.hashAdd(ref h__, reportId);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    ReportView o__ = (ReportView)other__;
                    if(id == null)
                    {
                        if(o__.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!id.Equals(o__.id))
                        {
                            return false;
                        }
                    }
                    if(name == null)
                    {
                        if(o__.name != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!name.Equals(o__.name))
                        {
                            return false;
                        }
                    }
                    if(!level.Equals(o__.level))
                    {
                        return false;
                    }
                    if(icon == null)
                    {
                        if(o__.icon != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!icon.Equals(o__.icon))
                        {
                            return false;
                        }
                    }
                    if(!sex.Equals(o__.sex))
                    {
                        return false;
                    }
                    if(!vip.Equals(o__.vip))
                    {
                        return false;
                    }
                    if(!flag.Equals(o__.flag))
                    {
                        return false;
                    }
                    if(!compositeCombat.Equals(o__.compositeCombat))
                    {
                        return false;
                    }
                    if(fightId == null)
                    {
                        if(o__.fightId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!fightId.Equals(o__.fightId))
                        {
                            return false;
                        }
                    }
                    if(!reportTime.Equals(o__.reportTime))
                    {
                        return false;
                    }
                    if(chipId == null)
                    {
                        if(o__.chipId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!chipId.Equals(o__.chipId))
                        {
                            return false;
                        }
                    }
                    if(!chipNum.Equals(o__.chipNum))
                    {
                        return false;
                    }
                    if(reportId == null)
                    {
                        if(o__.reportId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!reportId.Equals(o__.reportId))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(ReportView lhs__, ReportView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(ReportView lhs__, ReportView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(id);
                    os__.writeString(name);
                    os__.writeShort(level);
                    os__.writeString(icon);
                    os__.writeInt(sex);
                    os__.writeInt(vip);
                    os__.writeInt(flag);
                    os__.writeInt(compositeCombat);
                    os__.writeString(fightId);
                    os__.writeLong(reportTime);
                    os__.writeString(chipId);
                    os__.writeInt(chipNum);
                    os__.writeString(reportId);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readString();
                    name = is__.readString();
                    level = is__.readShort();
                    icon = is__.readString();
                    sex = is__.readInt();
                    vip = is__.readInt();
                    flag = is__.readInt();
                    compositeCombat = is__.readInt();
                    fightId = is__.readString();
                    reportTime = is__.readLong();
                    chipId = is__.readString();
                    chipNum = is__.readInt();
                    reportId = is__.readString();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class ChipItemCompound : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string chipItemId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int num;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChipItemCompound()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public ChipItemCompound(string chipItemId, int num)
                {
                    this.chipItemId = chipItemId;
                    this.num = num;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::ChipItemCompound");
                    IceInternal.HashUtil.hashAdd(ref h__, chipItemId);
                    IceInternal.HashUtil.hashAdd(ref h__, num);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    ChipItemCompound o__ = (ChipItemCompound)other__;
                    if(chipItemId == null)
                    {
                        if(o__.chipItemId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!chipItemId.Equals(o__.chipItemId))
                        {
                            return false;
                        }
                    }
                    if(!num.Equals(o__.num))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(ChipItemCompound lhs__, ChipItemCompound rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(ChipItemCompound lhs__, ChipItemCompound rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(chipItemId);
                    os__.writeInt(num);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    chipItemId = is__.readString();
                    num = is__.readInt();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class CompoundResult : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string itemId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.ChipItemCompound[] chipList;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public CompoundResult()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public CompoundResult(string itemId, com.XSanGo.Protocol.ChipItemCompound[] chipList)
                {
                    this.itemId = itemId;
                    this.chipList = chipList;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::CompoundResult");
                    IceInternal.HashUtil.hashAdd(ref h__, itemId);
                    IceInternal.HashUtil.hashAdd(ref h__, chipList);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    CompoundResult o__ = (CompoundResult)other__;
                    if(itemId == null)
                    {
                        if(o__.itemId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!itemId.Equals(o__.itemId))
                        {
                            return false;
                        }
                    }
                    if(chipList == null)
                    {
                        if(o__.chipList != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(chipList, o__.chipList))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(CompoundResult lhs__, CompoundResult rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(CompoundResult lhs__, CompoundResult rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(itemId);
                    com.XSanGo.Protocol.chipItemCompoundSeqHelper.write(os__, chipList);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    itemId = is__.readString();
                    chipList = com.XSanGo.Protocol.chipItemCompoundSeqHelper.read(is__);
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial struct HeroResetResult
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int released;

                #endregion

                #region Constructor

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public HeroResetResult(int released)
                {
                    this.released = released;
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::HeroResetResult");
                    IceInternal.HashUtil.hashAdd(ref h__, released);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(!(other__ is HeroResetResult))
                    {
                        return false;
                    }
                    HeroResetResult o__ = (HeroResetResult)other__;
                    if(!released.Equals(o__.released))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(HeroResetResult lhs__, HeroResetResult rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(HeroResetResult lhs__, HeroResetResult rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(released);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    released = is__.readInt();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class HeroResetView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string heroTemplateId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.HeroConsumeView consume;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public HeroResetView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public HeroResetView(string heroTemplateId, com.XSanGo.Protocol.HeroConsumeView consume)
                {
                    this.heroTemplateId = heroTemplateId;
                    this.consume = consume;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::HeroResetView");
                    IceInternal.HashUtil.hashAdd(ref h__, heroTemplateId);
                    IceInternal.HashUtil.hashAdd(ref h__, consume);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    HeroResetView o__ = (HeroResetView)other__;
                    if(heroTemplateId == null)
                    {
                        if(o__.heroTemplateId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!heroTemplateId.Equals(o__.heroTemplateId))
                        {
                            return false;
                        }
                    }
                    if(consume == null)
                    {
                        if(o__.consume != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!consume.Equals(o__.consume))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(HeroResetView lhs__, HeroResetView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(HeroResetView lhs__, HeroResetView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(heroTemplateId);
                    if(consume == null)
                    {
                        com.XSanGo.Protocol.HeroConsumeView tmp__ = new com.XSanGo.Protocol.HeroConsumeView();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        consume.write__(os__);
                    }
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    heroTemplateId = is__.readString();
                    if(consume == null)
                    {
                        consume = new com.XSanGo.Protocol.HeroConsumeView();
                    }
                    consume.read__(is__);
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface ItemChip : Ice.Object, ItemChipOperations_, ItemChipOperationsNC_
            {
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_saveFormation();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_showChip(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_compoundChip(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_showRobList(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_beginRob(com.XSanGo.Protocol.PvpOpponentFormationView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_endRob(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_robFightReport(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_beginRevenge(com.XSanGo.Protocol.PvpOpponentFormationView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_endRevenge(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_strutItem();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_requestHeroReset(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_ItemChip_heroReset(string ret__);
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ItemChipPrx : Ice.ObjectPrx
            {
                void saveFormation(string roleItemId);
                void saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_saveFormation> begin_saveFormation(string roleItemId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_saveFormation> begin_saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_saveFormation(string roleItemId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_saveFormation(Ice.AsyncResult r__);

                bool saveFormation_async(com.XSanGo.Protocol.AMI_ItemChip_saveFormation cb__, string roleItemId);
                bool saveFormation_async(com.XSanGo.Protocol.AMI_ItemChip_saveFormation cb__, string roleItemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string showChip();
                string showChip(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showChip> begin_showChip();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showChip> begin_showChip(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_showChip(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_showChip(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_showChip(Ice.AsyncResult r__);

                bool showChip_async(com.XSanGo.Protocol.AMI_ItemChip_showChip cb__);
                bool showChip_async(com.XSanGo.Protocol.AMI_ItemChip_showChip cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string compoundChip(string itemId);
                string compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_compoundChip> begin_compoundChip(string itemId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_compoundChip> begin_compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_compoundChip(string itemId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_compoundChip(Ice.AsyncResult r__);

                bool compoundChip_async(com.XSanGo.Protocol.AMI_ItemChip_compoundChip cb__, string itemId);
                bool compoundChip_async(com.XSanGo.Protocol.AMI_ItemChip_compoundChip cb__, string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string showRobList(string chipId);
                string showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showRobList> begin_showRobList(string chipId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showRobList> begin_showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_showRobList(string chipId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_showRobList(Ice.AsyncResult r__);

                bool showRobList_async(com.XSanGo.Protocol.AMI_ItemChip_showRobList cb__, string chipId);
                bool showRobList_async(com.XSanGo.Protocol.AMI_ItemChip_showRobList cb__, string chipId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.PvpOpponentFormationView beginRob(string targetId, string robItemId, string formationId);
                com.XSanGo.Protocol.PvpOpponentFormationView beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRob> begin_beginRob(string targetId, string robItemId, string formationId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRob> begin_beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_beginRob(string targetId, string robItemId, string formationId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.PvpOpponentFormationView end_beginRob(Ice.AsyncResult r__);

                bool beginRob_async(com.XSanGo.Protocol.AMI_ItemChip_beginRob cb__, string targetId, string robItemId, string formationId);
                bool beginRob_async(com.XSanGo.Protocol.AMI_ItemChip_beginRob cb__, string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string endRob(string targetId, string robItemId, byte remainHero, int skipFlag);
                string endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRob> begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRob> begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_endRob(Ice.AsyncResult r__);

                bool endRob_async(com.XSanGo.Protocol.AMI_ItemChip_endRob cb__, string targetId, string robItemId, byte remainHero, int skipFlag);
                bool endRob_async(com.XSanGo.Protocol.AMI_ItemChip_endRob cb__, string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string robFightReport();
                string robFightReport(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_robFightReport> begin_robFightReport();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_robFightReport> begin_robFightReport(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_robFightReport(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_robFightReport(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_robFightReport(Ice.AsyncResult r__);

                bool robFightReport_async(com.XSanGo.Protocol.AMI_ItemChip_robFightReport cb__);
                bool robFightReport_async(com.XSanGo.Protocol.AMI_ItemChip_robFightReport cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.PvpOpponentFormationView beginRevenge(string reportId, string formationId);
                com.XSanGo.Protocol.PvpOpponentFormationView beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge> begin_beginRevenge(string reportId, string formationId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge> begin_beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_beginRevenge(string reportId, string formationId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.PvpOpponentFormationView end_beginRevenge(Ice.AsyncResult r__);

                bool beginRevenge_async(com.XSanGo.Protocol.AMI_ItemChip_beginRevenge cb__, string reportId, string formationId);
                bool beginRevenge_async(com.XSanGo.Protocol.AMI_ItemChip_beginRevenge cb__, string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string endRevenge(string reportId, byte remainHero, int skipFlag);
                string endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRevenge> begin_endRevenge(string reportId, byte remainHero, int skipFlag);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRevenge> begin_endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_endRevenge(string reportId, byte remainHero, int skipFlag, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_endRevenge(Ice.AsyncResult r__);

                bool endRevenge_async(com.XSanGo.Protocol.AMI_ItemChip_endRevenge cb__, string reportId, byte remainHero, int skipFlag);
                bool endRevenge_async(com.XSanGo.Protocol.AMI_ItemChip_endRevenge cb__, string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void strutItem(string itemId);
                void strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_strutItem> begin_strutItem(string itemId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_strutItem> begin_strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_strutItem(string itemId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_strutItem(Ice.AsyncResult r__);

                bool strutItem_async(com.XSanGo.Protocol.AMI_ItemChip_strutItem cb__, string itemId);
                bool strutItem_async(com.XSanGo.Protocol.AMI_ItemChip_strutItem cb__, string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string requestHeroReset();
                string requestHeroReset(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset> begin_requestHeroReset();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset> begin_requestHeroReset(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_requestHeroReset(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_requestHeroReset(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_requestHeroReset(Ice.AsyncResult r__);

                bool requestHeroReset_async(com.XSanGo.Protocol.AMI_ItemChip_requestHeroReset cb__);
                bool requestHeroReset_async(com.XSanGo.Protocol.AMI_ItemChip_requestHeroReset cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string heroReset(string heroId, int release);
                string heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_heroReset> begin_heroReset(string heroId, int release);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_heroReset> begin_heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_heroReset(string heroId, int release, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_heroReset(Ice.AsyncResult r__);

                bool heroReset_async(com.XSanGo.Protocol.AMI_ItemChip_heroReset cb__, string heroId, int release);
                bool heroReset_async(com.XSanGo.Protocol.AMI_ItemChip_heroReset cb__, string heroId, int release, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ItemChipOperations_
            {
                void saveFormation(string roleItemId, Ice.Current current__);

                string showChip(Ice.Current current__);

                string compoundChip(string itemId, Ice.Current current__);

                string showRobList(string chipId, Ice.Current current__);

                void beginRob_async(com.XSanGo.Protocol.AMD_ItemChip_beginRob cb__, string targetId, string robItemId, string formationId, Ice.Current current__);

                string endRob(string targetId, string robItemId, byte remainHero, int skipFlag, Ice.Current current__);

                void robFightReport_async(com.XSanGo.Protocol.AMD_ItemChip_robFightReport cb__, Ice.Current current__);

                void beginRevenge_async(com.XSanGo.Protocol.AMD_ItemChip_beginRevenge cb__, string reportId, string formationId, Ice.Current current__);

                string endRevenge(string reportId, byte remainHero, int skipFlag, Ice.Current current__);

                void strutItem(string itemId, Ice.Current current__);

                string requestHeroReset(Ice.Current current__);

                string heroReset(string heroId, int release, Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ItemChipOperationsNC_
            {
                void saveFormation(string roleItemId);

                string showChip();

                string compoundChip(string itemId);

                string showRobList(string chipId);

                void beginRob_async(com.XSanGo.Protocol.AMD_ItemChip_beginRob cb__, string targetId, string robItemId, string formationId);

                string endRob(string targetId, string robItemId, byte remainHero, int skipFlag);

                void robFightReport_async(com.XSanGo.Protocol.AMD_ItemChip_robFightReport cb__);

                void beginRevenge_async(com.XSanGo.Protocol.AMD_ItemChip_beginRevenge cb__, string reportId, string formationId);

                string endRevenge(string reportId, byte remainHero, int skipFlag);

                void strutItem(string itemId);

                string requestHeroReset();

                string heroReset(string heroId, int release);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class RobRoleViewSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.RobRole[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.RobRole() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.RobRole[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.RobRole[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(26);
                        v__ = new com.XSanGo.Protocol.RobRole[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.RobRole();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class reportViewSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.ReportView[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.ReportView() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.ReportView[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.ReportView[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(36);
                        v__ = new com.XSanGo.Protocol.ReportView[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.ReportView();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class chipItemCompoundSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.ChipItemCompound[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.ChipItemCompound() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.ChipItemCompound[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.ChipItemCompound[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(5);
                        v__ = new com.XSanGo.Protocol.ChipItemCompound[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.ChipItemCompound();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ItemChipPrxHelper : Ice.ObjectPrxHelperBase, ItemChipPrx
            {
                #region Synchronous operations

                public com.XSanGo.Protocol.PvpOpponentFormationView beginRevenge(string reportId, string formationId)
                {
                    return beginRevenge(reportId, formationId, null, false);
                }

                public com.XSanGo.Protocol.PvpOpponentFormationView beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return beginRevenge(reportId, formationId, context__, true);
                }

                private com.XSanGo.Protocol.PvpOpponentFormationView beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __beginRevenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__beginRevenge_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.beginRevenge(reportId, formationId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public com.XSanGo.Protocol.PvpOpponentFormationView beginRob(string targetId, string robItemId, string formationId)
                {
                    return beginRob(targetId, robItemId, formationId, null, false);
                }

                public com.XSanGo.Protocol.PvpOpponentFormationView beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return beginRob(targetId, robItemId, formationId, context__, true);
                }

                private com.XSanGo.Protocol.PvpOpponentFormationView beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __beginRob_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__beginRob_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.beginRob(targetId, robItemId, formationId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string compoundChip(string itemId)
                {
                    return compoundChip(itemId, null, false);
                }

                public string compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return compoundChip(itemId, context__, true);
                }

                private string compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __compoundChip_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__compoundChip_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.compoundChip(itemId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string endRevenge(string reportId, byte remainHero, int skipFlag)
                {
                    return endRevenge(reportId, remainHero, skipFlag, null, false);
                }

                public string endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return endRevenge(reportId, remainHero, skipFlag, context__, true);
                }

                private string endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __endRevenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__endRevenge_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.endRevenge(reportId, remainHero, skipFlag, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string endRob(string targetId, string robItemId, byte remainHero, int skipFlag)
                {
                    return endRob(targetId, robItemId, remainHero, skipFlag, null, false);
                }

                public string endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return endRob(targetId, robItemId, remainHero, skipFlag, context__, true);
                }

                private string endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __endRob_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__endRob_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.endRob(targetId, robItemId, remainHero, skipFlag, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string heroReset(string heroId, int release)
                {
                    return heroReset(heroId, release, null, false);
                }

                public string heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return heroReset(heroId, release, context__, true);
                }

                private string heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __heroReset_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__heroReset_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.heroReset(heroId, release, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string requestHeroReset()
                {
                    return requestHeroReset(null, false);
                }

                public string requestHeroReset(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return requestHeroReset(context__, true);
                }

                private string requestHeroReset(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __requestHeroReset_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__requestHeroReset_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.requestHeroReset(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string robFightReport()
                {
                    return robFightReport(null, false);
                }

                public string robFightReport(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return robFightReport(context__, true);
                }

                private string robFightReport(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __robFightReport_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__robFightReport_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.robFightReport(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void saveFormation(string roleItemId)
                {
                    saveFormation(roleItemId, null, false);
                }

                public void saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    saveFormation(roleItemId, context__, true);
                }

                private void saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __saveFormation_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__saveFormation_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                del__.saveFormation(roleItemId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string showChip()
                {
                    return showChip(null, false);
                }

                public string showChip(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return showChip(context__, true);
                }

                private string showChip(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __showChip_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__showChip_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.showChip(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string showRobList(string chipId)
                {
                    return showRobList(chipId, null, false);
                }

                public string showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return showRobList(chipId, context__, true);
                }

                private string showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __showRobList_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__showRobList_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                return del__.showRobList(chipId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void strutItem(string itemId)
                {
                    strutItem(itemId, null, false);
                }

                public void strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    strutItem(itemId, context__, true);
                }

                private void strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __strutItem_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__strutItem_name);
                                delBase__ = getDelegate__(false);
                                ItemChipDel_ del__ = (ItemChipDel_)delBase__;
                                del__.strutItem(itemId, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge> begin_beginRevenge(string reportId, string formationId)
                {
                    return begin_beginRevenge(reportId, formationId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge> begin_beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_beginRevenge(reportId, formationId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_beginRevenge(string reportId, string formationId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginRevenge(reportId, formationId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginRevenge(reportId, formationId, ctx__, true, cb__, cookie__);
                }

                private const string __beginRevenge_name = "beginRevenge";

                public com.XSanGo.Protocol.PvpOpponentFormationView end_beginRevenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __beginRevenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge> begin_beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__beginRevenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge>(this, __beginRevenge_name, beginRevenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__beginRevenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(reportId);
                        os__.writeString(formationId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void beginRevenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_beginRevenge cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                    try
                    {
                        ret__ = end_beginRevenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool beginRevenge_async(com.XSanGo.Protocol.AMI_ItemChip_beginRevenge cb__, string reportId, string formationId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginRevenge_name);
                        result__ = begin_beginRevenge(reportId, formationId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge>(this, __beginRevenge_name, beginRevenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool beginRevenge_async(com.XSanGo.Protocol.AMI_ItemChip_beginRevenge cb__, string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginRevenge_name);
                        result__ = begin_beginRevenge(reportId, formationId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_beginRevenge>(this, __beginRevenge_name, beginRevenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRob> begin_beginRob(string targetId, string robItemId, string formationId)
                {
                    return begin_beginRob(targetId, robItemId, formationId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRob> begin_beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_beginRob(targetId, robItemId, formationId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_beginRob(string targetId, string robItemId, string formationId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginRob(targetId, robItemId, formationId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginRob(targetId, robItemId, formationId, ctx__, true, cb__, cookie__);
                }

                private const string __beginRob_name = "beginRob";

                public com.XSanGo.Protocol.PvpOpponentFormationView end_beginRob(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __beginRob_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRob> begin_beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__beginRob_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_beginRob> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_beginRob>(this, __beginRob_name, beginRob_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__beginRob_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        os__.writeString(robItemId);
                        os__.writeString(formationId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void beginRob_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_beginRob cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                    try
                    {
                        ret__ = end_beginRob(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool beginRob_async(com.XSanGo.Protocol.AMI_ItemChip_beginRob cb__, string targetId, string robItemId, string formationId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRob> result__;
                    try
                    {
                        checkTwowayOnly__(__beginRob_name);
                        result__ = begin_beginRob(targetId, robItemId, formationId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_beginRob>(this, __beginRob_name, beginRob_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool beginRob_async(com.XSanGo.Protocol.AMI_ItemChip_beginRob cb__, string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_beginRob> result__;
                    try
                    {
                        checkTwowayOnly__(__beginRob_name);
                        result__ = begin_beginRob(targetId, robItemId, formationId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_beginRob>(this, __beginRob_name, beginRob_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_compoundChip> begin_compoundChip(string itemId)
                {
                    return begin_compoundChip(itemId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_compoundChip> begin_compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_compoundChip(itemId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_compoundChip(string itemId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_compoundChip(itemId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_compoundChip(itemId, ctx__, true, cb__, cookie__);
                }

                private const string __compoundChip_name = "compoundChip";

                public string end_compoundChip(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __compoundChip_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_compoundChip> begin_compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__compoundChip_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_compoundChip> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_compoundChip>(this, __compoundChip_name, compoundChip_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__compoundChip_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(itemId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void compoundChip_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_compoundChip cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_compoundChip(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool compoundChip_async(com.XSanGo.Protocol.AMI_ItemChip_compoundChip cb__, string itemId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_compoundChip> result__;
                    try
                    {
                        checkTwowayOnly__(__compoundChip_name);
                        result__ = begin_compoundChip(itemId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_compoundChip>(this, __compoundChip_name, compoundChip_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool compoundChip_async(com.XSanGo.Protocol.AMI_ItemChip_compoundChip cb__, string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_compoundChip> result__;
                    try
                    {
                        checkTwowayOnly__(__compoundChip_name);
                        result__ = begin_compoundChip(itemId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_compoundChip>(this, __compoundChip_name, compoundChip_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRevenge> begin_endRevenge(string reportId, byte remainHero, int skipFlag)
                {
                    return begin_endRevenge(reportId, remainHero, skipFlag, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRevenge> begin_endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_endRevenge(reportId, remainHero, skipFlag, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_endRevenge(string reportId, byte remainHero, int skipFlag, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endRevenge(reportId, remainHero, skipFlag, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endRevenge(reportId, remainHero, skipFlag, ctx__, true, cb__, cookie__);
                }

                private const string __endRevenge_name = "endRevenge";

                public string end_endRevenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __endRevenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRevenge> begin_endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__endRevenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_endRevenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_endRevenge>(this, __endRevenge_name, endRevenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__endRevenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(reportId);
                        os__.writeByte(remainHero);
                        os__.writeInt(skipFlag);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void endRevenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_endRevenge cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_endRevenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool endRevenge_async(com.XSanGo.Protocol.AMI_ItemChip_endRevenge cb__, string reportId, byte remainHero, int skipFlag)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRevenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endRevenge_name);
                        result__ = begin_endRevenge(reportId, remainHero, skipFlag);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_endRevenge>(this, __endRevenge_name, endRevenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool endRevenge_async(com.XSanGo.Protocol.AMI_ItemChip_endRevenge cb__, string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRevenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endRevenge_name);
                        result__ = begin_endRevenge(reportId, remainHero, skipFlag, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_endRevenge>(this, __endRevenge_name, endRevenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRob> begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag)
                {
                    return begin_endRob(targetId, robItemId, remainHero, skipFlag, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRob> begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_endRob(targetId, robItemId, remainHero, skipFlag, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endRob(targetId, robItemId, remainHero, skipFlag, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endRob(targetId, robItemId, remainHero, skipFlag, ctx__, true, cb__, cookie__);
                }

                private const string __endRob_name = "endRob";

                public string end_endRob(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __endRob_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRob> begin_endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__endRob_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_endRob> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_endRob>(this, __endRob_name, endRob_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__endRob_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetId);
                        os__.writeString(robItemId);
                        os__.writeByte(remainHero);
                        os__.writeInt(skipFlag);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void endRob_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_endRob cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_endRob(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool endRob_async(com.XSanGo.Protocol.AMI_ItemChip_endRob cb__, string targetId, string robItemId, byte remainHero, int skipFlag)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRob> result__;
                    try
                    {
                        checkTwowayOnly__(__endRob_name);
                        result__ = begin_endRob(targetId, robItemId, remainHero, skipFlag);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_endRob>(this, __endRob_name, endRob_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool endRob_async(com.XSanGo.Protocol.AMI_ItemChip_endRob cb__, string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_endRob> result__;
                    try
                    {
                        checkTwowayOnly__(__endRob_name);
                        result__ = begin_endRob(targetId, robItemId, remainHero, skipFlag, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_endRob>(this, __endRob_name, endRob_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_heroReset> begin_heroReset(string heroId, int release)
                {
                    return begin_heroReset(heroId, release, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_heroReset> begin_heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_heroReset(heroId, release, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_heroReset(string heroId, int release, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_heroReset(heroId, release, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_heroReset(heroId, release, ctx__, true, cb__, cookie__);
                }

                private const string __heroReset_name = "heroReset";

                public string end_heroReset(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __heroReset_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_heroReset> begin_heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__heroReset_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_heroReset> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_heroReset>(this, __heroReset_name, heroReset_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__heroReset_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(heroId);
                        os__.writeInt(release);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void heroReset_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_heroReset cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_heroReset(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool heroReset_async(com.XSanGo.Protocol.AMI_ItemChip_heroReset cb__, string heroId, int release)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_heroReset> result__;
                    try
                    {
                        checkTwowayOnly__(__heroReset_name);
                        result__ = begin_heroReset(heroId, release);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_heroReset>(this, __heroReset_name, heroReset_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool heroReset_async(com.XSanGo.Protocol.AMI_ItemChip_heroReset cb__, string heroId, int release, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_heroReset> result__;
                    try
                    {
                        checkTwowayOnly__(__heroReset_name);
                        result__ = begin_heroReset(heroId, release, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_heroReset>(this, __heroReset_name, heroReset_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset> begin_requestHeroReset()
                {
                    return begin_requestHeroReset(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset> begin_requestHeroReset(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_requestHeroReset(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_requestHeroReset(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_requestHeroReset(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_requestHeroReset(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_requestHeroReset(ctx__, true, cb__, cookie__);
                }

                private const string __requestHeroReset_name = "requestHeroReset";

                public string end_requestHeroReset(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __requestHeroReset_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset> begin_requestHeroReset(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__requestHeroReset_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset>(this, __requestHeroReset_name, requestHeroReset_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__requestHeroReset_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void requestHeroReset_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_requestHeroReset(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool requestHeroReset_async(com.XSanGo.Protocol.AMI_ItemChip_requestHeroReset cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset> result__;
                    try
                    {
                        checkTwowayOnly__(__requestHeroReset_name);
                        result__ = begin_requestHeroReset();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset>(this, __requestHeroReset_name, requestHeroReset_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool requestHeroReset_async(com.XSanGo.Protocol.AMI_ItemChip_requestHeroReset cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset> result__;
                    try
                    {
                        checkTwowayOnly__(__requestHeroReset_name);
                        result__ = begin_requestHeroReset(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_requestHeroReset>(this, __requestHeroReset_name, requestHeroReset_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_robFightReport> begin_robFightReport()
                {
                    return begin_robFightReport(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_robFightReport> begin_robFightReport(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_robFightReport(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_robFightReport(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_robFightReport(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_robFightReport(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_robFightReport(ctx__, true, cb__, cookie__);
                }

                private const string __robFightReport_name = "robFightReport";

                public string end_robFightReport(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __robFightReport_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_robFightReport> begin_robFightReport(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__robFightReport_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_robFightReport> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_robFightReport>(this, __robFightReport_name, robFightReport_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__robFightReport_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void robFightReport_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_robFightReport cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_robFightReport(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool robFightReport_async(com.XSanGo.Protocol.AMI_ItemChip_robFightReport cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_robFightReport> result__;
                    try
                    {
                        checkTwowayOnly__(__robFightReport_name);
                        result__ = begin_robFightReport();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_robFightReport>(this, __robFightReport_name, robFightReport_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool robFightReport_async(com.XSanGo.Protocol.AMI_ItemChip_robFightReport cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_robFightReport> result__;
                    try
                    {
                        checkTwowayOnly__(__robFightReport_name);
                        result__ = begin_robFightReport(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_robFightReport>(this, __robFightReport_name, robFightReport_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_saveFormation> begin_saveFormation(string roleItemId)
                {
                    return begin_saveFormation(roleItemId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_saveFormation> begin_saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_saveFormation(roleItemId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_saveFormation(string roleItemId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_saveFormation(roleItemId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_saveFormation(roleItemId, ctx__, true, cb__, cookie__);
                }

                private const string __saveFormation_name = "saveFormation";

                public void end_saveFormation(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __saveFormation_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_saveFormation> begin_saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__saveFormation_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_saveFormation> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_saveFormation>(this, __saveFormation_name, saveFormation_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__saveFormation_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(roleItemId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void saveFormation_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_saveFormation cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_saveFormation(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool saveFormation_async(com.XSanGo.Protocol.AMI_ItemChip_saveFormation cb__, string roleItemId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_saveFormation> result__;
                    try
                    {
                        checkTwowayOnly__(__saveFormation_name);
                        result__ = begin_saveFormation(roleItemId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_saveFormation>(this, __saveFormation_name, saveFormation_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool saveFormation_async(com.XSanGo.Protocol.AMI_ItemChip_saveFormation cb__, string roleItemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_saveFormation> result__;
                    try
                    {
                        checkTwowayOnly__(__saveFormation_name);
                        result__ = begin_saveFormation(roleItemId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_saveFormation>(this, __saveFormation_name, saveFormation_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showChip> begin_showChip()
                {
                    return begin_showChip(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showChip> begin_showChip(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_showChip(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_showChip(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_showChip(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_showChip(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_showChip(ctx__, true, cb__, cookie__);
                }

                private const string __showChip_name = "showChip";

                public string end_showChip(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __showChip_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showChip> begin_showChip(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__showChip_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_showChip> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_showChip>(this, __showChip_name, showChip_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__showChip_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void showChip_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_showChip cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_showChip(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool showChip_async(com.XSanGo.Protocol.AMI_ItemChip_showChip cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showChip> result__;
                    try
                    {
                        checkTwowayOnly__(__showChip_name);
                        result__ = begin_showChip();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_showChip>(this, __showChip_name, showChip_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool showChip_async(com.XSanGo.Protocol.AMI_ItemChip_showChip cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showChip> result__;
                    try
                    {
                        checkTwowayOnly__(__showChip_name);
                        result__ = begin_showChip(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_showChip>(this, __showChip_name, showChip_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showRobList> begin_showRobList(string chipId)
                {
                    return begin_showRobList(chipId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showRobList> begin_showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_showRobList(chipId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_showRobList(string chipId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_showRobList(chipId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_showRobList(chipId, ctx__, true, cb__, cookie__);
                }

                private const string __showRobList_name = "showRobList";

                public string end_showRobList(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __showRobList_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showRobList> begin_showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__showRobList_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_showRobList> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_showRobList>(this, __showRobList_name, showRobList_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__showRobList_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(chipId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void showRobList_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_showRobList cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_showRobList(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool showRobList_async(com.XSanGo.Protocol.AMI_ItemChip_showRobList cb__, string chipId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showRobList> result__;
                    try
                    {
                        checkTwowayOnly__(__showRobList_name);
                        result__ = begin_showRobList(chipId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_showRobList>(this, __showRobList_name, showRobList_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool showRobList_async(com.XSanGo.Protocol.AMI_ItemChip_showRobList cb__, string chipId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_showRobList> result__;
                    try
                    {
                        checkTwowayOnly__(__showRobList_name);
                        result__ = begin_showRobList(chipId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_showRobList>(this, __showRobList_name, showRobList_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_strutItem> begin_strutItem(string itemId)
                {
                    return begin_strutItem(itemId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_strutItem> begin_strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_strutItem(itemId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_strutItem(string itemId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_strutItem(itemId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_strutItem(itemId, ctx__, true, cb__, cookie__);
                }

                private const string __strutItem_name = "strutItem";

                public void end_strutItem(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __strutItem_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_strutItem> begin_strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__strutItem_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_strutItem> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_strutItem>(this, __strutItem_name, strutItem_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__strutItem_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(itemId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void strutItem_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_ItemChip_strutItem cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_strutItem(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool strutItem_async(com.XSanGo.Protocol.AMI_ItemChip_strutItem cb__, string itemId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_strutItem> result__;
                    try
                    {
                        checkTwowayOnly__(__strutItem_name);
                        result__ = begin_strutItem(itemId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_strutItem>(this, __strutItem_name, strutItem_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool strutItem_async(com.XSanGo.Protocol.AMI_ItemChip_strutItem cb__, string itemId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_ItemChip_strutItem> result__;
                    try
                    {
                        checkTwowayOnly__(__strutItem_name);
                        result__ = begin_strutItem(itemId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_ItemChip_strutItem>(this, __strutItem_name, strutItem_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static ItemChipPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ItemChipPrx r = b as ItemChipPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        ItemChipPrxHelper h = new ItemChipPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ItemChipPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ItemChipPrx r = b as ItemChipPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        ItemChipPrxHelper h = new ItemChipPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ItemChipPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            ItemChipPrxHelper h = new ItemChipPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static ItemChipPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            ItemChipPrxHelper h = new ItemChipPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static ItemChipPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ItemChipPrx r = b as ItemChipPrx;
                    if(r == null)
                    {
                        ItemChipPrxHelper h = new ItemChipPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static ItemChipPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    ItemChipPrxHelper h = new ItemChipPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::ItemChip"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new ItemChipDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new ItemChipDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, ItemChipPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static ItemChipPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        ItemChipPrxHelper result = new ItemChipPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface ItemChipDel_ : Ice.ObjectDel_
            {
                void saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string showChip(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.PvpOpponentFormationView beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string robFightReport(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.PvpOpponentFormationView beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string requestHeroReset(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ItemChipDelM_ : Ice.ObjectDelM_, ItemChipDel_
            {
                public com.XSanGo.Protocol.PvpOpponentFormationView beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("beginRevenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(reportId);
                            os__.writeString(formationId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public com.XSanGo.Protocol.PvpOpponentFormationView beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("beginRob", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            os__.writeString(robItemId);
                            os__.writeString(formationId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.PvpOpponentFormationView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("compoundChip", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(itemId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("endRevenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(reportId);
                            os__.writeByte(remainHero);
                            os__.writeInt(skipFlag);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("endRob", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetId);
                            os__.writeString(robItemId);
                            os__.writeByte(remainHero);
                            os__.writeInt(skipFlag);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("heroReset", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(heroId);
                            os__.writeInt(release);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string requestHeroReset(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("requestHeroReset", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string robFightReport(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("robFightReport", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("saveFormation", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(roleItemId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string showChip(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("showChip", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("showRobList", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(chipId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("strutItem", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(itemId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class ItemChipDelD_ : Ice.ObjectDelD_, ItemChipDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.PvpOpponentFormationView beginRevenge(string reportId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.PvpOpponentFormationView beginRob(string targetId, string robItemId, string formationId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string compoundChip(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "compoundChip", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.compoundChip(itemId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string endRevenge(string reportId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "endRevenge", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.endRevenge(reportId, remainHero, skipFlag, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string endRob(string targetId, string robItemId, byte remainHero, int skipFlag, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "endRob", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.endRob(targetId, robItemId, remainHero, skipFlag, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string heroReset(string heroId, int release, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "heroReset", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.heroReset(heroId, release, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string requestHeroReset(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "requestHeroReset", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.requestHeroReset(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string robFightReport(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void saveFormation(string roleItemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "saveFormation", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.saveFormation(roleItemId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string showChip(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "showChip", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.showChip(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string showRobList(string chipId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "showRobList", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.showRobList(chipId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void strutItem(string itemId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "strutItem", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        ItemChip servant__ = null;
                        try
                        {
                            servant__ = (ItemChip)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.strutItem(itemId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class ItemChipDisp_ : Ice.ObjectImpl, ItemChip
            {
                #region Slice operations

                public void saveFormation(string roleItemId)
                {
                    saveFormation(roleItemId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void saveFormation(string roleItemId, Ice.Current current__);

                public string showChip()
                {
                    return showChip(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string showChip(Ice.Current current__);

                public string compoundChip(string itemId)
                {
                    return compoundChip(itemId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string compoundChip(string itemId, Ice.Current current__);

                public string showRobList(string chipId)
                {
                    return showRobList(chipId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string showRobList(string chipId, Ice.Current current__);

                public void beginRob_async(com.XSanGo.Protocol.AMD_ItemChip_beginRob cb__, string targetId, string robItemId, string formationId)
                {
                    beginRob_async(cb__, targetId, robItemId, formationId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void beginRob_async(com.XSanGo.Protocol.AMD_ItemChip_beginRob cb__, string targetId, string robItemId, string formationId, Ice.Current current__);

                public string endRob(string targetId, string robItemId, byte remainHero, int skipFlag)
                {
                    return endRob(targetId, robItemId, remainHero, skipFlag, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string endRob(string targetId, string robItemId, byte remainHero, int skipFlag, Ice.Current current__);

                public void robFightReport_async(com.XSanGo.Protocol.AMD_ItemChip_robFightReport cb__)
                {
                    robFightReport_async(cb__, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void robFightReport_async(com.XSanGo.Protocol.AMD_ItemChip_robFightReport cb__, Ice.Current current__);

                public void beginRevenge_async(com.XSanGo.Protocol.AMD_ItemChip_beginRevenge cb__, string reportId, string formationId)
                {
                    beginRevenge_async(cb__, reportId, formationId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void beginRevenge_async(com.XSanGo.Protocol.AMD_ItemChip_beginRevenge cb__, string reportId, string formationId, Ice.Current current__);

                public string endRevenge(string reportId, byte remainHero, int skipFlag)
                {
                    return endRevenge(reportId, remainHero, skipFlag, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string endRevenge(string reportId, byte remainHero, int skipFlag, Ice.Current current__);

                public void strutItem(string itemId)
                {
                    strutItem(itemId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void strutItem(string itemId, Ice.Current current__);

                public string requestHeroReset()
                {
                    return requestHeroReset(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string requestHeroReset(Ice.Current current__);

                public string heroReset(string heroId, int release)
                {
                    return heroReset(heroId, release, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string heroReset(string heroId, int release, Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::ItemChip"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus saveFormation___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string roleItemId;
                    roleItemId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.saveFormation(roleItemId, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus showChip___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.showChip(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus compoundChip___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string itemId;
                    itemId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        string ret__ = obj__.compoundChip(itemId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus showRobList___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string chipId;
                    chipId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        string ret__ = obj__.showRobList(chipId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus beginRob___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    string robItemId;
                    string formationId;
                    targetId = is__.readString();
                    robItemId = is__.readString();
                    formationId = is__.readString();
                    inS__.endReadParams();
                    AMD_ItemChip_beginRob cb__ = new _AMD_ItemChip_beginRob(inS__);
                    try
                    {
                        obj__.beginRob_async(cb__, targetId, robItemId, formationId, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus endRob___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetId;
                    string robItemId;
                    byte remainHero;
                    int skipFlag;
                    targetId = is__.readString();
                    robItemId = is__.readString();
                    remainHero = is__.readByte();
                    skipFlag = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        string ret__ = obj__.endRob(targetId, robItemId, remainHero, skipFlag, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus robFightReport___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    AMD_ItemChip_robFightReport cb__ = new _AMD_ItemChip_robFightReport(inS__);
                    try
                    {
                        obj__.robFightReport_async(cb__, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus beginRevenge___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string reportId;
                    string formationId;
                    reportId = is__.readString();
                    formationId = is__.readString();
                    inS__.endReadParams();
                    AMD_ItemChip_beginRevenge cb__ = new _AMD_ItemChip_beginRevenge(inS__);
                    try
                    {
                        obj__.beginRevenge_async(cb__, reportId, formationId, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus endRevenge___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string reportId;
                    byte remainHero;
                    int skipFlag;
                    reportId = is__.readString();
                    remainHero = is__.readByte();
                    skipFlag = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        string ret__ = obj__.endRevenge(reportId, remainHero, skipFlag, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus strutItem___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string itemId;
                    itemId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.strutItem(itemId, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus requestHeroReset___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.requestHeroReset(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus heroReset___(ItemChip obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string heroId;
                    int release;
                    heroId = is__.readString();
                    release = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        string ret__ = obj__.heroReset(heroId, release, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                private static string[] all__ =
                {
                    "beginRevenge",
                    "beginRob",
                    "compoundChip",
                    "endRevenge",
                    "endRob",
                    "heroReset",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "requestHeroReset",
                    "robFightReport",
                    "saveFormation",
                    "showChip",
                    "showRobList",
                    "strutItem"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return beginRevenge___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return beginRob___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return compoundChip___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return endRevenge___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return endRob___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return heroReset___(this, inS__, current__);
                        }
                        case 6:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 7:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 8:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 9:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                        case 10:
                        {
                            return requestHeroReset___(this, inS__, current__);
                        }
                        case 11:
                        {
                            return robFightReport___(this, inS__, current__);
                        }
                        case 12:
                        {
                            return saveFormation___(this, inS__, current__);
                        }
                        case 13:
                        {
                            return showChip___(this, inS__, current__);
                        }
                        case 14:
                        {
                            return showRobList___(this, inS__, current__);
                        }
                        case 15:
                        {
                            return strutItem___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_saveFormation : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_showChip : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_compoundChip : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_showRobList : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_beginRob : Ice.AMICallbackBase
            {
                public abstract void ice_response(com.XSanGo.Protocol.PvpOpponentFormationView ret__);

                public void response__(com.XSanGo.Protocol.PvpOpponentFormationView ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_ItemChip_beginRob : Ice.AMDCallback
            {
                void ice_response(com.XSanGo.Protocol.PvpOpponentFormationView ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_ItemChip_beginRob : IceInternal.IncomingAsync, AMD_ItemChip_beginRob
            {
                public _AMD_ItemChip_beginRob(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(com.XSanGo.Protocol.PvpOpponentFormationView ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            if(ret__ == null)
                            {
                                com.XSanGo.Protocol.PvpOpponentFormationView tmp__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                                tmp__.write__(os__);
                            }
                            else
                            {
                                ret__.write__(os__);
                            }
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }

                override public void ice_exception(_System.Exception ex)
                {
                    try
                    {
                        throw ex;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(_System.Exception ex__)
                    {
                        base.ice_exception(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_endRob : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_robFightReport : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_ItemChip_robFightReport : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_ItemChip_robFightReport : IceInternal.IncomingAsync, AMD_ItemChip_robFightReport
            {
                public _AMD_ItemChip_robFightReport(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }

                override public void ice_exception(_System.Exception ex)
                {
                    try
                    {
                        throw ex;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(_System.Exception ex__)
                    {
                        base.ice_exception(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_beginRevenge : Ice.AMICallbackBase
            {
                public abstract void ice_response(com.XSanGo.Protocol.PvpOpponentFormationView ret__);

                public void response__(com.XSanGo.Protocol.PvpOpponentFormationView ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_ItemChip_beginRevenge : Ice.AMDCallback
            {
                void ice_response(com.XSanGo.Protocol.PvpOpponentFormationView ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_ItemChip_beginRevenge : IceInternal.IncomingAsync, AMD_ItemChip_beginRevenge
            {
                public _AMD_ItemChip_beginRevenge(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(com.XSanGo.Protocol.PvpOpponentFormationView ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            if(ret__ == null)
                            {
                                com.XSanGo.Protocol.PvpOpponentFormationView tmp__ = new com.XSanGo.Protocol.PvpOpponentFormationView();
                                tmp__.write__(os__);
                            }
                            else
                            {
                                ret__.write__(os__);
                            }
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }

                override public void ice_exception(_System.Exception ex)
                {
                    try
                    {
                        throw ex;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        if(validateResponse__(false))
                        {
                            writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                            response__();
                        }
                    }
                    catch(_System.Exception ex__)
                    {
                        base.ice_exception(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_endRevenge : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_strutItem : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_requestHeroReset : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_ItemChip_heroReset : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }
        }
    }
}
