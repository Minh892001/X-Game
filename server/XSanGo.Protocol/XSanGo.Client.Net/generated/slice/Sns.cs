// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Sns.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public enum Result
            {
                SUCCESSFUL,
                FAILED
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface SnsCallBack : Ice.Object, SnsCallBackOperations_, SnsCallBackOperationsNC_
            {
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class SnsRoleView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public bool isOnline;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string icon;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string name;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int level;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int vip;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int fightingPower;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public bool remainingActActAbilityPoints;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public bool canapplying;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public SnsRoleView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public SnsRoleView(string id, bool isOnline, string icon, string name, int level, int vip, int fightingPower, bool remainingActActAbilityPoints, bool canapplying)
                {
                    this.id = id;
                    this.isOnline = isOnline;
                    this.icon = icon;
                    this.name = name;
                    this.level = level;
                    this.vip = vip;
                    this.fightingPower = fightingPower;
                    this.remainingActActAbilityPoints = remainingActActAbilityPoints;
                    this.canapplying = canapplying;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::SnsRoleView");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, isOnline);
                    IceInternal.HashUtil.hashAdd(ref h__, icon);
                    IceInternal.HashUtil.hashAdd(ref h__, name);
                    IceInternal.HashUtil.hashAdd(ref h__, level);
                    IceInternal.HashUtil.hashAdd(ref h__, vip);
                    IceInternal.HashUtil.hashAdd(ref h__, fightingPower);
                    IceInternal.HashUtil.hashAdd(ref h__, remainingActActAbilityPoints);
                    IceInternal.HashUtil.hashAdd(ref h__, canapplying);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    SnsRoleView o__ = (SnsRoleView)other__;
                    if(id == null)
                    {
                        if(o__.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!id.Equals(o__.id))
                        {
                            return false;
                        }
                    }
                    if(!isOnline.Equals(o__.isOnline))
                    {
                        return false;
                    }
                    if(icon == null)
                    {
                        if(o__.icon != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!icon.Equals(o__.icon))
                        {
                            return false;
                        }
                    }
                    if(name == null)
                    {
                        if(o__.name != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!name.Equals(o__.name))
                        {
                            return false;
                        }
                    }
                    if(!level.Equals(o__.level))
                    {
                        return false;
                    }
                    if(!vip.Equals(o__.vip))
                    {
                        return false;
                    }
                    if(!fightingPower.Equals(o__.fightingPower))
                    {
                        return false;
                    }
                    if(!remainingActActAbilityPoints.Equals(o__.remainingActActAbilityPoints))
                    {
                        return false;
                    }
                    if(!canapplying.Equals(o__.canapplying))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(SnsRoleView lhs__, SnsRoleView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(SnsRoleView lhs__, SnsRoleView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeString(id);
                    os__.writeBool(isOnline);
                    os__.writeString(icon);
                    os__.writeString(name);
                    os__.writeInt(level);
                    os__.writeInt(vip);
                    os__.writeInt(fightingPower);
                    os__.writeBool(remainingActActAbilityPoints);
                    os__.writeBool(canapplying);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readString();
                    isOnline = is__.readBool();
                    icon = is__.readString();
                    name = is__.readString();
                    level = is__.readInt();
                    vip = is__.readInt();
                    fightingPower = is__.readInt();
                    remainingActActAbilityPoints = is__.readBool();
                    canapplying = is__.readBool();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class OpenSnsView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int onlineCount;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int totleCount;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int applyingCount;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int currentVit;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int maxVit;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.SnsRoleView[] friends;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public OpenSnsView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public OpenSnsView(int onlineCount, int totleCount, int applyingCount, int currentVit, int maxVit, com.XSanGo.Protocol.SnsRoleView[] friends)
                {
                    this.onlineCount = onlineCount;
                    this.totleCount = totleCount;
                    this.applyingCount = applyingCount;
                    this.currentVit = currentVit;
                    this.maxVit = maxVit;
                    this.friends = friends;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::OpenSnsView");
                    IceInternal.HashUtil.hashAdd(ref h__, onlineCount);
                    IceInternal.HashUtil.hashAdd(ref h__, totleCount);
                    IceInternal.HashUtil.hashAdd(ref h__, applyingCount);
                    IceInternal.HashUtil.hashAdd(ref h__, currentVit);
                    IceInternal.HashUtil.hashAdd(ref h__, maxVit);
                    IceInternal.HashUtil.hashAdd(ref h__, friends);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    OpenSnsView o__ = (OpenSnsView)other__;
                    if(!onlineCount.Equals(o__.onlineCount))
                    {
                        return false;
                    }
                    if(!totleCount.Equals(o__.totleCount))
                    {
                        return false;
                    }
                    if(!applyingCount.Equals(o__.applyingCount))
                    {
                        return false;
                    }
                    if(!currentVit.Equals(o__.currentVit))
                    {
                        return false;
                    }
                    if(!maxVit.Equals(o__.maxVit))
                    {
                        return false;
                    }
                    if(friends == null)
                    {
                        if(o__.friends != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(friends, o__.friends))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(OpenSnsView lhs__, OpenSnsView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(OpenSnsView lhs__, OpenSnsView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(onlineCount);
                    os__.writeInt(totleCount);
                    os__.writeInt(applyingCount);
                    os__.writeInt(currentVit);
                    os__.writeInt(maxVit);
                    com.XSanGo.Protocol.RoleListHelper.write(os__, friends);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    onlineCount = is__.readInt();
                    totleCount = is__.readInt();
                    applyingCount = is__.readInt();
                    currentVit = is__.readInt();
                    maxVit = is__.readInt();
                    friends = com.XSanGo.Protocol.RoleListHelper.read(is__);
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface Sns : Ice.Object, SnsOperations_, SnsOperationsNC_
            {
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_SnsCallBack_applying();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_SnsCallBack_handleApplyingWith();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_applyForFriend();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_accept();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_refuse();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_removeFriend();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_untreatedFriendApplyings(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_addFoe();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_removeFoe();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_cleanFoes();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_addBlacklist();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_removeBlacklist();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_cleanBlacklist();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_queryAllFreinds(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_queryAllFreindsView(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_queryPlayersLike(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_queryAllFoes(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Sns_queryAllBlacklist(string ret__);
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface SnsCallBackPrx : Ice.ObjectPrx
            {
                void applying(string player);
                void applying(string player, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_applying> begin_applying(string player);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_applying> begin_applying(string player, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_applying(string player, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_applying(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_applying(Ice.AsyncResult r__);

                bool applying_async(com.XSanGo.Protocol.AMI_SnsCallBack_applying cb__, string player);
                bool applying_async(com.XSanGo.Protocol.AMI_SnsCallBack_applying cb__, string player, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void handleApplyingWith(com.XSanGo.Protocol.Result r);
                void handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith> begin_handleApplyingWith(com.XSanGo.Protocol.Result r);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith> begin_handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_handleApplyingWith(com.XSanGo.Protocol.Result r, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_handleApplyingWith(Ice.AsyncResult r__);

                bool handleApplyingWith_async(com.XSanGo.Protocol.AMI_SnsCallBack_handleApplyingWith cb__, com.XSanGo.Protocol.Result r);
                bool handleApplyingWith_async(com.XSanGo.Protocol.AMI_SnsCallBack_handleApplyingWith cb__, com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface SnsPrx : Ice.ObjectPrx
            {
                void applyForFriend(string targetPlayer);
                void applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_applyForFriend> begin_applyForFriend(string targetPlayer);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_applyForFriend> begin_applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_applyForFriend(string targetPlayer, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_applyForFriend(Ice.AsyncResult r__);

                bool applyForFriend_async(com.XSanGo.Protocol.AMI_Sns_applyForFriend cb__, string targetPlayer);
                bool applyForFriend_async(com.XSanGo.Protocol.AMI_Sns_applyForFriend cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void accept(string player);
                void accept(string player, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_accept> begin_accept(string player);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_accept> begin_accept(string player, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_accept(string player, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_accept(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_accept(Ice.AsyncResult r__);

                bool accept_async(com.XSanGo.Protocol.AMI_Sns_accept cb__, string player);
                bool accept_async(com.XSanGo.Protocol.AMI_Sns_accept cb__, string player, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void refuse(string player);
                void refuse(string player, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_refuse> begin_refuse(string player);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_refuse> begin_refuse(string player, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_refuse(string player, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_refuse(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_refuse(Ice.AsyncResult r__);

                bool refuse_async(com.XSanGo.Protocol.AMI_Sns_refuse cb__, string player);
                bool refuse_async(com.XSanGo.Protocol.AMI_Sns_refuse cb__, string player, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void removeFriend(string targetPlayer);
                void removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFriend> begin_removeFriend(string targetPlayer);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFriend> begin_removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_removeFriend(string targetPlayer, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_removeFriend(Ice.AsyncResult r__);

                bool removeFriend_async(com.XSanGo.Protocol.AMI_Sns_removeFriend cb__, string targetPlayer);
                bool removeFriend_async(com.XSanGo.Protocol.AMI_Sns_removeFriend cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string untreatedFriendApplyings();
                string untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings> begin_untreatedFriendApplyings();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings> begin_untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_untreatedFriendApplyings(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_untreatedFriendApplyings(Ice.AsyncResult r__);

                bool untreatedFriendApplyings_async(com.XSanGo.Protocol.AMI_Sns_untreatedFriendApplyings cb__);
                bool untreatedFriendApplyings_async(com.XSanGo.Protocol.AMI_Sns_untreatedFriendApplyings cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void addFoe(string targetPlayer);
                void addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addFoe> begin_addFoe(string targetPlayer);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addFoe> begin_addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_addFoe(string targetPlayer, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_addFoe(Ice.AsyncResult r__);

                bool addFoe_async(com.XSanGo.Protocol.AMI_Sns_addFoe cb__, string targetPlayer);
                bool addFoe_async(com.XSanGo.Protocol.AMI_Sns_addFoe cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void removeFoe(string targetPlayer);
                void removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFoe> begin_removeFoe(string targetPlayer);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFoe> begin_removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_removeFoe(string targetPlayer, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_removeFoe(Ice.AsyncResult r__);

                bool removeFoe_async(com.XSanGo.Protocol.AMI_Sns_removeFoe cb__, string targetPlayer);
                bool removeFoe_async(com.XSanGo.Protocol.AMI_Sns_removeFoe cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void cleanFoes();
                void cleanFoes(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanFoes> begin_cleanFoes();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanFoes> begin_cleanFoes(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_cleanFoes(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_cleanFoes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_cleanFoes(Ice.AsyncResult r__);

                bool cleanFoes_async(com.XSanGo.Protocol.AMI_Sns_cleanFoes cb__);
                bool cleanFoes_async(com.XSanGo.Protocol.AMI_Sns_cleanFoes cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void addBlacklist(string targetPlayer);
                void addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addBlacklist> begin_addBlacklist(string targetPlayer);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addBlacklist> begin_addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_addBlacklist(string targetPlayer, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_addBlacklist(Ice.AsyncResult r__);

                bool addBlacklist_async(com.XSanGo.Protocol.AMI_Sns_addBlacklist cb__, string targetPlayer);
                bool addBlacklist_async(com.XSanGo.Protocol.AMI_Sns_addBlacklist cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void removeBlacklist(string targetPlayer);
                void removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeBlacklist> begin_removeBlacklist(string targetPlayer);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeBlacklist> begin_removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_removeBlacklist(string targetPlayer, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_removeBlacklist(Ice.AsyncResult r__);

                bool removeBlacklist_async(com.XSanGo.Protocol.AMI_Sns_removeBlacklist cb__, string targetPlayer);
                bool removeBlacklist_async(com.XSanGo.Protocol.AMI_Sns_removeBlacklist cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void cleanBlacklist();
                void cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist> begin_cleanBlacklist();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist> begin_cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_cleanBlacklist(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_cleanBlacklist(Ice.AsyncResult r__);

                bool cleanBlacklist_async(com.XSanGo.Protocol.AMI_Sns_cleanBlacklist cb__);
                bool cleanBlacklist_async(com.XSanGo.Protocol.AMI_Sns_cleanBlacklist cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string queryAllFreinds();
                string queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds> begin_queryAllFreinds();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds> begin_queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_queryAllFreinds(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_queryAllFreinds(Ice.AsyncResult r__);

                bool queryAllFreinds_async(com.XSanGo.Protocol.AMI_Sns_queryAllFreinds cb__);
                bool queryAllFreinds_async(com.XSanGo.Protocol.AMI_Sns_queryAllFreinds cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string queryAllFreindsView();
                string queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView> begin_queryAllFreindsView();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView> begin_queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_queryAllFreindsView(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_queryAllFreindsView(Ice.AsyncResult r__);

                bool queryAllFreindsView_async(com.XSanGo.Protocol.AMI_Sns_queryAllFreindsView cb__);
                bool queryAllFreindsView_async(com.XSanGo.Protocol.AMI_Sns_queryAllFreindsView cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string queryPlayersLike(int type, string partOfNickname);
                string queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike> begin_queryPlayersLike(int type, string partOfNickname);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike> begin_queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_queryPlayersLike(int type, string partOfNickname, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_queryPlayersLike(Ice.AsyncResult r__);

                bool queryPlayersLike_async(com.XSanGo.Protocol.AMI_Sns_queryPlayersLike cb__, int type, string partOfNickname);
                bool queryPlayersLike_async(com.XSanGo.Protocol.AMI_Sns_queryPlayersLike cb__, int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string queryAllFoes();
                string queryAllFoes(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFoes> begin_queryAllFoes();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFoes> begin_queryAllFoes(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_queryAllFoes(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_queryAllFoes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_queryAllFoes(Ice.AsyncResult r__);

                bool queryAllFoes_async(com.XSanGo.Protocol.AMI_Sns_queryAllFoes cb__);
                bool queryAllFoes_async(com.XSanGo.Protocol.AMI_Sns_queryAllFoes cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string queryAllBlacklist();
                string queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist> begin_queryAllBlacklist();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist> begin_queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_queryAllBlacklist(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_queryAllBlacklist(Ice.AsyncResult r__);

                bool queryAllBlacklist_async(com.XSanGo.Protocol.AMI_Sns_queryAllBlacklist cb__);
                bool queryAllBlacklist_async(com.XSanGo.Protocol.AMI_Sns_queryAllBlacklist cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface SnsCallBackOperations_
            {
                void applying(string player, Ice.Current current__);

                void handleApplyingWith(com.XSanGo.Protocol.Result r, Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface SnsCallBackOperationsNC_
            {
                void applying(string player);

                void handleApplyingWith(com.XSanGo.Protocol.Result r);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface SnsOperations_
            {
                void applyForFriend(string targetPlayer, Ice.Current current__);

                void accept(string player, Ice.Current current__);

                void refuse(string player, Ice.Current current__);

                void removeFriend(string targetPlayer, Ice.Current current__);

                void untreatedFriendApplyings_async(com.XSanGo.Protocol.AMD_Sns_untreatedFriendApplyings cb__, Ice.Current current__);

                void addFoe(string targetPlayer, Ice.Current current__);

                void removeFoe(string targetPlayer, Ice.Current current__);

                void cleanFoes(Ice.Current current__);

                void addBlacklist(string targetPlayer, Ice.Current current__);

                void removeBlacklist(string targetPlayer, Ice.Current current__);

                void cleanBlacklist(Ice.Current current__);

                void queryAllFreinds_async(com.XSanGo.Protocol.AMD_Sns_queryAllFreinds cb__, Ice.Current current__);

                void queryAllFreindsView_async(com.XSanGo.Protocol.AMD_Sns_queryAllFreindsView cb__, Ice.Current current__);

                void queryPlayersLike_async(com.XSanGo.Protocol.AMD_Sns_queryPlayersLike cb__, int type, string partOfNickname, Ice.Current current__);

                void queryAllFoes_async(com.XSanGo.Protocol.AMD_Sns_queryAllFoes cb__, Ice.Current current__);

                void queryAllBlacklist_async(com.XSanGo.Protocol.AMD_Sns_queryAllBlacklist cb__, Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface SnsOperationsNC_
            {
                void applyForFriend(string targetPlayer);

                void accept(string player);

                void refuse(string player);

                void removeFriend(string targetPlayer);

                void untreatedFriendApplyings_async(com.XSanGo.Protocol.AMD_Sns_untreatedFriendApplyings cb__);

                void addFoe(string targetPlayer);

                void removeFoe(string targetPlayer);

                void cleanFoes();

                void addBlacklist(string targetPlayer);

                void removeBlacklist(string targetPlayer);

                void cleanBlacklist();

                void queryAllFreinds_async(com.XSanGo.Protocol.AMD_Sns_queryAllFreinds cb__);

                void queryAllFreindsView_async(com.XSanGo.Protocol.AMD_Sns_queryAllFreindsView cb__);

                void queryPlayersLike_async(com.XSanGo.Protocol.AMD_Sns_queryPlayersLike cb__, int type, string partOfNickname);

                void queryAllFoes_async(com.XSanGo.Protocol.AMD_Sns_queryAllFoes cb__);

                void queryAllBlacklist_async(com.XSanGo.Protocol.AMD_Sns_queryAllBlacklist cb__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class SnsCallBackPrxHelper : Ice.ObjectPrxHelperBase, SnsCallBackPrx
            {
                #region Synchronous operations

                public void applying(string player)
                {
                    applying(player, null, false);
                }

                public void applying(string player, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    applying(player, context__, true);
                }

                private void applying(string player, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __applying_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                SnsCallBackDel_ del__ = (SnsCallBackDel_)delBase__;
                                del__.applying(player, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void handleApplyingWith(com.XSanGo.Protocol.Result r)
                {
                    handleApplyingWith(r, null, false);
                }

                public void handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    handleApplyingWith(r, context__, true);
                }

                private void handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __handleApplyingWith_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                SnsCallBackDel_ del__ = (SnsCallBackDel_)delBase__;
                                del__.handleApplyingWith(r, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_applying> begin_applying(string player)
                {
                    return begin_applying(player, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_applying> begin_applying(string player, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_applying(player, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_applying(string player, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_applying(player, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_applying(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_applying(player, ctx__, true, cb__, cookie__);
                }

                private const string __applying_name = "applying";

                public void end_applying(Ice.AsyncResult r__)
                {
                    end__(r__, __applying_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_applying> begin_applying(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_SnsCallBack_applying> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_SnsCallBack_applying>(this, __applying_name, applying_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__applying_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(player);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void applying_completed__(com.XSanGo.Protocol.Callback_SnsCallBack_applying cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool applying_async(com.XSanGo.Protocol.AMI_SnsCallBack_applying cb__, string player)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_applying> result__ = begin_applying(player);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool applying_async(com.XSanGo.Protocol.AMI_SnsCallBack_applying cb__, string player, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_applying> result__ = begin_applying(player, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith> begin_handleApplyingWith(com.XSanGo.Protocol.Result r)
                {
                    return begin_handleApplyingWith(r, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith> begin_handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_handleApplyingWith(r, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_handleApplyingWith(com.XSanGo.Protocol.Result r, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_handleApplyingWith(r, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_handleApplyingWith(r, ctx__, true, cb__, cookie__);
                }

                private const string __handleApplyingWith_name = "handleApplyingWith";

                public void end_handleApplyingWith(Ice.AsyncResult r__)
                {
                    end__(r__, __handleApplyingWith_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith> begin_handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith>(this, __handleApplyingWith_name, handleApplyingWith_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__handleApplyingWith_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeEnum((int)r, 1);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void handleApplyingWith_completed__(com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool handleApplyingWith_async(com.XSanGo.Protocol.AMI_SnsCallBack_handleApplyingWith cb__, com.XSanGo.Protocol.Result r)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith> result__ = begin_handleApplyingWith(r);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool handleApplyingWith_async(com.XSanGo.Protocol.AMI_SnsCallBack_handleApplyingWith cb__, com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_SnsCallBack_handleApplyingWith> result__ = begin_handleApplyingWith(r, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static SnsCallBackPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SnsCallBackPrx r = b as SnsCallBackPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        SnsCallBackPrxHelper h = new SnsCallBackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static SnsCallBackPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SnsCallBackPrx r = b as SnsCallBackPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        SnsCallBackPrxHelper h = new SnsCallBackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static SnsCallBackPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            SnsCallBackPrxHelper h = new SnsCallBackPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static SnsCallBackPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            SnsCallBackPrxHelper h = new SnsCallBackPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static SnsCallBackPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SnsCallBackPrx r = b as SnsCallBackPrx;
                    if(r == null)
                    {
                        SnsCallBackPrxHelper h = new SnsCallBackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static SnsCallBackPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    SnsCallBackPrxHelper h = new SnsCallBackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::SnsCallBack"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new SnsCallBackDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new SnsCallBackDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, SnsCallBackPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static SnsCallBackPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        SnsCallBackPrxHelper result = new SnsCallBackPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class RoleListHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.SnsRoleView[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.SnsRoleView() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.SnsRoleView[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.SnsRoleView[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(18);
                        v__ = new com.XSanGo.Protocol.SnsRoleView[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.SnsRoleView();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class SnsPrxHelper : Ice.ObjectPrxHelperBase, SnsPrx
            {
                #region Synchronous operations

                public void accept(string player)
                {
                    accept(player, null, false);
                }

                public void accept(string player, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    accept(player, context__, true);
                }

                private void accept(string player, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __accept_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__accept_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.accept(player, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void addBlacklist(string targetPlayer)
                {
                    addBlacklist(targetPlayer, null, false);
                }

                public void addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    addBlacklist(targetPlayer, context__, true);
                }

                private void addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __addBlacklist_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__addBlacklist_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.addBlacklist(targetPlayer, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void addFoe(string targetPlayer)
                {
                    addFoe(targetPlayer, null, false);
                }

                public void addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    addFoe(targetPlayer, context__, true);
                }

                private void addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __addFoe_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__addFoe_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.addFoe(targetPlayer, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void applyForFriend(string targetPlayer)
                {
                    applyForFriend(targetPlayer, null, false);
                }

                public void applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    applyForFriend(targetPlayer, context__, true);
                }

                private void applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __applyForFriend_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__applyForFriend_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.applyForFriend(targetPlayer, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void cleanBlacklist()
                {
                    cleanBlacklist(null, false);
                }

                public void cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    cleanBlacklist(context__, true);
                }

                private void cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __cleanBlacklist_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.cleanBlacklist(context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void cleanFoes()
                {
                    cleanFoes(null, false);
                }

                public void cleanFoes(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    cleanFoes(context__, true);
                }

                private void cleanFoes(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __cleanFoes_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.cleanFoes(context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string queryAllBlacklist()
                {
                    return queryAllBlacklist(null, false);
                }

                public string queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return queryAllBlacklist(context__, true);
                }

                private string queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __queryAllBlacklist_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__queryAllBlacklist_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                return del__.queryAllBlacklist(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string queryAllFoes()
                {
                    return queryAllFoes(null, false);
                }

                public string queryAllFoes(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return queryAllFoes(context__, true);
                }

                private string queryAllFoes(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __queryAllFoes_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__queryAllFoes_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                return del__.queryAllFoes(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string queryAllFreinds()
                {
                    return queryAllFreinds(null, false);
                }

                public string queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return queryAllFreinds(context__, true);
                }

                private string queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __queryAllFreinds_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__queryAllFreinds_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                return del__.queryAllFreinds(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string queryAllFreindsView()
                {
                    return queryAllFreindsView(null, false);
                }

                public string queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return queryAllFreindsView(context__, true);
                }

                private string queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __queryAllFreindsView_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__queryAllFreindsView_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                return del__.queryAllFreindsView(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string queryPlayersLike(int type, string partOfNickname)
                {
                    return queryPlayersLike(type, partOfNickname, null, false);
                }

                public string queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return queryPlayersLike(type, partOfNickname, context__, true);
                }

                private string queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __queryPlayersLike_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__queryPlayersLike_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                return del__.queryPlayersLike(type, partOfNickname, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void refuse(string player)
                {
                    refuse(player, null, false);
                }

                public void refuse(string player, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    refuse(player, context__, true);
                }

                private void refuse(string player, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __refuse_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.refuse(player, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void removeBlacklist(string targetPlayer)
                {
                    removeBlacklist(targetPlayer, null, false);
                }

                public void removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    removeBlacklist(targetPlayer, context__, true);
                }

                private void removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __removeBlacklist_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.removeBlacklist(targetPlayer, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void removeFoe(string targetPlayer)
                {
                    removeFoe(targetPlayer, null, false);
                }

                public void removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    removeFoe(targetPlayer, context__, true);
                }

                private void removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __removeFoe_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.removeFoe(targetPlayer, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void removeFriend(string targetPlayer)
                {
                    removeFriend(targetPlayer, null, false);
                }

                public void removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    removeFriend(targetPlayer, context__, true);
                }

                private void removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __removeFriend_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                del__.removeFriend(targetPlayer, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string untreatedFriendApplyings()
                {
                    return untreatedFriendApplyings(null, false);
                }

                public string untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return untreatedFriendApplyings(context__, true);
                }

                private string untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __untreatedFriendApplyings_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__untreatedFriendApplyings_name);
                                delBase__ = getDelegate__(false);
                                SnsDel_ del__ = (SnsDel_)delBase__;
                                return del__.untreatedFriendApplyings(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_accept> begin_accept(string player)
                {
                    return begin_accept(player, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_accept> begin_accept(string player, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_accept(player, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_accept(string player, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_accept(player, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_accept(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_accept(player, ctx__, true, cb__, cookie__);
                }

                private const string __accept_name = "accept";

                public void end_accept(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __accept_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_accept> begin_accept(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__accept_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_accept> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_accept>(this, __accept_name, accept_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__accept_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(player);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void accept_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_accept cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_accept(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool accept_async(com.XSanGo.Protocol.AMI_Sns_accept cb__, string player)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_accept> result__;
                    try
                    {
                        checkTwowayOnly__(__accept_name);
                        result__ = begin_accept(player);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_accept>(this, __accept_name, accept_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool accept_async(com.XSanGo.Protocol.AMI_Sns_accept cb__, string player, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_accept> result__;
                    try
                    {
                        checkTwowayOnly__(__accept_name);
                        result__ = begin_accept(player, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_accept>(this, __accept_name, accept_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addBlacklist> begin_addBlacklist(string targetPlayer)
                {
                    return begin_addBlacklist(targetPlayer, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addBlacklist> begin_addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_addBlacklist(targetPlayer, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_addBlacklist(string targetPlayer, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_addBlacklist(targetPlayer, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_addBlacklist(targetPlayer, ctx__, true, cb__, cookie__);
                }

                private const string __addBlacklist_name = "addBlacklist";

                public void end_addBlacklist(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __addBlacklist_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addBlacklist> begin_addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__addBlacklist_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_addBlacklist> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_addBlacklist>(this, __addBlacklist_name, addBlacklist_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__addBlacklist_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetPlayer);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void addBlacklist_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_addBlacklist cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_addBlacklist(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool addBlacklist_async(com.XSanGo.Protocol.AMI_Sns_addBlacklist cb__, string targetPlayer)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addBlacklist> result__;
                    try
                    {
                        checkTwowayOnly__(__addBlacklist_name);
                        result__ = begin_addBlacklist(targetPlayer);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_addBlacklist>(this, __addBlacklist_name, addBlacklist_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool addBlacklist_async(com.XSanGo.Protocol.AMI_Sns_addBlacklist cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addBlacklist> result__;
                    try
                    {
                        checkTwowayOnly__(__addBlacklist_name);
                        result__ = begin_addBlacklist(targetPlayer, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_addBlacklist>(this, __addBlacklist_name, addBlacklist_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addFoe> begin_addFoe(string targetPlayer)
                {
                    return begin_addFoe(targetPlayer, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addFoe> begin_addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_addFoe(targetPlayer, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_addFoe(string targetPlayer, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_addFoe(targetPlayer, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_addFoe(targetPlayer, ctx__, true, cb__, cookie__);
                }

                private const string __addFoe_name = "addFoe";

                public void end_addFoe(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __addFoe_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addFoe> begin_addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__addFoe_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_addFoe> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_addFoe>(this, __addFoe_name, addFoe_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__addFoe_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetPlayer);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void addFoe_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_addFoe cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_addFoe(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool addFoe_async(com.XSanGo.Protocol.AMI_Sns_addFoe cb__, string targetPlayer)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addFoe> result__;
                    try
                    {
                        checkTwowayOnly__(__addFoe_name);
                        result__ = begin_addFoe(targetPlayer);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_addFoe>(this, __addFoe_name, addFoe_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool addFoe_async(com.XSanGo.Protocol.AMI_Sns_addFoe cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_addFoe> result__;
                    try
                    {
                        checkTwowayOnly__(__addFoe_name);
                        result__ = begin_addFoe(targetPlayer, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_addFoe>(this, __addFoe_name, addFoe_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_applyForFriend> begin_applyForFriend(string targetPlayer)
                {
                    return begin_applyForFriend(targetPlayer, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_applyForFriend> begin_applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_applyForFriend(targetPlayer, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_applyForFriend(string targetPlayer, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_applyForFriend(targetPlayer, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_applyForFriend(targetPlayer, ctx__, true, cb__, cookie__);
                }

                private const string __applyForFriend_name = "applyForFriend";

                public void end_applyForFriend(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __applyForFriend_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_applyForFriend> begin_applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__applyForFriend_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_applyForFriend> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_applyForFriend>(this, __applyForFriend_name, applyForFriend_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__applyForFriend_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetPlayer);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void applyForFriend_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_applyForFriend cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_applyForFriend(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool applyForFriend_async(com.XSanGo.Protocol.AMI_Sns_applyForFriend cb__, string targetPlayer)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_applyForFriend> result__;
                    try
                    {
                        checkTwowayOnly__(__applyForFriend_name);
                        result__ = begin_applyForFriend(targetPlayer);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_applyForFriend>(this, __applyForFriend_name, applyForFriend_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool applyForFriend_async(com.XSanGo.Protocol.AMI_Sns_applyForFriend cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_applyForFriend> result__;
                    try
                    {
                        checkTwowayOnly__(__applyForFriend_name);
                        result__ = begin_applyForFriend(targetPlayer, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_applyForFriend>(this, __applyForFriend_name, applyForFriend_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist> begin_cleanBlacklist()
                {
                    return begin_cleanBlacklist(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist> begin_cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_cleanBlacklist(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_cleanBlacklist(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_cleanBlacklist(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_cleanBlacklist(ctx__, true, cb__, cookie__);
                }

                private const string __cleanBlacklist_name = "cleanBlacklist";

                public void end_cleanBlacklist(Ice.AsyncResult r__)
                {
                    end__(r__, __cleanBlacklist_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist> begin_cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist>(this, __cleanBlacklist_name, cleanBlacklist_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__cleanBlacklist_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void cleanBlacklist_completed__(com.XSanGo.Protocol.Callback_Sns_cleanBlacklist cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool cleanBlacklist_async(com.XSanGo.Protocol.AMI_Sns_cleanBlacklist cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist> result__ = begin_cleanBlacklist();
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool cleanBlacklist_async(com.XSanGo.Protocol.AMI_Sns_cleanBlacklist cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanBlacklist> result__ = begin_cleanBlacklist(ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanFoes> begin_cleanFoes()
                {
                    return begin_cleanFoes(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanFoes> begin_cleanFoes(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_cleanFoes(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_cleanFoes(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_cleanFoes(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_cleanFoes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_cleanFoes(ctx__, true, cb__, cookie__);
                }

                private const string __cleanFoes_name = "cleanFoes";

                public void end_cleanFoes(Ice.AsyncResult r__)
                {
                    end__(r__, __cleanFoes_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanFoes> begin_cleanFoes(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_cleanFoes> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_cleanFoes>(this, __cleanFoes_name, cleanFoes_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__cleanFoes_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void cleanFoes_completed__(com.XSanGo.Protocol.Callback_Sns_cleanFoes cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool cleanFoes_async(com.XSanGo.Protocol.AMI_Sns_cleanFoes cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanFoes> result__ = begin_cleanFoes();
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool cleanFoes_async(com.XSanGo.Protocol.AMI_Sns_cleanFoes cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_cleanFoes> result__ = begin_cleanFoes(ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist> begin_queryAllBlacklist()
                {
                    return begin_queryAllBlacklist(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist> begin_queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_queryAllBlacklist(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_queryAllBlacklist(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryAllBlacklist(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryAllBlacklist(ctx__, true, cb__, cookie__);
                }

                private const string __queryAllBlacklist_name = "queryAllBlacklist";

                public string end_queryAllBlacklist(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __queryAllBlacklist_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist> begin_queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__queryAllBlacklist_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist>(this, __queryAllBlacklist_name, queryAllBlacklist_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__queryAllBlacklist_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void queryAllBlacklist_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_queryAllBlacklist(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool queryAllBlacklist_async(com.XSanGo.Protocol.AMI_Sns_queryAllBlacklist cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist> result__;
                    try
                    {
                        checkTwowayOnly__(__queryAllBlacklist_name);
                        result__ = begin_queryAllBlacklist();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist>(this, __queryAllBlacklist_name, queryAllBlacklist_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool queryAllBlacklist_async(com.XSanGo.Protocol.AMI_Sns_queryAllBlacklist cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist> result__;
                    try
                    {
                        checkTwowayOnly__(__queryAllBlacklist_name);
                        result__ = begin_queryAllBlacklist(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllBlacklist>(this, __queryAllBlacklist_name, queryAllBlacklist_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFoes> begin_queryAllFoes()
                {
                    return begin_queryAllFoes(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFoes> begin_queryAllFoes(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_queryAllFoes(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_queryAllFoes(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryAllFoes(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_queryAllFoes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryAllFoes(ctx__, true, cb__, cookie__);
                }

                private const string __queryAllFoes_name = "queryAllFoes";

                public string end_queryAllFoes(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __queryAllFoes_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFoes> begin_queryAllFoes(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__queryAllFoes_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFoes> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFoes>(this, __queryAllFoes_name, queryAllFoes_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__queryAllFoes_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void queryAllFoes_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_queryAllFoes cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_queryAllFoes(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool queryAllFoes_async(com.XSanGo.Protocol.AMI_Sns_queryAllFoes cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFoes> result__;
                    try
                    {
                        checkTwowayOnly__(__queryAllFoes_name);
                        result__ = begin_queryAllFoes();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFoes>(this, __queryAllFoes_name, queryAllFoes_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool queryAllFoes_async(com.XSanGo.Protocol.AMI_Sns_queryAllFoes cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFoes> result__;
                    try
                    {
                        checkTwowayOnly__(__queryAllFoes_name);
                        result__ = begin_queryAllFoes(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFoes>(this, __queryAllFoes_name, queryAllFoes_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds> begin_queryAllFreinds()
                {
                    return begin_queryAllFreinds(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds> begin_queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_queryAllFreinds(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_queryAllFreinds(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryAllFreinds(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryAllFreinds(ctx__, true, cb__, cookie__);
                }

                private const string __queryAllFreinds_name = "queryAllFreinds";

                public string end_queryAllFreinds(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __queryAllFreinds_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds> begin_queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__queryAllFreinds_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds>(this, __queryAllFreinds_name, queryAllFreinds_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__queryAllFreinds_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void queryAllFreinds_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_queryAllFreinds cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_queryAllFreinds(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool queryAllFreinds_async(com.XSanGo.Protocol.AMI_Sns_queryAllFreinds cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds> result__;
                    try
                    {
                        checkTwowayOnly__(__queryAllFreinds_name);
                        result__ = begin_queryAllFreinds();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds>(this, __queryAllFreinds_name, queryAllFreinds_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool queryAllFreinds_async(com.XSanGo.Protocol.AMI_Sns_queryAllFreinds cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds> result__;
                    try
                    {
                        checkTwowayOnly__(__queryAllFreinds_name);
                        result__ = begin_queryAllFreinds(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFreinds>(this, __queryAllFreinds_name, queryAllFreinds_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView> begin_queryAllFreindsView()
                {
                    return begin_queryAllFreindsView(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView> begin_queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_queryAllFreindsView(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_queryAllFreindsView(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryAllFreindsView(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryAllFreindsView(ctx__, true, cb__, cookie__);
                }

                private const string __queryAllFreindsView_name = "queryAllFreindsView";

                public string end_queryAllFreindsView(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __queryAllFreindsView_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView> begin_queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__queryAllFreindsView_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView>(this, __queryAllFreindsView_name, queryAllFreindsView_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__queryAllFreindsView_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void queryAllFreindsView_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_queryAllFreindsView(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool queryAllFreindsView_async(com.XSanGo.Protocol.AMI_Sns_queryAllFreindsView cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView> result__;
                    try
                    {
                        checkTwowayOnly__(__queryAllFreindsView_name);
                        result__ = begin_queryAllFreindsView();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView>(this, __queryAllFreindsView_name, queryAllFreindsView_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool queryAllFreindsView_async(com.XSanGo.Protocol.AMI_Sns_queryAllFreindsView cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView> result__;
                    try
                    {
                        checkTwowayOnly__(__queryAllFreindsView_name);
                        result__ = begin_queryAllFreindsView(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryAllFreindsView>(this, __queryAllFreindsView_name, queryAllFreindsView_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike> begin_queryPlayersLike(int type, string partOfNickname)
                {
                    return begin_queryPlayersLike(type, partOfNickname, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike> begin_queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_queryPlayersLike(type, partOfNickname, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_queryPlayersLike(int type, string partOfNickname, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryPlayersLike(type, partOfNickname, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_queryPlayersLike(type, partOfNickname, ctx__, true, cb__, cookie__);
                }

                private const string __queryPlayersLike_name = "queryPlayersLike";

                public string end_queryPlayersLike(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __queryPlayersLike_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike> begin_queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__queryPlayersLike_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike>(this, __queryPlayersLike_name, queryPlayersLike_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__queryPlayersLike_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(type);
                        os__.writeString(partOfNickname);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void queryPlayersLike_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_queryPlayersLike cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_queryPlayersLike(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool queryPlayersLike_async(com.XSanGo.Protocol.AMI_Sns_queryPlayersLike cb__, int type, string partOfNickname)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike> result__;
                    try
                    {
                        checkTwowayOnly__(__queryPlayersLike_name);
                        result__ = begin_queryPlayersLike(type, partOfNickname);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike>(this, __queryPlayersLike_name, queryPlayersLike_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool queryPlayersLike_async(com.XSanGo.Protocol.AMI_Sns_queryPlayersLike cb__, int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike> result__;
                    try
                    {
                        checkTwowayOnly__(__queryPlayersLike_name);
                        result__ = begin_queryPlayersLike(type, partOfNickname, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_queryPlayersLike>(this, __queryPlayersLike_name, queryPlayersLike_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_refuse> begin_refuse(string player)
                {
                    return begin_refuse(player, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_refuse> begin_refuse(string player, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_refuse(player, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_refuse(string player, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_refuse(player, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_refuse(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_refuse(player, ctx__, true, cb__, cookie__);
                }

                private const string __refuse_name = "refuse";

                public void end_refuse(Ice.AsyncResult r__)
                {
                    end__(r__, __refuse_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_refuse> begin_refuse(string player, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_refuse> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_refuse>(this, __refuse_name, refuse_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__refuse_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(player);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void refuse_completed__(com.XSanGo.Protocol.Callback_Sns_refuse cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool refuse_async(com.XSanGo.Protocol.AMI_Sns_refuse cb__, string player)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_refuse> result__ = begin_refuse(player);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool refuse_async(com.XSanGo.Protocol.AMI_Sns_refuse cb__, string player, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_refuse> result__ = begin_refuse(player, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeBlacklist> begin_removeBlacklist(string targetPlayer)
                {
                    return begin_removeBlacklist(targetPlayer, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeBlacklist> begin_removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_removeBlacklist(targetPlayer, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_removeBlacklist(string targetPlayer, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_removeBlacklist(targetPlayer, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_removeBlacklist(targetPlayer, ctx__, true, cb__, cookie__);
                }

                private const string __removeBlacklist_name = "removeBlacklist";

                public void end_removeBlacklist(Ice.AsyncResult r__)
                {
                    end__(r__, __removeBlacklist_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeBlacklist> begin_removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_removeBlacklist> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_removeBlacklist>(this, __removeBlacklist_name, removeBlacklist_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__removeBlacklist_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetPlayer);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void removeBlacklist_completed__(com.XSanGo.Protocol.Callback_Sns_removeBlacklist cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool removeBlacklist_async(com.XSanGo.Protocol.AMI_Sns_removeBlacklist cb__, string targetPlayer)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeBlacklist> result__ = begin_removeBlacklist(targetPlayer);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool removeBlacklist_async(com.XSanGo.Protocol.AMI_Sns_removeBlacklist cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeBlacklist> result__ = begin_removeBlacklist(targetPlayer, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFoe> begin_removeFoe(string targetPlayer)
                {
                    return begin_removeFoe(targetPlayer, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFoe> begin_removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_removeFoe(targetPlayer, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_removeFoe(string targetPlayer, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_removeFoe(targetPlayer, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_removeFoe(targetPlayer, ctx__, true, cb__, cookie__);
                }

                private const string __removeFoe_name = "removeFoe";

                public void end_removeFoe(Ice.AsyncResult r__)
                {
                    end__(r__, __removeFoe_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFoe> begin_removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_removeFoe> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_removeFoe>(this, __removeFoe_name, removeFoe_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__removeFoe_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetPlayer);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void removeFoe_completed__(com.XSanGo.Protocol.Callback_Sns_removeFoe cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool removeFoe_async(com.XSanGo.Protocol.AMI_Sns_removeFoe cb__, string targetPlayer)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFoe> result__ = begin_removeFoe(targetPlayer);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool removeFoe_async(com.XSanGo.Protocol.AMI_Sns_removeFoe cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFoe> result__ = begin_removeFoe(targetPlayer, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFriend> begin_removeFriend(string targetPlayer)
                {
                    return begin_removeFriend(targetPlayer, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFriend> begin_removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_removeFriend(targetPlayer, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_removeFriend(string targetPlayer, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_removeFriend(targetPlayer, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_removeFriend(targetPlayer, ctx__, true, cb__, cookie__);
                }

                private const string __removeFriend_name = "removeFriend";

                public void end_removeFriend(Ice.AsyncResult r__)
                {
                    end__(r__, __removeFriend_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFriend> begin_removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_removeFriend> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_removeFriend>(this, __removeFriend_name, removeFriend_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__removeFriend_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(targetPlayer);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void removeFriend_completed__(com.XSanGo.Protocol.Callback_Sns_removeFriend cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool removeFriend_async(com.XSanGo.Protocol.AMI_Sns_removeFriend cb__, string targetPlayer)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFriend> result__ = begin_removeFriend(targetPlayer);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool removeFriend_async(com.XSanGo.Protocol.AMI_Sns_removeFriend cb__, string targetPlayer, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_removeFriend> result__ = begin_removeFriend(targetPlayer, ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings> begin_untreatedFriendApplyings()
                {
                    return begin_untreatedFriendApplyings(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings> begin_untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_untreatedFriendApplyings(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_untreatedFriendApplyings(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_untreatedFriendApplyings(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_untreatedFriendApplyings(ctx__, true, cb__, cookie__);
                }

                private const string __untreatedFriendApplyings_name = "untreatedFriendApplyings";

                public string end_untreatedFriendApplyings(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __untreatedFriendApplyings_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings> begin_untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__untreatedFriendApplyings_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings>(this, __untreatedFriendApplyings_name, untreatedFriendApplyings_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__untreatedFriendApplyings_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void untreatedFriendApplyings_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_untreatedFriendApplyings(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool untreatedFriendApplyings_async(com.XSanGo.Protocol.AMI_Sns_untreatedFriendApplyings cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings> result__;
                    try
                    {
                        checkTwowayOnly__(__untreatedFriendApplyings_name);
                        result__ = begin_untreatedFriendApplyings();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings>(this, __untreatedFriendApplyings_name, untreatedFriendApplyings_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool untreatedFriendApplyings_async(com.XSanGo.Protocol.AMI_Sns_untreatedFriendApplyings cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings> result__;
                    try
                    {
                        checkTwowayOnly__(__untreatedFriendApplyings_name);
                        result__ = begin_untreatedFriendApplyings(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Sns_untreatedFriendApplyings>(this, __untreatedFriendApplyings_name, untreatedFriendApplyings_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static SnsPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SnsPrx r = b as SnsPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        SnsPrxHelper h = new SnsPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static SnsPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SnsPrx r = b as SnsPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        SnsPrxHelper h = new SnsPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static SnsPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            SnsPrxHelper h = new SnsPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static SnsPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            SnsPrxHelper h = new SnsPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static SnsPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SnsPrx r = b as SnsPrx;
                    if(r == null)
                    {
                        SnsPrxHelper h = new SnsPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static SnsPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    SnsPrxHelper h = new SnsPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::Sns"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new SnsDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new SnsDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, SnsPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static SnsPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        SnsPrxHelper result = new SnsPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface SnsCallBackDel_ : Ice.ObjectDel_
            {
                void applying(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface SnsDel_ : Ice.ObjectDel_
            {
                void applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void accept(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void refuse(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void cleanFoes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string queryAllFoes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class SnsCallBackDelM_ : Ice.ObjectDelM_, SnsCallBackDel_
            {
                public void applying(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("applying", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(player);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("handleApplyingWith", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeEnum((int)r, 1);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class SnsDelM_ : Ice.ObjectDelM_, SnsDel_
            {
                public void accept(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("accept", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(player);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("addBlacklist", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetPlayer);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("addFoe", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetPlayer);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("applyForFriend", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetPlayer);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("cleanBlacklist", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void cleanFoes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("cleanFoes", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("queryAllBlacklist", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string queryAllFoes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("queryAllFoes", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("queryAllFreinds", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("queryAllFreindsView", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("queryPlayersLike", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeInt(type);
                            os__.writeString(partOfNickname);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void refuse(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("refuse", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(player);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("removeBlacklist", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetPlayer);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("removeFoe", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetPlayer);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("removeFriend", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(targetPlayer);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("untreatedFriendApplyings", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class SnsCallBackDelD_ : Ice.ObjectDelD_, SnsCallBackDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void applying(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "applying", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        SnsCallBack servant__ = null;
                        try
                        {
                            servant__ = (SnsCallBack)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.applying(player, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void handleApplyingWith(com.XSanGo.Protocol.Result r, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "handleApplyingWith", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        SnsCallBack servant__ = null;
                        try
                        {
                            servant__ = (SnsCallBack)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.handleApplyingWith(r, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class SnsDelD_ : Ice.ObjectDelD_, SnsDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void accept(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "accept", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.accept(player, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void addBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "addBlacklist", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.addBlacklist(targetPlayer, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void addFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "addFoe", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.addFoe(targetPlayer, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void applyForFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "applyForFriend", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.applyForFriend(targetPlayer, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void cleanBlacklist(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "cleanBlacklist", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.cleanBlacklist(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void cleanFoes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "cleanFoes", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.cleanFoes(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string queryAllBlacklist(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string queryAllFoes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string queryAllFreinds(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string queryAllFreindsView(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string queryPlayersLike(int type, string partOfNickname, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void refuse(string player, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "refuse", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.refuse(player, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void removeBlacklist(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "removeBlacklist", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.removeBlacklist(targetPlayer, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void removeFoe(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "removeFoe", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.removeFoe(targetPlayer, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void removeFriend(string targetPlayer, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "removeFriend", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Sns servant__ = null;
                        try
                        {
                            servant__ = (Sns)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.removeFriend(targetPlayer, current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string untreatedFriendApplyings(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    throw new Ice.CollocationOptimizationException();
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class SnsCallBackDisp_ : Ice.ObjectImpl, SnsCallBack
            {
                #region Slice operations

                public void applying(string player)
                {
                    applying(player, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void applying(string player, Ice.Current current__);

                public void handleApplyingWith(com.XSanGo.Protocol.Result r)
                {
                    handleApplyingWith(r, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void handleApplyingWith(com.XSanGo.Protocol.Result r, Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::SnsCallBack"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus applying___(SnsCallBack obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string player;
                    player = is__.readString();
                    inS__.endReadParams();
                    obj__.applying(player, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus handleApplyingWith___(SnsCallBack obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    com.XSanGo.Protocol.Result r;
                    r = (com.XSanGo.Protocol.Result)is__.readEnum(1);
                    inS__.endReadParams();
                    obj__.handleApplyingWith(r, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                private static string[] all__ =
                {
                    "applying",
                    "handleApplyingWith",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return applying___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return handleApplyingWith___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class SnsDisp_ : Ice.ObjectImpl, Sns
            {
                #region Slice operations

                public void applyForFriend(string targetPlayer)
                {
                    applyForFriend(targetPlayer, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void applyForFriend(string targetPlayer, Ice.Current current__);

                public void accept(string player)
                {
                    accept(player, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void accept(string player, Ice.Current current__);

                public void refuse(string player)
                {
                    refuse(player, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void refuse(string player, Ice.Current current__);

                public void removeFriend(string targetPlayer)
                {
                    removeFriend(targetPlayer, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void removeFriend(string targetPlayer, Ice.Current current__);

                public void untreatedFriendApplyings_async(com.XSanGo.Protocol.AMD_Sns_untreatedFriendApplyings cb__)
                {
                    untreatedFriendApplyings_async(cb__, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void untreatedFriendApplyings_async(com.XSanGo.Protocol.AMD_Sns_untreatedFriendApplyings cb__, Ice.Current current__);

                public void addFoe(string targetPlayer)
                {
                    addFoe(targetPlayer, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void addFoe(string targetPlayer, Ice.Current current__);

                public void removeFoe(string targetPlayer)
                {
                    removeFoe(targetPlayer, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void removeFoe(string targetPlayer, Ice.Current current__);

                public void cleanFoes()
                {
                    cleanFoes(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void cleanFoes(Ice.Current current__);

                public void addBlacklist(string targetPlayer)
                {
                    addBlacklist(targetPlayer, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void addBlacklist(string targetPlayer, Ice.Current current__);

                public void removeBlacklist(string targetPlayer)
                {
                    removeBlacklist(targetPlayer, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void removeBlacklist(string targetPlayer, Ice.Current current__);

                public void cleanBlacklist()
                {
                    cleanBlacklist(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void cleanBlacklist(Ice.Current current__);

                public void queryAllFreinds_async(com.XSanGo.Protocol.AMD_Sns_queryAllFreinds cb__)
                {
                    queryAllFreinds_async(cb__, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void queryAllFreinds_async(com.XSanGo.Protocol.AMD_Sns_queryAllFreinds cb__, Ice.Current current__);

                public void queryAllFreindsView_async(com.XSanGo.Protocol.AMD_Sns_queryAllFreindsView cb__)
                {
                    queryAllFreindsView_async(cb__, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void queryAllFreindsView_async(com.XSanGo.Protocol.AMD_Sns_queryAllFreindsView cb__, Ice.Current current__);

                public void queryPlayersLike_async(com.XSanGo.Protocol.AMD_Sns_queryPlayersLike cb__, int type, string partOfNickname)
                {
                    queryPlayersLike_async(cb__, type, partOfNickname, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void queryPlayersLike_async(com.XSanGo.Protocol.AMD_Sns_queryPlayersLike cb__, int type, string partOfNickname, Ice.Current current__);

                public void queryAllFoes_async(com.XSanGo.Protocol.AMD_Sns_queryAllFoes cb__)
                {
                    queryAllFoes_async(cb__, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void queryAllFoes_async(com.XSanGo.Protocol.AMD_Sns_queryAllFoes cb__, Ice.Current current__);

                public void queryAllBlacklist_async(com.XSanGo.Protocol.AMD_Sns_queryAllBlacklist cb__)
                {
                    queryAllBlacklist_async(cb__, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void queryAllBlacklist_async(com.XSanGo.Protocol.AMD_Sns_queryAllBlacklist cb__, Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::Sns"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus applyForFriend___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetPlayer;
                    targetPlayer = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.applyForFriend(targetPlayer, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus accept___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string player;
                    player = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.accept(player, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus refuse___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string player;
                    player = is__.readString();
                    inS__.endReadParams();
                    obj__.refuse(player, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus removeFriend___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetPlayer;
                    targetPlayer = is__.readString();
                    inS__.endReadParams();
                    obj__.removeFriend(targetPlayer, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus untreatedFriendApplyings___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    AMD_Sns_untreatedFriendApplyings cb__ = new _AMD_Sns_untreatedFriendApplyings(inS__);
                    try
                    {
                        obj__.untreatedFriendApplyings_async(cb__, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus addFoe___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetPlayer;
                    targetPlayer = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.addFoe(targetPlayer, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus removeFoe___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetPlayer;
                    targetPlayer = is__.readString();
                    inS__.endReadParams();
                    obj__.removeFoe(targetPlayer, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus cleanFoes___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    obj__.cleanFoes(current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus addBlacklist___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetPlayer;
                    targetPlayer = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.addBlacklist(targetPlayer, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus removeBlacklist___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string targetPlayer;
                    targetPlayer = is__.readString();
                    inS__.endReadParams();
                    obj__.removeBlacklist(targetPlayer, current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus cleanBlacklist___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    obj__.cleanBlacklist(current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus queryAllFreinds___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    AMD_Sns_queryAllFreinds cb__ = new _AMD_Sns_queryAllFreinds(inS__);
                    try
                    {
                        obj__.queryAllFreinds_async(cb__, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus queryAllFreindsView___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    AMD_Sns_queryAllFreindsView cb__ = new _AMD_Sns_queryAllFreindsView(inS__);
                    try
                    {
                        obj__.queryAllFreindsView_async(cb__, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus queryPlayersLike___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    int type;
                    string partOfNickname;
                    type = is__.readInt();
                    partOfNickname = is__.readString();
                    inS__.endReadParams();
                    AMD_Sns_queryPlayersLike cb__ = new _AMD_Sns_queryPlayersLike(inS__);
                    try
                    {
                        obj__.queryPlayersLike_async(cb__, type, partOfNickname, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus queryAllFoes___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    AMD_Sns_queryAllFoes cb__ = new _AMD_Sns_queryAllFoes(inS__);
                    try
                    {
                        obj__.queryAllFoes_async(cb__, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus queryAllBlacklist___(Sns obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    AMD_Sns_queryAllBlacklist cb__ = new _AMD_Sns_queryAllBlacklist(inS__);
                    try
                    {
                        obj__.queryAllBlacklist_async(cb__, current__);
                    }
                    catch(_System.Exception ex__)
                    {
                        cb__.ice_exception(ex__);
                    }
                    return Ice.DispatchStatus.DispatchAsync;
                }

                private static string[] all__ =
                {
                    "accept",
                    "addBlacklist",
                    "addFoe",
                    "applyForFriend",
                    "cleanBlacklist",
                    "cleanFoes",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "queryAllBlacklist",
                    "queryAllFoes",
                    "queryAllFreinds",
                    "queryAllFreindsView",
                    "queryPlayersLike",
                    "refuse",
                    "removeBlacklist",
                    "removeFoe",
                    "removeFriend",
                    "untreatedFriendApplyings"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return accept___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return addBlacklist___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return addFoe___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return applyForFriend___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return cleanBlacklist___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return cleanFoes___(this, inS__, current__);
                        }
                        case 6:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 7:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 8:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 9:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                        case 10:
                        {
                            return queryAllBlacklist___(this, inS__, current__);
                        }
                        case 11:
                        {
                            return queryAllFoes___(this, inS__, current__);
                        }
                        case 12:
                        {
                            return queryAllFreinds___(this, inS__, current__);
                        }
                        case 13:
                        {
                            return queryAllFreindsView___(this, inS__, current__);
                        }
                        case 14:
                        {
                            return queryPlayersLike___(this, inS__, current__);
                        }
                        case 15:
                        {
                            return refuse___(this, inS__, current__);
                        }
                        case 16:
                        {
                            return removeBlacklist___(this, inS__, current__);
                        }
                        case 17:
                        {
                            return removeFoe___(this, inS__, current__);
                        }
                        case 18:
                        {
                            return removeFriend___(this, inS__, current__);
                        }
                        case 19:
                        {
                            return untreatedFriendApplyings___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_SnsCallBack_applying : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_SnsCallBack_handleApplyingWith : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_applyForFriend : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_accept : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_refuse : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_removeFriend : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_untreatedFriendApplyings : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Sns_untreatedFriendApplyings : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Sns_untreatedFriendApplyings : IceInternal.IncomingAsync, AMD_Sns_untreatedFriendApplyings
            {
                public _AMD_Sns_untreatedFriendApplyings(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_addFoe : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_removeFoe : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_cleanFoes : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_addBlacklist : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_removeBlacklist : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_cleanBlacklist : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_queryAllFreinds : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Sns_queryAllFreinds : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Sns_queryAllFreinds : IceInternal.IncomingAsync, AMD_Sns_queryAllFreinds
            {
                public _AMD_Sns_queryAllFreinds(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_queryAllFreindsView : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Sns_queryAllFreindsView : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Sns_queryAllFreindsView : IceInternal.IncomingAsync, AMD_Sns_queryAllFreindsView
            {
                public _AMD_Sns_queryAllFreindsView(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_queryPlayersLike : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Sns_queryPlayersLike : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Sns_queryPlayersLike : IceInternal.IncomingAsync, AMD_Sns_queryPlayersLike
            {
                public _AMD_Sns_queryPlayersLike(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_queryAllFoes : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Sns_queryAllFoes : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Sns_queryAllFoes : IceInternal.IncomingAsync, AMD_Sns_queryAllFoes
            {
                public _AMD_Sns_queryAllFoes(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Sns_queryAllBlacklist : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface AMD_Sns_queryAllBlacklist : Ice.AMDCallback
            {
                void ice_response(string ret__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            class _AMD_Sns_queryAllBlacklist : IceInternal.IncomingAsync, AMD_Sns_queryAllBlacklist
            {
                public _AMD_Sns_queryAllBlacklist(IceInternal.Incoming inc) : base(inc)
                {
                }

                public void ice_response(string ret__)
                {
                    if(validateResponse__(true))
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = startWriteParams__(Ice.FormatType.DefaultFormat);
                            os__.writeString(ret__);
                            endWriteParams__(true);
                        }
                        catch(Ice.LocalException ex__)
                        {
                            exception__(ex__);
                            return;
                        }
                        response__();
                    }
                }
            }
        }
    }
}
