// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TimeBattle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class BattleChallengeResultView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.Property[] heroExps;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.ItemView[] items;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.SceneDuelView[] reports;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public BattleChallengeResultView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public BattleChallengeResultView(com.XSanGo.Protocol.Property[] heroExps, com.XSanGo.Protocol.ItemView[] items, com.XSanGo.Protocol.SceneDuelView[] reports)
                {
                    this.heroExps = heroExps;
                    this.items = items;
                    this.reports = reports;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::BattleChallengeResultView");
                    IceInternal.HashUtil.hashAdd(ref h__, heroExps);
                    IceInternal.HashUtil.hashAdd(ref h__, items);
                    IceInternal.HashUtil.hashAdd(ref h__, reports);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    BattleChallengeResultView o__ = (BattleChallengeResultView)other__;
                    if(heroExps == null)
                    {
                        if(o__.heroExps != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(heroExps, o__.heroExps))
                        {
                            return false;
                        }
                    }
                    if(items == null)
                    {
                        if(o__.items != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(items, o__.items))
                        {
                            return false;
                        }
                    }
                    if(reports == null)
                    {
                        if(o__.reports != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(reports, o__.reports))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(BattleChallengeResultView lhs__, BattleChallengeResultView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(BattleChallengeResultView lhs__, BattleChallengeResultView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    com.XSanGo.Protocol.PropertySeqHelper.write(os__, heroExps);
                    com.XSanGo.Protocol.ItemViewSeqHelper.write(os__, items);
                    com.XSanGo.Protocol.SceneDuelViewSeqHelper.write(os__, reports);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    heroExps = com.XSanGo.Protocol.PropertySeqHelper.read(is__);
                    items = com.XSanGo.Protocol.ItemViewSeqHelper.read(is__);
                    reports = com.XSanGo.Protocol.SceneDuelViewSeqHelper.read(is__);
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial struct BattleTimesView
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int id;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int num;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int time;

                #endregion

                #region Constructor

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public BattleTimesView(int id, int num, int time)
                {
                    this.id = id;
                    this.num = num;
                    this.time = time;
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::BattleTimesView");
                    IceInternal.HashUtil.hashAdd(ref h__, id);
                    IceInternal.HashUtil.hashAdd(ref h__, num);
                    IceInternal.HashUtil.hashAdd(ref h__, time);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(!(other__ is BattleTimesView))
                    {
                        return false;
                    }
                    BattleTimesView o__ = (BattleTimesView)other__;
                    if(!id.Equals(o__.id))
                    {
                        return false;
                    }
                    if(!num.Equals(o__.num))
                    {
                        return false;
                    }
                    if(!time.Equals(o__.time))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(BattleTimesView lhs__, BattleTimesView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(BattleTimesView lhs__, BattleTimesView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(id);
                    os__.writeInt(num);
                    os__.writeInt(time);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    id = is__.readInt();
                    num = is__.readInt();
                    time = is__.readInt();
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface TimeBattle : Ice.Object, TimeBattleOperations_, TimeBattleOperationsNC_
            {
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_TimeBattle_getChallengeTimes(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_TimeBattle_beginChallenge(com.XSanGo.Protocol.BattleChallengeResultView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_TimeBattle_endChallenge(int ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_TimeBattle_endLimitChallenge(int ret__);
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TimeBattlePrx : Ice.ObjectPrx
            {
                string getChallengeTimes();
                string getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes> begin_getChallengeTimes();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes> begin_getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_getChallengeTimes(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_getChallengeTimes(Ice.AsyncResult r__);

                bool getChallengeTimes_async(com.XSanGo.Protocol.AMI_TimeBattle_getChallengeTimes cb__);
                bool getChallengeTimes_async(com.XSanGo.Protocol.AMI_TimeBattle_getChallengeTimes cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id);
                com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge> begin_beginChallenge(string formationId, int id);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge> begin_beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_beginChallenge(string formationId, int id, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.BattleChallengeResultView end_beginChallenge(Ice.AsyncResult r__);

                bool beginChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_beginChallenge cb__, string formationId, int id);
                bool beginChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_beginChallenge cb__, string formationId, int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

                int endChallenge(int heroNum);
                int endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge> begin_endChallenge(int heroNum);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge> begin_endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_endChallenge(int heroNum, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                int end_endChallenge(Ice.AsyncResult r__);

                bool endChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_endChallenge cb__, int heroNum);
                bool endChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_endChallenge cb__, int heroNum, _System.Collections.Generic.Dictionary<string, string> ctx__);

                int endLimitChallenge(int heroNum, string items);
                int endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge> begin_endLimitChallenge(int heroNum, string items);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge> begin_endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_endLimitChallenge(int heroNum, string items, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                int end_endLimitChallenge(Ice.AsyncResult r__);

                bool endLimitChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_endLimitChallenge cb__, int heroNum, string items);
                bool endLimitChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_endLimitChallenge cb__, int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TimeBattleOperations_
            {
                /// <summary>
                /// 获取所有时空战役可挑战的次数BattleTimesView lua
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                string getChallengeTimes(Ice.Current current__);

                /// <summary>
                /// 挑战副本 返回掉落物品
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id, Ice.Current current__);

                /// <summary>
                /// 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                int endChallenge(int heroNum, Ice.Current current__);

                /// <summary>
                /// 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
                /// </summary>
                /// <param name="current__">The Current object for the invocation.</param>
                
                int endLimitChallenge(int heroNum, string items, Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TimeBattleOperationsNC_
            {
                /// <summary>
                /// 获取所有时空战役可挑战的次数BattleTimesView lua
                /// </summary>
                
                string getChallengeTimes();

                /// <summary>
                /// 挑战副本 返回掉落物品
                /// </summary>
                
                com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id);

                /// <summary>
                /// 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
                /// </summary>
                
                int endChallenge(int heroNum);

                /// <summary>
                /// 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
                /// </summary>
                
                int endLimitChallenge(int heroNum, string items);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TimeBattlePrxHelper : Ice.ObjectPrxHelperBase, TimeBattlePrx
            {
                #region Synchronous operations

                /// <summary>
                /// 挑战副本 返回掉落物品
                /// </summary>
                
                public com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id)
                {
                    return beginChallenge(formationId, id, null, false);
                }

                /// <summary>
                /// 挑战副本 返回掉落物品
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return beginChallenge(formationId, id, context__, true);
                }

                private com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __beginChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__beginChallenge_name);
                                delBase__ = getDelegate__(false);
                                TimeBattleDel_ del__ = (TimeBattleDel_)delBase__;
                                return del__.beginChallenge(formationId, id, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
                /// </summary>
                
                public int endChallenge(int heroNum)
                {
                    return endChallenge(heroNum, null, false);
                }

                /// <summary>
                /// 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public int endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return endChallenge(heroNum, context__, true);
                }

                private int endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __endChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__endChallenge_name);
                                delBase__ = getDelegate__(false);
                                TimeBattleDel_ del__ = (TimeBattleDel_)delBase__;
                                return del__.endChallenge(heroNum, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
                /// </summary>
                
                public int endLimitChallenge(int heroNum, string items)
                {
                    return endLimitChallenge(heroNum, items, null, false);
                }

                /// <summary>
                /// 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public int endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return endLimitChallenge(heroNum, items, context__, true);
                }

                private int endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __endLimitChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__endLimitChallenge_name);
                                delBase__ = getDelegate__(false);
                                TimeBattleDel_ del__ = (TimeBattleDel_)delBase__;
                                return del__.endLimitChallenge(heroNum, items, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                /// <summary>
                /// 获取所有时空战役可挑战的次数BattleTimesView lua
                /// </summary>
                
                public string getChallengeTimes()
                {
                    return getChallengeTimes(null, false);
                }

                /// <summary>
                /// 获取所有时空战役可挑战的次数BattleTimesView lua
                /// </summary>
                /// <param name="context__">The Context map to send with the invocation.</param>
                
                public string getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return getChallengeTimes(context__, true);
                }

                private string getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getChallengeTimes_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__getChallengeTimes_name);
                                delBase__ = getDelegate__(false);
                                TimeBattleDel_ del__ = (TimeBattleDel_)delBase__;
                                return del__.getChallengeTimes(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge> begin_beginChallenge(string formationId, int id)
                {
                    return begin_beginChallenge(formationId, id, null, false, null, null);
                }

                /// <summary>
                /// 挑战副本 返回掉落物品
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge> begin_beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_beginChallenge(formationId, id, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_beginChallenge(string formationId, int id, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginChallenge(formationId, id, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginChallenge(formationId, id, ctx__, true, cb__, cookie__);
                }

                private const string __beginChallenge_name = "beginChallenge";

                public com.XSanGo.Protocol.BattleChallengeResultView end_beginChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __beginChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.BattleChallengeResultView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.BattleChallengeResultView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge> begin_beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__beginChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__beginChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(formationId);
                        os__.writeInt(id);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void beginChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.BattleChallengeResultView ret__;
                    try
                    {
                        ret__ = end_beginChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 挑战副本 返回掉落物品
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool beginChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_beginChallenge cb__, string formationId, int id)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginChallenge_name);
                        result__ = begin_beginChallenge(formationId, id);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 挑战副本 返回掉落物品
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool beginChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_beginChallenge cb__, string formationId, int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginChallenge_name);
                        result__ = begin_beginChallenge(formationId, id, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge> begin_endChallenge(int heroNum)
                {
                    return begin_endChallenge(heroNum, null, false, null, null);
                }

                /// <summary>
                /// 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge> begin_endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_endChallenge(heroNum, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_endChallenge(int heroNum, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endChallenge(heroNum, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endChallenge(heroNum, ctx__, true, cb__, cookie__);
                }

                private const string __endChallenge_name = "endChallenge";

                public int end_endChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __endChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        int ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readInt();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge> begin_endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__endChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge>(this, __endChallenge_name, endChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__endChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(heroNum);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void endChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_TimeBattle_endChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    int ret__;
                    try
                    {
                        ret__ = end_endChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool endChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_endChallenge cb__, int heroNum)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endChallenge_name);
                        result__ = begin_endChallenge(heroNum);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge>(this, __endChallenge_name, endChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool endChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_endChallenge cb__, int heroNum, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endChallenge_name);
                        result__ = begin_endChallenge(heroNum, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_endChallenge>(this, __endChallenge_name, endChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge> begin_endLimitChallenge(int heroNum, string items)
                {
                    return begin_endLimitChallenge(heroNum, items, null, false, null, null);
                }

                /// <summary>
                /// 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge> begin_endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_endLimitChallenge(heroNum, items, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_endLimitChallenge(int heroNum, string items, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endLimitChallenge(heroNum, items, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endLimitChallenge(heroNum, items, ctx__, true, cb__, cookie__);
                }

                private const string __endLimitChallenge_name = "endLimitChallenge";

                public int end_endLimitChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __endLimitChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        int ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readInt();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge> begin_endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__endLimitChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge>(this, __endLimitChallenge_name, endLimitChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__endLimitChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(heroNum);
                        os__.writeString(items);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void endLimitChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    int ret__;
                    try
                    {
                        ret__ = end_endLimitChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool endLimitChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_endLimitChallenge cb__, int heroNum, string items)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endLimitChallenge_name);
                        result__ = begin_endLimitChallenge(heroNum, items);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge>(this, __endLimitChallenge_name, endLimitChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool endLimitChallenge_async(com.XSanGo.Protocol.AMI_TimeBattle_endLimitChallenge cb__, int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endLimitChallenge_name);
                        result__ = begin_endLimitChallenge(heroNum, items, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_endLimitChallenge>(this, __endLimitChallenge_name, endLimitChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes> begin_getChallengeTimes()
                {
                    return begin_getChallengeTimes(null, false, null, null);
                }

                /// <summary>
                /// 获取所有时空战役可挑战的次数BattleTimesView lua
                /// </summary>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes> begin_getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_getChallengeTimes(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_getChallengeTimes(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getChallengeTimes(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getChallengeTimes(ctx__, true, cb__, cookie__);
                }

                private const string __getChallengeTimes_name = "getChallengeTimes";

                public string end_getChallengeTimes(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __getChallengeTimes_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes> begin_getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__getChallengeTimes_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes>(this, __getChallengeTimes_name, getChallengeTimes_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__getChallengeTimes_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void getChallengeTimes_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_getChallengeTimes(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                /// <summary>
                /// 获取所有时空战役可挑战的次数BattleTimesView lua
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                public bool getChallengeTimes_async(com.XSanGo.Protocol.AMI_TimeBattle_getChallengeTimes cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes> result__;
                    try
                    {
                        checkTwowayOnly__(__getChallengeTimes_name);
                        result__ = begin_getChallengeTimes();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes>(this, __getChallengeTimes_name, getChallengeTimes_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                /// <summary>
                /// 获取所有时空战役可挑战的次数BattleTimesView lua
                /// </summary>
                /// <param name="cb__">The callback object for the operation.</param>
                /// <param name="ctx__">The Context map to send with the invocation.</param>
                public bool getChallengeTimes_async(com.XSanGo.Protocol.AMI_TimeBattle_getChallengeTimes cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes> result__;
                    try
                    {
                        checkTwowayOnly__(__getChallengeTimes_name);
                        result__ = begin_getChallengeTimes(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_TimeBattle_getChallengeTimes>(this, __getChallengeTimes_name, getChallengeTimes_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static TimeBattlePrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TimeBattlePrx r = b as TimeBattlePrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        TimeBattlePrxHelper h = new TimeBattlePrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TimeBattlePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TimeBattlePrx r = b as TimeBattlePrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        TimeBattlePrxHelper h = new TimeBattlePrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TimeBattlePrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            TimeBattlePrxHelper h = new TimeBattlePrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static TimeBattlePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            TimeBattlePrxHelper h = new TimeBattlePrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static TimeBattlePrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TimeBattlePrx r = b as TimeBattlePrx;
                    if(r == null)
                    {
                        TimeBattlePrxHelper h = new TimeBattlePrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TimeBattlePrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    TimeBattlePrxHelper h = new TimeBattlePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::TimeBattle"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new TimeBattleDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new TimeBattleDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, TimeBattlePrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static TimeBattlePrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        TimeBattlePrxHelper result = new TimeBattlePrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TimeBattleDel_ : Ice.ObjectDel_
            {
                string getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                int endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                int endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TimeBattleDelM_ : Ice.ObjectDelM_, TimeBattleDel_
            {
                public com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("beginChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(formationId);
                            os__.writeInt(id);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.BattleChallengeResultView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.BattleChallengeResultView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public int endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("endChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeInt(heroNum);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            int ret__;
                            ret__ = is__.readInt();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public int endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("endLimitChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeInt(heroNum);
                            os__.writeString(items);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            int ret__;
                            ret__ = is__.readInt();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("getChallengeTimes", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TimeBattleDelD_ : Ice.ObjectDelD_, TimeBattleDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "beginChallenge", Ice.OperationMode.Normal, context__);
                    com.XSanGo.Protocol.BattleChallengeResultView result__ = new com.XSanGo.Protocol.BattleChallengeResultView();
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        TimeBattle servant__ = null;
                        try
                        {
                            servant__ = (TimeBattle)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.beginChallenge(formationId, id, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public int endChallenge(int heroNum, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "endChallenge", Ice.OperationMode.Normal, context__);
                    int result__ = 0;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        TimeBattle servant__ = null;
                        try
                        {
                            servant__ = (TimeBattle)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.endChallenge(heroNum, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public int endLimitChallenge(int heroNum, string items, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "endLimitChallenge", Ice.OperationMode.Normal, context__);
                    int result__ = 0;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        TimeBattle servant__ = null;
                        try
                        {
                            servant__ = (TimeBattle)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.endLimitChallenge(heroNum, items, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string getChallengeTimes(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "getChallengeTimes", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        TimeBattle servant__ = null;
                        try
                        {
                            servant__ = (TimeBattle)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.getChallengeTimes(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class TimeBattleDisp_ : Ice.ObjectImpl, TimeBattle
            {
                #region Slice operations

                public string getChallengeTimes()
                {
                    return getChallengeTimes(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string getChallengeTimes(Ice.Current current__);

                public com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id)
                {
                    return beginChallenge(formationId, id, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract com.XSanGo.Protocol.BattleChallengeResultView beginChallenge(string formationId, int id, Ice.Current current__);

                public int endChallenge(int heroNum)
                {
                    return endChallenge(heroNum, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract int endChallenge(int heroNum, Ice.Current current__);

                public int endLimitChallenge(int heroNum, string items)
                {
                    return endLimitChallenge(heroNum, items, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract int endLimitChallenge(int heroNum, string items, Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::TimeBattle"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus getChallengeTimes___(TimeBattle obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.getChallengeTimes(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus beginChallenge___(TimeBattle obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string formationId;
                    int id;
                    formationId = is__.readString();
                    id = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        com.XSanGo.Protocol.BattleChallengeResultView ret__ = obj__.beginChallenge(formationId, id, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        if(ret__ == null)
                        {
                            com.XSanGo.Protocol.BattleChallengeResultView tmp__ = new com.XSanGo.Protocol.BattleChallengeResultView();
                            tmp__.write__(os__);
                        }
                        else
                        {
                            ret__.write__(os__);
                        }
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus endChallenge___(TimeBattle obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    int heroNum;
                    heroNum = is__.readInt();
                    inS__.endReadParams();
                    try
                    {
                        int ret__ = obj__.endChallenge(heroNum, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus endLimitChallenge___(TimeBattle obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    int heroNum;
                    string items;
                    heroNum = is__.readInt();
                    items = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        int ret__ = obj__.endLimitChallenge(heroNum, items, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeInt(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                private static string[] all__ =
                {
                    "beginChallenge",
                    "endChallenge",
                    "endLimitChallenge",
                    "getChallengeTimes",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return beginChallenge___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return endChallenge___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return endLimitChallenge___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return getChallengeTimes___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 6:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 7:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            /// <summary>
            /// 获取所有时空战役可挑战的次数BattleTimesView lua
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_TimeBattle_getChallengeTimes : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 挑战副本 返回掉落物品
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_TimeBattle_beginChallenge : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(com.XSanGo.Protocol.BattleChallengeResultView ret__);

                public void response__(com.XSanGo.Protocol.BattleChallengeResultView ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_TimeBattle_endChallenge : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(int ret__);

                public void response__(int ret__)
                {
                    ice_response(ret__);
                }
            }

            /// <summary>
            /// 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
            /// </summary>
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_TimeBattle_endLimitChallenge : Ice.AMICallbackBase
            {
                /// <summary>
                /// ice_response indicates that
                /// the operation completed successfully.
                /// </summary>
                public abstract void ice_response(int ret__);

                public void response__(int ret__)
                {
                    ice_response(ret__);
                }
            }
        }
    }
}
