// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Trader.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class HeroCallResult : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.CurrencyType callType;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int heroId;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public string rankTitle;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int colorLevel;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public byte star;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public bool challengeSuccess;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int remainChance;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public bool hasGift;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.CommodityView[] heroCommodities;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public bool challengeEnd;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public HeroCallResult()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public HeroCallResult(com.XSanGo.Protocol.CurrencyType callType, int heroId, string rankTitle, int colorLevel, byte star, bool challengeSuccess, int remainChance, bool hasGift, com.XSanGo.Protocol.CommodityView[] heroCommodities, bool challengeEnd)
                {
                    this.callType = callType;
                    this.heroId = heroId;
                    this.rankTitle = rankTitle;
                    this.colorLevel = colorLevel;
                    this.star = star;
                    this.challengeSuccess = challengeSuccess;
                    this.remainChance = remainChance;
                    this.hasGift = hasGift;
                    this.heroCommodities = heroCommodities;
                    this.challengeEnd = challengeEnd;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::HeroCallResult");
                    IceInternal.HashUtil.hashAdd(ref h__, callType);
                    IceInternal.HashUtil.hashAdd(ref h__, heroId);
                    IceInternal.HashUtil.hashAdd(ref h__, rankTitle);
                    IceInternal.HashUtil.hashAdd(ref h__, colorLevel);
                    IceInternal.HashUtil.hashAdd(ref h__, star);
                    IceInternal.HashUtil.hashAdd(ref h__, challengeSuccess);
                    IceInternal.HashUtil.hashAdd(ref h__, remainChance);
                    IceInternal.HashUtil.hashAdd(ref h__, hasGift);
                    IceInternal.HashUtil.hashAdd(ref h__, heroCommodities);
                    IceInternal.HashUtil.hashAdd(ref h__, challengeEnd);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    HeroCallResult o__ = (HeroCallResult)other__;
                    if(!callType.Equals(o__.callType))
                    {
                        return false;
                    }
                    if(!heroId.Equals(o__.heroId))
                    {
                        return false;
                    }
                    if(rankTitle == null)
                    {
                        if(o__.rankTitle != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!rankTitle.Equals(o__.rankTitle))
                        {
                            return false;
                        }
                    }
                    if(!colorLevel.Equals(o__.colorLevel))
                    {
                        return false;
                    }
                    if(!star.Equals(o__.star))
                    {
                        return false;
                    }
                    if(!challengeSuccess.Equals(o__.challengeSuccess))
                    {
                        return false;
                    }
                    if(!remainChance.Equals(o__.remainChance))
                    {
                        return false;
                    }
                    if(!hasGift.Equals(o__.hasGift))
                    {
                        return false;
                    }
                    if(heroCommodities == null)
                    {
                        if(o__.heroCommodities != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(heroCommodities, o__.heroCommodities))
                        {
                            return false;
                        }
                    }
                    if(!challengeEnd.Equals(o__.challengeEnd))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(HeroCallResult lhs__, HeroCallResult rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(HeroCallResult lhs__, HeroCallResult rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeEnum((int)callType, 7);
                    os__.writeInt(heroId);
                    os__.writeString(rankTitle);
                    os__.writeInt(colorLevel);
                    os__.writeByte(star);
                    os__.writeBool(challengeSuccess);
                    os__.writeInt(remainChance);
                    os__.writeBool(hasGift);
                    com.XSanGo.Protocol.CommodityViewSeqHelper.write(os__, heroCommodities);
                    os__.writeBool(challengeEnd);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    callType = (com.XSanGo.Protocol.CurrencyType)is__.readEnum(7);
                    heroId = is__.readInt();
                    rankTitle = is__.readString();
                    colorLevel = is__.readInt();
                    star = is__.readByte();
                    challengeSuccess = is__.readBool();
                    remainChance = is__.readInt();
                    hasGift = is__.readBool();
                    heroCommodities = com.XSanGo.Protocol.CommodityViewSeqHelper.read(is__);
                    challengeEnd = is__.readBool();
                }

                #endregion
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class TraderView : _System.ICloneable
            {
                #region Slice data members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int traderJinbiCallPrice;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int traderYuanbaoCallPrice;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int remainSecond;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.CommodityView[] commodityViews;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int heroJinbiCallPrice;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int heroYuanbaoCallPrice;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public int heroRemainSecond;

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public com.XSanGo.Protocol.HeroCallResult[] heroResult;

                #endregion

                #region Constructors

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public TraderView()
                {
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public TraderView(int traderJinbiCallPrice, int traderYuanbaoCallPrice, int remainSecond, com.XSanGo.Protocol.CommodityView[] commodityViews, int heroJinbiCallPrice, int heroYuanbaoCallPrice, int heroRemainSecond, com.XSanGo.Protocol.HeroCallResult[] heroResult)
                {
                    this.traderJinbiCallPrice = traderJinbiCallPrice;
                    this.traderYuanbaoCallPrice = traderYuanbaoCallPrice;
                    this.remainSecond = remainSecond;
                    this.commodityViews = commodityViews;
                    this.heroJinbiCallPrice = heroJinbiCallPrice;
                    this.heroYuanbaoCallPrice = heroYuanbaoCallPrice;
                    this.heroRemainSecond = heroRemainSecond;
                    this.heroResult = heroResult;
                }

                #endregion

                #region ICloneable members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override int GetHashCode()
                {
                    int h__ = 5381;
                    IceInternal.HashUtil.hashAdd(ref h__, "::com::XSanGo::Protocol::TraderView");
                    IceInternal.HashUtil.hashAdd(ref h__, traderJinbiCallPrice);
                    IceInternal.HashUtil.hashAdd(ref h__, traderYuanbaoCallPrice);
                    IceInternal.HashUtil.hashAdd(ref h__, remainSecond);
                    IceInternal.HashUtil.hashAdd(ref h__, commodityViews);
                    IceInternal.HashUtil.hashAdd(ref h__, heroJinbiCallPrice);
                    IceInternal.HashUtil.hashAdd(ref h__, heroYuanbaoCallPrice);
                    IceInternal.HashUtil.hashAdd(ref h__, heroRemainSecond);
                    IceInternal.HashUtil.hashAdd(ref h__, heroResult);
                    return h__;
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public override bool Equals(object other__)
                {
                    if(object.ReferenceEquals(this, other__))
                    {
                        return true;
                    }
                    if(other__ == null)
                    {
                        return false;
                    }
                    if(GetType() != other__.GetType())
                    {
                        return false;
                    }
                    TraderView o__ = (TraderView)other__;
                    if(!traderJinbiCallPrice.Equals(o__.traderJinbiCallPrice))
                    {
                        return false;
                    }
                    if(!traderYuanbaoCallPrice.Equals(o__.traderYuanbaoCallPrice))
                    {
                        return false;
                    }
                    if(!remainSecond.Equals(o__.remainSecond))
                    {
                        return false;
                    }
                    if(commodityViews == null)
                    {
                        if(o__.commodityViews != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(commodityViews, o__.commodityViews))
                        {
                            return false;
                        }
                    }
                    if(!heroJinbiCallPrice.Equals(o__.heroJinbiCallPrice))
                    {
                        return false;
                    }
                    if(!heroYuanbaoCallPrice.Equals(o__.heroYuanbaoCallPrice))
                    {
                        return false;
                    }
                    if(!heroRemainSecond.Equals(o__.heroRemainSecond))
                    {
                        return false;
                    }
                    if(heroResult == null)
                    {
                        if(o__.heroResult != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(heroResult, o__.heroResult))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator==(TraderView lhs__, TraderView rhs__)
                {
                    return Equals(lhs__, rhs__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public static bool operator!=(TraderView lhs__, TraderView rhs__)
                {
                    return !Equals(lhs__, rhs__);
                }

                #endregion

                #region Marshalling support

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void write__(IceInternal.BasicStream os__)
                {
                    os__.writeInt(traderJinbiCallPrice);
                    os__.writeInt(traderYuanbaoCallPrice);
                    os__.writeInt(remainSecond);
                    com.XSanGo.Protocol.CommodityViewSeqHelper.write(os__, commodityViews);
                    os__.writeInt(heroJinbiCallPrice);
                    os__.writeInt(heroYuanbaoCallPrice);
                    os__.writeInt(heroRemainSecond);
                    com.XSanGo.Protocol.HeroCallResultSeqHelper.write(os__, heroResult);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
                public void read__(IceInternal.BasicStream is__)
                {
                    traderJinbiCallPrice = is__.readInt();
                    traderYuanbaoCallPrice = is__.readInt();
                    remainSecond = is__.readInt();
                    commodityViews = com.XSanGo.Protocol.CommodityViewSeqHelper.read(is__);
                    heroJinbiCallPrice = is__.readInt();
                    heroYuanbaoCallPrice = is__.readInt();
                    heroRemainSecond = is__.readInt();
                    heroResult = com.XSanGo.Protocol.HeroCallResultSeqHelper.read(is__);
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface TraderCallback : Ice.Object, TraderCallbackOperations_, TraderCallbackOperationsNC_
            {
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface Trader : Ice.Object, TraderOperations_, TraderOperationsNC_
            {
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_TraderCallback_traderChange();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_getTraderView(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_callJinbiTrader(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_callYuanbaoTrader(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_callJinbiHero(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_callYuanbaoHero(string ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_buyItem();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_beginChallenge(com.XSanGo.Protocol.DuelReportView ret__);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_endChallenge();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_buyHeroItem();

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public delegate void Callback_Trader_acceptConsolation(string ret__);
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TraderCallbackPrx : Ice.ObjectPrx
            {
                void traderChange();
                void traderChange(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TraderCallback_traderChange> begin_traderChange();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_TraderCallback_traderChange> begin_traderChange(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_traderChange(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_traderChange(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_traderChange(Ice.AsyncResult r__);

                bool traderChange_async(com.XSanGo.Protocol.AMI_TraderCallback_traderChange cb__);
                bool traderChange_async(com.XSanGo.Protocol.AMI_TraderCallback_traderChange cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TraderPrx : Ice.ObjectPrx
            {
                string getTraderView();
                string getTraderView(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_getTraderView> begin_getTraderView();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_getTraderView> begin_getTraderView(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_getTraderView(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_getTraderView(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_getTraderView(Ice.AsyncResult r__);

                bool getTraderView_async(com.XSanGo.Protocol.AMI_Trader_getTraderView cb__);
                bool getTraderView_async(com.XSanGo.Protocol.AMI_Trader_getTraderView cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string callJinbiTrader();
                string callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader> begin_callJinbiTrader();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader> begin_callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_callJinbiTrader(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_callJinbiTrader(Ice.AsyncResult r__);

                bool callJinbiTrader_async(com.XSanGo.Protocol.AMI_Trader_callJinbiTrader cb__);
                bool callJinbiTrader_async(com.XSanGo.Protocol.AMI_Trader_callJinbiTrader cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string callYuanbaoTrader();
                string callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader> begin_callYuanbaoTrader();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader> begin_callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_callYuanbaoTrader(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_callYuanbaoTrader(Ice.AsyncResult r__);

                bool callYuanbaoTrader_async(com.XSanGo.Protocol.AMI_Trader_callYuanbaoTrader cb__);
                bool callYuanbaoTrader_async(com.XSanGo.Protocol.AMI_Trader_callYuanbaoTrader cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string callJinbiHero();
                string callJinbiHero(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiHero> begin_callJinbiHero();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiHero> begin_callJinbiHero(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_callJinbiHero(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_callJinbiHero(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_callJinbiHero(Ice.AsyncResult r__);

                bool callJinbiHero_async(com.XSanGo.Protocol.AMI_Trader_callJinbiHero cb__);
                bool callJinbiHero_async(com.XSanGo.Protocol.AMI_Trader_callJinbiHero cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string callYuanbaoHero();
                string callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero> begin_callYuanbaoHero();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero> begin_callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_callYuanbaoHero(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_callYuanbaoHero(Ice.AsyncResult r__);

                bool callYuanbaoHero_async(com.XSanGo.Protocol.AMI_Trader_callYuanbaoHero cb__);
                bool callYuanbaoHero_async(com.XSanGo.Protocol.AMI_Trader_callYuanbaoHero cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void buyItem(string id);
                void buyItem(string id, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyItem> begin_buyItem(string id);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyItem> begin_buyItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_buyItem(string id, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_buyItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_buyItem(Ice.AsyncResult r__);

                bool buyItem_async(com.XSanGo.Protocol.AMI_Trader_buyItem cb__, string id);
                bool buyItem_async(com.XSanGo.Protocol.AMI_Trader_buyItem cb__, string id, _System.Collections.Generic.Dictionary<string, string> ctx__);

                com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId);
                com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_beginChallenge> begin_beginChallenge(string heroId);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_beginChallenge> begin_beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_beginChallenge(string heroId, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                com.XSanGo.Protocol.DuelReportView end_beginChallenge(Ice.AsyncResult r__);

                bool beginChallenge_async(com.XSanGo.Protocol.AMI_Trader_beginChallenge cb__, string heroId);
                bool beginChallenge_async(com.XSanGo.Protocol.AMI_Trader_beginChallenge cb__, string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void endChallenge(com.XSanGo.Protocol.DuelResult result);
                void endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_endChallenge> begin_endChallenge(com.XSanGo.Protocol.DuelResult result);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_endChallenge> begin_endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_endChallenge(com.XSanGo.Protocol.DuelResult result, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_endChallenge(Ice.AsyncResult r__);

                bool endChallenge_async(com.XSanGo.Protocol.AMI_Trader_endChallenge cb__, com.XSanGo.Protocol.DuelResult result);
                bool endChallenge_async(com.XSanGo.Protocol.AMI_Trader_endChallenge cb__, com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> ctx__);

                void buyHeroItem(string id);
                void buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyHeroItem> begin_buyHeroItem(string id);
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyHeroItem> begin_buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_buyHeroItem(string id, Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                void end_buyHeroItem(Ice.AsyncResult r__);

                bool buyHeroItem_async(com.XSanGo.Protocol.AMI_Trader_buyHeroItem cb__, string id);
                bool buyHeroItem_async(com.XSanGo.Protocol.AMI_Trader_buyHeroItem cb__, string id, _System.Collections.Generic.Dictionary<string, string> ctx__);

                string acceptConsolation();
                string acceptConsolation(_System.Collections.Generic.Dictionary<string, string> context__);

                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_acceptConsolation> begin_acceptConsolation();
                Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_acceptConsolation> begin_acceptConsolation(_System.Collections.Generic.Dictionary<string, string> ctx__);

                Ice.AsyncResult begin_acceptConsolation(Ice.AsyncCallback cb__, object cookie__);
                Ice.AsyncResult begin_acceptConsolation(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                string end_acceptConsolation(Ice.AsyncResult r__);

                bool acceptConsolation_async(com.XSanGo.Protocol.AMI_Trader_acceptConsolation cb__);
                bool acceptConsolation_async(com.XSanGo.Protocol.AMI_Trader_acceptConsolation cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TraderCallbackOperations_
            {
                void traderChange(Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TraderCallbackOperationsNC_
            {
                void traderChange();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TraderOperations_
            {
                string getTraderView(Ice.Current current__);

                string callJinbiTrader(Ice.Current current__);

                string callYuanbaoTrader(Ice.Current current__);

                string callJinbiHero(Ice.Current current__);

                string callYuanbaoHero(Ice.Current current__);

                void buyItem(string id, Ice.Current current__);

                com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId, Ice.Current current__);

                void endChallenge(com.XSanGo.Protocol.DuelResult result, Ice.Current current__);

                void buyHeroItem(string id, Ice.Current current__);

                string acceptConsolation(Ice.Current current__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TraderOperationsNC_
            {
                string getTraderView();

                string callJinbiTrader();

                string callYuanbaoTrader();

                string callJinbiHero();

                string callYuanbaoHero();

                void buyItem(string id);

                com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId);

                void endChallenge(com.XSanGo.Protocol.DuelResult result);

                void buyHeroItem(string id);

                string acceptConsolation();
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class HeroCallResultSeqHelper
            {
                public static void write(IceInternal.BasicStream os__, com.XSanGo.Protocol.HeroCallResult[] v__)
                {
                    if(v__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(v__.Length);
                        for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                        {
                            (v__[ix__] == null ? new com.XSanGo.Protocol.HeroCallResult() : v__[ix__]).write__(os__);
                        }
                    }
                }

                public static com.XSanGo.Protocol.HeroCallResult[] read(IceInternal.BasicStream is__)
                {
                    com.XSanGo.Protocol.HeroCallResult[] v__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(19);
                        v__ = new com.XSanGo.Protocol.HeroCallResult[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            v__[ix__] = new com.XSanGo.Protocol.HeroCallResult();
                            v__[ix__].read__(is__);
                        }
                    }
                    return v__;
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TraderCallbackPrxHelper : Ice.ObjectPrxHelperBase, TraderCallbackPrx
            {
                #region Synchronous operations

                public void traderChange()
                {
                    traderChange(null, false);
                }

                public void traderChange(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    traderChange(context__, true);
                }

                private void traderChange(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __traderChange_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                delBase__ = getDelegate__(false);
                                TraderCallbackDel_ del__ = (TraderCallbackDel_)delBase__;
                                del__.traderChange(context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TraderCallback_traderChange> begin_traderChange()
                {
                    return begin_traderChange(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_TraderCallback_traderChange> begin_traderChange(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_traderChange(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_traderChange(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_traderChange(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_traderChange(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_traderChange(ctx__, true, cb__, cookie__);
                }

                private const string __traderChange_name = "traderChange";

                public void end_traderChange(Ice.AsyncResult r__)
                {
                    end__(r__, __traderChange_name);
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_TraderCallback_traderChange> begin_traderChange(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_TraderCallback_traderChange> result__ = new IceInternal.OnewayOutgoingAsync<com.XSanGo.Protocol.Callback_TraderCallback_traderChange>(this, __traderChange_name, traderChange_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__traderChange_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void traderChange_completed__(com.XSanGo.Protocol.Callback_TraderCallback_traderChange cb__)
                {
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool traderChange_async(com.XSanGo.Protocol.AMI_TraderCallback_traderChange cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TraderCallback_traderChange> result__ = begin_traderChange();
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool traderChange_async(com.XSanGo.Protocol.AMI_TraderCallback_traderChange cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_TraderCallback_traderChange> result__ = begin_traderChange(ctx__);
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static TraderCallbackPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TraderCallbackPrx r = b as TraderCallbackPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        TraderCallbackPrxHelper h = new TraderCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TraderCallbackPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TraderCallbackPrx r = b as TraderCallbackPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        TraderCallbackPrxHelper h = new TraderCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TraderCallbackPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            TraderCallbackPrxHelper h = new TraderCallbackPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static TraderCallbackPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            TraderCallbackPrxHelper h = new TraderCallbackPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static TraderCallbackPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TraderCallbackPrx r = b as TraderCallbackPrx;
                    if(r == null)
                    {
                        TraderCallbackPrxHelper h = new TraderCallbackPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TraderCallbackPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    TraderCallbackPrxHelper h = new TraderCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::TraderCallback"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new TraderCallbackDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new TraderCallbackDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, TraderCallbackPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static TraderCallbackPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        TraderCallbackPrxHelper result = new TraderCallbackPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TraderPrxHelper : Ice.ObjectPrxHelperBase, TraderPrx
            {
                #region Synchronous operations

                public string acceptConsolation()
                {
                    return acceptConsolation(null, false);
                }

                public string acceptConsolation(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return acceptConsolation(context__, true);
                }

                private string acceptConsolation(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __acceptConsolation_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__acceptConsolation_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                return del__.acceptConsolation(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId)
                {
                    return beginChallenge(heroId, null, false);
                }

                public com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return beginChallenge(heroId, context__, true);
                }

                private com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __beginChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__beginChallenge_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                return del__.beginChallenge(heroId, context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void buyHeroItem(string id)
                {
                    buyHeroItem(id, null, false);
                }

                public void buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    buyHeroItem(id, context__, true);
                }

                private void buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __buyHeroItem_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__buyHeroItem_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                del__.buyHeroItem(id, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void buyItem(string id)
                {
                    buyItem(id, null, false);
                }

                public void buyItem(string id, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    buyItem(id, context__, true);
                }

                private void buyItem(string id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __buyItem_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__buyItem_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                del__.buyItem(id, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string callJinbiHero()
                {
                    return callJinbiHero(null, false);
                }

                public string callJinbiHero(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return callJinbiHero(context__, true);
                }

                private string callJinbiHero(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __callJinbiHero_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__callJinbiHero_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                return del__.callJinbiHero(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string callJinbiTrader()
                {
                    return callJinbiTrader(null, false);
                }

                public string callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return callJinbiTrader(context__, true);
                }

                private string callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __callJinbiTrader_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__callJinbiTrader_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                return del__.callJinbiTrader(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string callYuanbaoHero()
                {
                    return callYuanbaoHero(null, false);
                }

                public string callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return callYuanbaoHero(context__, true);
                }

                private string callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __callYuanbaoHero_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__callYuanbaoHero_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                return del__.callYuanbaoHero(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string callYuanbaoTrader()
                {
                    return callYuanbaoTrader(null, false);
                }

                public string callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return callYuanbaoTrader(context__, true);
                }

                private string callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __callYuanbaoTrader_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__callYuanbaoTrader_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                return del__.callYuanbaoTrader(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public void endChallenge(com.XSanGo.Protocol.DuelResult result)
                {
                    endChallenge(result, null, false);
                }

                public void endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> context__)
                {
                    endChallenge(result, context__, true);
                }

                private void endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __endChallenge_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__endChallenge_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                del__.endChallenge(result, context__, observer__);
                                return;
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                public string getTraderView()
                {
                    return getTraderView(null, false);
                }

                public string getTraderView(_System.Collections.Generic.Dictionary<string, string> context__)
                {
                    return getTraderView(context__, true);
                }

                private string getTraderView(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
                {
                    if(explicitContext__ && context__ == null)
                    {
                        context__ = emptyContext_;
                    }
                    Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getTraderView_name, context__);
                    int cnt__ = 0;
                    try
                    {
                        while(true)
                        {
                            Ice.ObjectDel_ delBase__ = null;
                            try
                            {
                                checkTwowayOnly__(__getTraderView_name);
                                delBase__ = getDelegate__(false);
                                TraderDel_ del__ = (TraderDel_)delBase__;
                                return del__.getTraderView(context__, observer__);
                            }
                            catch(IceInternal.LocalExceptionWrapper ex__)
                            {
                                handleExceptionWrapper__(delBase__, ex__, observer__);
                            }
                            catch(Ice.LocalException ex__)
                            {
                                handleException__(delBase__, ex__, true, ref cnt__, observer__);
                            }
                        }
                    }
                    finally
                    {
                        if(observer__ != null)
                        {
                            observer__.detach();
                        }
                    }
                }

                #endregion

                #region Asynchronous operations

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_acceptConsolation> begin_acceptConsolation()
                {
                    return begin_acceptConsolation(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_acceptConsolation> begin_acceptConsolation(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_acceptConsolation(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_acceptConsolation(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_acceptConsolation(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_acceptConsolation(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_acceptConsolation(ctx__, true, cb__, cookie__);
                }

                private const string __acceptConsolation_name = "acceptConsolation";

                public string end_acceptConsolation(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __acceptConsolation_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_acceptConsolation> begin_acceptConsolation(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__acceptConsolation_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_acceptConsolation> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_acceptConsolation>(this, __acceptConsolation_name, acceptConsolation_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__acceptConsolation_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void acceptConsolation_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_acceptConsolation cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_acceptConsolation(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool acceptConsolation_async(com.XSanGo.Protocol.AMI_Trader_acceptConsolation cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_acceptConsolation> result__;
                    try
                    {
                        checkTwowayOnly__(__acceptConsolation_name);
                        result__ = begin_acceptConsolation();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_acceptConsolation>(this, __acceptConsolation_name, acceptConsolation_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool acceptConsolation_async(com.XSanGo.Protocol.AMI_Trader_acceptConsolation cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_acceptConsolation> result__;
                    try
                    {
                        checkTwowayOnly__(__acceptConsolation_name);
                        result__ = begin_acceptConsolation(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_acceptConsolation>(this, __acceptConsolation_name, acceptConsolation_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_beginChallenge> begin_beginChallenge(string heroId)
                {
                    return begin_beginChallenge(heroId, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_beginChallenge> begin_beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_beginChallenge(heroId, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_beginChallenge(string heroId, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginChallenge(heroId, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_beginChallenge(heroId, ctx__, true, cb__, cookie__);
                }

                private const string __beginChallenge_name = "beginChallenge";

                public com.XSanGo.Protocol.DuelReportView end_beginChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __beginChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        com.XSanGo.Protocol.DuelReportView ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = null;
                        if(ret__ == null)
                        {
                            ret__ = new com.XSanGo.Protocol.DuelReportView();
                        }
                        ret__.read__(is__);
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_beginChallenge> begin_beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__beginChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_beginChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__beginChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(heroId);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void beginChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_beginChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    com.XSanGo.Protocol.DuelReportView ret__;
                    try
                    {
                        ret__ = end_beginChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool beginChallenge_async(com.XSanGo.Protocol.AMI_Trader_beginChallenge cb__, string heroId)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_beginChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginChallenge_name);
                        result__ = begin_beginChallenge(heroId);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool beginChallenge_async(com.XSanGo.Protocol.AMI_Trader_beginChallenge cb__, string heroId, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_beginChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__beginChallenge_name);
                        result__ = begin_beginChallenge(heroId, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_beginChallenge>(this, __beginChallenge_name, beginChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyHeroItem> begin_buyHeroItem(string id)
                {
                    return begin_buyHeroItem(id, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyHeroItem> begin_buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_buyHeroItem(id, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_buyHeroItem(string id, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_buyHeroItem(id, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_buyHeroItem(id, ctx__, true, cb__, cookie__);
                }

                private const string __buyHeroItem_name = "buyHeroItem";

                public void end_buyHeroItem(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __buyHeroItem_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyHeroItem> begin_buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__buyHeroItem_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_buyHeroItem> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_buyHeroItem>(this, __buyHeroItem_name, buyHeroItem_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__buyHeroItem_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(id);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void buyHeroItem_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_buyHeroItem cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_buyHeroItem(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool buyHeroItem_async(com.XSanGo.Protocol.AMI_Trader_buyHeroItem cb__, string id)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyHeroItem> result__;
                    try
                    {
                        checkTwowayOnly__(__buyHeroItem_name);
                        result__ = begin_buyHeroItem(id);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_buyHeroItem>(this, __buyHeroItem_name, buyHeroItem_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool buyHeroItem_async(com.XSanGo.Protocol.AMI_Trader_buyHeroItem cb__, string id, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyHeroItem> result__;
                    try
                    {
                        checkTwowayOnly__(__buyHeroItem_name);
                        result__ = begin_buyHeroItem(id, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_buyHeroItem>(this, __buyHeroItem_name, buyHeroItem_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyItem> begin_buyItem(string id)
                {
                    return begin_buyItem(id, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyItem> begin_buyItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_buyItem(id, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_buyItem(string id, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_buyItem(id, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_buyItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_buyItem(id, ctx__, true, cb__, cookie__);
                }

                private const string __buyItem_name = "buyItem";

                public void end_buyItem(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __buyItem_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyItem> begin_buyItem(string id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__buyItem_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_buyItem> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_buyItem>(this, __buyItem_name, buyItem_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__buyItem_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(id);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void buyItem_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_buyItem cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_buyItem(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool buyItem_async(com.XSanGo.Protocol.AMI_Trader_buyItem cb__, string id)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyItem> result__;
                    try
                    {
                        checkTwowayOnly__(__buyItem_name);
                        result__ = begin_buyItem(id);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_buyItem>(this, __buyItem_name, buyItem_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool buyItem_async(com.XSanGo.Protocol.AMI_Trader_buyItem cb__, string id, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_buyItem> result__;
                    try
                    {
                        checkTwowayOnly__(__buyItem_name);
                        result__ = begin_buyItem(id, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_buyItem>(this, __buyItem_name, buyItem_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiHero> begin_callJinbiHero()
                {
                    return begin_callJinbiHero(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiHero> begin_callJinbiHero(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_callJinbiHero(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_callJinbiHero(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_callJinbiHero(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_callJinbiHero(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_callJinbiHero(ctx__, true, cb__, cookie__);
                }

                private const string __callJinbiHero_name = "callJinbiHero";

                public string end_callJinbiHero(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __callJinbiHero_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiHero> begin_callJinbiHero(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__callJinbiHero_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callJinbiHero> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callJinbiHero>(this, __callJinbiHero_name, callJinbiHero_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__callJinbiHero_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void callJinbiHero_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_callJinbiHero cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_callJinbiHero(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool callJinbiHero_async(com.XSanGo.Protocol.AMI_Trader_callJinbiHero cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiHero> result__;
                    try
                    {
                        checkTwowayOnly__(__callJinbiHero_name);
                        result__ = begin_callJinbiHero();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callJinbiHero>(this, __callJinbiHero_name, callJinbiHero_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool callJinbiHero_async(com.XSanGo.Protocol.AMI_Trader_callJinbiHero cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiHero> result__;
                    try
                    {
                        checkTwowayOnly__(__callJinbiHero_name);
                        result__ = begin_callJinbiHero(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callJinbiHero>(this, __callJinbiHero_name, callJinbiHero_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader> begin_callJinbiTrader()
                {
                    return begin_callJinbiTrader(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader> begin_callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_callJinbiTrader(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_callJinbiTrader(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_callJinbiTrader(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_callJinbiTrader(ctx__, true, cb__, cookie__);
                }

                private const string __callJinbiTrader_name = "callJinbiTrader";

                public string end_callJinbiTrader(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __callJinbiTrader_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader> begin_callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__callJinbiTrader_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader>(this, __callJinbiTrader_name, callJinbiTrader_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__callJinbiTrader_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void callJinbiTrader_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_callJinbiTrader cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_callJinbiTrader(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool callJinbiTrader_async(com.XSanGo.Protocol.AMI_Trader_callJinbiTrader cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader> result__;
                    try
                    {
                        checkTwowayOnly__(__callJinbiTrader_name);
                        result__ = begin_callJinbiTrader();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader>(this, __callJinbiTrader_name, callJinbiTrader_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool callJinbiTrader_async(com.XSanGo.Protocol.AMI_Trader_callJinbiTrader cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader> result__;
                    try
                    {
                        checkTwowayOnly__(__callJinbiTrader_name);
                        result__ = begin_callJinbiTrader(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callJinbiTrader>(this, __callJinbiTrader_name, callJinbiTrader_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero> begin_callYuanbaoHero()
                {
                    return begin_callYuanbaoHero(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero> begin_callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_callYuanbaoHero(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_callYuanbaoHero(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_callYuanbaoHero(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_callYuanbaoHero(ctx__, true, cb__, cookie__);
                }

                private const string __callYuanbaoHero_name = "callYuanbaoHero";

                public string end_callYuanbaoHero(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __callYuanbaoHero_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero> begin_callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__callYuanbaoHero_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero>(this, __callYuanbaoHero_name, callYuanbaoHero_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__callYuanbaoHero_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void callYuanbaoHero_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_callYuanbaoHero(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool callYuanbaoHero_async(com.XSanGo.Protocol.AMI_Trader_callYuanbaoHero cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero> result__;
                    try
                    {
                        checkTwowayOnly__(__callYuanbaoHero_name);
                        result__ = begin_callYuanbaoHero();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero>(this, __callYuanbaoHero_name, callYuanbaoHero_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool callYuanbaoHero_async(com.XSanGo.Protocol.AMI_Trader_callYuanbaoHero cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero> result__;
                    try
                    {
                        checkTwowayOnly__(__callYuanbaoHero_name);
                        result__ = begin_callYuanbaoHero(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callYuanbaoHero>(this, __callYuanbaoHero_name, callYuanbaoHero_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader> begin_callYuanbaoTrader()
                {
                    return begin_callYuanbaoTrader(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader> begin_callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_callYuanbaoTrader(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_callYuanbaoTrader(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_callYuanbaoTrader(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_callYuanbaoTrader(ctx__, true, cb__, cookie__);
                }

                private const string __callYuanbaoTrader_name = "callYuanbaoTrader";

                public string end_callYuanbaoTrader(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __callYuanbaoTrader_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                            {
                                throw;
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader> begin_callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__callYuanbaoTrader_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader>(this, __callYuanbaoTrader_name, callYuanbaoTrader_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__callYuanbaoTrader_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void callYuanbaoTrader_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_callYuanbaoTrader(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool callYuanbaoTrader_async(com.XSanGo.Protocol.AMI_Trader_callYuanbaoTrader cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader> result__;
                    try
                    {
                        checkTwowayOnly__(__callYuanbaoTrader_name);
                        result__ = begin_callYuanbaoTrader();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader>(this, __callYuanbaoTrader_name, callYuanbaoTrader_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool callYuanbaoTrader_async(com.XSanGo.Protocol.AMI_Trader_callYuanbaoTrader cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader> result__;
                    try
                    {
                        checkTwowayOnly__(__callYuanbaoTrader_name);
                        result__ = begin_callYuanbaoTrader(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_callYuanbaoTrader>(this, __callYuanbaoTrader_name, callYuanbaoTrader_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_endChallenge> begin_endChallenge(com.XSanGo.Protocol.DuelResult result)
                {
                    return begin_endChallenge(result, null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_endChallenge> begin_endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_endChallenge(result, ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_endChallenge(com.XSanGo.Protocol.DuelResult result, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endChallenge(result, null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_endChallenge(result, ctx__, true, cb__, cookie__);
                }

                private const string __endChallenge_name = "endChallenge";

                public void end_endChallenge(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __endChallenge_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        outAsync__.readEmptyParams__();
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_endChallenge> begin_endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__endChallenge_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_endChallenge> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_endChallenge>(this, __endChallenge_name, endChallenge_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__endChallenge_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeEnum((int)result, 2);
                        result__.endWriteParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void endChallenge_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_endChallenge cb__, Ice.ExceptionCallback excb__)
                {
                    try
                    {
                        end_endChallenge(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__();
                    }
                }

                public bool endChallenge_async(com.XSanGo.Protocol.AMI_Trader_endChallenge cb__, com.XSanGo.Protocol.DuelResult result)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_endChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endChallenge_name);
                        result__ = begin_endChallenge(result);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_endChallenge>(this, __endChallenge_name, endChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool endChallenge_async(com.XSanGo.Protocol.AMI_Trader_endChallenge cb__, com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_endChallenge> result__;
                    try
                    {
                        checkTwowayOnly__(__endChallenge_name);
                        result__ = begin_endChallenge(result, ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_endChallenge>(this, __endChallenge_name, endChallenge_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_getTraderView> begin_getTraderView()
                {
                    return begin_getTraderView(null, false, null, null);
                }

                public Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_getTraderView> begin_getTraderView(_System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    return begin_getTraderView(ctx__, true, null, null);
                }

                public Ice.AsyncResult begin_getTraderView(Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getTraderView(null, false, cb__, cookie__);
                }

                public Ice.AsyncResult begin_getTraderView(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                {
                    return begin_getTraderView(ctx__, true, cb__, cookie__);
                }

                private const string __getTraderView_name = "getTraderView";

                public string end_getTraderView(Ice.AsyncResult r__)
                {
                    IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
                    IceInternal.OutgoingAsync.check__(outAsync__, this, __getTraderView_name);
                    bool ok__ = outAsync__.wait__();
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                outAsync__.throwUserException__();
                            }
                            catch(com.XSanGo.Protocol.NoteException)
                            {
                                throw;
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        string ret__;
                        IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                        ret__ = is__.readString();
                        outAsync__.endReadParams__();
                        return ret__;
                    }
                    catch(Ice.LocalException ex)
                    {
                        Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                        if(obsv__ != null)
                        {
                            obsv__.failed(ex.ice_name());
                        }
                        throw ex;
                    }
                }

                private Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_getTraderView> begin_getTraderView(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
                {
                    checkAsyncTwowayOnly__(__getTraderView_name);
                    IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_getTraderView> result__ =  new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_getTraderView>(this, __getTraderView_name, getTraderView_completed__, cookie__);
                    if(cb__ != null)
                    {
                        result__.whenCompletedWithAsyncCallback(cb__);
                    }
                    try
                    {
                        result__.prepare__(__getTraderView_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                        result__.writeEmptyParams__();
                        result__.send__(true);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        result__.exceptionAsync__(ex__);
                    }
                    return result__;
                }

                private void getTraderView_completed__(Ice.AsyncResult r__, com.XSanGo.Protocol.Callback_Trader_getTraderView cb__, Ice.ExceptionCallback excb__)
                {
                    string ret__;
                    try
                    {
                        ret__ = end_getTraderView(r__);
                    }
                    catch(Ice.Exception ex__)
                    {
                        if(excb__ != null)
                        {
                            excb__(ex__);
                        }
                        return;
                    }
                    if(cb__ != null)
                    {
                        cb__(ret__);
                    }
                }

                public bool getTraderView_async(com.XSanGo.Protocol.AMI_Trader_getTraderView cb__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_getTraderView> result__;
                    try
                    {
                        checkTwowayOnly__(__getTraderView_name);
                        result__ = begin_getTraderView();
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_getTraderView>(this, __getTraderView_name, getTraderView_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                public bool getTraderView_async(com.XSanGo.Protocol.AMI_Trader_getTraderView cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
                {
                    Ice.AsyncResult<com.XSanGo.Protocol.Callback_Trader_getTraderView> result__;
                    try
                    {
                        checkTwowayOnly__(__getTraderView_name);
                        result__ = begin_getTraderView(ctx__);
                    }
                    catch(Ice.TwowayOnlyException ex)
                    {
                        result__ = new IceInternal.TwowayOutgoingAsync<com.XSanGo.Protocol.Callback_Trader_getTraderView>(this, __getTraderView_name, getTraderView_completed__, null);
                        ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
                    }
                    result__.whenCompleted(cb__.response__, cb__.exception__);
                    if(cb__ is Ice.AMISentCallback)
                    {
                        result__.whenSent((Ice.AsyncCallback)cb__.sent__);
                    }
                    return result__.sentSynchronously();
                }

                #endregion

                #region Checked and unchecked cast operations

                public static TraderPrx checkedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TraderPrx r = b as TraderPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        TraderPrxHelper h = new TraderPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TraderPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TraderPrx r = b as TraderPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        TraderPrxHelper h = new TraderPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TraderPrx checkedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            TraderPrxHelper h = new TraderPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static TraderPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            TraderPrxHelper h = new TraderPrxHelper();
                            h.copyFrom__(bb);
                            return h;
                        }
                    }
                    catch(Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static TraderPrx uncheckedCast(Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    TraderPrx r = b as TraderPrx;
                    if(r == null)
                    {
                        TraderPrxHelper h = new TraderPrxHelper();
                        h.copyFrom__(b);
                        r = h;
                    }
                    return r;
                }

                public static TraderPrx uncheckedCast(Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    Ice.ObjectPrx bb = b.ice_facet(f);
                    TraderPrxHelper h = new TraderPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }

                public static readonly string[] ids__ =
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::Trader"
                };

                public static string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Marshaling support

                protected override Ice.ObjectDelM_ createDelegateM__()
                {
                    return new TraderDelM_();
                }

                protected override Ice.ObjectDelD_ createDelegateD__()
                {
                    return new TraderDelD_();
                }

                public static void write__(IceInternal.BasicStream os__, TraderPrx v__)
                {
                    os__.writeProxy(v__);
                }

                public static TraderPrx read__(IceInternal.BasicStream is__)
                {
                    Ice.ObjectPrx proxy = is__.readProxy();
                    if(proxy != null)
                    {
                        TraderPrxHelper result = new TraderPrxHelper();
                        result.copyFrom__(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TraderCallbackDel_ : Ice.ObjectDel_
            {
                void traderChange(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public interface TraderDel_ : Ice.ObjectDel_
            {
                string getTraderView(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string callJinbiHero(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void buyItem(string id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                void buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

                string acceptConsolation(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TraderCallbackDelM_ : Ice.ObjectDelM_, TraderCallbackDel_
            {
                public void traderChange(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("traderChange", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        if(og__.hasResponse())
                        {
                            try
                            {
                                if(!ok__)
                                {
                                    try
                                    {
                                        og__.throwUserException();
                                    }
                                    catch(Ice.UserException ex__)
                                    {
                                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                    }
                                }
                                og__.readEmptyParams();
                            }
                            catch(Ice.LocalException ex__)
                            {
                                throw new IceInternal.LocalExceptionWrapper(ex__, false);
                            }
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TraderDelM_ : Ice.ObjectDelM_, TraderDel_
            {
                public string acceptConsolation(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("acceptConsolation", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("beginChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(heroId);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            com.XSanGo.Protocol.DuelReportView ret__;
                            ret__ = null;
                            if(ret__ == null)
                            {
                                ret__ = new com.XSanGo.Protocol.DuelReportView();
                            }
                            ret__.read__(is__);
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("buyHeroItem", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(id);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void buyItem(string id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("buyItem", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeString(id);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string callJinbiHero(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("callJinbiHero", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("callJinbiTrader", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("callYuanbaoHero", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("callYuanbaoTrader", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                                {
                                    throw;
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public void endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("endChallenge", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        try
                        {
                            IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeEnum((int)result, 2);
                            og__.endWriteParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            og__.abort(ex__);
                        }
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            og__.readEmptyParams();
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }

                public string getTraderView(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    IceInternal.Outgoing og__ = handler__.getOutgoing("getTraderView", Ice.OperationMode.Normal, context__, observer__);
                    try
                    {
                        og__.writeEmptyParams();
                        bool ok__ = og__.invoke();
                        try
                        {
                            if(!ok__)
                            {
                                try
                                {
                                    og__.throwUserException();
                                }
                                catch(com.XSanGo.Protocol.NoteException)
                                {
                                    throw;
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            IceInternal.BasicStream is__ = og__.startReadParams();
                            string ret__;
                            ret__ = is__.readString();
                            og__.endReadParams();
                            return ret__;
                        }
                        catch(Ice.LocalException ex__)
                        {
                            throw new IceInternal.LocalExceptionWrapper(ex__, false);
                        }
                    }
                    finally
                    {
                        handler__.reclaimOutgoing(og__);
                    }
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TraderCallbackDelD_ : Ice.ObjectDelD_, TraderCallbackDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void traderChange(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "traderChange", Ice.OperationMode.Normal, context__);
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        TraderCallback servant__ = null;
                        try
                        {
                            servant__ = (TraderCallback)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        servant__.traderChange(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public sealed class TraderDelD_ : Ice.ObjectDelD_, TraderDel_
            {
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string acceptConsolation(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "acceptConsolation", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        result__ = servant__.acceptConsolation(current__);
                        return Ice.DispatchStatus.DispatchOK;
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "beginChallenge", Ice.OperationMode.Normal, context__);
                    com.XSanGo.Protocol.DuelReportView result__ = new com.XSanGo.Protocol.DuelReportView();
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.beginChallenge(heroId, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void buyHeroItem(string id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "buyHeroItem", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.buyHeroItem(id, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void buyItem(string id, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "buyItem", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.buyItem(id, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string callJinbiHero(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "callJinbiHero", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.callJinbiHero(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string callJinbiTrader(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "callJinbiTrader", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.callJinbiTrader(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string callYuanbaoHero(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "callYuanbaoHero", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.callYuanbaoHero(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string callYuanbaoTrader(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "callYuanbaoTrader", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.callYuanbaoTrader(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException)
                    {
                        throw;
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public void endChallenge(com.XSanGo.Protocol.DuelResult result, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "endChallenge", Ice.OperationMode.Normal, context__);
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            servant__.endChallenge(result, current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
                public string getTraderView(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
                {
                    Ice.Current current__ = new Ice.Current();
                    initCurrent__(ref current__, "getTraderView", Ice.OperationMode.Normal, context__);
                    string result__ = null;
                    Ice.UserException userException__ = null;
                    IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
                    {
                        Trader servant__ = null;
                        try
                        {
                            servant__ = (Trader)obj__;
                        }
                        catch(_System.InvalidCastException)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }
                        try
                        {
                            result__ = servant__.getTraderView(current__);
                            return Ice.DispatchStatus.DispatchOK;
                        }
                        catch(Ice.UserException ex__)
                        {
                            userException__ = ex__;
                            return Ice.DispatchStatus.DispatchUserException;
                        }
                    };
                    IceInternal.Direct direct__ = null;
                    try
                    {
                        direct__ = new IceInternal.Direct(current__, run__);
                        try
                        {
                            Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                            if(status__ == Ice.DispatchStatus.DispatchUserException)
                            {
                                throw userException__;
                            }
                            _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                        }
                        finally
                        {
                            direct__.destroy();
                        }
                    }
                    catch(com.XSanGo.Protocol.NoteException)
                    {
                        throw;
                    }
                    catch(Ice.SystemException)
                    {
                        throw;
                    }
                    catch(_System.Exception ex__)
                    {
                        IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
                    }
                    return result__;
                }
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class TraderCallbackDisp_ : Ice.ObjectImpl, TraderCallback
            {
                #region Slice operations

                public void traderChange()
                {
                    traderChange(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void traderChange(Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::TraderCallback"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus traderChange___(TraderCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    obj__.traderChange(current__);
                    inS__.writeEmptyParams__();
                    return Ice.DispatchStatus.DispatchOK;
                }

                private static string[] all__ =
                {
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "traderChange"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return traderChange___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class TraderDisp_ : Ice.ObjectImpl, Trader
            {
                #region Slice operations

                public string getTraderView()
                {
                    return getTraderView(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string getTraderView(Ice.Current current__);

                public string callJinbiTrader()
                {
                    return callJinbiTrader(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string callJinbiTrader(Ice.Current current__);

                public string callYuanbaoTrader()
                {
                    return callYuanbaoTrader(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string callYuanbaoTrader(Ice.Current current__);

                public string callJinbiHero()
                {
                    return callJinbiHero(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string callJinbiHero(Ice.Current current__);

                public string callYuanbaoHero()
                {
                    return callYuanbaoHero(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string callYuanbaoHero(Ice.Current current__);

                public void buyItem(string id)
                {
                    buyItem(id, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void buyItem(string id, Ice.Current current__);

                public com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId)
                {
                    return beginChallenge(heroId, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract com.XSanGo.Protocol.DuelReportView beginChallenge(string heroId, Ice.Current current__);

                public void endChallenge(com.XSanGo.Protocol.DuelResult result)
                {
                    endChallenge(result, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void endChallenge(com.XSanGo.Protocol.DuelResult result, Ice.Current current__);

                public void buyHeroItem(string id)
                {
                    buyHeroItem(id, Ice.ObjectImpl.defaultCurrent);
                }

                public abstract void buyHeroItem(string id, Ice.Current current__);

                public string acceptConsolation()
                {
                    return acceptConsolation(Ice.ObjectImpl.defaultCurrent);
                }

                public abstract string acceptConsolation(Ice.Current current__);

                #endregion

                #region Slice type-related members

                public static new readonly string[] ids__ = 
                {
                    "::Ice::Object",
                    "::com::XSanGo::Protocol::Trader"
                };

                public override bool ice_isA(string s)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override bool ice_isA(string s, Ice.Current current__)
                {
                    return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids()
                {
                    return ids__;
                }

                public override string[] ice_ids(Ice.Current current__)
                {
                    return ids__;
                }

                public override string ice_id()
                {
                    return ids__[1];
                }

                public override string ice_id(Ice.Current current__)
                {
                    return ids__[1];
                }

                public static new string ice_staticId()
                {
                    return ids__[1];
                }

                #endregion

                #region Operation dispatch

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus getTraderView___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.getTraderView(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus callJinbiTrader___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.callJinbiTrader(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus callYuanbaoTrader___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.callYuanbaoTrader(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus callJinbiHero___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.callJinbiHero(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus callYuanbaoHero___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    try
                    {
                        string ret__ = obj__.callYuanbaoHero(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeString(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus buyItem___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string id;
                    id = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.buyItem(id, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus beginChallenge___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string heroId;
                    heroId = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        com.XSanGo.Protocol.DuelReportView ret__ = obj__.beginChallenge(heroId, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        if(ret__ == null)
                        {
                            com.XSanGo.Protocol.DuelReportView tmp__ = new com.XSanGo.Protocol.DuelReportView();
                            tmp__.write__(os__);
                        }
                        else
                        {
                            ret__.write__(os__);
                        }
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus endChallenge___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    com.XSanGo.Protocol.DuelResult result;
                    result = (com.XSanGo.Protocol.DuelResult)is__.readEnum(2);
                    inS__.endReadParams();
                    try
                    {
                        obj__.endChallenge(result, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus buyHeroItem___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    IceInternal.BasicStream is__ = inS__.startReadParams();
                    string id;
                    id = is__.readString();
                    inS__.endReadParams();
                    try
                    {
                        obj__.buyHeroItem(id, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughMoneyException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NotEnoughYuanBaoException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                    catch(com.XSanGo.Protocol.NoteException ex__)
                    {
                        inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                        return Ice.DispatchStatus.DispatchUserException;
                    }
                }

                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static Ice.DispatchStatus acceptConsolation___(Trader obj__, IceInternal.Incoming inS__, Ice.Current current__)
                {
                    checkMode__(Ice.OperationMode.Normal, current__.mode);
                    inS__.readEmptyParams();
                    string ret__ = obj__.acceptConsolation(current__);
                    IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                    os__.writeString(ret__);
                    inS__.endWriteParams__(true);
                    return Ice.DispatchStatus.DispatchOK;
                }

                private static string[] all__ =
                {
                    "acceptConsolation",
                    "beginChallenge",
                    "buyHeroItem",
                    "buyItem",
                    "callJinbiHero",
                    "callJinbiTrader",
                    "callYuanbaoHero",
                    "callYuanbaoTrader",
                    "endChallenge",
                    "getTraderView",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                {
                    int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return acceptConsolation___(this, inS__, current__);
                        }
                        case 1:
                        {
                            return beginChallenge___(this, inS__, current__);
                        }
                        case 2:
                        {
                            return buyHeroItem___(this, inS__, current__);
                        }
                        case 3:
                        {
                            return buyItem___(this, inS__, current__);
                        }
                        case 4:
                        {
                            return callJinbiHero___(this, inS__, current__);
                        }
                        case 5:
                        {
                            return callJinbiTrader___(this, inS__, current__);
                        }
                        case 6:
                        {
                            return callYuanbaoHero___(this, inS__, current__);
                        }
                        case 7:
                        {
                            return callYuanbaoTrader___(this, inS__, current__);
                        }
                        case 8:
                        {
                            return endChallenge___(this, inS__, current__);
                        }
                        case 9:
                        {
                            return getTraderView___(this, inS__, current__);
                        }
                        case 10:
                        {
                            return ice_id___(this, inS__, current__);
                        }
                        case 11:
                        {
                            return ice_ids___(this, inS__, current__);
                        }
                        case 12:
                        {
                            return ice_isA___(this, inS__, current__);
                        }
                        case 13:
                        {
                            return ice_ping___(this, inS__, current__);
                        }
                    }

                    _System.Diagnostics.Debug.Assert(false);
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }

                #endregion

                #region Marshaling support

                protected override void writeImpl__(IceInternal.BasicStream os__)
                {
                    os__.startWriteSlice(ice_staticId(), -1, true);
                    os__.endWriteSlice();
                }

                protected override void readImpl__(IceInternal.BasicStream is__)
                {
                    is__.startReadSlice();
                    is__.endReadSlice();
                }

                #endregion
            }
        }
    }
}

namespace com
{
    namespace XSanGo
    {
        namespace Protocol
        {
            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_TraderCallback_traderChange : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_getTraderView : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_callJinbiTrader : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_callYuanbaoTrader : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_callJinbiHero : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_callYuanbaoHero : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_buyItem : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_beginChallenge : Ice.AMICallbackBase
            {
                public abstract void ice_response(com.XSanGo.Protocol.DuelReportView ret__);

                public void response__(com.XSanGo.Protocol.DuelReportView ret__)
                {
                    ice_response(ret__);
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_endChallenge : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_buyHeroItem : Ice.AMICallbackBase
            {
                public abstract void ice_response();

                public void response__()
                {
                    ice_response();
                }
            }

            [_System.Runtime.InteropServices.ComVisible(false)]
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
            public abstract class AMI_Trader_acceptConsolation : Ice.AMICallbackBase
            {
                public abstract void ice_response(string ret__);

                public void response__(string ret__)
                {
                    ice_response(ret__);
                }
            }
        }
    }
}
