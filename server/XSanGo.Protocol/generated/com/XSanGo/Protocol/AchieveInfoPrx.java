// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Achieve.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface AchieveInfoPrx extends Ice.ObjectPrx
{
    /**
     * 成就界面, 返回 AchievePageView
     **/
    public String achievePageView(int functionId)
        throws NoteException;

    /**
     * 成就界面, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String achievePageView(int functionId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 成就界面, 返回 AchievePageView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId);

    /**
     * 成就界面, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, java.util.Map<String, String> __ctx);

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, Ice.Callback __cb);

    /**
     * 成就界面, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, Callback_AchieveInfo_achievePageView __cb);

    /**
     * 成就界面, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, java.util.Map<String, String> __ctx, Callback_AchieveInfo_achievePageView __cb);

    /**
     * 成就界面, 返回 AchievePageView
     * @param __result The asynchronous result object.
     **/
    public String end_achievePageView(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public boolean achievePageView_async(AMI_AchieveInfo_achievePageView __cb, int functionId);

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean achievePageView_async(AMI_AchieveInfo_achievePageView __cb, int functionId, java.util.Map<String, String> __ctx);

    /**
     * 成就领奖, 返回 AchievePageView
     **/
    public String achieveReward(int id)
        throws NoteException;

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String achieveReward(int id, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 成就领奖, 返回 AchievePageView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveReward(int id);

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, java.util.Map<String, String> __ctx);

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, Ice.Callback __cb);

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, Callback_AchieveInfo_achieveReward __cb);

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, java.util.Map<String, String> __ctx, Callback_AchieveInfo_achieveReward __cb);

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __result The asynchronous result object.
     **/
    public String end_achieveReward(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public boolean achieveReward_async(AMI_AchieveInfo_achieveReward __cb, int id);

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean achieveReward_async(AMI_AchieveInfo_achieveReward __cb, int id, java.util.Map<String, String> __ctx);

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     **/
    public String achieveProgressView()
        throws NoteException;

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     **/
    public String achieveProgressView(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressView();

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressView(java.util.Map<String, String> __ctx);

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressView(Ice.Callback __cb);

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressView(Callback_AchieveInfo_achieveProgressView __cb);

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressView(java.util.Map<String, String> __ctx, Callback_AchieveInfo_achieveProgressView __cb);

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __result The asynchronous result object.
     **/
    public String end_achieveProgressView(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public boolean achieveProgressView_async(AMI_AchieveInfo_achieveProgressView __cb);

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean achieveProgressView_async(AMI_AchieveInfo_achieveProgressView __cb, java.util.Map<String, String> __ctx);

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     **/
    public String achieveProgressReward(int progress)
        throws NoteException;

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     **/
    public String achieveProgressReward(int progress, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress);

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, java.util.Map<String, String> __ctx);

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, Ice.Callback __cb);

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, Callback_AchieveInfo_achieveProgressReward __cb);

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, java.util.Map<String, String> __ctx, Callback_AchieveInfo_achieveProgressReward __cb);

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __result The asynchronous result object.
     **/
    public String end_achieveProgressReward(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public boolean achieveProgressReward_async(AMI_AchieveInfo_achieveProgressReward __cb, int progress);

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean achieveProgressReward_async(AMI_AchieveInfo_achieveProgressReward __cb, int progress, java.util.Map<String, String> __ctx);
}
