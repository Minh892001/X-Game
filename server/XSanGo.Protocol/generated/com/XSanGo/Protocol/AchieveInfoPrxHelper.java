// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Achieve.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class AchieveInfoPrxHelper extends Ice.ObjectPrxHelperBase implements AchieveInfoPrx
{
    private static final String __achievePageView_name = "achievePageView";

    /**
     * 成就界面, 返回 AchievePageView
     **/
    public String achievePageView(int functionId)
        throws NoteException
    {
        return achievePageView(functionId, null, false);
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String achievePageView(int functionId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return achievePageView(functionId, __ctx, true);
    }

    private String achievePageView(int functionId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "achievePageView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("achievePageView");
                    __delBase = __getDelegate(false);
                    _AchieveInfoDel __del = (_AchieveInfoDel)__delBase;
                    return __del.achievePageView(functionId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId)
    {
        return begin_achievePageView(functionId, null, false, null);
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, java.util.Map<String, String> __ctx)
    {
        return begin_achievePageView(functionId, __ctx, true, null);
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, Ice.Callback __cb)
    {
        return begin_achievePageView(functionId, null, false, __cb);
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_achievePageView(functionId, __ctx, true, __cb);
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, Callback_AchieveInfo_achievePageView __cb)
    {
        return begin_achievePageView(functionId, null, false, __cb);
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achievePageView(int functionId, java.util.Map<String, String> __ctx, Callback_AchieveInfo_achievePageView __cb)
    {
        return begin_achievePageView(functionId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_achievePageView(int functionId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__achievePageView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __achievePageView_name, __cb);
        try
        {
            __result.__prepare(__achievePageView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(functionId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_achievePageView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __achievePageView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public boolean achievePageView_async(AMI_AchieveInfo_achievePageView __cb, int functionId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__achievePageView_name);
            __r = begin_achievePageView(functionId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __achievePageView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 成就界面, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean achievePageView_async(AMI_AchieveInfo_achievePageView __cb, int functionId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__achievePageView_name);
            __r = begin_achievePageView(functionId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __achievePageView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __achieveProgressReward_name = "achieveProgressReward";

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     **/
    public String achieveProgressReward(int progress)
        throws NoteException
    {
        return achieveProgressReward(progress, null, false);
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     **/
    public String achieveProgressReward(int progress, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return achieveProgressReward(progress, __ctx, true);
    }

    private String achieveProgressReward(int progress, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "achieveProgressReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("achieveProgressReward");
                    __delBase = __getDelegate(false);
                    _AchieveInfoDel __del = (_AchieveInfoDel)__delBase;
                    return __del.achieveProgressReward(progress, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress)
    {
        return begin_achieveProgressReward(progress, null, false, null);
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, java.util.Map<String, String> __ctx)
    {
        return begin_achieveProgressReward(progress, __ctx, true, null);
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, Ice.Callback __cb)
    {
        return begin_achieveProgressReward(progress, null, false, __cb);
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_achieveProgressReward(progress, __ctx, true, __cb);
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, Callback_AchieveInfo_achieveProgressReward __cb)
    {
        return begin_achieveProgressReward(progress, null, false, __cb);
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveProgressReward(int progress, java.util.Map<String, String> __ctx, Callback_AchieveInfo_achieveProgressReward __cb)
    {
        return begin_achieveProgressReward(progress, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_achieveProgressReward(int progress, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__achieveProgressReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __achieveProgressReward_name, __cb);
        try
        {
            __result.__prepare(__achieveProgressReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(progress);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_achieveProgressReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __achieveProgressReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public boolean achieveProgressReward_async(AMI_AchieveInfo_achieveProgressReward __cb, int progress)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__achieveProgressReward_name);
            __r = begin_achieveProgressReward(progress, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __achieveProgressReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 成就进度领奖, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean achieveProgressReward_async(AMI_AchieveInfo_achieveProgressReward __cb, int progress, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__achieveProgressReward_name);
            __r = begin_achieveProgressReward(progress, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __achieveProgressReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __achieveProgressView_name = "achieveProgressView";

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     **/
    public String achieveProgressView()
        throws NoteException
    {
        return achieveProgressView(null, false);
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __ctx The Context map to send with the invocation.
     **/
    public String achieveProgressView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return achieveProgressView(__ctx, true);
    }

    private String achieveProgressView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "achieveProgressView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("achieveProgressView");
                    __delBase = __getDelegate(false);
                    _AchieveInfoDel __del = (_AchieveInfoDel)__delBase;
                    return __del.achieveProgressView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveProgressView()
    {
        return begin_achieveProgressView(null, false, null);
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveProgressView(java.util.Map<String, String> __ctx)
    {
        return begin_achieveProgressView(__ctx, true, null);
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveProgressView(Ice.Callback __cb)
    {
        return begin_achieveProgressView(null, false, __cb);
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveProgressView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_achieveProgressView(__ctx, true, __cb);
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveProgressView(Callback_AchieveInfo_achieveProgressView __cb)
    {
        return begin_achieveProgressView(null, false, __cb);
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveProgressView(java.util.Map<String, String> __ctx, Callback_AchieveInfo_achieveProgressView __cb)
    {
        return begin_achieveProgressView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_achieveProgressView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__achieveProgressView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __achieveProgressView_name, __cb);
        try
        {
            __result.__prepare(__achieveProgressView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_achieveProgressView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __achieveProgressView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     **/
    public boolean achieveProgressView_async(AMI_AchieveInfo_achieveProgressView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__achieveProgressView_name);
            __r = begin_achieveProgressView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __achieveProgressView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 成就进度奖励界面, 返回 AchieveProAwardSubSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean achieveProgressView_async(AMI_AchieveInfo_achieveProgressView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__achieveProgressView_name);
            __r = begin_achieveProgressView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __achieveProgressView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __achieveReward_name = "achieveReward";

    /**
     * 成就领奖, 返回 AchievePageView
     **/
    public String achieveReward(int id)
        throws NoteException
    {
        return achieveReward(id, null, false);
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String achieveReward(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return achieveReward(id, __ctx, true);
    }

    private String achieveReward(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "achieveReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("achieveReward");
                    __delBase = __getDelegate(false);
                    _AchieveInfoDel __del = (_AchieveInfoDel)__delBase;
                    return __del.achieveReward(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveReward(int id)
    {
        return begin_achieveReward(id, null, false, null);
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, java.util.Map<String, String> __ctx)
    {
        return begin_achieveReward(id, __ctx, true, null);
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, Ice.Callback __cb)
    {
        return begin_achieveReward(id, null, false, __cb);
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_achieveReward(id, __ctx, true, __cb);
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, Callback_AchieveInfo_achieveReward __cb)
    {
        return begin_achieveReward(id, null, false, __cb);
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_achieveReward(int id, java.util.Map<String, String> __ctx, Callback_AchieveInfo_achieveReward __cb)
    {
        return begin_achieveReward(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_achieveReward(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__achieveReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __achieveReward_name, __cb);
        try
        {
            __result.__prepare(__achieveReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_achieveReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __achieveReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     **/
    public boolean achieveReward_async(AMI_AchieveInfo_achieveReward __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__achieveReward_name);
            __r = begin_achieveReward(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __achieveReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 成就领奖, 返回 AchievePageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean achieveReward_async(AMI_AchieveInfo_achieveReward __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__achieveReward_name);
            __r = begin_achieveReward(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __achieveReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static AchieveInfoPrx checkedCast(Ice.ObjectPrx __obj)
    {
        AchieveInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AchieveInfoPrx)
            {
                __d = (AchieveInfoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    AchieveInfoPrxHelper __h = new AchieveInfoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AchieveInfoPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        AchieveInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AchieveInfoPrx)
            {
                __d = (AchieveInfoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    AchieveInfoPrxHelper __h = new AchieveInfoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AchieveInfoPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AchieveInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    AchieveInfoPrxHelper __h = new AchieveInfoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AchieveInfoPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        AchieveInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    AchieveInfoPrxHelper __h = new AchieveInfoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AchieveInfoPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        AchieveInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AchieveInfoPrx)
            {
                __d = (AchieveInfoPrx)__obj;
            }
            else
            {
                AchieveInfoPrxHelper __h = new AchieveInfoPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static AchieveInfoPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AchieveInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            AchieveInfoPrxHelper __h = new AchieveInfoPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::AchieveInfo"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _AchieveInfoDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _AchieveInfoDelD();
    }

    public static void __write(IceInternal.BasicStream __os, AchieveInfoPrx v)
    {
        __os.writeProxy(v);
    }

    public static AchieveInfoPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            AchieveInfoPrxHelper result = new AchieveInfoPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
