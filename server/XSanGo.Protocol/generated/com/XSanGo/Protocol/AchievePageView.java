// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Achieve.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class AchievePageView implements java.lang.Cloneable, java.io.Serializable
{
    public int canRecProgress;

    public int completedNum;

    public int maxNum;

    public AchieveInfoSub[] achieveList;

    public AchievePageView()
    {
    }

    public AchievePageView(int canRecProgress, int completedNum, int maxNum, AchieveInfoSub[] achieveList)
    {
        this.canRecProgress = canRecProgress;
        this.completedNum = completedNum;
        this.maxNum = maxNum;
        this.achieveList = achieveList;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AchievePageView _r = null;
        if(rhs instanceof AchievePageView)
        {
            _r = (AchievePageView)rhs;
        }

        if(_r != null)
        {
            if(canRecProgress != _r.canRecProgress)
            {
                return false;
            }
            if(completedNum != _r.completedNum)
            {
                return false;
            }
            if(maxNum != _r.maxNum)
            {
                return false;
            }
            if(!java.util.Arrays.equals(achieveList, _r.achieveList))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::AchievePageView");
        __h = IceInternal.HashUtil.hashAdd(__h, canRecProgress);
        __h = IceInternal.HashUtil.hashAdd(__h, completedNum);
        __h = IceInternal.HashUtil.hashAdd(__h, maxNum);
        __h = IceInternal.HashUtil.hashAdd(__h, achieveList);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(canRecProgress);
        __os.writeInt(completedNum);
        __os.writeInt(maxNum);
        AchieveInfoSubSeqHelper.write(__os, achieveList);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        canRecProgress = __is.readInt();
        completedNum = __is.readInt();
        maxNum = __is.readInt();
        achieveList = AchieveInfoSubSeqHelper.read(__is);
    }

    public static final long serialVersionUID = -1257030800L;
}
