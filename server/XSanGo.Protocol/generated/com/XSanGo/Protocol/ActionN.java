// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class ActionN implements java.lang.Cloneable, java.io.Serializable
{
    public int playerPos;

    public int triggerPos;

    public EffectN[] effects;

    public DamageN[] damages;

    public int type;

    public String actionName;

    public String actionQueName;

    public float actionBeginTime;

    public float actionOverTime;

    public boolean targetSelf;

    public boolean slowAction;

    public float actionTime;

    public ActionN()
    {
    }

    public ActionN(int playerPos, int triggerPos, EffectN[] effects, DamageN[] damages, int type, String actionName, String actionQueName, float actionBeginTime, float actionOverTime, boolean targetSelf, boolean slowAction, float actionTime)
    {
        this.playerPos = playerPos;
        this.triggerPos = triggerPos;
        this.effects = effects;
        this.damages = damages;
        this.type = type;
        this.actionName = actionName;
        this.actionQueName = actionQueName;
        this.actionBeginTime = actionBeginTime;
        this.actionOverTime = actionOverTime;
        this.targetSelf = targetSelf;
        this.slowAction = slowAction;
        this.actionTime = actionTime;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ActionN _r = null;
        if(rhs instanceof ActionN)
        {
            _r = (ActionN)rhs;
        }

        if(_r != null)
        {
            if(playerPos != _r.playerPos)
            {
                return false;
            }
            if(triggerPos != _r.triggerPos)
            {
                return false;
            }
            if(!java.util.Arrays.equals(effects, _r.effects))
            {
                return false;
            }
            if(!java.util.Arrays.equals(damages, _r.damages))
            {
                return false;
            }
            if(type != _r.type)
            {
                return false;
            }
            if(actionName != _r.actionName)
            {
                if(actionName == null || _r.actionName == null || !actionName.equals(_r.actionName))
                {
                    return false;
                }
            }
            if(actionQueName != _r.actionQueName)
            {
                if(actionQueName == null || _r.actionQueName == null || !actionQueName.equals(_r.actionQueName))
                {
                    return false;
                }
            }
            if(actionBeginTime != _r.actionBeginTime)
            {
                return false;
            }
            if(actionOverTime != _r.actionOverTime)
            {
                return false;
            }
            if(targetSelf != _r.targetSelf)
            {
                return false;
            }
            if(slowAction != _r.slowAction)
            {
                return false;
            }
            if(actionTime != _r.actionTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::ActionN");
        __h = IceInternal.HashUtil.hashAdd(__h, playerPos);
        __h = IceInternal.HashUtil.hashAdd(__h, triggerPos);
        __h = IceInternal.HashUtil.hashAdd(__h, effects);
        __h = IceInternal.HashUtil.hashAdd(__h, damages);
        __h = IceInternal.HashUtil.hashAdd(__h, type);
        __h = IceInternal.HashUtil.hashAdd(__h, actionName);
        __h = IceInternal.HashUtil.hashAdd(__h, actionQueName);
        __h = IceInternal.HashUtil.hashAdd(__h, actionBeginTime);
        __h = IceInternal.HashUtil.hashAdd(__h, actionOverTime);
        __h = IceInternal.HashUtil.hashAdd(__h, targetSelf);
        __h = IceInternal.HashUtil.hashAdd(__h, slowAction);
        __h = IceInternal.HashUtil.hashAdd(__h, actionTime);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(playerPos);
        __os.writeInt(triggerPos);
        EffectNSeqHelper.write(__os, effects);
        DamageNSeqHelper.write(__os, damages);
        __os.writeInt(type);
        __os.writeString(actionName);
        __os.writeString(actionQueName);
        __os.writeFloat(actionBeginTime);
        __os.writeFloat(actionOverTime);
        __os.writeBool(targetSelf);
        __os.writeBool(slowAction);
        __os.writeFloat(actionTime);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        playerPos = __is.readInt();
        triggerPos = __is.readInt();
        effects = EffectNSeqHelper.read(__is);
        damages = DamageNSeqHelper.read(__is);
        type = __is.readInt();
        actionName = __is.readString();
        actionQueName = __is.readString();
        actionBeginTime = __is.readFloat();
        actionOverTime = __is.readFloat();
        targetSelf = __is.readBool();
        slowAction = __is.readBool();
        actionTime = __is.readFloat();
    }

    public static final long serialVersionUID = 310351800L;
}
