// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class ActionReportView implements java.lang.Cloneable, java.io.Serializable
{
    public int executorId;

    public int targetId;

    public int skillId;

    public AttackResult hitResult;

    public int damage;

    public boolean crit;

    public int sp1;

    public int sp2;

    public int power1;

    public int power2;

    public DuelBuffView[] buff;

    public ActionReportView()
    {
    }

    public ActionReportView(int executorId, int targetId, int skillId, AttackResult hitResult, int damage, boolean crit, int sp1, int sp2, int power1, int power2, DuelBuffView[] buff)
    {
        this.executorId = executorId;
        this.targetId = targetId;
        this.skillId = skillId;
        this.hitResult = hitResult;
        this.damage = damage;
        this.crit = crit;
        this.sp1 = sp1;
        this.sp2 = sp2;
        this.power1 = power1;
        this.power2 = power2;
        this.buff = buff;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ActionReportView _r = null;
        if(rhs instanceof ActionReportView)
        {
            _r = (ActionReportView)rhs;
        }

        if(_r != null)
        {
            if(executorId != _r.executorId)
            {
                return false;
            }
            if(targetId != _r.targetId)
            {
                return false;
            }
            if(skillId != _r.skillId)
            {
                return false;
            }
            if(hitResult != _r.hitResult)
            {
                if(hitResult == null || _r.hitResult == null || !hitResult.equals(_r.hitResult))
                {
                    return false;
                }
            }
            if(damage != _r.damage)
            {
                return false;
            }
            if(crit != _r.crit)
            {
                return false;
            }
            if(sp1 != _r.sp1)
            {
                return false;
            }
            if(sp2 != _r.sp2)
            {
                return false;
            }
            if(power1 != _r.power1)
            {
                return false;
            }
            if(power2 != _r.power2)
            {
                return false;
            }
            if(!java.util.Arrays.equals(buff, _r.buff))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::ActionReportView");
        __h = IceInternal.HashUtil.hashAdd(__h, executorId);
        __h = IceInternal.HashUtil.hashAdd(__h, targetId);
        __h = IceInternal.HashUtil.hashAdd(__h, skillId);
        __h = IceInternal.HashUtil.hashAdd(__h, hitResult);
        __h = IceInternal.HashUtil.hashAdd(__h, damage);
        __h = IceInternal.HashUtil.hashAdd(__h, crit);
        __h = IceInternal.HashUtil.hashAdd(__h, sp1);
        __h = IceInternal.HashUtil.hashAdd(__h, sp2);
        __h = IceInternal.HashUtil.hashAdd(__h, power1);
        __h = IceInternal.HashUtil.hashAdd(__h, power2);
        __h = IceInternal.HashUtil.hashAdd(__h, buff);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(executorId);
        __os.writeInt(targetId);
        __os.writeInt(skillId);
        hitResult.__write(__os);
        __os.writeInt(damage);
        __os.writeBool(crit);
        __os.writeInt(sp1);
        __os.writeInt(sp2);
        __os.writeInt(power1);
        __os.writeInt(power2);
        DuelBuffViewSeqHelper.write(__os, buff);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        executorId = __is.readInt();
        targetId = __is.readInt();
        skillId = __is.readInt();
        hitResult = AttackResult.__read(__is);
        damage = __is.readInt();
        crit = __is.readBool();
        sp1 = __is.readInt();
        sp2 = __is.readInt();
        power1 = __is.readInt();
        power2 = __is.readInt();
        buff = DuelBuffViewSeqHelper.read(__is);
    }

    public static final long serialVersionUID = 836096972L;
}
