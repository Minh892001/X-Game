// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Activity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class ActivityInfoPrxHelper extends Ice.ObjectPrxHelperBase implements ActivityInfoPrx
{
    private static final String __acceptDayLoginReward_name = "acceptDayLoginReward";

    public void acceptDayLoginReward(int day)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptDayLoginReward(day, null, false);
    }

    public void acceptDayLoginReward(int day, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptDayLoginReward(day, __ctx, true);
    }

    private void acceptDayLoginReward(int day, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptDayLoginReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptDayLoginReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptDayLoginReward(day, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptDayLoginReward(int day)
    {
        return begin_acceptDayLoginReward(day, null, false, null);
    }

    public Ice.AsyncResult begin_acceptDayLoginReward(int day, java.util.Map<String, String> __ctx)
    {
        return begin_acceptDayLoginReward(day, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptDayLoginReward(int day, Ice.Callback __cb)
    {
        return begin_acceptDayLoginReward(day, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptDayLoginReward(int day, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptDayLoginReward(day, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptDayLoginReward(int day, Callback_ActivityInfo_acceptDayLoginReward __cb)
    {
        return begin_acceptDayLoginReward(day, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptDayLoginReward(int day, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptDayLoginReward __cb)
    {
        return begin_acceptDayLoginReward(day, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptDayLoginReward(int day, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptDayLoginReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptDayLoginReward_name, __cb);
        try
        {
            __result.__prepare(__acceptDayLoginReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(day);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_acceptDayLoginReward(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptDayLoginReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptDayLoginReward_async(AMI_ActivityInfo_acceptDayLoginReward __cb, int day)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptDayLoginReward_name);
            __r = begin_acceptDayLoginReward(day, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptDayLoginReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptDayLoginReward_async(AMI_ActivityInfo_acceptDayLoginReward __cb, int day, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptDayLoginReward_name);
            __r = begin_acceptDayLoginReward(day, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptDayLoginReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptDayforverLoginReward_name = "acceptDayforverLoginReward";

    public void acceptDayforverLoginReward(int day)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptDayforverLoginReward(day, null, false);
    }

    public void acceptDayforverLoginReward(int day, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptDayforverLoginReward(day, __ctx, true);
    }

    private void acceptDayforverLoginReward(int day, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptDayforverLoginReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptDayforverLoginReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptDayforverLoginReward(day, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptDayforverLoginReward(int day)
    {
        return begin_acceptDayforverLoginReward(day, null, false, null);
    }

    public Ice.AsyncResult begin_acceptDayforverLoginReward(int day, java.util.Map<String, String> __ctx)
    {
        return begin_acceptDayforverLoginReward(day, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptDayforverLoginReward(int day, Ice.Callback __cb)
    {
        return begin_acceptDayforverLoginReward(day, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptDayforverLoginReward(int day, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptDayforverLoginReward(day, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptDayforverLoginReward(int day, Callback_ActivityInfo_acceptDayforverLoginReward __cb)
    {
        return begin_acceptDayforverLoginReward(day, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptDayforverLoginReward(int day, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptDayforverLoginReward __cb)
    {
        return begin_acceptDayforverLoginReward(day, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptDayforverLoginReward(int day, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptDayforverLoginReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptDayforverLoginReward_name, __cb);
        try
        {
            __result.__prepare(__acceptDayforverLoginReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(day);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_acceptDayforverLoginReward(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptDayforverLoginReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptDayforverLoginReward_async(AMI_ActivityInfo_acceptDayforverLoginReward __cb, int day)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptDayforverLoginReward_name);
            __r = begin_acceptDayforverLoginReward(day, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptDayforverLoginReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptDayforverLoginReward_async(AMI_ActivityInfo_acceptDayforverLoginReward __cb, int day, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptDayforverLoginReward_name);
            __r = begin_acceptDayforverLoginReward(day, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptDayforverLoginReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptFirstJiaReward_name = "acceptFirstJiaReward";

    public void acceptFirstJiaReward(int level)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptFirstJiaReward(level, null, false);
    }

    public void acceptFirstJiaReward(int level, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptFirstJiaReward(level, __ctx, true);
    }

    private void acceptFirstJiaReward(int level, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptFirstJiaReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptFirstJiaReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptFirstJiaReward(level, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptFirstJiaReward(int level)
    {
        return begin_acceptFirstJiaReward(level, null, false, null);
    }

    public Ice.AsyncResult begin_acceptFirstJiaReward(int level, java.util.Map<String, String> __ctx)
    {
        return begin_acceptFirstJiaReward(level, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptFirstJiaReward(int level, Ice.Callback __cb)
    {
        return begin_acceptFirstJiaReward(level, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptFirstJiaReward(int level, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptFirstJiaReward(level, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptFirstJiaReward(int level, Callback_ActivityInfo_acceptFirstJiaReward __cb)
    {
        return begin_acceptFirstJiaReward(level, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptFirstJiaReward(int level, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptFirstJiaReward __cb)
    {
        return begin_acceptFirstJiaReward(level, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptFirstJiaReward(int level, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptFirstJiaReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptFirstJiaReward_name, __cb);
        try
        {
            __result.__prepare(__acceptFirstJiaReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(level);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_acceptFirstJiaReward(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptFirstJiaReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptFirstJiaReward_async(AMI_ActivityInfo_acceptFirstJiaReward __cb, int level)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptFirstJiaReward_name);
            __r = begin_acceptFirstJiaReward(level, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptFirstJiaReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptFirstJiaReward_async(AMI_ActivityInfo_acceptFirstJiaReward __cb, int level, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptFirstJiaReward_name);
            __r = begin_acceptFirstJiaReward(level, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptFirstJiaReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptFundReward_name = "acceptFundReward";

    public void acceptFundReward(int level)
        throws NoteException
    {
        acceptFundReward(level, null, false);
    }

    public void acceptFundReward(int level, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        acceptFundReward(level, __ctx, true);
    }

    private void acceptFundReward(int level, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptFundReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptFundReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptFundReward(level, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptFundReward(int level)
    {
        return begin_acceptFundReward(level, null, false, null);
    }

    public Ice.AsyncResult begin_acceptFundReward(int level, java.util.Map<String, String> __ctx)
    {
        return begin_acceptFundReward(level, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptFundReward(int level, Ice.Callback __cb)
    {
        return begin_acceptFundReward(level, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptFundReward(int level, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptFundReward(level, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptFundReward(int level, Callback_ActivityInfo_acceptFundReward __cb)
    {
        return begin_acceptFundReward(level, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptFundReward(int level, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptFundReward __cb)
    {
        return begin_acceptFundReward(level, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptFundReward(int level, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptFundReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptFundReward_name, __cb);
        try
        {
            __result.__prepare(__acceptFundReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(level);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_acceptFundReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptFundReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptFundReward_async(AMI_ActivityInfo_acceptFundReward __cb, int level)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptFundReward_name);
            __r = begin_acceptFundReward(level, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptFundReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptFundReward_async(AMI_ActivityInfo_acceptFundReward __cb, int level, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptFundReward_name);
            __r = begin_acceptFundReward(level, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptFundReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptJunLing_name = "acceptJunLing";

    public int acceptJunLing(int id)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return acceptJunLing(id, null, false);
    }

    public int acceptJunLing(int id, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return acceptJunLing(id, __ctx, true);
    }

    private int acceptJunLing(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptJunLing", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptJunLing");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.acceptJunLing(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptJunLing(int id)
    {
        return begin_acceptJunLing(id, null, false, null);
    }

    public Ice.AsyncResult begin_acceptJunLing(int id, java.util.Map<String, String> __ctx)
    {
        return begin_acceptJunLing(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptJunLing(int id, Ice.Callback __cb)
    {
        return begin_acceptJunLing(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptJunLing(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptJunLing(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptJunLing(int id, Callback_ActivityInfo_acceptJunLing __cb)
    {
        return begin_acceptJunLing(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptJunLing(int id, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptJunLing __cb)
    {
        return begin_acceptJunLing(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptJunLing(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptJunLing_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptJunLing_name, __cb);
        try
        {
            __result.__prepare(__acceptJunLing_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_acceptJunLing(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptJunLing_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptJunLing_async(AMI_ActivityInfo_acceptJunLing __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptJunLing_name);
            __r = begin_acceptJunLing(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptJunLing_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptJunLing_async(AMI_ActivityInfo_acceptJunLing __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptJunLing_name);
            __r = begin_acceptJunLing(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptJunLing_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptLevelReward_name = "acceptLevelReward";

    public void acceptLevelReward(int level)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptLevelReward(level, null, false);
    }

    public void acceptLevelReward(int level, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptLevelReward(level, __ctx, true);
    }

    private void acceptLevelReward(int level, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptLevelReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptLevelReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptLevelReward(level, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptLevelReward(int level)
    {
        return begin_acceptLevelReward(level, null, false, null);
    }

    public Ice.AsyncResult begin_acceptLevelReward(int level, java.util.Map<String, String> __ctx)
    {
        return begin_acceptLevelReward(level, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptLevelReward(int level, Ice.Callback __cb)
    {
        return begin_acceptLevelReward(level, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptLevelReward(int level, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptLevelReward(level, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptLevelReward(int level, Callback_ActivityInfo_acceptLevelReward __cb)
    {
        return begin_acceptLevelReward(level, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptLevelReward(int level, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptLevelReward __cb)
    {
        return begin_acceptLevelReward(level, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptLevelReward(int level, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptLevelReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptLevelReward_name, __cb);
        try
        {
            __result.__prepare(__acceptLevelReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(level);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_acceptLevelReward(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptLevelReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptLevelReward_async(AMI_ActivityInfo_acceptLevelReward __cb, int level)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptLevelReward_name);
            __r = begin_acceptLevelReward(level, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptLevelReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptLevelReward_async(AMI_ActivityInfo_acceptLevelReward __cb, int level, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptLevelReward_name);
            __r = begin_acceptLevelReward(level, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptLevelReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptOpenServerActiveReward_name = "acceptOpenServerActiveReward";

    public void acceptOpenServerActiveReward(int active, int nodeId)
        throws NoteException
    {
        acceptOpenServerActiveReward(active, nodeId, null, false);
    }

    public void acceptOpenServerActiveReward(int active, int nodeId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        acceptOpenServerActiveReward(active, nodeId, __ctx, true);
    }

    private void acceptOpenServerActiveReward(int active, int nodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptOpenServerActiveReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptOpenServerActiveReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptOpenServerActiveReward(active, nodeId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptOpenServerActiveReward(int active, int nodeId)
    {
        return begin_acceptOpenServerActiveReward(active, nodeId, null, false, null);
    }

    public Ice.AsyncResult begin_acceptOpenServerActiveReward(int active, int nodeId, java.util.Map<String, String> __ctx)
    {
        return begin_acceptOpenServerActiveReward(active, nodeId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptOpenServerActiveReward(int active, int nodeId, Ice.Callback __cb)
    {
        return begin_acceptOpenServerActiveReward(active, nodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptOpenServerActiveReward(int active, int nodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptOpenServerActiveReward(active, nodeId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptOpenServerActiveReward(int active, int nodeId, Callback_ActivityInfo_acceptOpenServerActiveReward __cb)
    {
        return begin_acceptOpenServerActiveReward(active, nodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptOpenServerActiveReward(int active, int nodeId, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptOpenServerActiveReward __cb)
    {
        return begin_acceptOpenServerActiveReward(active, nodeId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptOpenServerActiveReward(int active, int nodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptOpenServerActiveReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptOpenServerActiveReward_name, __cb);
        try
        {
            __result.__prepare(__acceptOpenServerActiveReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(active);
            __os.writeInt(nodeId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_acceptOpenServerActiveReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptOpenServerActiveReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptOpenServerActiveReward_async(AMI_ActivityInfo_acceptOpenServerActiveReward __cb, int active, int nodeId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptOpenServerActiveReward_name);
            __r = begin_acceptOpenServerActiveReward(active, nodeId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptOpenServerActiveReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptOpenServerActiveReward_async(AMI_ActivityInfo_acceptOpenServerActiveReward __cb, int active, int nodeId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptOpenServerActiveReward_name);
            __r = begin_acceptOpenServerActiveReward(active, nodeId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptOpenServerActiveReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptPowerReward_name = "acceptPowerReward";

    public void acceptPowerReward(int power)
        throws NoteException
    {
        acceptPowerReward(power, null, false);
    }

    public void acceptPowerReward(int power, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        acceptPowerReward(power, __ctx, true);
    }

    private void acceptPowerReward(int power, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptPowerReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptPowerReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptPowerReward(power, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptPowerReward(int power)
    {
        return begin_acceptPowerReward(power, null, false, null);
    }

    public Ice.AsyncResult begin_acceptPowerReward(int power, java.util.Map<String, String> __ctx)
    {
        return begin_acceptPowerReward(power, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptPowerReward(int power, Ice.Callback __cb)
    {
        return begin_acceptPowerReward(power, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptPowerReward(int power, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptPowerReward(power, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptPowerReward(int power, Callback_ActivityInfo_acceptPowerReward __cb)
    {
        return begin_acceptPowerReward(power, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptPowerReward(int power, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptPowerReward __cb)
    {
        return begin_acceptPowerReward(power, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptPowerReward(int power, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptPowerReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptPowerReward_name, __cb);
        try
        {
            __result.__prepare(__acceptPowerReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(power);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_acceptPowerReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptPowerReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptPowerReward_async(AMI_ActivityInfo_acceptPowerReward __cb, int power)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptPowerReward_name);
            __r = begin_acceptPowerReward(power, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptPowerReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptPowerReward_async(AMI_ActivityInfo_acceptPowerReward __cb, int power, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptPowerReward_name);
            __r = begin_acceptPowerReward(power, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptPowerReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptResourceBack_name = "acceptResourceBack";

    /**
     * 接受奖励，return ItemView
     **/
    public void acceptResourceBack(String date, int type, int slot)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        acceptResourceBack(date, type, slot, null, false);
    }

    /**
     * 接受奖励，return ItemView
     * @param __ctx The Context map to send with the invocation.
     **/
    public void acceptResourceBack(String date, int type, int slot, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        acceptResourceBack(date, type, slot, __ctx, true);
    }

    private void acceptResourceBack(String date, int type, int slot, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptResourceBack", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptResourceBack");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptResourceBack(date, type, slot, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 接受奖励，return ItemView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptResourceBack(String date, int type, int slot)
    {
        return begin_acceptResourceBack(date, type, slot, null, false, null);
    }

    /**
     * 接受奖励，return ItemView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptResourceBack(String date, int type, int slot, java.util.Map<String, String> __ctx)
    {
        return begin_acceptResourceBack(date, type, slot, __ctx, true, null);
    }

    /**
     * 接受奖励，return ItemView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptResourceBack(String date, int type, int slot, Ice.Callback __cb)
    {
        return begin_acceptResourceBack(date, type, slot, null, false, __cb);
    }

    /**
     * 接受奖励，return ItemView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptResourceBack(String date, int type, int slot, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptResourceBack(date, type, slot, __ctx, true, __cb);
    }

    /**
     * 接受奖励，return ItemView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptResourceBack(String date, int type, int slot, Callback_ActivityInfo_acceptResourceBack __cb)
    {
        return begin_acceptResourceBack(date, type, slot, null, false, __cb);
    }

    /**
     * 接受奖励，return ItemView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptResourceBack(String date, int type, int slot, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptResourceBack __cb)
    {
        return begin_acceptResourceBack(date, type, slot, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptResourceBack(String date, int type, int slot, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptResourceBack_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptResourceBack_name, __cb);
        try
        {
            __result.__prepare(__acceptResourceBack_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(date);
            __os.writeInt(type);
            __os.writeInt(slot);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_acceptResourceBack(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptResourceBack_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 接受奖励，return ItemView
     * @param __cb The callback object for the operation.
     **/
    public boolean acceptResourceBack_async(AMI_ActivityInfo_acceptResourceBack __cb, String date, int type, int slot)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptResourceBack_name);
            __r = begin_acceptResourceBack(date, type, slot, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptResourceBack_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 接受奖励，return ItemView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean acceptResourceBack_async(AMI_ActivityInfo_acceptResourceBack __cb, String date, int type, int slot, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptResourceBack_name);
            __r = begin_acceptResourceBack(date, type, slot, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptResourceBack_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptResourceBackOneKey_name = "acceptResourceBackOneKey";

    /**
     * 一键找回
     **/
    public void acceptResourceBackOneKey(String date)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        acceptResourceBackOneKey(date, null, false);
    }

    /**
     * 一键找回
     * @param __ctx The Context map to send with the invocation.
     **/
    public void acceptResourceBackOneKey(String date, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        acceptResourceBackOneKey(date, __ctx, true);
    }

    private void acceptResourceBackOneKey(String date, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptResourceBackOneKey", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptResourceBackOneKey");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.acceptResourceBackOneKey(date, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 一键找回
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptResourceBackOneKey(String date)
    {
        return begin_acceptResourceBackOneKey(date, null, false, null);
    }

    /**
     * 一键找回
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptResourceBackOneKey(String date, java.util.Map<String, String> __ctx)
    {
        return begin_acceptResourceBackOneKey(date, __ctx, true, null);
    }

    /**
     * 一键找回
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptResourceBackOneKey(String date, Ice.Callback __cb)
    {
        return begin_acceptResourceBackOneKey(date, null, false, __cb);
    }

    /**
     * 一键找回
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptResourceBackOneKey(String date, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptResourceBackOneKey(date, __ctx, true, __cb);
    }

    /**
     * 一键找回
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptResourceBackOneKey(String date, Callback_ActivityInfo_acceptResourceBackOneKey __cb)
    {
        return begin_acceptResourceBackOneKey(date, null, false, __cb);
    }

    /**
     * 一键找回
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptResourceBackOneKey(String date, java.util.Map<String, String> __ctx, Callback_ActivityInfo_acceptResourceBackOneKey __cb)
    {
        return begin_acceptResourceBackOneKey(date, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptResourceBackOneKey(String date, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptResourceBackOneKey_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptResourceBackOneKey_name, __cb);
        try
        {
            __result.__prepare(__acceptResourceBackOneKey_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(date);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_acceptResourceBackOneKey(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptResourceBackOneKey_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 一键找回
     * @param __cb The callback object for the operation.
     **/
    public boolean acceptResourceBackOneKey_async(AMI_ActivityInfo_acceptResourceBackOneKey __cb, String date)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptResourceBackOneKey_name);
            __r = begin_acceptResourceBackOneKey(date, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptResourceBackOneKey_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 一键找回
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean acceptResourceBackOneKey_async(AMI_ActivityInfo_acceptResourceBackOneKey __cb, String date, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptResourceBackOneKey_name);
            __r = begin_acceptResourceBackOneKey(date, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptResourceBackOneKey_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __activityList_name = "activityList";

    /**
     * 活动列表 lua格式activityInfoAll
     **/
    public String activityList()
        throws NoteException
    {
        return activityList(null, false);
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __ctx The Context map to send with the invocation.
     **/
    public String activityList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return activityList(__ctx, true);
    }

    private String activityList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "activityList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("activityList");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.activityList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_activityList()
    {
        return begin_activityList(null, false, null);
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_activityList(java.util.Map<String, String> __ctx)
    {
        return begin_activityList(__ctx, true, null);
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_activityList(Ice.Callback __cb)
    {
        return begin_activityList(null, false, __cb);
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_activityList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_activityList(__ctx, true, __cb);
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_activityList(Callback_ActivityInfo_activityList __cb)
    {
        return begin_activityList(null, false, __cb);
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_activityList(java.util.Map<String, String> __ctx, Callback_ActivityInfo_activityList __cb)
    {
        return begin_activityList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_activityList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__activityList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __activityList_name, __cb);
        try
        {
            __result.__prepare(__activityList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_activityList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __activityList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __cb The callback object for the operation.
     **/
    public boolean activityList_async(AMI_ActivityInfo_activityList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__activityList_name);
            __r = begin_activityList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __activityList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 活动列表 lua格式activityInfoAll
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean activityList_async(AMI_ActivityInfo_activityList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__activityList_name);
            __r = begin_activityList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __activityList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginAnswer_name = "beginAnswer";

    /**
     * 开始答题 id,id,id
     **/
    public String beginAnswer()
        throws NoteException
    {
        return beginAnswer(null, false);
    }

    /**
     * 开始答题 id,id,id
     * @param __ctx The Context map to send with the invocation.
     **/
    public String beginAnswer(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginAnswer(__ctx, true);
    }

    private String beginAnswer(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginAnswer", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginAnswer");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.beginAnswer(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 开始答题 id,id,id
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginAnswer()
    {
        return begin_beginAnswer(null, false, null);
    }

    /**
     * 开始答题 id,id,id
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginAnswer(java.util.Map<String, String> __ctx)
    {
        return begin_beginAnswer(__ctx, true, null);
    }

    /**
     * 开始答题 id,id,id
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginAnswer(Ice.Callback __cb)
    {
        return begin_beginAnswer(null, false, __cb);
    }

    /**
     * 开始答题 id,id,id
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginAnswer(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginAnswer(__ctx, true, __cb);
    }

    /**
     * 开始答题 id,id,id
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginAnswer(Callback_ActivityInfo_beginAnswer __cb)
    {
        return begin_beginAnswer(null, false, __cb);
    }

    /**
     * 开始答题 id,id,id
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginAnswer(java.util.Map<String, String> __ctx, Callback_ActivityInfo_beginAnswer __cb)
    {
        return begin_beginAnswer(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginAnswer(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginAnswer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginAnswer_name, __cb);
        try
        {
            __result.__prepare(__beginAnswer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_beginAnswer(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginAnswer_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 开始答题 id,id,id
     * @param __cb The callback object for the operation.
     **/
    public boolean beginAnswer_async(AMI_ActivityInfo_beginAnswer __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginAnswer_name);
            __r = begin_beginAnswer(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginAnswer_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 开始答题 id,id,id
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginAnswer_async(AMI_ActivityInfo_beginAnswer __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginAnswer_name);
            __r = begin_beginAnswer(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginAnswer_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyAllCornucopia_name = "buyAllCornucopia";

    /**
     * 聚宝盆一键购买
     **/
    public void buyAllCornucopia()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyAllCornucopia(null, false);
    }

    /**
     * 聚宝盆一键购买
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyAllCornucopia(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyAllCornucopia(__ctx, true);
    }

    private void buyAllCornucopia(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyAllCornucopia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyAllCornucopia");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.buyAllCornucopia(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 聚宝盆一键购买
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyAllCornucopia()
    {
        return begin_buyAllCornucopia(null, false, null);
    }

    /**
     * 聚宝盆一键购买
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyAllCornucopia(java.util.Map<String, String> __ctx)
    {
        return begin_buyAllCornucopia(__ctx, true, null);
    }

    /**
     * 聚宝盆一键购买
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyAllCornucopia(Ice.Callback __cb)
    {
        return begin_buyAllCornucopia(null, false, __cb);
    }

    /**
     * 聚宝盆一键购买
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyAllCornucopia(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyAllCornucopia(__ctx, true, __cb);
    }

    /**
     * 聚宝盆一键购买
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyAllCornucopia(Callback_ActivityInfo_buyAllCornucopia __cb)
    {
        return begin_buyAllCornucopia(null, false, __cb);
    }

    /**
     * 聚宝盆一键购买
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyAllCornucopia(java.util.Map<String, String> __ctx, Callback_ActivityInfo_buyAllCornucopia __cb)
    {
        return begin_buyAllCornucopia(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyAllCornucopia(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyAllCornucopia_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyAllCornucopia_name, __cb);
        try
        {
            __result.__prepare(__buyAllCornucopia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_buyAllCornucopia(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyAllCornucopia_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 聚宝盆一键购买
     * @param __cb The callback object for the operation.
     **/
    public boolean buyAllCornucopia_async(AMI_ActivityInfo_buyAllCornucopia __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyAllCornucopia_name);
            __r = begin_buyAllCornucopia(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyAllCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 聚宝盆一键购买
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyAllCornucopia_async(AMI_ActivityInfo_buyAllCornucopia __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyAllCornucopia_name);
            __r = begin_buyAllCornucopia(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyAllCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyCornucopia_name = "buyCornucopia";

    /**
     * 聚宝盆购买单项物品
     **/
    public void buyCornucopia(int id)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyCornucopia(id, null, false);
    }

    /**
     * 聚宝盆购买单项物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyCornucopia(int id, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyCornucopia(id, __ctx, true);
    }

    private void buyCornucopia(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyCornucopia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyCornucopia");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.buyCornucopia(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 聚宝盆购买单项物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyCornucopia(int id)
    {
        return begin_buyCornucopia(id, null, false, null);
    }

    /**
     * 聚宝盆购买单项物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyCornucopia(int id, java.util.Map<String, String> __ctx)
    {
        return begin_buyCornucopia(id, __ctx, true, null);
    }

    /**
     * 聚宝盆购买单项物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyCornucopia(int id, Ice.Callback __cb)
    {
        return begin_buyCornucopia(id, null, false, __cb);
    }

    /**
     * 聚宝盆购买单项物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyCornucopia(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyCornucopia(id, __ctx, true, __cb);
    }

    /**
     * 聚宝盆购买单项物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyCornucopia(int id, Callback_ActivityInfo_buyCornucopia __cb)
    {
        return begin_buyCornucopia(id, null, false, __cb);
    }

    /**
     * 聚宝盆购买单项物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyCornucopia(int id, java.util.Map<String, String> __ctx, Callback_ActivityInfo_buyCornucopia __cb)
    {
        return begin_buyCornucopia(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyCornucopia(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyCornucopia_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyCornucopia_name, __cb);
        try
        {
            __result.__prepare(__buyCornucopia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_buyCornucopia(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyCornucopia_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 聚宝盆购买单项物品
     * @param __cb The callback object for the operation.
     **/
    public boolean buyCornucopia_async(AMI_ActivityInfo_buyCornucopia __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyCornucopia_name);
            __r = begin_buyCornucopia(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 聚宝盆购买单项物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyCornucopia_async(AMI_ActivityInfo_buyCornucopia __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyCornucopia_name);
            __r = begin_buyCornucopia(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyFund_name = "buyFund";

    public void buyFund()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyFund(null, false);
    }

    public void buyFund(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyFund(__ctx, true);
    }

    private void buyFund(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyFund", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyFund");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.buyFund(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyFund()
    {
        return begin_buyFund(null, false, null);
    }

    public Ice.AsyncResult begin_buyFund(java.util.Map<String, String> __ctx)
    {
        return begin_buyFund(__ctx, true, null);
    }

    public Ice.AsyncResult begin_buyFund(Ice.Callback __cb)
    {
        return begin_buyFund(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyFund(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyFund(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyFund(Callback_ActivityInfo_buyFund __cb)
    {
        return begin_buyFund(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyFund(java.util.Map<String, String> __ctx, Callback_ActivityInfo_buyFund __cb)
    {
        return begin_buyFund(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyFund(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyFund_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyFund_name, __cb);
        try
        {
            __result.__prepare(__buyFund_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyFund(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyFund_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyFund_async(AMI_ActivityInfo_buyFund __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyFund_name);
            __r = begin_buyFund(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyFund_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyFund_async(AMI_ActivityInfo_buyFund __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyFund_name);
            __r = begin_buyFund(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyFund_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyTrophy_name = "buyTrophy";

    /**
     * 购买奖杯,return:最新奖杯数量
     **/
    public int buyTrophy()
        throws NoteException
    {
        return buyTrophy(null, false);
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __ctx The Context map to send with the invocation.
     **/
    public int buyTrophy(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return buyTrophy(__ctx, true);
    }

    private int buyTrophy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyTrophy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyTrophy");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.buyTrophy(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyTrophy()
    {
        return begin_buyTrophy(null, false, null);
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyTrophy(java.util.Map<String, String> __ctx)
    {
        return begin_buyTrophy(__ctx, true, null);
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyTrophy(Ice.Callback __cb)
    {
        return begin_buyTrophy(null, false, __cb);
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyTrophy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyTrophy(__ctx, true, __cb);
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyTrophy(Callback_ActivityInfo_buyTrophy __cb)
    {
        return begin_buyTrophy(null, false, __cb);
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyTrophy(java.util.Map<String, String> __ctx, Callback_ActivityInfo_buyTrophy __cb)
    {
        return begin_buyTrophy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyTrophy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyTrophy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyTrophy_name, __cb);
        try
        {
            __result.__prepare(__buyTrophy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_buyTrophy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyTrophy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __cb The callback object for the operation.
     **/
    public boolean buyTrophy_async(AMI_ActivityInfo_buyTrophy __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyTrophy_name);
            __r = begin_buyTrophy(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyTrophy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyTrophy_async(AMI_ActivityInfo_buyTrophy __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyTrophy_name);
            __r = begin_buyTrophy(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyTrophy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buysale_name = "buysale";

    public String buysale(int activeId, int day)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buysale(activeId, day, null, false);
    }

    public String buysale(int activeId, int day, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buysale(activeId, day, __ctx, true);
    }

    private String buysale(int activeId, int day, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buysale", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buysale");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.buysale(activeId, day, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buysale(int activeId, int day)
    {
        return begin_buysale(activeId, day, null, false, null);
    }

    public Ice.AsyncResult begin_buysale(int activeId, int day, java.util.Map<String, String> __ctx)
    {
        return begin_buysale(activeId, day, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buysale(int activeId, int day, Ice.Callback __cb)
    {
        return begin_buysale(activeId, day, null, false, __cb);
    }

    public Ice.AsyncResult begin_buysale(int activeId, int day, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buysale(activeId, day, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buysale(int activeId, int day, Callback_ActivityInfo_buysale __cb)
    {
        return begin_buysale(activeId, day, null, false, __cb);
    }

    public Ice.AsyncResult begin_buysale(int activeId, int day, java.util.Map<String, String> __ctx, Callback_ActivityInfo_buysale __cb)
    {
        return begin_buysale(activeId, day, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buysale(int activeId, int day, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buysale_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buysale_name, __cb);
        try
        {
            __result.__prepare(__buysale_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(activeId);
            __os.writeInt(day);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_buysale(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buysale_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buysale_async(AMI_ActivityInfo_buysale __cb, int activeId, int day)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buysale_name);
            __r = begin_buysale(activeId, day, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buysale_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buysale_async(AMI_ActivityInfo_buysale __cb, int activeId, int day, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buysale_name);
            __r = begin_buysale(activeId, day, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buysale_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clickMakeVip_name = "clickMakeVip";

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     **/
    public boolean clickMakeVip()
    {
        return clickMakeVip(null, false);
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clickMakeVip(java.util.Map<String, String> __ctx)
    {
        return clickMakeVip(__ctx, true);
    }

    private boolean clickMakeVip(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clickMakeVip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clickMakeVip");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.clickMakeVip(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clickMakeVip()
    {
        return begin_clickMakeVip(null, false, null);
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clickMakeVip(java.util.Map<String, String> __ctx)
    {
        return begin_clickMakeVip(__ctx, true, null);
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clickMakeVip(Ice.Callback __cb)
    {
        return begin_clickMakeVip(null, false, __cb);
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clickMakeVip(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clickMakeVip(__ctx, true, __cb);
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clickMakeVip(Callback_ActivityInfo_clickMakeVip __cb)
    {
        return begin_clickMakeVip(null, false, __cb);
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clickMakeVip(java.util.Map<String, String> __ctx, Callback_ActivityInfo_clickMakeVip __cb)
    {
        return begin_clickMakeVip(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clickMakeVip(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clickMakeVip_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clickMakeVip_name, __cb);
        try
        {
            __result.__prepare(__clickMakeVip_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public boolean end_clickMakeVip(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __clickMakeVip_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __cb The callback object for the operation.
     **/
    public boolean clickMakeVip_async(AMI_ActivityInfo_clickMakeVip __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clickMakeVip_name);
            __r = begin_clickMakeVip(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clickMakeVip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clickMakeVip_async(AMI_ActivityInfo_clickMakeVip __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clickMakeVip_name);
            __r = begin_clickMakeVip(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clickMakeVip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __doExchangeItems_name = "doExchangeItems";

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     **/
    public String doExchangeItems(String exchangeNo, int itemType)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return doExchangeItems(exchangeNo, itemType, null, false);
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __ctx The Context map to send with the invocation.
     **/
    public String doExchangeItems(String exchangeNo, int itemType, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return doExchangeItems(exchangeNo, itemType, __ctx, true);
    }

    private String doExchangeItems(String exchangeNo, int itemType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "doExchangeItems", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("doExchangeItems");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.doExchangeItems(exchangeNo, itemType, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_doExchangeItems(String exchangeNo, int itemType)
    {
        return begin_doExchangeItems(exchangeNo, itemType, null, false, null);
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_doExchangeItems(String exchangeNo, int itemType, java.util.Map<String, String> __ctx)
    {
        return begin_doExchangeItems(exchangeNo, itemType, __ctx, true, null);
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_doExchangeItems(String exchangeNo, int itemType, Ice.Callback __cb)
    {
        return begin_doExchangeItems(exchangeNo, itemType, null, false, __cb);
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_doExchangeItems(String exchangeNo, int itemType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_doExchangeItems(exchangeNo, itemType, __ctx, true, __cb);
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_doExchangeItems(String exchangeNo, int itemType, Callback_ActivityInfo_doExchangeItems __cb)
    {
        return begin_doExchangeItems(exchangeNo, itemType, null, false, __cb);
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_doExchangeItems(String exchangeNo, int itemType, java.util.Map<String, String> __ctx, Callback_ActivityInfo_doExchangeItems __cb)
    {
        return begin_doExchangeItems(exchangeNo, itemType, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_doExchangeItems(String exchangeNo, int itemType, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__doExchangeItems_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __doExchangeItems_name, __cb);
        try
        {
            __result.__prepare(__doExchangeItems_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(exchangeNo);
            __os.writeInt(itemType);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_doExchangeItems(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __doExchangeItems_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __cb The callback object for the operation.
     **/
    public boolean doExchangeItems_async(AMI_ActivityInfo_doExchangeItems __cb, String exchangeNo, int itemType)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__doExchangeItems_name);
            __r = begin_doExchangeItems(exchangeNo, itemType, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __doExchangeItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean doExchangeItems_async(AMI_ActivityInfo_doExchangeItems __cb, String exchangeNo, int itemType, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__doExchangeItems_name);
            __r = begin_doExchangeItems(exchangeNo, itemType, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __doExchangeItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __doFortuneWheel_name = "doFortuneWheel";

    public String doFortuneWheel()
        throws NoteException
    {
        return doFortuneWheel(null, false);
    }

    public String doFortuneWheel(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return doFortuneWheel(__ctx, true);
    }

    private String doFortuneWheel(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "doFortuneWheel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("doFortuneWheel");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.doFortuneWheel(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_doFortuneWheel()
    {
        return begin_doFortuneWheel(null, false, null);
    }

    public Ice.AsyncResult begin_doFortuneWheel(java.util.Map<String, String> __ctx)
    {
        return begin_doFortuneWheel(__ctx, true, null);
    }

    public Ice.AsyncResult begin_doFortuneWheel(Ice.Callback __cb)
    {
        return begin_doFortuneWheel(null, false, __cb);
    }

    public Ice.AsyncResult begin_doFortuneWheel(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_doFortuneWheel(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_doFortuneWheel(Callback_ActivityInfo_doFortuneWheel __cb)
    {
        return begin_doFortuneWheel(null, false, __cb);
    }

    public Ice.AsyncResult begin_doFortuneWheel(java.util.Map<String, String> __ctx, Callback_ActivityInfo_doFortuneWheel __cb)
    {
        return begin_doFortuneWheel(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_doFortuneWheel(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__doFortuneWheel_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __doFortuneWheel_name, __cb);
        try
        {
            __result.__prepare(__doFortuneWheel_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_doFortuneWheel(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __doFortuneWheel_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean doFortuneWheel_async(AMI_ActivityInfo_doFortuneWheel __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__doFortuneWheel_name);
            __r = begin_doFortuneWheel(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __doFortuneWheel_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean doFortuneWheel_async(AMI_ActivityInfo_doFortuneWheel __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__doFortuneWheel_name);
            __r = begin_doFortuneWheel(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __doFortuneWheel_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __doFortuneWheelFor10_name = "doFortuneWheelFor10";

    public String doFortuneWheelFor10()
        throws NoteException
    {
        return doFortuneWheelFor10(null, false);
    }

    public String doFortuneWheelFor10(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return doFortuneWheelFor10(__ctx, true);
    }

    private String doFortuneWheelFor10(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "doFortuneWheelFor10", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("doFortuneWheelFor10");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.doFortuneWheelFor10(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_doFortuneWheelFor10()
    {
        return begin_doFortuneWheelFor10(null, false, null);
    }

    public Ice.AsyncResult begin_doFortuneWheelFor10(java.util.Map<String, String> __ctx)
    {
        return begin_doFortuneWheelFor10(__ctx, true, null);
    }

    public Ice.AsyncResult begin_doFortuneWheelFor10(Ice.Callback __cb)
    {
        return begin_doFortuneWheelFor10(null, false, __cb);
    }

    public Ice.AsyncResult begin_doFortuneWheelFor10(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_doFortuneWheelFor10(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_doFortuneWheelFor10(Callback_ActivityInfo_doFortuneWheelFor10 __cb)
    {
        return begin_doFortuneWheelFor10(null, false, __cb);
    }

    public Ice.AsyncResult begin_doFortuneWheelFor10(java.util.Map<String, String> __ctx, Callback_ActivityInfo_doFortuneWheelFor10 __cb)
    {
        return begin_doFortuneWheelFor10(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_doFortuneWheelFor10(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__doFortuneWheelFor10_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __doFortuneWheelFor10_name, __cb);
        try
        {
            __result.__prepare(__doFortuneWheelFor10_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_doFortuneWheelFor10(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __doFortuneWheelFor10_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean doFortuneWheelFor10_async(AMI_ActivityInfo_doFortuneWheelFor10 __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__doFortuneWheelFor10_name);
            __r = begin_doFortuneWheelFor10(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __doFortuneWheelFor10_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean doFortuneWheelFor10_async(AMI_ActivityInfo_doFortuneWheelFor10 __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__doFortuneWheelFor10_name);
            __r = begin_doFortuneWheelFor10(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __doFortuneWheelFor10_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endAnswer_name = "endAnswer";

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     **/
    public int endAnswer(String str)
        throws NoteException
    {
        return endAnswer(str, null, false);
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __ctx The Context map to send with the invocation.
     **/
    public int endAnswer(String str, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endAnswer(str, __ctx, true);
    }

    private int endAnswer(String str, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endAnswer", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endAnswer");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.endAnswer(str, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endAnswer(String str)
    {
        return begin_endAnswer(str, null, false, null);
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endAnswer(String str, java.util.Map<String, String> __ctx)
    {
        return begin_endAnswer(str, __ctx, true, null);
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endAnswer(String str, Ice.Callback __cb)
    {
        return begin_endAnswer(str, null, false, __cb);
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endAnswer(String str, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endAnswer(str, __ctx, true, __cb);
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endAnswer(String str, Callback_ActivityInfo_endAnswer __cb)
    {
        return begin_endAnswer(str, null, false, __cb);
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endAnswer(String str, java.util.Map<String, String> __ctx, Callback_ActivityInfo_endAnswer __cb)
    {
        return begin_endAnswer(str, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endAnswer(String str, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endAnswer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endAnswer_name, __cb);
        try
        {
            __result.__prepare(__endAnswer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(str);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_endAnswer(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endAnswer_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __cb The callback object for the operation.
     **/
    public boolean endAnswer_async(AMI_ActivityInfo_endAnswer __cb, String str)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endAnswer_name);
            __r = begin_endAnswer(str, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endAnswer_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endAnswer_async(AMI_ActivityInfo_endAnswer __cb, String str, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endAnswer_name);
            __r = begin_endAnswer(str, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endAnswer_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __footballBet_name = "footballBet";

    /**
     * 押注，平局countryId传-1
     **/
    public int footballBet(int id, int countryId, int num)
        throws NoteException
    {
        return footballBet(id, countryId, num, null, false);
    }

    /**
     * 押注，平局countryId传-1
     * @param __ctx The Context map to send with the invocation.
     **/
    public int footballBet(int id, int countryId, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return footballBet(id, countryId, num, __ctx, true);
    }

    private int footballBet(int id, int countryId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "footballBet", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("footballBet");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.footballBet(id, countryId, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 押注，平局countryId传-1
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballBet(int id, int countryId, int num)
    {
        return begin_footballBet(id, countryId, num, null, false, null);
    }

    /**
     * 押注，平局countryId传-1
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballBet(int id, int countryId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_footballBet(id, countryId, num, __ctx, true, null);
    }

    /**
     * 押注，平局countryId传-1
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballBet(int id, int countryId, int num, Ice.Callback __cb)
    {
        return begin_footballBet(id, countryId, num, null, false, __cb);
    }

    /**
     * 押注，平局countryId传-1
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballBet(int id, int countryId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_footballBet(id, countryId, num, __ctx, true, __cb);
    }

    /**
     * 押注，平局countryId传-1
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballBet(int id, int countryId, int num, Callback_ActivityInfo_footballBet __cb)
    {
        return begin_footballBet(id, countryId, num, null, false, __cb);
    }

    /**
     * 押注，平局countryId传-1
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballBet(int id, int countryId, int num, java.util.Map<String, String> __ctx, Callback_ActivityInfo_footballBet __cb)
    {
        return begin_footballBet(id, countryId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_footballBet(int id, int countryId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__footballBet_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __footballBet_name, __cb);
        try
        {
            __result.__prepare(__footballBet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(countryId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_footballBet(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __footballBet_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 押注，平局countryId传-1
     * @param __cb The callback object for the operation.
     **/
    public boolean footballBet_async(AMI_ActivityInfo_footballBet __cb, int id, int countryId, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__footballBet_name);
            __r = begin_footballBet(id, countryId, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __footballBet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 押注，平局countryId传-1
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean footballBet_async(AMI_ActivityInfo_footballBet __cb, int id, int countryId, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__footballBet_name);
            __r = begin_footballBet(id, countryId, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __footballBet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __footballBetLogs_name = "footballBetLogs";

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     **/
    public String footballBetLogs()
        throws NoteException
    {
        return footballBetLogs(null, false);
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String footballBetLogs(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return footballBetLogs(__ctx, true);
    }

    private String footballBetLogs(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "footballBetLogs", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("footballBetLogs");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.footballBetLogs(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballBetLogs()
    {
        return begin_footballBetLogs(null, false, null);
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballBetLogs(java.util.Map<String, String> __ctx)
    {
        return begin_footballBetLogs(__ctx, true, null);
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballBetLogs(Ice.Callback __cb)
    {
        return begin_footballBetLogs(null, false, __cb);
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballBetLogs(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_footballBetLogs(__ctx, true, __cb);
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballBetLogs(Callback_ActivityInfo_footballBetLogs __cb)
    {
        return begin_footballBetLogs(null, false, __cb);
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballBetLogs(java.util.Map<String, String> __ctx, Callback_ActivityInfo_footballBetLogs __cb)
    {
        return begin_footballBetLogs(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_footballBetLogs(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__footballBetLogs_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __footballBetLogs_name, __cb);
        try
        {
            __result.__prepare(__footballBetLogs_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_footballBetLogs(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __footballBetLogs_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean footballBetLogs_async(AMI_ActivityInfo_footballBetLogs __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__footballBetLogs_name);
            __r = begin_footballBetLogs(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __footballBetLogs_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean footballBetLogs_async(AMI_ActivityInfo_footballBetLogs __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__footballBetLogs_name);
            __r = begin_footballBetLogs(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __footballBetLogs_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __footballExchange_name = "footballExchange";

    /**
     * 商店兑换
     **/
    public int footballExchange(int id, int num)
        throws NoteException
    {
        return footballExchange(id, num, null, false);
    }

    /**
     * 商店兑换
     * @param __ctx The Context map to send with the invocation.
     **/
    public int footballExchange(int id, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return footballExchange(id, num, __ctx, true);
    }

    private int footballExchange(int id, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "footballExchange", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("footballExchange");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.footballExchange(id, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 商店兑换
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballExchange(int id, int num)
    {
        return begin_footballExchange(id, num, null, false, null);
    }

    /**
     * 商店兑换
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballExchange(int id, int num, java.util.Map<String, String> __ctx)
    {
        return begin_footballExchange(id, num, __ctx, true, null);
    }

    /**
     * 商店兑换
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballExchange(int id, int num, Ice.Callback __cb)
    {
        return begin_footballExchange(id, num, null, false, __cb);
    }

    /**
     * 商店兑换
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballExchange(int id, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_footballExchange(id, num, __ctx, true, __cb);
    }

    /**
     * 商店兑换
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballExchange(int id, int num, Callback_ActivityInfo_footballExchange __cb)
    {
        return begin_footballExchange(id, num, null, false, __cb);
    }

    /**
     * 商店兑换
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballExchange(int id, int num, java.util.Map<String, String> __ctx, Callback_ActivityInfo_footballExchange __cb)
    {
        return begin_footballExchange(id, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_footballExchange(int id, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__footballExchange_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __footballExchange_name, __cb);
        try
        {
            __result.__prepare(__footballExchange_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_footballExchange(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __footballExchange_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 商店兑换
     * @param __cb The callback object for the operation.
     **/
    public boolean footballExchange_async(AMI_ActivityInfo_footballExchange __cb, int id, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__footballExchange_name);
            __r = begin_footballExchange(id, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __footballExchange_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 商店兑换
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean footballExchange_async(AMI_ActivityInfo_footballExchange __cb, int id, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__footballExchange_name);
            __r = begin_footballExchange(id, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __footballExchange_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __footballRank_name = "footballRank";

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     **/
    public String footballRank()
        throws NoteException
    {
        return footballRank(null, false);
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String footballRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return footballRank(__ctx, true);
    }

    private String footballRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "footballRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("footballRank");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.footballRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballRank()
    {
        return begin_footballRank(null, false, null);
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballRank(java.util.Map<String, String> __ctx)
    {
        return begin_footballRank(__ctx, true, null);
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballRank(Ice.Callback __cb)
    {
        return begin_footballRank(null, false, __cb);
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_footballRank(__ctx, true, __cb);
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_footballRank(Callback_ActivityInfo_footballRank __cb)
    {
        return begin_footballRank(null, false, __cb);
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_footballRank(java.util.Map<String, String> __ctx, Callback_ActivityInfo_footballRank __cb)
    {
        return begin_footballRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_footballRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__footballRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __footballRank_name, __cb);
        try
        {
            __result.__prepare(__footballRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_footballRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __footballRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean footballRank_async(AMI_ActivityInfo_footballRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__footballRank_name);
            __r = begin_footballRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __footballRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean footballRank_async(AMI_ActivityInfo_footballRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__footballRank_name);
            __r = begin_footballRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __footballRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getAllCornucopia_name = "getAllCornucopia";

    /**
     * 一键领取聚宝盆物品
     **/
    public void getAllCornucopia()
        throws NoteException
    {
        getAllCornucopia(null, false);
    }

    /**
     * 一键领取聚宝盆物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public void getAllCornucopia(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        getAllCornucopia(__ctx, true);
    }

    private void getAllCornucopia(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllCornucopia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllCornucopia");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.getAllCornucopia(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 一键领取聚宝盆物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAllCornucopia()
    {
        return begin_getAllCornucopia(null, false, null);
    }

    /**
     * 一键领取聚宝盆物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAllCornucopia(java.util.Map<String, String> __ctx)
    {
        return begin_getAllCornucopia(__ctx, true, null);
    }

    /**
     * 一键领取聚宝盆物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAllCornucopia(Ice.Callback __cb)
    {
        return begin_getAllCornucopia(null, false, __cb);
    }

    /**
     * 一键领取聚宝盆物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAllCornucopia(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllCornucopia(__ctx, true, __cb);
    }

    /**
     * 一键领取聚宝盆物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAllCornucopia(Callback_ActivityInfo_getAllCornucopia __cb)
    {
        return begin_getAllCornucopia(null, false, __cb);
    }

    /**
     * 一键领取聚宝盆物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAllCornucopia(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getAllCornucopia __cb)
    {
        return begin_getAllCornucopia(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllCornucopia(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllCornucopia_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllCornucopia_name, __cb);
        try
        {
            __result.__prepare(__getAllCornucopia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_getAllCornucopia(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getAllCornucopia_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 一键领取聚宝盆物品
     * @param __cb The callback object for the operation.
     **/
    public boolean getAllCornucopia_async(AMI_ActivityInfo_getAllCornucopia __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAllCornucopia_name);
            __r = begin_getAllCornucopia(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAllCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 一键领取聚宝盆物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getAllCornucopia_async(AMI_ActivityInfo_getAllCornucopia __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAllCornucopia_name);
            __r = begin_getAllCornucopia(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAllCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getBigDayChargeView_name = "getBigDayChargeView";

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     **/
    public String getBigDayChargeView()
        throws NoteException
    {
        return getBigDayChargeView(null, false);
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getBigDayChargeView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getBigDayChargeView(__ctx, true);
    }

    private String getBigDayChargeView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBigDayChargeView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBigDayChargeView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getBigDayChargeView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBigDayChargeView()
    {
        return begin_getBigDayChargeView(null, false, null);
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBigDayChargeView(java.util.Map<String, String> __ctx)
    {
        return begin_getBigDayChargeView(__ctx, true, null);
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBigDayChargeView(Ice.Callback __cb)
    {
        return begin_getBigDayChargeView(null, false, __cb);
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBigDayChargeView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBigDayChargeView(__ctx, true, __cb);
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBigDayChargeView(Callback_ActivityInfo_getBigDayChargeView __cb)
    {
        return begin_getBigDayChargeView(null, false, __cb);
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBigDayChargeView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getBigDayChargeView __cb)
    {
        return begin_getBigDayChargeView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBigDayChargeView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBigDayChargeView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBigDayChargeView_name, __cb);
        try
        {
            __result.__prepare(__getBigDayChargeView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getBigDayChargeView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getBigDayChargeView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getBigDayChargeView_async(AMI_ActivityInfo_getBigDayChargeView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigDayChargeView_name);
            __r = begin_getBigDayChargeView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigDayChargeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getBigDayChargeView_async(AMI_ActivityInfo_getBigDayChargeView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigDayChargeView_name);
            __r = begin_getBigDayChargeView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigDayChargeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getBigDayConsumeView_name = "getBigDayConsumeView";

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     **/
    public String getBigDayConsumeView()
        throws NoteException
    {
        return getBigDayConsumeView(null, false);
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getBigDayConsumeView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getBigDayConsumeView(__ctx, true);
    }

    private String getBigDayConsumeView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBigDayConsumeView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBigDayConsumeView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getBigDayConsumeView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBigDayConsumeView()
    {
        return begin_getBigDayConsumeView(null, false, null);
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBigDayConsumeView(java.util.Map<String, String> __ctx)
    {
        return begin_getBigDayConsumeView(__ctx, true, null);
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBigDayConsumeView(Ice.Callback __cb)
    {
        return begin_getBigDayConsumeView(null, false, __cb);
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBigDayConsumeView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBigDayConsumeView(__ctx, true, __cb);
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBigDayConsumeView(Callback_ActivityInfo_getBigDayConsumeView __cb)
    {
        return begin_getBigDayConsumeView(null, false, __cb);
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBigDayConsumeView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getBigDayConsumeView __cb)
    {
        return begin_getBigDayConsumeView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBigDayConsumeView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBigDayConsumeView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBigDayConsumeView_name, __cb);
        try
        {
            __result.__prepare(__getBigDayConsumeView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getBigDayConsumeView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getBigDayConsumeView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getBigDayConsumeView_async(AMI_ActivityInfo_getBigDayConsumeView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigDayConsumeView_name);
            __r = begin_getBigDayConsumeView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigDayConsumeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getBigDayConsumeView_async(AMI_ActivityInfo_getBigDayConsumeView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigDayConsumeView_name);
            __r = begin_getBigDayConsumeView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigDayConsumeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getBigSummationActivityViewForCharge_name = "getBigSummationActivityViewForCharge";

    public String getBigSummationActivityViewForCharge()
        throws NoteException
    {
        return getBigSummationActivityViewForCharge(null, false);
    }

    public String getBigSummationActivityViewForCharge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getBigSummationActivityViewForCharge(__ctx, true);
    }

    private String getBigSummationActivityViewForCharge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBigSummationActivityViewForCharge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBigSummationActivityViewForCharge");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getBigSummationActivityViewForCharge(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForCharge()
    {
        return begin_getBigSummationActivityViewForCharge(null, false, null);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForCharge(java.util.Map<String, String> __ctx)
    {
        return begin_getBigSummationActivityViewForCharge(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForCharge(Ice.Callback __cb)
    {
        return begin_getBigSummationActivityViewForCharge(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForCharge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBigSummationActivityViewForCharge(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForCharge(Callback_ActivityInfo_getBigSummationActivityViewForCharge __cb)
    {
        return begin_getBigSummationActivityViewForCharge(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForCharge(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getBigSummationActivityViewForCharge __cb)
    {
        return begin_getBigSummationActivityViewForCharge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBigSummationActivityViewForCharge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBigSummationActivityViewForCharge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBigSummationActivityViewForCharge_name, __cb);
        try
        {
            __result.__prepare(__getBigSummationActivityViewForCharge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getBigSummationActivityViewForCharge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getBigSummationActivityViewForCharge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getBigSummationActivityViewForCharge_async(AMI_ActivityInfo_getBigSummationActivityViewForCharge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigSummationActivityViewForCharge_name);
            __r = begin_getBigSummationActivityViewForCharge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigSummationActivityViewForCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getBigSummationActivityViewForCharge_async(AMI_ActivityInfo_getBigSummationActivityViewForCharge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigSummationActivityViewForCharge_name);
            __r = begin_getBigSummationActivityViewForCharge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigSummationActivityViewForCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getBigSummationActivityViewForConsume_name = "getBigSummationActivityViewForConsume";

    public String getBigSummationActivityViewForConsume()
        throws NoteException
    {
        return getBigSummationActivityViewForConsume(null, false);
    }

    public String getBigSummationActivityViewForConsume(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getBigSummationActivityViewForConsume(__ctx, true);
    }

    private String getBigSummationActivityViewForConsume(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBigSummationActivityViewForConsume", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBigSummationActivityViewForConsume");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getBigSummationActivityViewForConsume(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForConsume()
    {
        return begin_getBigSummationActivityViewForConsume(null, false, null);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForConsume(java.util.Map<String, String> __ctx)
    {
        return begin_getBigSummationActivityViewForConsume(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForConsume(Ice.Callback __cb)
    {
        return begin_getBigSummationActivityViewForConsume(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForConsume(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBigSummationActivityViewForConsume(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForConsume(Callback_ActivityInfo_getBigSummationActivityViewForConsume __cb)
    {
        return begin_getBigSummationActivityViewForConsume(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBigSummationActivityViewForConsume(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getBigSummationActivityViewForConsume __cb)
    {
        return begin_getBigSummationActivityViewForConsume(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBigSummationActivityViewForConsume(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBigSummationActivityViewForConsume_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBigSummationActivityViewForConsume_name, __cb);
        try
        {
            __result.__prepare(__getBigSummationActivityViewForConsume_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getBigSummationActivityViewForConsume(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getBigSummationActivityViewForConsume_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getBigSummationActivityViewForConsume_async(AMI_ActivityInfo_getBigSummationActivityViewForConsume __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigSummationActivityViewForConsume_name);
            __r = begin_getBigSummationActivityViewForConsume(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigSummationActivityViewForConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getBigSummationActivityViewForConsume_async(AMI_ActivityInfo_getBigSummationActivityViewForConsume __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigSummationActivityViewForConsume_name);
            __r = begin_getBigSummationActivityViewForConsume(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigSummationActivityViewForConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCornucopia_name = "getCornucopia";

    /**
     * 领取聚宝盆普通物品
     **/
    public void getCornucopia(int id)
        throws NoteException
    {
        getCornucopia(id, null, false);
    }

    /**
     * 领取聚宝盆普通物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public void getCornucopia(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        getCornucopia(id, __ctx, true);
    }

    private void getCornucopia(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCornucopia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCornucopia");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.getCornucopia(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取聚宝盆普通物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCornucopia(int id)
    {
        return begin_getCornucopia(id, null, false, null);
    }

    /**
     * 领取聚宝盆普通物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCornucopia(int id, java.util.Map<String, String> __ctx)
    {
        return begin_getCornucopia(id, __ctx, true, null);
    }

    /**
     * 领取聚宝盆普通物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCornucopia(int id, Ice.Callback __cb)
    {
        return begin_getCornucopia(id, null, false, __cb);
    }

    /**
     * 领取聚宝盆普通物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCornucopia(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCornucopia(id, __ctx, true, __cb);
    }

    /**
     * 领取聚宝盆普通物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCornucopia(int id, Callback_ActivityInfo_getCornucopia __cb)
    {
        return begin_getCornucopia(id, null, false, __cb);
    }

    /**
     * 领取聚宝盆普通物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCornucopia(int id, java.util.Map<String, String> __ctx, Callback_ActivityInfo_getCornucopia __cb)
    {
        return begin_getCornucopia(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCornucopia(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCornucopia_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCornucopia_name, __cb);
        try
        {
            __result.__prepare(__getCornucopia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_getCornucopia(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCornucopia_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取聚宝盆普通物品
     * @param __cb The callback object for the operation.
     **/
    public boolean getCornucopia_async(AMI_ActivityInfo_getCornucopia __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCornucopia_name);
            __r = begin_getCornucopia(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取聚宝盆普通物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCornucopia_async(AMI_ActivityInfo_getCornucopia __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCornucopia_name);
            __r = begin_getCornucopia(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCornucopiaView_name = "getCornucopiaView";

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     **/
    public String getCornucopiaView()
        throws NoteException
    {
        return getCornucopiaView(null, false);
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getCornucopiaView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCornucopiaView(__ctx, true);
    }

    private String getCornucopiaView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCornucopiaView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCornucopiaView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getCornucopiaView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCornucopiaView()
    {
        return begin_getCornucopiaView(null, false, null);
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCornucopiaView(java.util.Map<String, String> __ctx)
    {
        return begin_getCornucopiaView(__ctx, true, null);
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCornucopiaView(Ice.Callback __cb)
    {
        return begin_getCornucopiaView(null, false, __cb);
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCornucopiaView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCornucopiaView(__ctx, true, __cb);
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCornucopiaView(Callback_ActivityInfo_getCornucopiaView __cb)
    {
        return begin_getCornucopiaView(null, false, __cb);
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCornucopiaView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getCornucopiaView __cb)
    {
        return begin_getCornucopiaView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCornucopiaView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCornucopiaView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCornucopiaView_name, __cb);
        try
        {
            __result.__prepare(__getCornucopiaView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getCornucopiaView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCornucopiaView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getCornucopiaView_async(AMI_ActivityInfo_getCornucopiaView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCornucopiaView_name);
            __r = begin_getCornucopiaView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCornucopiaView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCornucopiaView_async(AMI_ActivityInfo_getCornucopiaView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCornucopiaView_name);
            __r = begin_getCornucopiaView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCornucopiaView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCountryMatch_name = "getCountryMatch";

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     **/
    public String getCountryMatch(int countryId)
        throws NoteException
    {
        return getCountryMatch(countryId, null, false);
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getCountryMatch(int countryId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCountryMatch(countryId, __ctx, true);
    }

    private String getCountryMatch(int countryId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCountryMatch", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCountryMatch");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getCountryMatch(countryId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCountryMatch(int countryId)
    {
        return begin_getCountryMatch(countryId, null, false, null);
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCountryMatch(int countryId, java.util.Map<String, String> __ctx)
    {
        return begin_getCountryMatch(countryId, __ctx, true, null);
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCountryMatch(int countryId, Ice.Callback __cb)
    {
        return begin_getCountryMatch(countryId, null, false, __cb);
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCountryMatch(int countryId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCountryMatch(countryId, __ctx, true, __cb);
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCountryMatch(int countryId, Callback_ActivityInfo_getCountryMatch __cb)
    {
        return begin_getCountryMatch(countryId, null, false, __cb);
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCountryMatch(int countryId, java.util.Map<String, String> __ctx, Callback_ActivityInfo_getCountryMatch __cb)
    {
        return begin_getCountryMatch(countryId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCountryMatch(int countryId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCountryMatch_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCountryMatch_name, __cb);
        try
        {
            __result.__prepare(__getCountryMatch_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(countryId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getCountryMatch(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCountryMatch_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getCountryMatch_async(AMI_ActivityInfo_getCountryMatch __cb, int countryId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCountryMatch_name);
            __r = begin_getCountryMatch(countryId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCountryMatch_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCountryMatch_async(AMI_ActivityInfo_getCountryMatch __cb, int countryId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCountryMatch_name);
            __r = begin_getCountryMatch(countryId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCountryMatch_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getDayChargeView_name = "getDayChargeView";

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     **/
    public String getDayChargeView()
        throws NoteException
    {
        return getDayChargeView(null, false);
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getDayChargeView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getDayChargeView(__ctx, true);
    }

    private String getDayChargeView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDayChargeView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDayChargeView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getDayChargeView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDayChargeView()
    {
        return begin_getDayChargeView(null, false, null);
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDayChargeView(java.util.Map<String, String> __ctx)
    {
        return begin_getDayChargeView(__ctx, true, null);
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDayChargeView(Ice.Callback __cb)
    {
        return begin_getDayChargeView(null, false, __cb);
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDayChargeView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDayChargeView(__ctx, true, __cb);
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDayChargeView(Callback_ActivityInfo_getDayChargeView __cb)
    {
        return begin_getDayChargeView(null, false, __cb);
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDayChargeView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getDayChargeView __cb)
    {
        return begin_getDayChargeView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDayChargeView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDayChargeView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDayChargeView_name, __cb);
        try
        {
            __result.__prepare(__getDayChargeView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getDayChargeView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getDayChargeView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getDayChargeView_async(AMI_ActivityInfo_getDayChargeView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDayChargeView_name);
            __r = begin_getDayChargeView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDayChargeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getDayChargeView_async(AMI_ActivityInfo_getDayChargeView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDayChargeView_name);
            __r = begin_getDayChargeView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDayChargeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getDayConsumeView_name = "getDayConsumeView";

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     **/
    public String getDayConsumeView()
        throws NoteException
    {
        return getDayConsumeView(null, false);
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getDayConsumeView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getDayConsumeView(__ctx, true);
    }

    private String getDayConsumeView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDayConsumeView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDayConsumeView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getDayConsumeView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDayConsumeView()
    {
        return begin_getDayConsumeView(null, false, null);
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDayConsumeView(java.util.Map<String, String> __ctx)
    {
        return begin_getDayConsumeView(__ctx, true, null);
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDayConsumeView(Ice.Callback __cb)
    {
        return begin_getDayConsumeView(null, false, __cb);
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDayConsumeView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDayConsumeView(__ctx, true, __cb);
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDayConsumeView(Callback_ActivityInfo_getDayConsumeView __cb)
    {
        return begin_getDayConsumeView(null, false, __cb);
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDayConsumeView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getDayConsumeView __cb)
    {
        return begin_getDayConsumeView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDayConsumeView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDayConsumeView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDayConsumeView_name, __cb);
        try
        {
            __result.__prepare(__getDayConsumeView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getDayConsumeView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getDayConsumeView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getDayConsumeView_async(AMI_ActivityInfo_getDayConsumeView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDayConsumeView_name);
            __r = begin_getDayConsumeView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDayConsumeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getDayConsumeView_async(AMI_ActivityInfo_getDayConsumeView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDayConsumeView_name);
            __r = begin_getDayConsumeView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDayConsumeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getDayLoginRewardView_name = "getDayLoginRewardView";

    public String getDayLoginRewardView()
        throws NoteException
    {
        return getDayLoginRewardView(null, false);
    }

    public String getDayLoginRewardView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getDayLoginRewardView(__ctx, true);
    }

    private String getDayLoginRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDayLoginRewardView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDayLoginRewardView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getDayLoginRewardView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDayLoginRewardView()
    {
        return begin_getDayLoginRewardView(null, false, null);
    }

    public Ice.AsyncResult begin_getDayLoginRewardView(java.util.Map<String, String> __ctx)
    {
        return begin_getDayLoginRewardView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDayLoginRewardView(Ice.Callback __cb)
    {
        return begin_getDayLoginRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDayLoginRewardView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDayLoginRewardView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDayLoginRewardView(Callback_ActivityInfo_getDayLoginRewardView __cb)
    {
        return begin_getDayLoginRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDayLoginRewardView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getDayLoginRewardView __cb)
    {
        return begin_getDayLoginRewardView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDayLoginRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDayLoginRewardView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDayLoginRewardView_name, __cb);
        try
        {
            __result.__prepare(__getDayLoginRewardView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getDayLoginRewardView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getDayLoginRewardView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getDayLoginRewardView_async(AMI_ActivityInfo_getDayLoginRewardView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDayLoginRewardView_name);
            __r = begin_getDayLoginRewardView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDayLoginRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getDayLoginRewardView_async(AMI_ActivityInfo_getDayLoginRewardView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDayLoginRewardView_name);
            __r = begin_getDayLoginRewardView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDayLoginRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getDayforverLoginRewardView_name = "getDayforverLoginRewardView";

    public String getDayforverLoginRewardView()
        throws NoteException
    {
        return getDayforverLoginRewardView(null, false);
    }

    public String getDayforverLoginRewardView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getDayforverLoginRewardView(__ctx, true);
    }

    private String getDayforverLoginRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDayforverLoginRewardView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDayforverLoginRewardView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getDayforverLoginRewardView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDayforverLoginRewardView()
    {
        return begin_getDayforverLoginRewardView(null, false, null);
    }

    public Ice.AsyncResult begin_getDayforverLoginRewardView(java.util.Map<String, String> __ctx)
    {
        return begin_getDayforverLoginRewardView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDayforverLoginRewardView(Ice.Callback __cb)
    {
        return begin_getDayforverLoginRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDayforverLoginRewardView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDayforverLoginRewardView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDayforverLoginRewardView(Callback_ActivityInfo_getDayforverLoginRewardView __cb)
    {
        return begin_getDayforverLoginRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDayforverLoginRewardView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getDayforverLoginRewardView __cb)
    {
        return begin_getDayforverLoginRewardView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDayforverLoginRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDayforverLoginRewardView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDayforverLoginRewardView_name, __cb);
        try
        {
            __result.__prepare(__getDayforverLoginRewardView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getDayforverLoginRewardView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getDayforverLoginRewardView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getDayforverLoginRewardView_async(AMI_ActivityInfo_getDayforverLoginRewardView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDayforverLoginRewardView_name);
            __r = begin_getDayforverLoginRewardView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDayforverLoginRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getDayforverLoginRewardView_async(AMI_ActivityInfo_getDayforverLoginRewardView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDayforverLoginRewardView_name);
            __r = begin_getDayforverLoginRewardView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDayforverLoginRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getExchangeItems_name = "getExchangeItems";

    /**
     * 获取兑换列表
     **/
    public String getExchangeItems(int itemType)
        throws NoteException
    {
        return getExchangeItems(itemType, null, false);
    }

    /**
     * 获取兑换列表
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getExchangeItems(int itemType, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getExchangeItems(itemType, __ctx, true);
    }

    private String getExchangeItems(int itemType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getExchangeItems", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getExchangeItems");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getExchangeItems(itemType, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取兑换列表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getExchangeItems(int itemType)
    {
        return begin_getExchangeItems(itemType, null, false, null);
    }

    /**
     * 获取兑换列表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getExchangeItems(int itemType, java.util.Map<String, String> __ctx)
    {
        return begin_getExchangeItems(itemType, __ctx, true, null);
    }

    /**
     * 获取兑换列表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getExchangeItems(int itemType, Ice.Callback __cb)
    {
        return begin_getExchangeItems(itemType, null, false, __cb);
    }

    /**
     * 获取兑换列表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getExchangeItems(int itemType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getExchangeItems(itemType, __ctx, true, __cb);
    }

    /**
     * 获取兑换列表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getExchangeItems(int itemType, Callback_ActivityInfo_getExchangeItems __cb)
    {
        return begin_getExchangeItems(itemType, null, false, __cb);
    }

    /**
     * 获取兑换列表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getExchangeItems(int itemType, java.util.Map<String, String> __ctx, Callback_ActivityInfo_getExchangeItems __cb)
    {
        return begin_getExchangeItems(itemType, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getExchangeItems(int itemType, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getExchangeItems_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getExchangeItems_name, __cb);
        try
        {
            __result.__prepare(__getExchangeItems_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(itemType);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getExchangeItems(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getExchangeItems_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取兑换列表
     * @param __cb The callback object for the operation.
     **/
    public boolean getExchangeItems_async(AMI_ActivityInfo_getExchangeItems __cb, int itemType)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getExchangeItems_name);
            __r = begin_getExchangeItems(itemType, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getExchangeItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取兑换列表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getExchangeItems_async(AMI_ActivityInfo_getExchangeItems __cb, int itemType, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getExchangeItems_name);
            __r = begin_getExchangeItems(itemType, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getExchangeItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFirstJiaRewardView_name = "getFirstJiaRewardView";

    public String getFirstJiaRewardView()
        throws NoteException
    {
        return getFirstJiaRewardView(null, false);
    }

    public String getFirstJiaRewardView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFirstJiaRewardView(__ctx, true);
    }

    private String getFirstJiaRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFirstJiaRewardView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFirstJiaRewardView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getFirstJiaRewardView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFirstJiaRewardView()
    {
        return begin_getFirstJiaRewardView(null, false, null);
    }

    public Ice.AsyncResult begin_getFirstJiaRewardView(java.util.Map<String, String> __ctx)
    {
        return begin_getFirstJiaRewardView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFirstJiaRewardView(Ice.Callback __cb)
    {
        return begin_getFirstJiaRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFirstJiaRewardView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFirstJiaRewardView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFirstJiaRewardView(Callback_ActivityInfo_getFirstJiaRewardView __cb)
    {
        return begin_getFirstJiaRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFirstJiaRewardView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getFirstJiaRewardView __cb)
    {
        return begin_getFirstJiaRewardView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFirstJiaRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFirstJiaRewardView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFirstJiaRewardView_name, __cb);
        try
        {
            __result.__prepare(__getFirstJiaRewardView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getFirstJiaRewardView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFirstJiaRewardView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFirstJiaRewardView_async(AMI_ActivityInfo_getFirstJiaRewardView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFirstJiaRewardView_name);
            __r = begin_getFirstJiaRewardView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFirstJiaRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFirstJiaRewardView_async(AMI_ActivityInfo_getFirstJiaRewardView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFirstJiaRewardView_name);
            __r = begin_getFirstJiaRewardView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFirstJiaRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFootballShops_name = "getFootballShops";

    /**
     * 商店物品return:FootballShopSeq的lua
     **/
    public String getFootballShops()
        throws NoteException
    {
        return getFootballShops(null, false);
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFootballShops(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFootballShops(__ctx, true);
    }

    private String getFootballShops(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFootballShops", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFootballShops");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getFootballShops(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFootballShops()
    {
        return begin_getFootballShops(null, false, null);
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFootballShops(java.util.Map<String, String> __ctx)
    {
        return begin_getFootballShops(__ctx, true, null);
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFootballShops(Ice.Callback __cb)
    {
        return begin_getFootballShops(null, false, __cb);
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFootballShops(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFootballShops(__ctx, true, __cb);
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFootballShops(Callback_ActivityInfo_getFootballShops __cb)
    {
        return begin_getFootballShops(null, false, __cb);
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFootballShops(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getFootballShops __cb)
    {
        return begin_getFootballShops(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFootballShops(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFootballShops_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFootballShops_name, __cb);
        try
        {
            __result.__prepare(__getFootballShops_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFootballShops(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFootballShops_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getFootballShops_async(AMI_ActivityInfo_getFootballShops __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFootballShops_name);
            __r = begin_getFootballShops(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFootballShops_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFootballShops_async(AMI_ActivityInfo_getFootballShops __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFootballShops_name);
            __r = begin_getFootballShops(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFootballShops_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFootballView_name = "getFootballView";

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     **/
    public String getFootballView()
        throws NoteException
    {
        return getFootballView(null, false);
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFootballView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFootballView(__ctx, true);
    }

    private String getFootballView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFootballView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFootballView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getFootballView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFootballView()
    {
        return begin_getFootballView(null, false, null);
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFootballView(java.util.Map<String, String> __ctx)
    {
        return begin_getFootballView(__ctx, true, null);
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFootballView(Ice.Callback __cb)
    {
        return begin_getFootballView(null, false, __cb);
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFootballView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFootballView(__ctx, true, __cb);
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFootballView(Callback_ActivityInfo_getFootballView __cb)
    {
        return begin_getFootballView(null, false, __cb);
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFootballView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getFootballView __cb)
    {
        return begin_getFootballView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFootballView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFootballView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFootballView_name, __cb);
        try
        {
            __result.__prepare(__getFootballView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFootballView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFootballView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getFootballView_async(AMI_ActivityInfo_getFootballView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFootballView_name);
            __r = begin_getFootballView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFootballView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFootballView_async(AMI_ActivityInfo_getFootballView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFootballView_name);
            __r = begin_getFootballView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFootballView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFortuneWheelView_name = "getFortuneWheelView";

    public String getFortuneWheelView()
        throws NoteException
    {
        return getFortuneWheelView(null, false);
    }

    public String getFortuneWheelView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFortuneWheelView(__ctx, true);
    }

    private String getFortuneWheelView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFortuneWheelView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFortuneWheelView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getFortuneWheelView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFortuneWheelView()
    {
        return begin_getFortuneWheelView(null, false, null);
    }

    public Ice.AsyncResult begin_getFortuneWheelView(java.util.Map<String, String> __ctx)
    {
        return begin_getFortuneWheelView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFortuneWheelView(Ice.Callback __cb)
    {
        return begin_getFortuneWheelView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFortuneWheelView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFortuneWheelView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFortuneWheelView(Callback_ActivityInfo_getFortuneWheelView __cb)
    {
        return begin_getFortuneWheelView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFortuneWheelView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getFortuneWheelView __cb)
    {
        return begin_getFortuneWheelView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFortuneWheelView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFortuneWheelView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFortuneWheelView_name, __cb);
        try
        {
            __result.__prepare(__getFortuneWheelView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getFortuneWheelView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFortuneWheelView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFortuneWheelView_async(AMI_ActivityInfo_getFortuneWheelView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFortuneWheelView_name);
            __r = begin_getFortuneWheelView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFortuneWheelView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFortuneWheelView_async(AMI_ActivityInfo_getFortuneWheelView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFortuneWheelView_name);
            __r = begin_getFortuneWheelView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFortuneWheelView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFundView_name = "getFundView";

    public String getFundView()
        throws NoteException
    {
        return getFundView(null, false);
    }

    public String getFundView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFundView(__ctx, true);
    }

    private String getFundView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFundView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFundView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getFundView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFundView()
    {
        return begin_getFundView(null, false, null);
    }

    public Ice.AsyncResult begin_getFundView(java.util.Map<String, String> __ctx)
    {
        return begin_getFundView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFundView(Ice.Callback __cb)
    {
        return begin_getFundView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFundView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFundView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFundView(Callback_ActivityInfo_getFundView __cb)
    {
        return begin_getFundView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFundView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getFundView __cb)
    {
        return begin_getFundView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFundView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFundView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFundView_name, __cb);
        try
        {
            __result.__prepare(__getFundView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getFundView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFundView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFundView_async(AMI_ActivityInfo_getFundView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFundView_name);
            __r = begin_getFundView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFundView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFundView_async(AMI_ActivityInfo_getFundView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFundView_name);
            __r = begin_getFundView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFundView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getGift_name = "getGift";

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     **/
    public boolean getGift(int giftId)
        throws NoteException
    {
        return getGift(giftId, null, false);
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getGift(int giftId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getGift(giftId, __ctx, true);
    }

    private boolean getGift(int giftId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGift", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGift");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getGift(giftId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getGift(int giftId)
    {
        return begin_getGift(giftId, null, false, null);
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getGift(int giftId, java.util.Map<String, String> __ctx)
    {
        return begin_getGift(giftId, __ctx, true, null);
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getGift(int giftId, Ice.Callback __cb)
    {
        return begin_getGift(giftId, null, false, __cb);
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getGift(int giftId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGift(giftId, __ctx, true, __cb);
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getGift(int giftId, Callback_ActivityInfo_getGift __cb)
    {
        return begin_getGift(giftId, null, false, __cb);
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getGift(int giftId, java.util.Map<String, String> __ctx, Callback_ActivityInfo_getGift __cb)
    {
        return begin_getGift(giftId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGift(int giftId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGift_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGift_name, __cb);
        try
        {
            __result.__prepare(__getGift_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(giftId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public boolean end_getGift(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getGift_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __cb The callback object for the operation.
     **/
    public boolean getGift_async(AMI_ActivityInfo_getGift __cb, int giftId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getGift_name);
            __r = begin_getGift(giftId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getGift_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getGift_async(AMI_ActivityInfo_getGift __cb, int giftId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getGift_name);
            __r = begin_getGift(giftId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getGift_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getInviteActivityView_name = "getInviteActivityView";

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     **/
    public String getInviteActivityView()
        throws NoteException
    {
        return getInviteActivityView(null, false);
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getInviteActivityView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getInviteActivityView(__ctx, true);
    }

    private String getInviteActivityView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getInviteActivityView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getInviteActivityView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getInviteActivityView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getInviteActivityView()
    {
        return begin_getInviteActivityView(null, false, null);
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getInviteActivityView(java.util.Map<String, String> __ctx)
    {
        return begin_getInviteActivityView(__ctx, true, null);
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getInviteActivityView(Ice.Callback __cb)
    {
        return begin_getInviteActivityView(null, false, __cb);
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getInviteActivityView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInviteActivityView(__ctx, true, __cb);
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getInviteActivityView(Callback_ActivityInfo_getInviteActivityView __cb)
    {
        return begin_getInviteActivityView(null, false, __cb);
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getInviteActivityView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getInviteActivityView __cb)
    {
        return begin_getInviteActivityView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInviteActivityView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInviteActivityView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInviteActivityView_name, __cb);
        try
        {
            __result.__prepare(__getInviteActivityView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getInviteActivityView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getInviteActivityView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getInviteActivityView_async(AMI_ActivityInfo_getInviteActivityView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getInviteActivityView_name);
            __r = begin_getInviteActivityView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getInviteActivityView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getInviteActivityView_async(AMI_ActivityInfo_getInviteActivityView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getInviteActivityView_name);
            __r = begin_getInviteActivityView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getInviteActivityView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getLevelRewardView_name = "getLevelRewardView";

    public String getLevelRewardView()
        throws NoteException
    {
        return getLevelRewardView(null, false);
    }

    public String getLevelRewardView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getLevelRewardView(__ctx, true);
    }

    private String getLevelRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLevelRewardView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLevelRewardView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getLevelRewardView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLevelRewardView()
    {
        return begin_getLevelRewardView(null, false, null);
    }

    public Ice.AsyncResult begin_getLevelRewardView(java.util.Map<String, String> __ctx)
    {
        return begin_getLevelRewardView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getLevelRewardView(Ice.Callback __cb)
    {
        return begin_getLevelRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getLevelRewardView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLevelRewardView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLevelRewardView(Callback_ActivityInfo_getLevelRewardView __cb)
    {
        return begin_getLevelRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getLevelRewardView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getLevelRewardView __cb)
    {
        return begin_getLevelRewardView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLevelRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLevelRewardView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLevelRewardView_name, __cb);
        try
        {
            __result.__prepare(__getLevelRewardView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getLevelRewardView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getLevelRewardView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getLevelRewardView_async(AMI_ActivityInfo_getLevelRewardView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getLevelRewardView_name);
            __r = begin_getLevelRewardView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getLevelRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getLevelRewardView_async(AMI_ActivityInfo_getLevelRewardView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getLevelRewardView_name);
            __r = begin_getLevelRewardView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getLevelRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getLevelWeal_name = "getLevelWeal";

    /**
     * 领取等级福利
     **/
    public int getLevelWeal()
        throws NoteException
    {
        return getLevelWeal(null, false);
    }

    /**
     * 领取等级福利
     * @param __ctx The Context map to send with the invocation.
     **/
    public int getLevelWeal(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getLevelWeal(__ctx, true);
    }

    private int getLevelWeal(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLevelWeal", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLevelWeal");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getLevelWeal(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取等级福利
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLevelWeal()
    {
        return begin_getLevelWeal(null, false, null);
    }

    /**
     * 领取等级福利
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLevelWeal(java.util.Map<String, String> __ctx)
    {
        return begin_getLevelWeal(__ctx, true, null);
    }

    /**
     * 领取等级福利
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLevelWeal(Ice.Callback __cb)
    {
        return begin_getLevelWeal(null, false, __cb);
    }

    /**
     * 领取等级福利
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLevelWeal(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLevelWeal(__ctx, true, __cb);
    }

    /**
     * 领取等级福利
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLevelWeal(Callback_ActivityInfo_getLevelWeal __cb)
    {
        return begin_getLevelWeal(null, false, __cb);
    }

    /**
     * 领取等级福利
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLevelWeal(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getLevelWeal __cb)
    {
        return begin_getLevelWeal(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLevelWeal(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLevelWeal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLevelWeal_name, __cb);
        try
        {
            __result.__prepare(__getLevelWeal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_getLevelWeal(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getLevelWeal_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取等级福利
     * @param __cb The callback object for the operation.
     **/
    public boolean getLevelWeal_async(AMI_ActivityInfo_getLevelWeal __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getLevelWeal_name);
            __r = begin_getLevelWeal(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getLevelWeal_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取等级福利
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getLevelWeal_async(AMI_ActivityInfo_getLevelWeal __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getLevelWeal_name);
            __r = begin_getLevelWeal(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getLevelWeal_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getOpenServerActiveView_name = "getOpenServerActiveView";

    public String getOpenServerActiveView()
        throws NoteException
    {
        return getOpenServerActiveView(null, false);
    }

    public String getOpenServerActiveView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getOpenServerActiveView(__ctx, true);
    }

    private String getOpenServerActiveView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getOpenServerActiveView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getOpenServerActiveView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getOpenServerActiveView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getOpenServerActiveView()
    {
        return begin_getOpenServerActiveView(null, false, null);
    }

    public Ice.AsyncResult begin_getOpenServerActiveView(java.util.Map<String, String> __ctx)
    {
        return begin_getOpenServerActiveView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getOpenServerActiveView(Ice.Callback __cb)
    {
        return begin_getOpenServerActiveView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getOpenServerActiveView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getOpenServerActiveView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getOpenServerActiveView(Callback_ActivityInfo_getOpenServerActiveView __cb)
    {
        return begin_getOpenServerActiveView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getOpenServerActiveView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getOpenServerActiveView __cb)
    {
        return begin_getOpenServerActiveView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getOpenServerActiveView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getOpenServerActiveView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getOpenServerActiveView_name, __cb);
        try
        {
            __result.__prepare(__getOpenServerActiveView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getOpenServerActiveView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getOpenServerActiveView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getOpenServerActiveView_async(AMI_ActivityInfo_getOpenServerActiveView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getOpenServerActiveView_name);
            __r = begin_getOpenServerActiveView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getOpenServerActiveView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getOpenServerActiveView_async(AMI_ActivityInfo_getOpenServerActiveView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getOpenServerActiveView_name);
            __r = begin_getOpenServerActiveView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getOpenServerActiveView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getPowerRewardView_name = "getPowerRewardView";

    public String getPowerRewardView()
        throws NoteException
    {
        return getPowerRewardView(null, false);
    }

    public String getPowerRewardView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPowerRewardView(__ctx, true);
    }

    private String getPowerRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPowerRewardView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPowerRewardView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getPowerRewardView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPowerRewardView()
    {
        return begin_getPowerRewardView(null, false, null);
    }

    public Ice.AsyncResult begin_getPowerRewardView(java.util.Map<String, String> __ctx)
    {
        return begin_getPowerRewardView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPowerRewardView(Ice.Callback __cb)
    {
        return begin_getPowerRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPowerRewardView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPowerRewardView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPowerRewardView(Callback_ActivityInfo_getPowerRewardView __cb)
    {
        return begin_getPowerRewardView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPowerRewardView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getPowerRewardView __cb)
    {
        return begin_getPowerRewardView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPowerRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPowerRewardView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPowerRewardView_name, __cb);
        try
        {
            __result.__prepare(__getPowerRewardView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getPowerRewardView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPowerRewardView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getPowerRewardView_async(AMI_ActivityInfo_getPowerRewardView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPowerRewardView_name);
            __r = begin_getPowerRewardView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPowerRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getPowerRewardView_async(AMI_ActivityInfo_getPowerRewardView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPowerRewardView_name);
            __r = begin_getPowerRewardView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPowerRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getResourceBackView_name = "getResourceBackView";

    /**
     * 请求资源找回界面, return ResourceBackView
     **/
    public String getResourceBackView()
        throws NoteException
    {
        return getResourceBackView(null, false);
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getResourceBackView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getResourceBackView(__ctx, true);
    }

    private String getResourceBackView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getResourceBackView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getResourceBackView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getResourceBackView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getResourceBackView()
    {
        return begin_getResourceBackView(null, false, null);
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getResourceBackView(java.util.Map<String, String> __ctx)
    {
        return begin_getResourceBackView(__ctx, true, null);
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getResourceBackView(Ice.Callback __cb)
    {
        return begin_getResourceBackView(null, false, __cb);
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getResourceBackView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getResourceBackView(__ctx, true, __cb);
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getResourceBackView(Callback_ActivityInfo_getResourceBackView __cb)
    {
        return begin_getResourceBackView(null, false, __cb);
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getResourceBackView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getResourceBackView __cb)
    {
        return begin_getResourceBackView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getResourceBackView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getResourceBackView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getResourceBackView_name, __cb);
        try
        {
            __result.__prepare(__getResourceBackView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getResourceBackView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getResourceBackView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __cb The callback object for the operation.
     **/
    public boolean getResourceBackView_async(AMI_ActivityInfo_getResourceBackView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getResourceBackView_name);
            __r = begin_getResourceBackView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getResourceBackView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getResourceBackView_async(AMI_ActivityInfo_getResourceBackView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getResourceBackView_name);
            __r = begin_getResourceBackView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getResourceBackView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getScoreReward_name = "getScoreReward";

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     **/
    public String getScoreReward(int score)
        throws NoteException
    {
        return getScoreReward(score, null, false);
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getScoreReward(int score, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getScoreReward(score, __ctx, true);
    }

    private String getScoreReward(int score, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getScoreReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getScoreReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getScoreReward(score, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScoreReward(int score)
    {
        return begin_getScoreReward(score, null, false, null);
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScoreReward(int score, java.util.Map<String, String> __ctx)
    {
        return begin_getScoreReward(score, __ctx, true, null);
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScoreReward(int score, Ice.Callback __cb)
    {
        return begin_getScoreReward(score, null, false, __cb);
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScoreReward(int score, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScoreReward(score, __ctx, true, __cb);
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScoreReward(int score, Callback_ActivityInfo_getScoreReward __cb)
    {
        return begin_getScoreReward(score, null, false, __cb);
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScoreReward(int score, java.util.Map<String, String> __ctx, Callback_ActivityInfo_getScoreReward __cb)
    {
        return begin_getScoreReward(score, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScoreReward(int score, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScoreReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScoreReward_name, __cb);
        try
        {
            __result.__prepare(__getScoreReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(score);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getScoreReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getScoreReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public boolean getScoreReward_async(AMI_ActivityInfo_getScoreReward __cb, int score)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getScoreReward_name);
            __r = begin_getScoreReward(score, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getScoreReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getScoreReward_async(AMI_ActivityInfo_getScoreReward __cb, int score, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getScoreReward_name);
            __r = begin_getScoreReward(score, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getScoreReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSeckillView_name = "getSeckillView";

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     **/
    public String getSeckillView()
        throws NoteException
    {
        return getSeckillView(null, false);
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getSeckillView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getSeckillView(__ctx, true);
    }

    private String getSeckillView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSeckillView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSeckillView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getSeckillView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSeckillView()
    {
        return begin_getSeckillView(null, false, null);
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSeckillView(java.util.Map<String, String> __ctx)
    {
        return begin_getSeckillView(__ctx, true, null);
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSeckillView(Ice.Callback __cb)
    {
        return begin_getSeckillView(null, false, __cb);
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSeckillView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSeckillView(__ctx, true, __cb);
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSeckillView(Callback_ActivityInfo_getSeckillView __cb)
    {
        return begin_getSeckillView(null, false, __cb);
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSeckillView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getSeckillView __cb)
    {
        return begin_getSeckillView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSeckillView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSeckillView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSeckillView_name, __cb);
        try
        {
            __result.__prepare(__getSeckillView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getSeckillView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getSeckillView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getSeckillView_async(AMI_ActivityInfo_getSeckillView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSeckillView_name);
            __r = begin_getSeckillView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSeckillView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getSeckillView_async(AMI_ActivityInfo_getSeckillView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSeckillView_name);
            __r = begin_getSeckillView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSeckillView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSendJunLingView_name = "getSendJunLingView";

    public String getSendJunLingView()
        throws NoteException
    {
        return getSendJunLingView(null, false);
    }

    public String getSendJunLingView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getSendJunLingView(__ctx, true);
    }

    private String getSendJunLingView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSendJunLingView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSendJunLingView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getSendJunLingView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSendJunLingView()
    {
        return begin_getSendJunLingView(null, false, null);
    }

    public Ice.AsyncResult begin_getSendJunLingView(java.util.Map<String, String> __ctx)
    {
        return begin_getSendJunLingView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSendJunLingView(Ice.Callback __cb)
    {
        return begin_getSendJunLingView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSendJunLingView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSendJunLingView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSendJunLingView(Callback_ActivityInfo_getSendJunLingView __cb)
    {
        return begin_getSendJunLingView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSendJunLingView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getSendJunLingView __cb)
    {
        return begin_getSendJunLingView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSendJunLingView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSendJunLingView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSendJunLingView_name, __cb);
        try
        {
            __result.__prepare(__getSendJunLingView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getSendJunLingView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getSendJunLingView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getSendJunLingView_async(AMI_ActivityInfo_getSendJunLingView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSendJunLingView_name);
            __r = begin_getSendJunLingView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSendJunLingView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getSendJunLingView_async(AMI_ActivityInfo_getSendJunLingView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSendJunLingView_name);
            __r = begin_getSendJunLingView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSendJunLingView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSummationActivityViewForCharge_name = "getSummationActivityViewForCharge";

    public String getSummationActivityViewForCharge()
        throws NoteException
    {
        return getSummationActivityViewForCharge(null, false);
    }

    public String getSummationActivityViewForCharge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getSummationActivityViewForCharge(__ctx, true);
    }

    private String getSummationActivityViewForCharge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSummationActivityViewForCharge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSummationActivityViewForCharge");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getSummationActivityViewForCharge(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSummationActivityViewForCharge()
    {
        return begin_getSummationActivityViewForCharge(null, false, null);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForCharge(java.util.Map<String, String> __ctx)
    {
        return begin_getSummationActivityViewForCharge(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForCharge(Ice.Callback __cb)
    {
        return begin_getSummationActivityViewForCharge(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForCharge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSummationActivityViewForCharge(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForCharge(Callback_ActivityInfo_getSummationActivityViewForCharge __cb)
    {
        return begin_getSummationActivityViewForCharge(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForCharge(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getSummationActivityViewForCharge __cb)
    {
        return begin_getSummationActivityViewForCharge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSummationActivityViewForCharge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSummationActivityViewForCharge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSummationActivityViewForCharge_name, __cb);
        try
        {
            __result.__prepare(__getSummationActivityViewForCharge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getSummationActivityViewForCharge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getSummationActivityViewForCharge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getSummationActivityViewForCharge_async(AMI_ActivityInfo_getSummationActivityViewForCharge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSummationActivityViewForCharge_name);
            __r = begin_getSummationActivityViewForCharge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSummationActivityViewForCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getSummationActivityViewForCharge_async(AMI_ActivityInfo_getSummationActivityViewForCharge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSummationActivityViewForCharge_name);
            __r = begin_getSummationActivityViewForCharge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSummationActivityViewForCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSummationActivityViewForConsume_name = "getSummationActivityViewForConsume";

    public String getSummationActivityViewForConsume()
        throws NoteException
    {
        return getSummationActivityViewForConsume(null, false);
    }

    public String getSummationActivityViewForConsume(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getSummationActivityViewForConsume(__ctx, true);
    }

    private String getSummationActivityViewForConsume(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSummationActivityViewForConsume", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSummationActivityViewForConsume");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.getSummationActivityViewForConsume(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSummationActivityViewForConsume()
    {
        return begin_getSummationActivityViewForConsume(null, false, null);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForConsume(java.util.Map<String, String> __ctx)
    {
        return begin_getSummationActivityViewForConsume(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForConsume(Ice.Callback __cb)
    {
        return begin_getSummationActivityViewForConsume(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForConsume(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSummationActivityViewForConsume(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForConsume(Callback_ActivityInfo_getSummationActivityViewForConsume __cb)
    {
        return begin_getSummationActivityViewForConsume(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSummationActivityViewForConsume(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getSummationActivityViewForConsume __cb)
    {
        return begin_getSummationActivityViewForConsume(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSummationActivityViewForConsume(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSummationActivityViewForConsume_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSummationActivityViewForConsume_name, __cb);
        try
        {
            __result.__prepare(__getSummationActivityViewForConsume_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getSummationActivityViewForConsume(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getSummationActivityViewForConsume_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getSummationActivityViewForConsume_async(AMI_ActivityInfo_getSummationActivityViewForConsume __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSummationActivityViewForConsume_name);
            __r = begin_getSummationActivityViewForConsume(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSummationActivityViewForConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getSummationActivityViewForConsume_async(AMI_ActivityInfo_getSummationActivityViewForConsume __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSummationActivityViewForConsume_name);
            __r = begin_getSummationActivityViewForConsume(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSummationActivityViewForConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSupperCornucopia_name = "getSupperCornucopia";

    /**
     * 领取聚宝盆超值礼包
     **/
    public void getSupperCornucopia()
        throws NoteException
    {
        getSupperCornucopia(null, false);
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __ctx The Context map to send with the invocation.
     **/
    public void getSupperCornucopia(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        getSupperCornucopia(__ctx, true);
    }

    private void getSupperCornucopia(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSupperCornucopia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSupperCornucopia");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.getSupperCornucopia(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSupperCornucopia()
    {
        return begin_getSupperCornucopia(null, false, null);
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSupperCornucopia(java.util.Map<String, String> __ctx)
    {
        return begin_getSupperCornucopia(__ctx, true, null);
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSupperCornucopia(Ice.Callback __cb)
    {
        return begin_getSupperCornucopia(null, false, __cb);
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSupperCornucopia(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSupperCornucopia(__ctx, true, __cb);
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSupperCornucopia(Callback_ActivityInfo_getSupperCornucopia __cb)
    {
        return begin_getSupperCornucopia(null, false, __cb);
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSupperCornucopia(java.util.Map<String, String> __ctx, Callback_ActivityInfo_getSupperCornucopia __cb)
    {
        return begin_getSupperCornucopia(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSupperCornucopia(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSupperCornucopia_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSupperCornucopia_name, __cb);
        try
        {
            __result.__prepare(__getSupperCornucopia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_getSupperCornucopia(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getSupperCornucopia_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __cb The callback object for the operation.
     **/
    public boolean getSupperCornucopia_async(AMI_ActivityInfo_getSupperCornucopia __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSupperCornucopia_name);
            __r = begin_getSupperCornucopia(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSupperCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取聚宝盆超值礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getSupperCornucopia_async(AMI_ActivityInfo_getSupperCornucopia __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSupperCornucopia_name);
            __r = begin_getSupperCornucopia(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSupperCornucopia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __gridPageView_name = "gridPageView";

    /**
     * 大富温主界面, 返回 GridPageView
     **/
    public String gridPageView()
        throws NoteException
    {
        return gridPageView(null, false);
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String gridPageView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return gridPageView(__ctx, true);
    }

    private String gridPageView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "gridPageView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("gridPageView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.gridPageView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gridPageView()
    {
        return begin_gridPageView(null, false, null);
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gridPageView(java.util.Map<String, String> __ctx)
    {
        return begin_gridPageView(__ctx, true, null);
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gridPageView(Ice.Callback __cb)
    {
        return begin_gridPageView(null, false, __cb);
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gridPageView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_gridPageView(__ctx, true, __cb);
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gridPageView(Callback_ActivityInfo_gridPageView __cb)
    {
        return begin_gridPageView(null, false, __cb);
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gridPageView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_gridPageView __cb)
    {
        return begin_gridPageView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_gridPageView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__gridPageView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __gridPageView_name, __cb);
        try
        {
            __result.__prepare(__gridPageView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_gridPageView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __gridPageView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __cb The callback object for the operation.
     **/
    public boolean gridPageView_async(AMI_ActivityInfo_gridPageView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__gridPageView_name);
            __r = begin_gridPageView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __gridPageView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 大富温主界面, 返回 GridPageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean gridPageView_async(AMI_ActivityInfo_gridPageView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__gridPageView_name);
            __r = begin_gridPageView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __gridPageView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __historyAward_name = "historyAward";

    /**
     * 累计获得的奖励
     **/
    public String historyAward()
        throws NoteException
    {
        return historyAward(null, false);
    }

    /**
     * 累计获得的奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public String historyAward(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return historyAward(__ctx, true);
    }

    private String historyAward(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "historyAward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("historyAward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.historyAward(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 累计获得的奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_historyAward()
    {
        return begin_historyAward(null, false, null);
    }

    /**
     * 累计获得的奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_historyAward(java.util.Map<String, String> __ctx)
    {
        return begin_historyAward(__ctx, true, null);
    }

    /**
     * 累计获得的奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_historyAward(Ice.Callback __cb)
    {
        return begin_historyAward(null, false, __cb);
    }

    /**
     * 累计获得的奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_historyAward(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_historyAward(__ctx, true, __cb);
    }

    /**
     * 累计获得的奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_historyAward(Callback_ActivityInfo_historyAward __cb)
    {
        return begin_historyAward(null, false, __cb);
    }

    /**
     * 累计获得的奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_historyAward(java.util.Map<String, String> __ctx, Callback_ActivityInfo_historyAward __cb)
    {
        return begin_historyAward(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_historyAward(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__historyAward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __historyAward_name, __cb);
        try
        {
            __result.__prepare(__historyAward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_historyAward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __historyAward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 累计获得的奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean historyAward_async(AMI_ActivityInfo_historyAward __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__historyAward_name);
            __r = begin_historyAward(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __historyAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 累计获得的奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean historyAward_async(AMI_ActivityInfo_historyAward __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__historyAward_name);
            __r = begin_historyAward(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __historyAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lettoryRankView_name = "lettoryRankView";

    /**
     * 排行奖励界面, 返回 RankPageView
     **/
    public String lettoryRankView()
        throws NoteException
    {
        return lettoryRankView(null, false);
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lettoryRankView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lettoryRankView(__ctx, true);
    }

    private String lettoryRankView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lettoryRankView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lettoryRankView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.lettoryRankView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryRankView()
    {
        return begin_lettoryRankView(null, false, null);
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryRankView(java.util.Map<String, String> __ctx)
    {
        return begin_lettoryRankView(__ctx, true, null);
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryRankView(Ice.Callback __cb)
    {
        return begin_lettoryRankView(null, false, __cb);
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryRankView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lettoryRankView(__ctx, true, __cb);
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryRankView(Callback_ActivityInfo_lettoryRankView __cb)
    {
        return begin_lettoryRankView(null, false, __cb);
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryRankView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_lettoryRankView __cb)
    {
        return begin_lettoryRankView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lettoryRankView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lettoryRankView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lettoryRankView_name, __cb);
        try
        {
            __result.__prepare(__lettoryRankView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lettoryRankView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lettoryRankView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __cb The callback object for the operation.
     **/
    public boolean lettoryRankView_async(AMI_ActivityInfo_lettoryRankView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lettoryRankView_name);
            __r = begin_lettoryRankView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lettoryRankView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lettoryRankView_async(AMI_ActivityInfo_lettoryRankView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lettoryRankView_name);
            __r = begin_lettoryRankView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lettoryRankView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lettoryshopBuy_name = "lettoryshopBuy";

    /**
     * 神秘商店购买, 返回 LettoryShopView
     **/
    public String lettoryshopBuy(int id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return lettoryshopBuy(id, null, false);
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lettoryshopBuy(int id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return lettoryshopBuy(id, __ctx, true);
    }

    private String lettoryshopBuy(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lettoryshopBuy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lettoryshopBuy");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.lettoryshopBuy(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryshopBuy(int id)
    {
        return begin_lettoryshopBuy(id, null, false, null);
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryshopBuy(int id, java.util.Map<String, String> __ctx)
    {
        return begin_lettoryshopBuy(id, __ctx, true, null);
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryshopBuy(int id, Ice.Callback __cb)
    {
        return begin_lettoryshopBuy(id, null, false, __cb);
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryshopBuy(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lettoryshopBuy(id, __ctx, true, __cb);
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryshopBuy(int id, Callback_ActivityInfo_lettoryshopBuy __cb)
    {
        return begin_lettoryshopBuy(id, null, false, __cb);
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryshopBuy(int id, java.util.Map<String, String> __ctx, Callback_ActivityInfo_lettoryshopBuy __cb)
    {
        return begin_lettoryshopBuy(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lettoryshopBuy(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lettoryshopBuy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lettoryshopBuy_name, __cb);
        try
        {
            __result.__prepare(__lettoryshopBuy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lettoryshopBuy(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lettoryshopBuy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     **/
    public boolean lettoryshopBuy_async(AMI_ActivityInfo_lettoryshopBuy __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lettoryshopBuy_name);
            __r = begin_lettoryshopBuy(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lettoryshopBuy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lettoryshopBuy_async(AMI_ActivityInfo_lettoryshopBuy __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lettoryshopBuy_name);
            __r = begin_lettoryshopBuy(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lettoryshopBuy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lettoryshopView_name = "lettoryshopView";

    /**
     * 神秘商店界面, 返回 LettoryShopView
     **/
    public String lettoryshopView()
        throws NoteException
    {
        return lettoryshopView(null, false);
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lettoryshopView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lettoryshopView(__ctx, true);
    }

    private String lettoryshopView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lettoryshopView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lettoryshopView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.lettoryshopView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryshopView()
    {
        return begin_lettoryshopView(null, false, null);
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryshopView(java.util.Map<String, String> __ctx)
    {
        return begin_lettoryshopView(__ctx, true, null);
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryshopView(Ice.Callback __cb)
    {
        return begin_lettoryshopView(null, false, __cb);
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryshopView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lettoryshopView(__ctx, true, __cb);
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lettoryshopView(Callback_ActivityInfo_lettoryshopView __cb)
    {
        return begin_lettoryshopView(null, false, __cb);
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lettoryshopView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_lettoryshopView __cb)
    {
        return begin_lettoryshopView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lettoryshopView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lettoryshopView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lettoryshopView_name, __cb);
        try
        {
            __result.__prepare(__lettoryshopView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lettoryshopView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lettoryshopView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     **/
    public boolean lettoryshopView_async(AMI_ActivityInfo_lettoryshopView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lettoryshopView_name);
            __r = begin_lettoryshopView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lettoryshopView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lettoryshopView_async(AMI_ActivityInfo_lettoryshopView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lettoryshopView_name);
            __r = begin_lettoryshopView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lettoryshopView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __levelWealInfo_name = "levelWealInfo";

    /**
     * 等级福利信息, 返回 LevelWealView
     **/
    public LevelWealView levelWealInfo()
        throws NoteException
    {
        return levelWealInfo(null, false);
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __ctx The Context map to send with the invocation.
     **/
    public LevelWealView levelWealInfo(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return levelWealInfo(__ctx, true);
    }

    private LevelWealView levelWealInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "levelWealInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("levelWealInfo");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.levelWealInfo(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_levelWealInfo()
    {
        return begin_levelWealInfo(null, false, null);
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_levelWealInfo(java.util.Map<String, String> __ctx)
    {
        return begin_levelWealInfo(__ctx, true, null);
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_levelWealInfo(Ice.Callback __cb)
    {
        return begin_levelWealInfo(null, false, __cb);
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_levelWealInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_levelWealInfo(__ctx, true, __cb);
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_levelWealInfo(Callback_ActivityInfo_levelWealInfo __cb)
    {
        return begin_levelWealInfo(null, false, __cb);
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_levelWealInfo(java.util.Map<String, String> __ctx, Callback_ActivityInfo_levelWealInfo __cb)
    {
        return begin_levelWealInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_levelWealInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__levelWealInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __levelWealInfo_name, __cb);
        try
        {
            __result.__prepare(__levelWealInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public LevelWealView end_levelWealInfo(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __levelWealInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            LevelWealView __ret;
            __ret = new LevelWealView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __cb The callback object for the operation.
     **/
    public boolean levelWealInfo_async(AMI_ActivityInfo_levelWealInfo __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelWealInfo_name);
            __r = begin_levelWealInfo(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelWealInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean levelWealInfo_async(AMI_ActivityInfo_levelWealInfo __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelWealInfo_name);
            __r = begin_levelWealInfo(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelWealInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lotteryCycleView_name = "lotteryCycleView";

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     **/
    public String lotteryCycleView()
        throws NoteException
    {
        return lotteryCycleView(null, false);
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lotteryCycleView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lotteryCycleView(__ctx, true);
    }

    private String lotteryCycleView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lotteryCycleView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lotteryCycleView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.lotteryCycleView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lotteryCycleView()
    {
        return begin_lotteryCycleView(null, false, null);
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lotteryCycleView(java.util.Map<String, String> __ctx)
    {
        return begin_lotteryCycleView(__ctx, true, null);
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lotteryCycleView(Ice.Callback __cb)
    {
        return begin_lotteryCycleView(null, false, __cb);
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lotteryCycleView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lotteryCycleView(__ctx, true, __cb);
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lotteryCycleView(Callback_ActivityInfo_lotteryCycleView __cb)
    {
        return begin_lotteryCycleView(null, false, __cb);
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lotteryCycleView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_lotteryCycleView __cb)
    {
        return begin_lotteryCycleView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lotteryCycleView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lotteryCycleView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lotteryCycleView_name, __cb);
        try
        {
            __result.__prepare(__lotteryCycleView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lotteryCycleView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lotteryCycleView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __cb The callback object for the operation.
     **/
    public boolean lotteryCycleView_async(AMI_ActivityInfo_lotteryCycleView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lotteryCycleView_name);
            __r = begin_lotteryCycleView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lotteryCycleView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lotteryCycleView_async(AMI_ActivityInfo_lotteryCycleView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lotteryCycleView_name);
            __r = begin_lotteryCycleView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lotteryCycleView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lotteryScoreRankView_name = "lotteryScoreRankView";

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     **/
    public String lotteryScoreRankView()
        throws NoteException
    {
        return lotteryScoreRankView(null, false);
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lotteryScoreRankView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lotteryScoreRankView(__ctx, true);
    }

    private String lotteryScoreRankView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lotteryScoreRankView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lotteryScoreRankView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.lotteryScoreRankView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lotteryScoreRankView()
    {
        return begin_lotteryScoreRankView(null, false, null);
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lotteryScoreRankView(java.util.Map<String, String> __ctx)
    {
        return begin_lotteryScoreRankView(__ctx, true, null);
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lotteryScoreRankView(Ice.Callback __cb)
    {
        return begin_lotteryScoreRankView(null, false, __cb);
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lotteryScoreRankView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lotteryScoreRankView(__ctx, true, __cb);
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lotteryScoreRankView(Callback_ActivityInfo_lotteryScoreRankView __cb)
    {
        return begin_lotteryScoreRankView(null, false, __cb);
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lotteryScoreRankView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_lotteryScoreRankView __cb)
    {
        return begin_lotteryScoreRankView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lotteryScoreRankView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lotteryScoreRankView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lotteryScoreRankView_name, __cb);
        try
        {
            __result.__prepare(__lotteryScoreRankView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lotteryScoreRankView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lotteryScoreRankView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __cb The callback object for the operation.
     **/
    public boolean lotteryScoreRankView_async(AMI_ActivityInfo_lotteryScoreRankView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lotteryScoreRankView_name);
            __r = begin_lotteryScoreRankView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lotteryScoreRankView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lotteryScoreRankView_async(AMI_ActivityInfo_lotteryScoreRankView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lotteryScoreRankView_name);
            __r = begin_lotteryScoreRankView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lotteryScoreRankView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openMarksmanScoreRankView_name = "openMarksmanScoreRankView";

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     **/
    public String openMarksmanScoreRankView()
        throws NoteException
    {
        return openMarksmanScoreRankView(null, false);
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String openMarksmanScoreRankView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openMarksmanScoreRankView(__ctx, true);
    }

    private String openMarksmanScoreRankView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openMarksmanScoreRankView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openMarksmanScoreRankView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.openMarksmanScoreRankView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRankView()
    {
        return begin_openMarksmanScoreRankView(null, false, null);
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRankView(java.util.Map<String, String> __ctx)
    {
        return begin_openMarksmanScoreRankView(__ctx, true, null);
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRankView(Ice.Callback __cb)
    {
        return begin_openMarksmanScoreRankView(null, false, __cb);
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRankView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openMarksmanScoreRankView(__ctx, true, __cb);
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRankView(Callback_ActivityInfo_openMarksmanScoreRankView __cb)
    {
        return begin_openMarksmanScoreRankView(null, false, __cb);
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRankView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_openMarksmanScoreRankView __cb)
    {
        return begin_openMarksmanScoreRankView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openMarksmanScoreRankView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openMarksmanScoreRankView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openMarksmanScoreRankView_name, __cb);
        try
        {
            __result.__prepare(__openMarksmanScoreRankView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_openMarksmanScoreRankView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openMarksmanScoreRankView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __cb The callback object for the operation.
     **/
    public boolean openMarksmanScoreRankView_async(AMI_ActivityInfo_openMarksmanScoreRankView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openMarksmanScoreRankView_name);
            __r = begin_openMarksmanScoreRankView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openMarksmanScoreRankView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openMarksmanScoreRankView_async(AMI_ActivityInfo_openMarksmanScoreRankView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openMarksmanScoreRankView_name);
            __r = begin_openMarksmanScoreRankView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openMarksmanScoreRankView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openMarksmanScoreRewardView_name = "openMarksmanScoreRewardView";

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     **/
    public String openMarksmanScoreRewardView()
        throws NoteException
    {
        return openMarksmanScoreRewardView(null, false);
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String openMarksmanScoreRewardView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openMarksmanScoreRewardView(__ctx, true);
    }

    private String openMarksmanScoreRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openMarksmanScoreRewardView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openMarksmanScoreRewardView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.openMarksmanScoreRewardView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRewardView()
    {
        return begin_openMarksmanScoreRewardView(null, false, null);
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRewardView(java.util.Map<String, String> __ctx)
    {
        return begin_openMarksmanScoreRewardView(__ctx, true, null);
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRewardView(Ice.Callback __cb)
    {
        return begin_openMarksmanScoreRewardView(null, false, __cb);
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRewardView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openMarksmanScoreRewardView(__ctx, true, __cb);
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRewardView(Callback_ActivityInfo_openMarksmanScoreRewardView __cb)
    {
        return begin_openMarksmanScoreRewardView(null, false, __cb);
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanScoreRewardView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_openMarksmanScoreRewardView __cb)
    {
        return begin_openMarksmanScoreRewardView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openMarksmanScoreRewardView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openMarksmanScoreRewardView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openMarksmanScoreRewardView_name, __cb);
        try
        {
            __result.__prepare(__openMarksmanScoreRewardView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_openMarksmanScoreRewardView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openMarksmanScoreRewardView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __cb The callback object for the operation.
     **/
    public boolean openMarksmanScoreRewardView_async(AMI_ActivityInfo_openMarksmanScoreRewardView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openMarksmanScoreRewardView_name);
            __r = begin_openMarksmanScoreRewardView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openMarksmanScoreRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openMarksmanScoreRewardView_async(AMI_ActivityInfo_openMarksmanScoreRewardView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openMarksmanScoreRewardView_name);
            __r = begin_openMarksmanScoreRewardView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openMarksmanScoreRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openMarksmanView_name = "openMarksmanView";

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     **/
    public String openMarksmanView(int systemType)
        throws NoteException
    {
        return openMarksmanView(systemType, null, false);
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __ctx The Context map to send with the invocation.
     **/
    public String openMarksmanView(int systemType, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openMarksmanView(systemType, __ctx, true);
    }

    private String openMarksmanView(int systemType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openMarksmanView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openMarksmanView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.openMarksmanView(systemType, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanView(int systemType)
    {
        return begin_openMarksmanView(systemType, null, false, null);
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanView(int systemType, java.util.Map<String, String> __ctx)
    {
        return begin_openMarksmanView(systemType, __ctx, true, null);
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanView(int systemType, Ice.Callback __cb)
    {
        return begin_openMarksmanView(systemType, null, false, __cb);
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanView(int systemType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openMarksmanView(systemType, __ctx, true, __cb);
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarksmanView(int systemType, Callback_ActivityInfo_openMarksmanView __cb)
    {
        return begin_openMarksmanView(systemType, null, false, __cb);
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarksmanView(int systemType, java.util.Map<String, String> __ctx, Callback_ActivityInfo_openMarksmanView __cb)
    {
        return begin_openMarksmanView(systemType, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openMarksmanView(int systemType, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openMarksmanView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openMarksmanView_name, __cb);
        try
        {
            __result.__prepare(__openMarksmanView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(systemType);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_openMarksmanView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openMarksmanView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __cb The callback object for the operation.
     **/
    public boolean openMarksmanView_async(AMI_ActivityInfo_openMarksmanView __cb, int systemType)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openMarksmanView_name);
            __r = begin_openMarksmanView(systemType, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openMarksmanView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openMarksmanView_async(AMI_ActivityInfo_openMarksmanView __cb, int systemType, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openMarksmanView_name);
            __r = begin_openMarksmanView(systemType, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openMarksmanView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveApiReward_name = "receiveApiReward";

    public void receiveApiReward(int actId, int targetCount)
        throws NoteException
    {
        receiveApiReward(actId, targetCount, null, false);
    }

    public void receiveApiReward(int actId, int targetCount, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        receiveApiReward(actId, targetCount, __ctx, true);
    }

    private void receiveApiReward(int actId, int targetCount, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveApiReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveApiReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveApiReward(actId, targetCount, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_receiveApiReward(int actId, int targetCount)
    {
        return begin_receiveApiReward(actId, targetCount, null, false, null);
    }

    public Ice.AsyncResult begin_receiveApiReward(int actId, int targetCount, java.util.Map<String, String> __ctx)
    {
        return begin_receiveApiReward(actId, targetCount, __ctx, true, null);
    }

    public Ice.AsyncResult begin_receiveApiReward(int actId, int targetCount, Ice.Callback __cb)
    {
        return begin_receiveApiReward(actId, targetCount, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveApiReward(int actId, int targetCount, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveApiReward(actId, targetCount, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_receiveApiReward(int actId, int targetCount, Callback_ActivityInfo_receiveApiReward __cb)
    {
        return begin_receiveApiReward(actId, targetCount, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveApiReward(int actId, int targetCount, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveApiReward __cb)
    {
        return begin_receiveApiReward(actId, targetCount, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveApiReward(int actId, int targetCount, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveApiReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveApiReward_name, __cb);
        try
        {
            __result.__prepare(__receiveApiReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(actId);
            __os.writeInt(targetCount);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_receiveApiReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveApiReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean receiveApiReward_async(AMI_ActivityInfo_receiveApiReward __cb, int actId, int targetCount)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveApiReward_name);
            __r = begin_receiveApiReward(actId, targetCount, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveApiReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean receiveApiReward_async(AMI_ActivityInfo_receiveApiReward __cb, int actId, int targetCount, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveApiReward_name);
            __r = begin_receiveApiReward(actId, targetCount, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveApiReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveBigDayCharge_name = "receiveBigDayCharge";

    /**
     * 领取copy日充值奖励
     **/
    public void receiveBigDayCharge(int threshold)
        throws NoteException
    {
        receiveBigDayCharge(threshold, null, false);
    }

    /**
     * 领取copy日充值奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void receiveBigDayCharge(int threshold, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        receiveBigDayCharge(threshold, __ctx, true);
    }

    private void receiveBigDayCharge(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveBigDayCharge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveBigDayCharge");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveBigDayCharge(threshold, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取copy日充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveBigDayCharge(int threshold)
    {
        return begin_receiveBigDayCharge(threshold, null, false, null);
    }

    /**
     * 领取copy日充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveBigDayCharge(int threshold, java.util.Map<String, String> __ctx)
    {
        return begin_receiveBigDayCharge(threshold, __ctx, true, null);
    }

    /**
     * 领取copy日充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveBigDayCharge(int threshold, Ice.Callback __cb)
    {
        return begin_receiveBigDayCharge(threshold, null, false, __cb);
    }

    /**
     * 领取copy日充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveBigDayCharge(int threshold, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveBigDayCharge(threshold, __ctx, true, __cb);
    }

    /**
     * 领取copy日充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveBigDayCharge(int threshold, Callback_ActivityInfo_receiveBigDayCharge __cb)
    {
        return begin_receiveBigDayCharge(threshold, null, false, __cb);
    }

    /**
     * 领取copy日充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveBigDayCharge(int threshold, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveBigDayCharge __cb)
    {
        return begin_receiveBigDayCharge(threshold, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveBigDayCharge(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveBigDayCharge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveBigDayCharge_name, __cb);
        try
        {
            __result.__prepare(__receiveBigDayCharge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshold);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_receiveBigDayCharge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveBigDayCharge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取copy日充值奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveBigDayCharge_async(AMI_ActivityInfo_receiveBigDayCharge __cb, int threshold)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveBigDayCharge_name);
            __r = begin_receiveBigDayCharge(threshold, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveBigDayCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取copy日充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveBigDayCharge_async(AMI_ActivityInfo_receiveBigDayCharge __cb, int threshold, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveBigDayCharge_name);
            __r = begin_receiveBigDayCharge(threshold, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveBigDayCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveBigDayConsume_name = "receiveBigDayConsume";

    /**
     * 领取copy日消费奖励
     **/
    public void receiveBigDayConsume(int threshold)
        throws NoteException
    {
        receiveBigDayConsume(threshold, null, false);
    }

    /**
     * 领取copy日消费奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void receiveBigDayConsume(int threshold, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        receiveBigDayConsume(threshold, __ctx, true);
    }

    private void receiveBigDayConsume(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveBigDayConsume", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveBigDayConsume");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveBigDayConsume(threshold, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取copy日消费奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveBigDayConsume(int threshold)
    {
        return begin_receiveBigDayConsume(threshold, null, false, null);
    }

    /**
     * 领取copy日消费奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveBigDayConsume(int threshold, java.util.Map<String, String> __ctx)
    {
        return begin_receiveBigDayConsume(threshold, __ctx, true, null);
    }

    /**
     * 领取copy日消费奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveBigDayConsume(int threshold, Ice.Callback __cb)
    {
        return begin_receiveBigDayConsume(threshold, null, false, __cb);
    }

    /**
     * 领取copy日消费奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveBigDayConsume(int threshold, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveBigDayConsume(threshold, __ctx, true, __cb);
    }

    /**
     * 领取copy日消费奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveBigDayConsume(int threshold, Callback_ActivityInfo_receiveBigDayConsume __cb)
    {
        return begin_receiveBigDayConsume(threshold, null, false, __cb);
    }

    /**
     * 领取copy日消费奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveBigDayConsume(int threshold, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveBigDayConsume __cb)
    {
        return begin_receiveBigDayConsume(threshold, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveBigDayConsume(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveBigDayConsume_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveBigDayConsume_name, __cb);
        try
        {
            __result.__prepare(__receiveBigDayConsume_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshold);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_receiveBigDayConsume(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveBigDayConsume_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取copy日消费奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveBigDayConsume_async(AMI_ActivityInfo_receiveBigDayConsume __cb, int threshold)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveBigDayConsume_name);
            __r = begin_receiveBigDayConsume(threshold, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveBigDayConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取copy日消费奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveBigDayConsume_async(AMI_ActivityInfo_receiveBigDayConsume __cb, int threshold, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveBigDayConsume_name);
            __r = begin_receiveBigDayConsume(threshold, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveBigDayConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveBigRewardForSumCharge_name = "receiveBigRewardForSumCharge";

    public void receiveBigRewardForSumCharge(int threshold)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveBigRewardForSumCharge(threshold, null, false);
    }

    public void receiveBigRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveBigRewardForSumCharge(threshold, __ctx, true);
    }

    private void receiveBigRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveBigRewardForSumCharge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveBigRewardForSumCharge");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveBigRewardForSumCharge(threshold, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumCharge(int threshold)
    {
        return begin_receiveBigRewardForSumCharge(threshold, null, false, null);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx)
    {
        return begin_receiveBigRewardForSumCharge(threshold, __ctx, true, null);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumCharge(int threshold, Ice.Callback __cb)
    {
        return begin_receiveBigRewardForSumCharge(threshold, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveBigRewardForSumCharge(threshold, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumCharge(int threshold, Callback_ActivityInfo_receiveBigRewardForSumCharge __cb)
    {
        return begin_receiveBigRewardForSumCharge(threshold, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveBigRewardForSumCharge __cb)
    {
        return begin_receiveBigRewardForSumCharge(threshold, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveBigRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveBigRewardForSumCharge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveBigRewardForSumCharge_name, __cb);
        try
        {
            __result.__prepare(__receiveBigRewardForSumCharge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshold);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_receiveBigRewardForSumCharge(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveBigRewardForSumCharge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean receiveBigRewardForSumCharge_async(AMI_ActivityInfo_receiveBigRewardForSumCharge __cb, int threshold)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveBigRewardForSumCharge_name);
            __r = begin_receiveBigRewardForSumCharge(threshold, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveBigRewardForSumCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean receiveBigRewardForSumCharge_async(AMI_ActivityInfo_receiveBigRewardForSumCharge __cb, int threshold, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveBigRewardForSumCharge_name);
            __r = begin_receiveBigRewardForSumCharge(threshold, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveBigRewardForSumCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveBigRewardForSumConsume_name = "receiveBigRewardForSumConsume";

    public void receiveBigRewardForSumConsume(int threshold)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveBigRewardForSumConsume(threshold, null, false);
    }

    public void receiveBigRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveBigRewardForSumConsume(threshold, __ctx, true);
    }

    private void receiveBigRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveBigRewardForSumConsume", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveBigRewardForSumConsume");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveBigRewardForSumConsume(threshold, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumConsume(int threshold)
    {
        return begin_receiveBigRewardForSumConsume(threshold, null, false, null);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx)
    {
        return begin_receiveBigRewardForSumConsume(threshold, __ctx, true, null);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumConsume(int threshold, Ice.Callback __cb)
    {
        return begin_receiveBigRewardForSumConsume(threshold, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveBigRewardForSumConsume(threshold, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumConsume(int threshold, Callback_ActivityInfo_receiveBigRewardForSumConsume __cb)
    {
        return begin_receiveBigRewardForSumConsume(threshold, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveBigRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveBigRewardForSumConsume __cb)
    {
        return begin_receiveBigRewardForSumConsume(threshold, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveBigRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveBigRewardForSumConsume_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveBigRewardForSumConsume_name, __cb);
        try
        {
            __result.__prepare(__receiveBigRewardForSumConsume_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshold);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_receiveBigRewardForSumConsume(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveBigRewardForSumConsume_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean receiveBigRewardForSumConsume_async(AMI_ActivityInfo_receiveBigRewardForSumConsume __cb, int threshold)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveBigRewardForSumConsume_name);
            __r = begin_receiveBigRewardForSumConsume(threshold, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveBigRewardForSumConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean receiveBigRewardForSumConsume_async(AMI_ActivityInfo_receiveBigRewardForSumConsume __cb, int threshold, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveBigRewardForSumConsume_name);
            __r = begin_receiveBigRewardForSumConsume(threshold, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveBigRewardForSumConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveDayCharge_name = "receiveDayCharge";

    /**
     * 领取日充值奖励
     **/
    public void receiveDayCharge(int threshold)
        throws NoteException
    {
        receiveDayCharge(threshold, null, false);
    }

    /**
     * 领取日充值奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void receiveDayCharge(int threshold, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        receiveDayCharge(threshold, __ctx, true);
    }

    private void receiveDayCharge(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveDayCharge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveDayCharge");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveDayCharge(threshold, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取日充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveDayCharge(int threshold)
    {
        return begin_receiveDayCharge(threshold, null, false, null);
    }

    /**
     * 领取日充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveDayCharge(int threshold, java.util.Map<String, String> __ctx)
    {
        return begin_receiveDayCharge(threshold, __ctx, true, null);
    }

    /**
     * 领取日充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveDayCharge(int threshold, Ice.Callback __cb)
    {
        return begin_receiveDayCharge(threshold, null, false, __cb);
    }

    /**
     * 领取日充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveDayCharge(int threshold, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveDayCharge(threshold, __ctx, true, __cb);
    }

    /**
     * 领取日充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveDayCharge(int threshold, Callback_ActivityInfo_receiveDayCharge __cb)
    {
        return begin_receiveDayCharge(threshold, null, false, __cb);
    }

    /**
     * 领取日充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveDayCharge(int threshold, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveDayCharge __cb)
    {
        return begin_receiveDayCharge(threshold, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveDayCharge(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveDayCharge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveDayCharge_name, __cb);
        try
        {
            __result.__prepare(__receiveDayCharge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshold);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_receiveDayCharge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveDayCharge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取日充值奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveDayCharge_async(AMI_ActivityInfo_receiveDayCharge __cb, int threshold)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveDayCharge_name);
            __r = begin_receiveDayCharge(threshold, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveDayCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取日充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveDayCharge_async(AMI_ActivityInfo_receiveDayCharge __cb, int threshold, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveDayCharge_name);
            __r = begin_receiveDayCharge(threshold, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveDayCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveDayConsume_name = "receiveDayConsume";

    /**
     * 领取日消费奖励
     **/
    public void receiveDayConsume(int threshold)
        throws NoteException
    {
        receiveDayConsume(threshold, null, false);
    }

    /**
     * 领取日消费奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void receiveDayConsume(int threshold, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        receiveDayConsume(threshold, __ctx, true);
    }

    private void receiveDayConsume(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveDayConsume", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveDayConsume");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveDayConsume(threshold, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取日消费奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveDayConsume(int threshold)
    {
        return begin_receiveDayConsume(threshold, null, false, null);
    }

    /**
     * 领取日消费奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveDayConsume(int threshold, java.util.Map<String, String> __ctx)
    {
        return begin_receiveDayConsume(threshold, __ctx, true, null);
    }

    /**
     * 领取日消费奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveDayConsume(int threshold, Ice.Callback __cb)
    {
        return begin_receiveDayConsume(threshold, null, false, __cb);
    }

    /**
     * 领取日消费奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveDayConsume(int threshold, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveDayConsume(threshold, __ctx, true, __cb);
    }

    /**
     * 领取日消费奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveDayConsume(int threshold, Callback_ActivityInfo_receiveDayConsume __cb)
    {
        return begin_receiveDayConsume(threshold, null, false, __cb);
    }

    /**
     * 领取日消费奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveDayConsume(int threshold, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveDayConsume __cb)
    {
        return begin_receiveDayConsume(threshold, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveDayConsume(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveDayConsume_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveDayConsume_name, __cb);
        try
        {
            __result.__prepare(__receiveDayConsume_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshold);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_receiveDayConsume(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveDayConsume_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取日消费奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveDayConsume_async(AMI_ActivityInfo_receiveDayConsume __cb, int threshold)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveDayConsume_name);
            __r = begin_receiveDayConsume(threshold, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveDayConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取日消费奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveDayConsume_async(AMI_ActivityInfo_receiveDayConsume __cb, int threshold, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveDayConsume_name);
            __r = begin_receiveDayConsume(threshold, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveDayConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveRewardForInvite_name = "receiveRewardForInvite";

    /**
     * 领取邀请好友奖励
     **/
    public void receiveRewardForInvite(int threshoId)
        throws NoteException
    {
        receiveRewardForInvite(threshoId, null, false);
    }

    /**
     * 领取邀请好友奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void receiveRewardForInvite(int threshoId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        receiveRewardForInvite(threshoId, __ctx, true);
    }

    private void receiveRewardForInvite(int threshoId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveRewardForInvite", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveRewardForInvite");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveRewardForInvite(threshoId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取邀请好友奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveRewardForInvite(int threshoId)
    {
        return begin_receiveRewardForInvite(threshoId, null, false, null);
    }

    /**
     * 领取邀请好友奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveRewardForInvite(int threshoId, java.util.Map<String, String> __ctx)
    {
        return begin_receiveRewardForInvite(threshoId, __ctx, true, null);
    }

    /**
     * 领取邀请好友奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveRewardForInvite(int threshoId, Ice.Callback __cb)
    {
        return begin_receiveRewardForInvite(threshoId, null, false, __cb);
    }

    /**
     * 领取邀请好友奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveRewardForInvite(int threshoId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveRewardForInvite(threshoId, __ctx, true, __cb);
    }

    /**
     * 领取邀请好友奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveRewardForInvite(int threshoId, Callback_ActivityInfo_receiveRewardForInvite __cb)
    {
        return begin_receiveRewardForInvite(threshoId, null, false, __cb);
    }

    /**
     * 领取邀请好友奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveRewardForInvite(int threshoId, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveRewardForInvite __cb)
    {
        return begin_receiveRewardForInvite(threshoId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveRewardForInvite(int threshoId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveRewardForInvite_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveRewardForInvite_name, __cb);
        try
        {
            __result.__prepare(__receiveRewardForInvite_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshoId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_receiveRewardForInvite(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveRewardForInvite_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取邀请好友奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveRewardForInvite_async(AMI_ActivityInfo_receiveRewardForInvite __cb, int threshoId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveRewardForInvite_name);
            __r = begin_receiveRewardForInvite(threshoId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveRewardForInvite_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取邀请好友奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveRewardForInvite_async(AMI_ActivityInfo_receiveRewardForInvite __cb, int threshoId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveRewardForInvite_name);
            __r = begin_receiveRewardForInvite(threshoId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveRewardForInvite_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveRewardForSumCharge_name = "receiveRewardForSumCharge";

    public void receiveRewardForSumCharge(int threshold)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveRewardForSumCharge(threshold, null, false);
    }

    public void receiveRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveRewardForSumCharge(threshold, __ctx, true);
    }

    private void receiveRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveRewardForSumCharge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveRewardForSumCharge");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveRewardForSumCharge(threshold, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_receiveRewardForSumCharge(int threshold)
    {
        return begin_receiveRewardForSumCharge(threshold, null, false, null);
    }

    public Ice.AsyncResult begin_receiveRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx)
    {
        return begin_receiveRewardForSumCharge(threshold, __ctx, true, null);
    }

    public Ice.AsyncResult begin_receiveRewardForSumCharge(int threshold, Ice.Callback __cb)
    {
        return begin_receiveRewardForSumCharge(threshold, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveRewardForSumCharge(threshold, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_receiveRewardForSumCharge(int threshold, Callback_ActivityInfo_receiveRewardForSumCharge __cb)
    {
        return begin_receiveRewardForSumCharge(threshold, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveRewardForSumCharge __cb)
    {
        return begin_receiveRewardForSumCharge(threshold, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveRewardForSumCharge(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveRewardForSumCharge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveRewardForSumCharge_name, __cb);
        try
        {
            __result.__prepare(__receiveRewardForSumCharge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshold);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_receiveRewardForSumCharge(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveRewardForSumCharge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean receiveRewardForSumCharge_async(AMI_ActivityInfo_receiveRewardForSumCharge __cb, int threshold)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveRewardForSumCharge_name);
            __r = begin_receiveRewardForSumCharge(threshold, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveRewardForSumCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean receiveRewardForSumCharge_async(AMI_ActivityInfo_receiveRewardForSumCharge __cb, int threshold, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveRewardForSumCharge_name);
            __r = begin_receiveRewardForSumCharge(threshold, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveRewardForSumCharge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveRewardForSumConsume_name = "receiveRewardForSumConsume";

    public void receiveRewardForSumConsume(int threshold)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveRewardForSumConsume(threshold, null, false);
    }

    public void receiveRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveRewardForSumConsume(threshold, __ctx, true);
    }

    private void receiveRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveRewardForSumConsume", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveRewardForSumConsume");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.receiveRewardForSumConsume(threshold, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_receiveRewardForSumConsume(int threshold)
    {
        return begin_receiveRewardForSumConsume(threshold, null, false, null);
    }

    public Ice.AsyncResult begin_receiveRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx)
    {
        return begin_receiveRewardForSumConsume(threshold, __ctx, true, null);
    }

    public Ice.AsyncResult begin_receiveRewardForSumConsume(int threshold, Ice.Callback __cb)
    {
        return begin_receiveRewardForSumConsume(threshold, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveRewardForSumConsume(threshold, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_receiveRewardForSumConsume(int threshold, Callback_ActivityInfo_receiveRewardForSumConsume __cb)
    {
        return begin_receiveRewardForSumConsume(threshold, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx, Callback_ActivityInfo_receiveRewardForSumConsume __cb)
    {
        return begin_receiveRewardForSumConsume(threshold, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveRewardForSumConsume(int threshold, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveRewardForSumConsume_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveRewardForSumConsume_name, __cb);
        try
        {
            __result.__prepare(__receiveRewardForSumConsume_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(threshold);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_receiveRewardForSumConsume(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveRewardForSumConsume_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean receiveRewardForSumConsume_async(AMI_ActivityInfo_receiveRewardForSumConsume __cb, int threshold)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveRewardForSumConsume_name);
            __r = begin_receiveRewardForSumConsume(threshold, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveRewardForSumConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean receiveRewardForSumConsume_async(AMI_ActivityInfo_receiveRewardForSumConsume __cb, int threshold, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveRewardForSumConsume_name);
            __r = begin_receiveRewardForSumConsume(threshold, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveRewardForSumConsume_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __seckillItem_name = "seckillItem";

    /**
     * 秒杀物品
     **/
    public void seckillItem(int id)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        seckillItem(id, null, false);
    }

    /**
     * 秒杀物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public void seckillItem(int id, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        seckillItem(id, __ctx, true);
    }

    private void seckillItem(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "seckillItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("seckillItem");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.seckillItem(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 秒杀物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_seckillItem(int id)
    {
        return begin_seckillItem(id, null, false, null);
    }

    /**
     * 秒杀物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_seckillItem(int id, java.util.Map<String, String> __ctx)
    {
        return begin_seckillItem(id, __ctx, true, null);
    }

    /**
     * 秒杀物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_seckillItem(int id, Ice.Callback __cb)
    {
        return begin_seckillItem(id, null, false, __cb);
    }

    /**
     * 秒杀物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_seckillItem(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_seckillItem(id, __ctx, true, __cb);
    }

    /**
     * 秒杀物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_seckillItem(int id, Callback_ActivityInfo_seckillItem __cb)
    {
        return begin_seckillItem(id, null, false, __cb);
    }

    /**
     * 秒杀物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_seckillItem(int id, java.util.Map<String, String> __ctx, Callback_ActivityInfo_seckillItem __cb)
    {
        return begin_seckillItem(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_seckillItem(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__seckillItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __seckillItem_name, __cb);
        try
        {
            __result.__prepare(__seckillItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_seckillItem(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __seckillItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 秒杀物品
     * @param __cb The callback object for the operation.
     **/
    public boolean seckillItem_async(AMI_ActivityInfo_seckillItem __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__seckillItem_name);
            __r = begin_seckillItem(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __seckillItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 秒杀物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean seckillItem_async(AMI_ActivityInfo_seckillItem __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__seckillItem_name);
            __r = begin_seckillItem(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __seckillItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __share_name = "share";

    /**
     * 分享    ShareSub
     **/
    public String share(int id)
        throws NoteException
    {
        return share(id, null, false);
    }

    /**
     * 分享    ShareSub
     * @param __ctx The Context map to send with the invocation.
     **/
    public String share(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return share(id, __ctx, true);
    }

    private String share(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "share", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("share");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.share(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 分享    ShareSub
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_share(int id)
    {
        return begin_share(id, null, false, null);
    }

    /**
     * 分享    ShareSub
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_share(int id, java.util.Map<String, String> __ctx)
    {
        return begin_share(id, __ctx, true, null);
    }

    /**
     * 分享    ShareSub
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_share(int id, Ice.Callback __cb)
    {
        return begin_share(id, null, false, __cb);
    }

    /**
     * 分享    ShareSub
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_share(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_share(id, __ctx, true, __cb);
    }

    /**
     * 分享    ShareSub
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_share(int id, Callback_ActivityInfo_share __cb)
    {
        return begin_share(id, null, false, __cb);
    }

    /**
     * 分享    ShareSub
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_share(int id, java.util.Map<String, String> __ctx, Callback_ActivityInfo_share __cb)
    {
        return begin_share(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_share(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__share_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __share_name, __cb);
        try
        {
            __result.__prepare(__share_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_share(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __share_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 分享    ShareSub
     * @param __cb The callback object for the operation.
     **/
    public boolean share_async(AMI_ActivityInfo_share __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__share_name);
            __r = begin_share(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __share_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 分享    ShareSub
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean share_async(AMI_ActivityInfo_share __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__share_name);
            __r = begin_share(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __share_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sharePageView_name = "sharePageView";

    /**
     * 分享活动主界面, 返回 ShareView
     **/
    public String sharePageView()
        throws NoteException
    {
        return sharePageView(null, false);
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String sharePageView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return sharePageView(__ctx, true);
    }

    private String sharePageView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sharePageView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sharePageView");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.sharePageView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sharePageView()
    {
        return begin_sharePageView(null, false, null);
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sharePageView(java.util.Map<String, String> __ctx)
    {
        return begin_sharePageView(__ctx, true, null);
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sharePageView(Ice.Callback __cb)
    {
        return begin_sharePageView(null, false, __cb);
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sharePageView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sharePageView(__ctx, true, __cb);
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sharePageView(Callback_ActivityInfo_sharePageView __cb)
    {
        return begin_sharePageView(null, false, __cb);
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sharePageView(java.util.Map<String, String> __ctx, Callback_ActivityInfo_sharePageView __cb)
    {
        return begin_sharePageView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sharePageView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sharePageView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sharePageView_name, __cb);
        try
        {
            __result.__prepare(__sharePageView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_sharePageView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sharePageView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __cb The callback object for the operation.
     **/
    public boolean sharePageView_async(AMI_ActivityInfo_sharePageView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sharePageView_name);
            __r = begin_sharePageView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sharePageView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 分享活动主界面, 返回 ShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sharePageView_async(AMI_ActivityInfo_sharePageView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sharePageView_name);
            __r = begin_sharePageView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sharePageView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __shootReward_name = "shootReward";

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     **/
    public String shootReward(int shootType, int systemType)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return shootReward(shootType, systemType, null, false);
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __ctx The Context map to send with the invocation.
     **/
    public String shootReward(int shootType, int systemType, java.util.Map<String, String> __ctx)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return shootReward(shootType, systemType, __ctx, true);
    }

    private String shootReward(int shootType, int systemType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "shootReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("shootReward");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.shootReward(shootType, systemType, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_shootReward(int shootType, int systemType)
    {
        return begin_shootReward(shootType, systemType, null, false, null);
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_shootReward(int shootType, int systemType, java.util.Map<String, String> __ctx)
    {
        return begin_shootReward(shootType, systemType, __ctx, true, null);
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_shootReward(int shootType, int systemType, Ice.Callback __cb)
    {
        return begin_shootReward(shootType, systemType, null, false, __cb);
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_shootReward(int shootType, int systemType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shootReward(shootType, systemType, __ctx, true, __cb);
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_shootReward(int shootType, int systemType, Callback_ActivityInfo_shootReward __cb)
    {
        return begin_shootReward(shootType, systemType, null, false, __cb);
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_shootReward(int shootType, int systemType, java.util.Map<String, String> __ctx, Callback_ActivityInfo_shootReward __cb)
    {
        return begin_shootReward(shootType, systemType, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shootReward(int shootType, int systemType, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__shootReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shootReward_name, __cb);
        try
        {
            __result.__prepare(__shootReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(shootType);
            __os.writeInt(systemType);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_shootReward(Ice.AsyncResult __result)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __shootReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __cb The callback object for the operation.
     **/
    public boolean shootReward_async(AMI_ActivityInfo_shootReward __cb, int shootType, int systemType)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__shootReward_name);
            __r = begin_shootReward(shootType, systemType, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __shootReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean shootReward_async(AMI_ActivityInfo_shootReward __cb, int shootType, int systemType, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__shootReward_name);
            __r = begin_shootReward(shootType, systemType, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __shootReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __showMyRecord_name = "showMyRecord";

    /**
     * 是否显示我的中奖记录
     **/
    public void showMyRecord(boolean show)
        throws NoteException
    {
        showMyRecord(show, null, false);
    }

    /**
     * 是否显示我的中奖记录
     * @param __ctx The Context map to send with the invocation.
     **/
    public void showMyRecord(boolean show, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        showMyRecord(show, __ctx, true);
    }

    private void showMyRecord(boolean show, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "showMyRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("showMyRecord");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    __del.showMyRecord(show, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 是否显示我的中奖记录
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_showMyRecord(boolean show)
    {
        return begin_showMyRecord(show, null, false, null);
    }

    /**
     * 是否显示我的中奖记录
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showMyRecord(boolean show, java.util.Map<String, String> __ctx)
    {
        return begin_showMyRecord(show, __ctx, true, null);
    }

    /**
     * 是否显示我的中奖记录
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_showMyRecord(boolean show, Ice.Callback __cb)
    {
        return begin_showMyRecord(show, null, false, __cb);
    }

    /**
     * 是否显示我的中奖记录
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showMyRecord(boolean show, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showMyRecord(show, __ctx, true, __cb);
    }

    /**
     * 是否显示我的中奖记录
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_showMyRecord(boolean show, Callback_ActivityInfo_showMyRecord __cb)
    {
        return begin_showMyRecord(show, null, false, __cb);
    }

    /**
     * 是否显示我的中奖记录
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showMyRecord(boolean show, java.util.Map<String, String> __ctx, Callback_ActivityInfo_showMyRecord __cb)
    {
        return begin_showMyRecord(show, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showMyRecord(boolean show, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__showMyRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showMyRecord_name, __cb);
        try
        {
            __result.__prepare(__showMyRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(show);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_showMyRecord(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __showMyRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 是否显示我的中奖记录
     * @param __cb The callback object for the operation.
     **/
    public boolean showMyRecord_async(AMI_ActivityInfo_showMyRecord __cb, boolean show)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__showMyRecord_name);
            __r = begin_showMyRecord(show, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __showMyRecord_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 是否显示我的中奖记录
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean showMyRecord_async(AMI_ActivityInfo_showMyRecord __cb, boolean show, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__showMyRecord_name);
            __r = begin_showMyRecord(show, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __showMyRecord_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __throwBall_name = "throwBall";

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     **/
    public String throwBall(int type, int point)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return throwBall(type, point, null, false);
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __ctx The Context map to send with the invocation.
     **/
    public String throwBall(int type, int point, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return throwBall(type, point, __ctx, true);
    }

    private String throwBall(int type, int point, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "throwBall", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("throwBall");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.throwBall(type, point, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_throwBall(int type, int point)
    {
        return begin_throwBall(type, point, null, false, null);
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_throwBall(int type, int point, java.util.Map<String, String> __ctx)
    {
        return begin_throwBall(type, point, __ctx, true, null);
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_throwBall(int type, int point, Ice.Callback __cb)
    {
        return begin_throwBall(type, point, null, false, __cb);
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_throwBall(int type, int point, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_throwBall(type, point, __ctx, true, __cb);
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_throwBall(int type, int point, Callback_ActivityInfo_throwBall __cb)
    {
        return begin_throwBall(type, point, null, false, __cb);
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_throwBall(int type, int point, java.util.Map<String, String> __ctx, Callback_ActivityInfo_throwBall __cb)
    {
        return begin_throwBall(type, point, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_throwBall(int type, int point, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__throwBall_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __throwBall_name, __cb);
        try
        {
            __result.__prepare(__throwBall_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeInt(point);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_throwBall(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __throwBall_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __cb The callback object for the operation.
     **/
    public boolean throwBall_async(AMI_ActivityInfo_throwBall __cb, int type, int point)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__throwBall_name);
            __r = begin_throwBall(type, point, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __throwBall_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean throwBall_async(AMI_ActivityInfo_throwBall __cb, int type, int point, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__throwBall_name);
            __r = begin_throwBall(type, point, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __throwBall_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __upActivityInfoList_name = "upActivityInfoList";

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     **/
    public String upActivityInfoList()
        throws NoteException
    {
        return upActivityInfoList(null, false);
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __ctx The Context map to send with the invocation.
     **/
    public String upActivityInfoList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return upActivityInfoList(__ctx, true);
    }

    private String upActivityInfoList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "upActivityInfoList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("upActivityInfoList");
                    __delBase = __getDelegate(false);
                    _ActivityInfoDel __del = (_ActivityInfoDel)__delBase;
                    return __del.upActivityInfoList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upActivityInfoList()
    {
        return begin_upActivityInfoList(null, false, null);
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upActivityInfoList(java.util.Map<String, String> __ctx)
    {
        return begin_upActivityInfoList(__ctx, true, null);
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upActivityInfoList(Ice.Callback __cb)
    {
        return begin_upActivityInfoList(null, false, __cb);
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upActivityInfoList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_upActivityInfoList(__ctx, true, __cb);
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upActivityInfoList(Callback_ActivityInfo_upActivityInfoList __cb)
    {
        return begin_upActivityInfoList(null, false, __cb);
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upActivityInfoList(java.util.Map<String, String> __ctx, Callback_ActivityInfo_upActivityInfoList __cb)
    {
        return begin_upActivityInfoList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_upActivityInfoList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__upActivityInfoList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __upActivityInfoList_name, __cb);
        try
        {
            __result.__prepare(__upActivityInfoList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_upActivityInfoList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __upActivityInfoList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __cb The callback object for the operation.
     **/
    public boolean upActivityInfoList_async(AMI_ActivityInfo_upActivityInfoList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__upActivityInfoList_name);
            __r = begin_upActivityInfoList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __upActivityInfoList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean upActivityInfoList_async(AMI_ActivityInfo_upActivityInfoList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__upActivityInfoList_name);
            __r = begin_upActivityInfoList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __upActivityInfoList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static ActivityInfoPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ActivityInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ActivityInfoPrx)
            {
                __d = (ActivityInfoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ActivityInfoPrxHelper __h = new ActivityInfoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ActivityInfoPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ActivityInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ActivityInfoPrx)
            {
                __d = (ActivityInfoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ActivityInfoPrxHelper __h = new ActivityInfoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ActivityInfoPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ActivityInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ActivityInfoPrxHelper __h = new ActivityInfoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ActivityInfoPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ActivityInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ActivityInfoPrxHelper __h = new ActivityInfoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ActivityInfoPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ActivityInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ActivityInfoPrx)
            {
                __d = (ActivityInfoPrx)__obj;
            }
            else
            {
                ActivityInfoPrxHelper __h = new ActivityInfoPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ActivityInfoPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ActivityInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ActivityInfoPrxHelper __h = new ActivityInfoPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::ActivityInfo"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ActivityInfoDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ActivityInfoDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ActivityInfoPrx v)
    {
        __os.writeProxy(v);
    }

    public static ActivityInfoPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ActivityInfoPrxHelper result = new ActivityInfoPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
