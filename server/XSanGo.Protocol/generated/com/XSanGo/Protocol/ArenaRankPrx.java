// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ArenaRank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface ArenaRankPrx extends Ice.ObjectPrx
{
    public String selectRank()
        throws NoteException;

    public String selectRank(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selectRank();

    public Ice.AsyncResult begin_selectRank(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectRank(Ice.Callback __cb);

    public Ice.AsyncResult begin_selectRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectRank(Callback_ArenaRank_selectRank __cb);

    public Ice.AsyncResult begin_selectRank(java.util.Map<String, String> __ctx, Callback_ArenaRank_selectRank __cb);

    public String end_selectRank(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selectRank_async(AMI_ArenaRank_selectRank __cb);

    public boolean selectRank_async(AMI_ArenaRank_selectRank __cb, java.util.Map<String, String> __ctx);

    public String selectRivalRank()
        throws NoteException;

    public String selectRivalRank(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selectRivalRank();

    public Ice.AsyncResult begin_selectRivalRank(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectRivalRank(Ice.Callback __cb);

    public Ice.AsyncResult begin_selectRivalRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectRivalRank(Callback_ArenaRank_selectRivalRank __cb);

    public Ice.AsyncResult begin_selectRivalRank(java.util.Map<String, String> __ctx, Callback_ArenaRank_selectRivalRank __cb);

    public String end_selectRivalRank(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selectRivalRank_async(AMI_ArenaRank_selectRivalRank __cb);

    public boolean selectRivalRank_async(AMI_ArenaRank_selectRivalRank __cb, java.util.Map<String, String> __ctx);

    public void saveGuard(String guardId)
        throws NoteException;

    public void saveGuard(String guardId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_saveGuard(String guardId);

    public Ice.AsyncResult begin_saveGuard(String guardId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_saveGuard(String guardId, Ice.Callback __cb);

    public Ice.AsyncResult begin_saveGuard(String guardId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_saveGuard(String guardId, Callback_ArenaRank_saveGuard __cb);

    public Ice.AsyncResult begin_saveGuard(String guardId, java.util.Map<String, String> __ctx, Callback_ArenaRank_saveGuard __cb);

    public void end_saveGuard(Ice.AsyncResult __result)
        throws NoteException;

    public boolean saveGuard_async(AMI_ArenaRank_saveGuard __cb, String guardId);

    public boolean saveGuard_async(AMI_ArenaRank_saveGuard __cb, String guardId, java.util.Map<String, String> __ctx);

    public void setSneer(int sneerId, String sneerStr)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public void setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr);

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, Ice.Callback __cb);

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, Callback_ArenaRank_setSneer __cb);

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx, Callback_ArenaRank_setSneer __cb);

    public void end_setSneer(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean setSneer_async(AMI_ArenaRank_setSneer __cb, int sneerId, String sneerStr);

    public boolean setSneer_async(AMI_ArenaRank_setSneer __cb, int sneerId, String sneerStr, java.util.Map<String, String> __ctx);

    public void buyChallenge()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public void buyChallenge(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyChallenge();

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyChallenge(Ice.Callback __cb);

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyChallenge(Callback_ArenaRank_buyChallenge __cb);

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, Callback_ArenaRank_buyChallenge __cb);

    public void end_buyChallenge(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean buyChallenge_async(AMI_ArenaRank_buyChallenge __cb);

    public boolean buyChallenge_async(AMI_ArenaRank_buyChallenge __cb, java.util.Map<String, String> __ctx);

    public String selHundredRank()
        throws NoteException;

    public String selHundredRank(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selHundredRank();

    public Ice.AsyncResult begin_selHundredRank(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selHundredRank(Ice.Callback __cb);

    public Ice.AsyncResult begin_selHundredRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selHundredRank(Callback_ArenaRank_selHundredRank __cb);

    public Ice.AsyncResult begin_selHundredRank(java.util.Map<String, String> __ctx, Callback_ArenaRank_selHundredRank __cb);

    public String end_selHundredRank(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selHundredRank_async(AMI_ArenaRank_selHundredRank __cb);

    public boolean selHundredRank_async(AMI_ArenaRank_selHundredRank __cb, java.util.Map<String, String> __ctx);

    public String selMallList()
        throws NoteException;

    public String selMallList(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selMallList();

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selMallList(Ice.Callback __cb);

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selMallList(Callback_ArenaRank_selMallList __cb);

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx, Callback_ArenaRank_selMallList __cb);

    public String end_selMallList(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selMallList_async(AMI_ArenaRank_selMallList __cb);

    public boolean selMallList_async(AMI_ArenaRank_selMallList __cb, java.util.Map<String, String> __ctx);

    public String refMallList()
        throws NoteException;

    public String refMallList(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_refMallList();

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_refMallList(Ice.Callback __cb);

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_refMallList(Callback_ArenaRank_refMallList __cb);

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx, Callback_ArenaRank_refMallList __cb);

    public String end_refMallList(Ice.AsyncResult __result)
        throws NoteException;

    public boolean refMallList_async(AMI_ArenaRank_refMallList __cb);

    public boolean refMallList_async(AMI_ArenaRank_refMallList __cb, java.util.Map<String, String> __ctx);

    public String exchangeItem(int storId)
        throws NoteException;

    public String exchangeItem(int storId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_exchangeItem(int storId);

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_exchangeItem(int storId, Ice.Callback __cb);

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_exchangeItem(int storId, Callback_ArenaRank_exchangeItem __cb);

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx, Callback_ArenaRank_exchangeItem __cb);

    public String end_exchangeItem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean exchangeItem_async(AMI_ArenaRank_exchangeItem __cb, int storId);

    public boolean exchangeItem_async(AMI_ArenaRank_exchangeItem __cb, int storId, java.util.Map<String, String> __ctx);

    public String robFightReport()
        throws NoteException;

    public String robFightReport(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_robFightReport();

    public Ice.AsyncResult begin_robFightReport(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_robFightReport(Ice.Callback __cb);

    public Ice.AsyncResult begin_robFightReport(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_robFightReport(Callback_ArenaRank_robFightReport __cb);

    public Ice.AsyncResult begin_robFightReport(java.util.Map<String, String> __ctx, Callback_ArenaRank_robFightReport __cb);

    public String end_robFightReport(Ice.AsyncResult __result)
        throws NoteException;

    public boolean robFightReport_async(AMI_ArenaRank_robFightReport __cb);

    public boolean robFightReport_async(AMI_ArenaRank_robFightReport __cb, java.util.Map<String, String> __ctx);

    public PvpOpponentFormationView beginRevenge(String targetId, String formationId)
        throws NoteException;

    public PvpOpponentFormationView beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId);

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, Callback_ArenaRank_beginRevenge __cb);

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_ArenaRank_beginRevenge __cb);

    public PvpOpponentFormationView end_beginRevenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean beginRevenge_async(AMI_ArenaRank_beginRevenge __cb, String targetId, String formationId);

    public boolean beginRevenge_async(AMI_ArenaRank_beginRevenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx);

    public String endRevenge(String targetId, int resFlag, byte remainHero)
        throws NoteException;

    public String endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero);

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, Ice.Callback __cb);

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, Callback_ArenaRank_endRevenge __cb);

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Callback_ArenaRank_endRevenge __cb);

    public String end_endRevenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endRevenge_async(AMI_ArenaRank_endRevenge __cb, String targetId, int resFlag, byte remainHero);

    public boolean endRevenge_async(AMI_ArenaRank_endRevenge __cb, String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx);

    public FightResultView revenge(String targetId, String formationId)
        throws NoteException;

    public FightResultView revenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_revenge(String targetId, String formationId);

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, Ice.Callback __cb);

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, Callback_ArenaRank_revenge __cb);

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_ArenaRank_revenge __cb);

    public FightResultView end_revenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean revenge_async(AMI_ArenaRank_revenge __cb, String targetId, String formationId);

    public boolean revenge_async(AMI_ArenaRank_revenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx);

    public void strutReport(String reportId, int channelType, String targetId, String content)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public void strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content);

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, Ice.Callback __cb);

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, Callback_ArenaRank_strutReport __cb);

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx, Callback_ArenaRank_strutReport __cb);

    public void end_strutReport(Ice.AsyncResult __result)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public boolean strutReport_async(AMI_ArenaRank_strutReport __cb, String reportId, int channelType, String targetId, String content);

    public boolean strutReport_async(AMI_ArenaRank_strutReport __cb, String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx);

    public PvpOpponentFormationView beginChallenge(String targetId, String formationId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public PvpOpponentFormationView beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, Callback_ArenaRank_beginChallenge __cb);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_ArenaRank_beginChallenge __cb);

    public PvpOpponentFormationView end_beginChallenge(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean beginChallenge_async(AMI_ArenaRank_beginChallenge __cb, String targetId, String formationId);

    public boolean beginChallenge_async(AMI_ArenaRank_beginChallenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx);

    public String endChallenge(String targetId, int resFlag, byte remainHero)
        throws NoteException;

    public String endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, Ice.Callback __cb);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, Callback_ArenaRank_endChallenge __cb);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Callback_ArenaRank_endChallenge __cb);

    public String end_endChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endChallenge_async(AMI_ArenaRank_endChallenge __cb, String targetId, int resFlag, byte remainHero);

    public boolean endChallenge_async(AMI_ArenaRank_endChallenge __cb, String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx);

    public FightResultView challenge(String targetId, String formationId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public FightResultView challenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_challenge(String targetId, String formationId);

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, Ice.Callback __cb);

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, Callback_ArenaRank_challenge __cb);

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_ArenaRank_challenge __cb);

    public FightResultView end_challenge(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean challenge_async(AMI_ArenaRank_challenge __cb, String targetId, String formationId);

    public boolean challenge_async(AMI_ArenaRank_challenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx);

    public void clearCD()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public void clearCD(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_clearCD();

    public Ice.AsyncResult begin_clearCD(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_clearCD(Ice.Callback __cb);

    public Ice.AsyncResult begin_clearCD(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_clearCD(Callback_ArenaRank_clearCD __cb);

    public Ice.AsyncResult begin_clearCD(java.util.Map<String, String> __ctx, Callback_ArenaRank_clearCD __cb);

    public void end_clearCD(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean clearCD_async(AMI_ArenaRank_clearCD __cb);

    public boolean clearCD_async(AMI_ArenaRank_clearCD __cb, java.util.Map<String, String> __ctx);

    public void uploadFightMovie(String id, FightMovieView movie)
        throws NoteException;

    public void uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie);

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, Ice.Callback __cb);

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, Callback_ArenaRank_uploadFightMovie __cb);

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx, Callback_ArenaRank_uploadFightMovie __cb);

    public void end_uploadFightMovie(Ice.AsyncResult __result)
        throws NoteException;

    public boolean uploadFightMovie_async(AMI_ArenaRank_uploadFightMovie __cb, String id, FightMovieView movie);

    public boolean uploadFightMovie_async(AMI_ArenaRank_uploadFightMovie __cb, String id, FightMovieView movie, java.util.Map<String, String> __ctx);

    public FightMovieView[] getFightMovie(String id)
        throws NoteException;

    public FightMovieView[] getFightMovie(String id, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getFightMovie(String id);

    public Ice.AsyncResult begin_getFightMovie(String id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getFightMovie(String id, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFightMovie(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFightMovie(String id, Callback_ArenaRank_getFightMovie __cb);

    public Ice.AsyncResult begin_getFightMovie(String id, java.util.Map<String, String> __ctx, Callback_ArenaRank_getFightMovie __cb);

    public FightMovieView[] end_getFightMovie(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getFightMovie_async(AMI_ArenaRank_getFightMovie __cb, String id);

    public boolean getFightMovie_async(AMI_ArenaRank_getFightMovie __cb, String id, java.util.Map<String, String> __ctx);

    /**
     * 进入跨服竞技场，return OwnRank的lua
     **/
    public String enterCrossArena()
        throws NoteException;

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String enterCrossArena(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enterCrossArena();

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enterCrossArena(java.util.Map<String, String> __ctx);

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enterCrossArena(Ice.Callback __cb);

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enterCrossArena(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enterCrossArena(Callback_ArenaRank_enterCrossArena __cb);

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enterCrossArena(java.util.Map<String, String> __ctx, Callback_ArenaRank_enterCrossArena __cb);

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __result The asynchronous result object.
     **/
    public String end_enterCrossArena(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean enterCrossArena_async(AMI_ArenaRank_enterCrossArena __cb);

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean enterCrossArena_async(AMI_ArenaRank_enterCrossArena __cb, java.util.Map<String, String> __ctx);

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     **/
    public String refreshCrossRival()
        throws NoteException;

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String refreshCrossRival(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshCrossRival();

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(java.util.Map<String, String> __ctx);

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(Ice.Callback __cb);

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(Callback_ArenaRank_refreshCrossRival __cb);

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(java.util.Map<String, String> __ctx, Callback_ArenaRank_refreshCrossRival __cb);

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __result The asynchronous result object.
     **/
    public String end_refreshCrossRival(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean refreshCrossRival_async(AMI_ArenaRank_refreshCrossRival __cb);

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean refreshCrossRival_async(AMI_ArenaRank_refreshCrossRival __cb, java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     **/
    public String getCrossRank()
        throws NoteException;

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getCrossRank(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank();

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(Ice.Callback __cb);

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(Callback_ArenaRank_getCrossRank __cb);

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(java.util.Map<String, String> __ctx, Callback_ArenaRank_getCrossRank __cb);

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __result The asynchronous result object.
     **/
    public String end_getCrossRank(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossRank_async(AMI_ArenaRank_getCrossRank __cb);

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossRank_async(AMI_ArenaRank_getCrossRank __cb, java.util.Map<String, String> __ctx);

    /**
     * 设置个性签名
     **/
    public void setSignature(String signature)
        throws NoteException;

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setSignature(String signature, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 设置个性签名
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String signature);

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, java.util.Map<String, String> __ctx);

    /**
     * 设置个性签名
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, Ice.Callback __cb);

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置个性签名
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, Callback_ArenaRank_setSignature __cb);

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, java.util.Map<String, String> __ctx, Callback_ArenaRank_setSignature __cb);

    /**
     * 设置个性签名
     * @param __result The asynchronous result object.
     **/
    public void end_setSignature(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public boolean setSignature_async(AMI_ArenaRank_setSignature __cb, String signature);

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean setSignature_async(AMI_ArenaRank_setSignature __cb, String signature, java.util.Map<String, String> __ctx);

    /**
     * 保存跨服竞技场阵容
     **/
    public void saveBattle()
        throws NoteException;

    /**
     * 保存跨服竞技场阵容
     * @param __ctx The Context map to send with the invocation.
     **/
    public void saveBattle(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 保存跨服竞技场阵容
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle();

    /**
     * 保存跨服竞技场阵容
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(java.util.Map<String, String> __ctx);

    /**
     * 保存跨服竞技场阵容
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(Ice.Callback __cb);

    /**
     * 保存跨服竞技场阵容
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 保存跨服竞技场阵容
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(Callback_ArenaRank_saveBattle __cb);

    /**
     * 保存跨服竞技场阵容
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(java.util.Map<String, String> __ctx, Callback_ArenaRank_saveBattle __cb);

    /**
     * 保存跨服竞技场阵容
     * @param __result The asynchronous result object.
     **/
    public void end_saveBattle(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     **/
    public boolean saveBattle_async(AMI_ArenaRank_saveBattle __cb);

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean saveBattle_async(AMI_ArenaRank_saveBattle __cb, java.util.Map<String, String> __ctx);

    /**
     * 购买跨服竞技场挑战次数
     **/
    public void buyCrossChallenge()
        throws NoteException;

    /**
     * 购买跨服竞技场挑战次数
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyCrossChallenge(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 购买跨服竞技场挑战次数
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge();

    /**
     * 购买跨服竞技场挑战次数
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(java.util.Map<String, String> __ctx);

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(Ice.Callback __cb);

    /**
     * 购买跨服竞技场挑战次数
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(Callback_ArenaRank_buyCrossChallenge __cb);

    /**
     * 购买跨服竞技场挑战次数
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(java.util.Map<String, String> __ctx, Callback_ArenaRank_buyCrossChallenge __cb);

    /**
     * 购买跨服竞技场挑战次数
     * @param __result The asynchronous result object.
     **/
    public void end_buyCrossChallenge(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     **/
    public boolean buyCrossChallenge_async(AMI_ArenaRank_buyCrossChallenge __cb);

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyCrossChallenge_async(AMI_ArenaRank_buyCrossChallenge __cb, java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     **/
    public String getCrossReport()
        throws NoteException;

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getCrossReport(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossReport();

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossReport(java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossReport(Ice.Callback __cb);

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossReport(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossReport(Callback_ArenaRank_getCrossReport __cb);

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossReport(java.util.Map<String, String> __ctx, Callback_ArenaRank_getCrossReport __cb);

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __result The asynchronous result object.
     **/
    public String end_getCrossReport(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossReport_async(AMI_ArenaRank_getCrossReport __cb);

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossReport_async(AMI_ArenaRank_getCrossReport __cb, java.util.Map<String, String> __ctx);

    /**
     * 跨服竞技场挑战
     **/
    public FightResultView crossFight(String rivalId)
        throws NoteException;

    /**
     * 跨服竞技场挑战
     * @param __ctx The Context map to send with the invocation.
     **/
    public FightResultView crossFight(String rivalId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 跨服竞技场挑战
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId);

    /**
     * 跨服竞技场挑战
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, java.util.Map<String, String> __ctx);

    /**
     * 跨服竞技场挑战
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, Ice.Callback __cb);

    /**
     * 跨服竞技场挑战
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 跨服竞技场挑战
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, Callback_ArenaRank_crossFight __cb);

    /**
     * 跨服竞技场挑战
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, java.util.Map<String, String> __ctx, Callback_ArenaRank_crossFight __cb);

    /**
     * 跨服竞技场挑战
     * @param __result The asynchronous result object.
     **/
    public FightResultView end_crossFight(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     **/
    public boolean crossFight_async(AMI_ArenaRank_crossFight __cb, String rivalId);

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean crossFight_async(AMI_ArenaRank_crossFight __cb, String rivalId, java.util.Map<String, String> __ctx);

    /**
     * 跨服竞技场复仇
     **/
    public FightResultView crossRevenge(String rivalId)
        throws NoteException;

    /**
     * 跨服竞技场复仇
     * @param __ctx The Context map to send with the invocation.
     **/
    public FightResultView crossRevenge(String rivalId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 跨服竞技场复仇
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId);

    /**
     * 跨服竞技场复仇
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, java.util.Map<String, String> __ctx);

    /**
     * 跨服竞技场复仇
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, Ice.Callback __cb);

    /**
     * 跨服竞技场复仇
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 跨服竞技场复仇
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, Callback_ArenaRank_crossRevenge __cb);

    /**
     * 跨服竞技场复仇
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, java.util.Map<String, String> __ctx, Callback_ArenaRank_crossRevenge __cb);

    /**
     * 跨服竞技场复仇
     * @param __result The asynchronous result object.
     **/
    public FightResultView end_crossRevenge(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     **/
    public boolean crossRevenge_async(AMI_ArenaRank_crossRevenge __cb, String rivalId);

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean crossRevenge_async(AMI_ArenaRank_crossRevenge __cb, String rivalId, java.util.Map<String, String> __ctx);

    /**
     * 查看跨服竞技场战报
     **/
    public FightMovieView[] getCrossMovie(String id)
        throws NoteException;

    /**
     * 查看跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     **/
    public FightMovieView[] getCrossMovie(String id, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 查看跨服竞技场战报
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id);

    /**
     * 查看跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx);

    /**
     * 查看跨服竞技场战报
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, Ice.Callback __cb);

    /**
     * 查看跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 查看跨服竞技场战报
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, Callback_ArenaRank_getCrossMovie __cb);

    /**
     * 查看跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, Callback_ArenaRank_getCrossMovie __cb);

    /**
     * 查看跨服竞技场战报
     * @param __result The asynchronous result object.
     **/
    public FightMovieView[] end_getCrossMovie(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossMovie_async(AMI_ArenaRank_getCrossMovie __cb, String id);

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossMovie_async(AMI_ArenaRank_getCrossMovie __cb, String id, java.util.Map<String, String> __ctx);

    /**
     * 清除跨服竞技场CD
     **/
    public void clearCrossCD()
        throws NoteException;

    /**
     * 清除跨服竞技场CD
     * @param __ctx The Context map to send with the invocation.
     **/
    public void clearCrossCD(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 清除跨服竞技场CD
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCrossCD();

    /**
     * 清除跨服竞技场CD
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCrossCD(java.util.Map<String, String> __ctx);

    /**
     * 清除跨服竞技场CD
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCrossCD(Ice.Callback __cb);

    /**
     * 清除跨服竞技场CD
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCrossCD(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 清除跨服竞技场CD
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCrossCD(Callback_ArenaRank_clearCrossCD __cb);

    /**
     * 清除跨服竞技场CD
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCrossCD(java.util.Map<String, String> __ctx, Callback_ArenaRank_clearCrossCD __cb);

    /**
     * 清除跨服竞技场CD
     * @param __result The asynchronous result object.
     **/
    public void end_clearCrossCD(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     **/
    public boolean clearCrossCD_async(AMI_ArenaRank_clearCrossCD __cb);

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clearCrossCD_async(AMI_ArenaRank_clearCrossCD __cb, java.util.Map<String, String> __ctx);
}
