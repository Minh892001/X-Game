// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ArenaRank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class ArenaRankPrxHelper extends Ice.ObjectPrxHelperBase implements ArenaRankPrx
{
    private static final String __beginChallenge_name = "beginChallenge";

    public PvpOpponentFormationView beginChallenge(String targetId, String formationId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return beginChallenge(targetId, formationId, null, false);
    }

    public PvpOpponentFormationView beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return beginChallenge(targetId, formationId, __ctx, true);
    }

    private PvpOpponentFormationView beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginChallenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.beginChallenge(targetId, formationId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId)
    {
        return begin_beginChallenge(targetId, formationId, null, false, null);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        return begin_beginChallenge(targetId, formationId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, Ice.Callback __cb)
    {
        return begin_beginChallenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginChallenge(targetId, formationId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, Callback_ArenaRank_beginChallenge __cb)
    {
        return begin_beginChallenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_ArenaRank_beginChallenge __cb)
    {
        return begin_beginChallenge(targetId, formationId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
        try
        {
            __result.__prepare(__beginChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeString(formationId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PvpOpponentFormationView end_beginChallenge(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PvpOpponentFormationView __ret;
            __ret = new PvpOpponentFormationView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginChallenge_async(AMI_ArenaRank_beginChallenge __cb, String targetId, String formationId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(targetId, formationId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginChallenge_async(AMI_ArenaRank_beginChallenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(targetId, formationId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginRevenge_name = "beginRevenge";

    public PvpOpponentFormationView beginRevenge(String targetId, String formationId)
        throws NoteException
    {
        return beginRevenge(targetId, formationId, null, false);
    }

    public PvpOpponentFormationView beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginRevenge(targetId, formationId, __ctx, true);
    }

    private PvpOpponentFormationView beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginRevenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginRevenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.beginRevenge(targetId, formationId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId)
    {
        return begin_beginRevenge(targetId, formationId, null, false, null);
    }

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        return begin_beginRevenge(targetId, formationId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, Ice.Callback __cb)
    {
        return begin_beginRevenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginRevenge(targetId, formationId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, Callback_ArenaRank_beginRevenge __cb)
    {
        return begin_beginRevenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_ArenaRank_beginRevenge __cb)
    {
        return begin_beginRevenge(targetId, formationId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginRevenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginRevenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginRevenge_name, __cb);
        try
        {
            __result.__prepare(__beginRevenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeString(formationId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PvpOpponentFormationView end_beginRevenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginRevenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PvpOpponentFormationView __ret;
            __ret = new PvpOpponentFormationView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginRevenge_async(AMI_ArenaRank_beginRevenge __cb, String targetId, String formationId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginRevenge_name);
            __r = begin_beginRevenge(targetId, formationId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginRevenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginRevenge_async(AMI_ArenaRank_beginRevenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginRevenge_name);
            __r = begin_beginRevenge(targetId, formationId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginRevenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyChallenge_name = "buyChallenge";

    public void buyChallenge()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyChallenge(null, false);
    }

    public void buyChallenge(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyChallenge(__ctx, true);
    }

    private void buyChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyChallenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.buyChallenge(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyChallenge()
    {
        return begin_buyChallenge(null, false, null);
    }

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx)
    {
        return begin_buyChallenge(__ctx, true, null);
    }

    public Ice.AsyncResult begin_buyChallenge(Ice.Callback __cb)
    {
        return begin_buyChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyChallenge(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyChallenge(Callback_ArenaRank_buyChallenge __cb)
    {
        return begin_buyChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, Callback_ArenaRank_buyChallenge __cb)
    {
        return begin_buyChallenge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyChallenge_name, __cb);
        try
        {
            __result.__prepare(__buyChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyChallenge(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyChallenge_async(AMI_ArenaRank_buyChallenge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChallenge_name);
            __r = begin_buyChallenge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyChallenge_async(AMI_ArenaRank_buyChallenge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChallenge_name);
            __r = begin_buyChallenge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyCrossChallenge_name = "buyCrossChallenge";

    /**
     * 购买跨服竞技场挑战次数
     **/
    public void buyCrossChallenge()
        throws NoteException
    {
        buyCrossChallenge(null, false);
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyCrossChallenge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        buyCrossChallenge(__ctx, true);
    }

    private void buyCrossChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyCrossChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyCrossChallenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.buyCrossChallenge(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge()
    {
        return begin_buyCrossChallenge(null, false, null);
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(java.util.Map<String, String> __ctx)
    {
        return begin_buyCrossChallenge(__ctx, true, null);
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(Ice.Callback __cb)
    {
        return begin_buyCrossChallenge(null, false, __cb);
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyCrossChallenge(__ctx, true, __cb);
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(Callback_ArenaRank_buyCrossChallenge __cb)
    {
        return begin_buyCrossChallenge(null, false, __cb);
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyCrossChallenge(java.util.Map<String, String> __ctx, Callback_ArenaRank_buyCrossChallenge __cb)
    {
        return begin_buyCrossChallenge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyCrossChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyCrossChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyCrossChallenge_name, __cb);
        try
        {
            __result.__prepare(__buyCrossChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_buyCrossChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyCrossChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     **/
    public boolean buyCrossChallenge_async(AMI_ArenaRank_buyCrossChallenge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyCrossChallenge_name);
            __r = begin_buyCrossChallenge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyCrossChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 购买跨服竞技场挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyCrossChallenge_async(AMI_ArenaRank_buyCrossChallenge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyCrossChallenge_name);
            __r = begin_buyCrossChallenge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyCrossChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __challenge_name = "challenge";

    public FightResultView challenge(String targetId, String formationId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return challenge(targetId, formationId, null, false);
    }

    public FightResultView challenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return challenge(targetId, formationId, __ctx, true);
    }

    private FightResultView challenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "challenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("challenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.challenge(targetId, formationId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_challenge(String targetId, String formationId)
    {
        return begin_challenge(targetId, formationId, null, false, null);
    }

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        return begin_challenge(targetId, formationId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, Ice.Callback __cb)
    {
        return begin_challenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_challenge(targetId, formationId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, Callback_ArenaRank_challenge __cb)
    {
        return begin_challenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_challenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_ArenaRank_challenge __cb)
    {
        return begin_challenge(targetId, formationId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_challenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__challenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __challenge_name, __cb);
        try
        {
            __result.__prepare(__challenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeString(formationId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public FightResultView end_challenge(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __challenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightResultView __ret;
            __ret = new FightResultView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean challenge_async(AMI_ArenaRank_challenge __cb, String targetId, String formationId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__challenge_name);
            __r = begin_challenge(targetId, formationId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __challenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean challenge_async(AMI_ArenaRank_challenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__challenge_name);
            __r = begin_challenge(targetId, formationId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __challenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clearCD_name = "clearCD";

    public void clearCD()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        clearCD(null, false);
    }

    public void clearCD(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        clearCD(__ctx, true);
    }

    private void clearCD(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearCD", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clearCD");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.clearCD(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_clearCD()
    {
        return begin_clearCD(null, false, null);
    }

    public Ice.AsyncResult begin_clearCD(java.util.Map<String, String> __ctx)
    {
        return begin_clearCD(__ctx, true, null);
    }

    public Ice.AsyncResult begin_clearCD(Ice.Callback __cb)
    {
        return begin_clearCD(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearCD(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearCD(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_clearCD(Callback_ArenaRank_clearCD __cb)
    {
        return begin_clearCD(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearCD(java.util.Map<String, String> __ctx, Callback_ArenaRank_clearCD __cb)
    {
        return begin_clearCD(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearCD(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearCD_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearCD_name, __cb);
        try
        {
            __result.__prepare(__clearCD_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_clearCD(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clearCD_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean clearCD_async(AMI_ArenaRank_clearCD __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearCD_name);
            __r = begin_clearCD(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearCD_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean clearCD_async(AMI_ArenaRank_clearCD __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearCD_name);
            __r = begin_clearCD(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearCD_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clearCrossCD_name = "clearCrossCD";

    /**
     * 清除跨服竞技场CD
     **/
    public void clearCrossCD()
        throws NoteException
    {
        clearCrossCD(null, false);
    }

    /**
     * 清除跨服竞技场CD
     * @param __ctx The Context map to send with the invocation.
     **/
    public void clearCrossCD(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        clearCrossCD(__ctx, true);
    }

    private void clearCrossCD(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearCrossCD", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clearCrossCD");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.clearCrossCD(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearCrossCD()
    {
        return begin_clearCrossCD(null, false, null);
    }

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearCrossCD(java.util.Map<String, String> __ctx)
    {
        return begin_clearCrossCD(__ctx, true, null);
    }

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearCrossCD(Ice.Callback __cb)
    {
        return begin_clearCrossCD(null, false, __cb);
    }

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearCrossCD(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearCrossCD(__ctx, true, __cb);
    }

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearCrossCD(Callback_ArenaRank_clearCrossCD __cb)
    {
        return begin_clearCrossCD(null, false, __cb);
    }

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearCrossCD(java.util.Map<String, String> __ctx, Callback_ArenaRank_clearCrossCD __cb)
    {
        return begin_clearCrossCD(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearCrossCD(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearCrossCD_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearCrossCD_name, __cb);
        try
        {
            __result.__prepare(__clearCrossCD_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_clearCrossCD(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clearCrossCD_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     **/
    public boolean clearCrossCD_async(AMI_ArenaRank_clearCrossCD __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearCrossCD_name);
            __r = begin_clearCrossCD(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearCrossCD_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 清除跨服竞技场CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clearCrossCD_async(AMI_ArenaRank_clearCrossCD __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearCrossCD_name);
            __r = begin_clearCrossCD(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearCrossCD_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __crossFight_name = "crossFight";

    /**
     * 跨服竞技场挑战
     **/
    public FightResultView crossFight(String rivalId)
        throws NoteException
    {
        return crossFight(rivalId, null, false);
    }

    /**
     * 跨服竞技场挑战
     * @param __ctx The Context map to send with the invocation.
     **/
    public FightResultView crossFight(String rivalId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return crossFight(rivalId, __ctx, true);
    }

    private FightResultView crossFight(String rivalId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "crossFight", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("crossFight");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.crossFight(rivalId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId)
    {
        return begin_crossFight(rivalId, null, false, null);
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, java.util.Map<String, String> __ctx)
    {
        return begin_crossFight(rivalId, __ctx, true, null);
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, Ice.Callback __cb)
    {
        return begin_crossFight(rivalId, null, false, __cb);
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_crossFight(rivalId, __ctx, true, __cb);
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, Callback_ArenaRank_crossFight __cb)
    {
        return begin_crossFight(rivalId, null, false, __cb);
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossFight(String rivalId, java.util.Map<String, String> __ctx, Callback_ArenaRank_crossFight __cb)
    {
        return begin_crossFight(rivalId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_crossFight(String rivalId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__crossFight_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __crossFight_name, __cb);
        try
        {
            __result.__prepare(__crossFight_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(rivalId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public FightResultView end_crossFight(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __crossFight_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightResultView __ret;
            __ret = new FightResultView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     **/
    public boolean crossFight_async(AMI_ArenaRank_crossFight __cb, String rivalId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__crossFight_name);
            __r = begin_crossFight(rivalId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __crossFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean crossFight_async(AMI_ArenaRank_crossFight __cb, String rivalId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__crossFight_name);
            __r = begin_crossFight(rivalId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __crossFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __crossRevenge_name = "crossRevenge";

    /**
     * 跨服竞技场复仇
     **/
    public FightResultView crossRevenge(String rivalId)
        throws NoteException
    {
        return crossRevenge(rivalId, null, false);
    }

    /**
     * 跨服竞技场复仇
     * @param __ctx The Context map to send with the invocation.
     **/
    public FightResultView crossRevenge(String rivalId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return crossRevenge(rivalId, __ctx, true);
    }

    private FightResultView crossRevenge(String rivalId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "crossRevenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("crossRevenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.crossRevenge(rivalId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId)
    {
        return begin_crossRevenge(rivalId, null, false, null);
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, java.util.Map<String, String> __ctx)
    {
        return begin_crossRevenge(rivalId, __ctx, true, null);
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, Ice.Callback __cb)
    {
        return begin_crossRevenge(rivalId, null, false, __cb);
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_crossRevenge(rivalId, __ctx, true, __cb);
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, Callback_ArenaRank_crossRevenge __cb)
    {
        return begin_crossRevenge(rivalId, null, false, __cb);
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossRevenge(String rivalId, java.util.Map<String, String> __ctx, Callback_ArenaRank_crossRevenge __cb)
    {
        return begin_crossRevenge(rivalId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_crossRevenge(String rivalId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__crossRevenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __crossRevenge_name, __cb);
        try
        {
            __result.__prepare(__crossRevenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(rivalId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public FightResultView end_crossRevenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __crossRevenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightResultView __ret;
            __ret = new FightResultView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     **/
    public boolean crossRevenge_async(AMI_ArenaRank_crossRevenge __cb, String rivalId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__crossRevenge_name);
            __r = begin_crossRevenge(rivalId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __crossRevenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean crossRevenge_async(AMI_ArenaRank_crossRevenge __cb, String rivalId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__crossRevenge_name);
            __r = begin_crossRevenge(rivalId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __crossRevenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallenge_name = "endChallenge";

    public String endChallenge(String targetId, int resFlag, byte remainHero)
        throws NoteException
    {
        return endChallenge(targetId, resFlag, remainHero, null, false);
    }

    public String endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endChallenge(targetId, resFlag, remainHero, __ctx, true);
    }

    private String endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.endChallenge(targetId, resFlag, remainHero, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, null, false, null);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, Ice.Callback __cb)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, Callback_ArenaRank_endChallenge __cb)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Callback_ArenaRank_endChallenge __cb)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
        try
        {
            __result.__prepare(__endChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeInt(resFlag);
            __os.writeByte(remainHero);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_endChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endChallenge_async(AMI_ArenaRank_endChallenge __cb, String targetId, int resFlag, byte remainHero)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(targetId, resFlag, remainHero, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endChallenge_async(AMI_ArenaRank_endChallenge __cb, String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(targetId, resFlag, remainHero, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endRevenge_name = "endRevenge";

    public String endRevenge(String targetId, int resFlag, byte remainHero)
        throws NoteException
    {
        return endRevenge(targetId, resFlag, remainHero, null, false);
    }

    public String endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endRevenge(targetId, resFlag, remainHero, __ctx, true);
    }

    private String endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endRevenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endRevenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.endRevenge(targetId, resFlag, remainHero, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero)
    {
        return begin_endRevenge(targetId, resFlag, remainHero, null, false, null);
    }

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
    {
        return begin_endRevenge(targetId, resFlag, remainHero, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, Ice.Callback __cb)
    {
        return begin_endRevenge(targetId, resFlag, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endRevenge(targetId, resFlag, remainHero, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, Callback_ArenaRank_endRevenge __cb)
    {
        return begin_endRevenge(targetId, resFlag, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Callback_ArenaRank_endRevenge __cb)
    {
        return begin_endRevenge(targetId, resFlag, remainHero, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endRevenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endRevenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endRevenge_name, __cb);
        try
        {
            __result.__prepare(__endRevenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeInt(resFlag);
            __os.writeByte(remainHero);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_endRevenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endRevenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endRevenge_async(AMI_ArenaRank_endRevenge __cb, String targetId, int resFlag, byte remainHero)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endRevenge_name);
            __r = begin_endRevenge(targetId, resFlag, remainHero, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endRevenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endRevenge_async(AMI_ArenaRank_endRevenge __cb, String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endRevenge_name);
            __r = begin_endRevenge(targetId, resFlag, remainHero, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endRevenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __enterCrossArena_name = "enterCrossArena";

    /**
     * 进入跨服竞技场，return OwnRank的lua
     **/
    public String enterCrossArena()
        throws NoteException
    {
        return enterCrossArena(null, false);
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String enterCrossArena(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return enterCrossArena(__ctx, true);
    }

    private String enterCrossArena(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "enterCrossArena", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("enterCrossArena");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.enterCrossArena(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enterCrossArena()
    {
        return begin_enterCrossArena(null, false, null);
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enterCrossArena(java.util.Map<String, String> __ctx)
    {
        return begin_enterCrossArena(__ctx, true, null);
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enterCrossArena(Ice.Callback __cb)
    {
        return begin_enterCrossArena(null, false, __cb);
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enterCrossArena(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enterCrossArena(__ctx, true, __cb);
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enterCrossArena(Callback_ArenaRank_enterCrossArena __cb)
    {
        return begin_enterCrossArena(null, false, __cb);
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enterCrossArena(java.util.Map<String, String> __ctx, Callback_ArenaRank_enterCrossArena __cb)
    {
        return begin_enterCrossArena(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enterCrossArena(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enterCrossArena_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enterCrossArena_name, __cb);
        try
        {
            __result.__prepare(__enterCrossArena_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_enterCrossArena(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __enterCrossArena_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean enterCrossArena_async(AMI_ArenaRank_enterCrossArena __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enterCrossArena_name);
            __r = begin_enterCrossArena(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enterCrossArena_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean enterCrossArena_async(AMI_ArenaRank_enterCrossArena __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enterCrossArena_name);
            __r = begin_enterCrossArena(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enterCrossArena_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __exchangeItem_name = "exchangeItem";

    public String exchangeItem(int storId)
        throws NoteException
    {
        return exchangeItem(storId, null, false);
    }

    public String exchangeItem(int storId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return exchangeItem(storId, __ctx, true);
    }

    private String exchangeItem(int storId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exchangeItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exchangeItem");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.exchangeItem(storId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_exchangeItem(int storId)
    {
        return begin_exchangeItem(storId, null, false, null);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx)
    {
        return begin_exchangeItem(storId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, Ice.Callback __cb)
    {
        return begin_exchangeItem(storId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exchangeItem(storId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, Callback_ArenaRank_exchangeItem __cb)
    {
        return begin_exchangeItem(storId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx, Callback_ArenaRank_exchangeItem __cb)
    {
        return begin_exchangeItem(storId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exchangeItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
        try
        {
            __result.__prepare(__exchangeItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(storId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_exchangeItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exchangeItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean exchangeItem_async(AMI_ArenaRank_exchangeItem __cb, int storId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeItem_name);
            __r = begin_exchangeItem(storId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean exchangeItem_async(AMI_ArenaRank_exchangeItem __cb, int storId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeItem_name);
            __r = begin_exchangeItem(storId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCrossMovie_name = "getCrossMovie";

    /**
     * 查看跨服竞技场战报
     **/
    public FightMovieView[] getCrossMovie(String id)
        throws NoteException
    {
        return getCrossMovie(id, null, false);
    }

    /**
     * 查看跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     **/
    public FightMovieView[] getCrossMovie(String id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCrossMovie(id, __ctx, true);
    }

    private FightMovieView[] getCrossMovie(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCrossMovie", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCrossMovie");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.getCrossMovie(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id)
    {
        return begin_getCrossMovie(id, null, false, null);
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx)
    {
        return begin_getCrossMovie(id, __ctx, true, null);
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, Ice.Callback __cb)
    {
        return begin_getCrossMovie(id, null, false, __cb);
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCrossMovie(id, __ctx, true, __cb);
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, Callback_ArenaRank_getCrossMovie __cb)
    {
        return begin_getCrossMovie(id, null, false, __cb);
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, Callback_ArenaRank_getCrossMovie __cb)
    {
        return begin_getCrossMovie(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCrossMovie_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCrossMovie_name, __cb);
        try
        {
            __result.__prepare(__getCrossMovie_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public FightMovieView[] end_getCrossMovie(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCrossMovie_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightMovieView[] __ret;
            __ret = FightMovieViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossMovie_async(AMI_ArenaRank_getCrossMovie __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossMovie_name);
            __r = begin_getCrossMovie(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossMovie_async(AMI_ArenaRank_getCrossMovie __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossMovie_name);
            __r = begin_getCrossMovie(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCrossRank_name = "getCrossRank";

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     **/
    public String getCrossRank()
        throws NoteException
    {
        return getCrossRank(null, false);
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getCrossRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCrossRank(__ctx, true);
    }

    private String getCrossRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCrossRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCrossRank");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.getCrossRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossRank()
    {
        return begin_getCrossRank(null, false, null);
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossRank(java.util.Map<String, String> __ctx)
    {
        return begin_getCrossRank(__ctx, true, null);
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossRank(Ice.Callback __cb)
    {
        return begin_getCrossRank(null, false, __cb);
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCrossRank(__ctx, true, __cb);
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossRank(Callback_ArenaRank_getCrossRank __cb)
    {
        return begin_getCrossRank(null, false, __cb);
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossRank(java.util.Map<String, String> __ctx, Callback_ArenaRank_getCrossRank __cb)
    {
        return begin_getCrossRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCrossRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCrossRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCrossRank_name, __cb);
        try
        {
            __result.__prepare(__getCrossRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getCrossRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCrossRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossRank_async(AMI_ArenaRank_getCrossRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossRank_name);
            __r = begin_getCrossRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossRank_async(AMI_ArenaRank_getCrossRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossRank_name);
            __r = begin_getCrossRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCrossReport_name = "getCrossReport";

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     **/
    public String getCrossReport()
        throws NoteException
    {
        return getCrossReport(null, false);
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getCrossReport(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCrossReport(__ctx, true);
    }

    private String getCrossReport(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCrossReport", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCrossReport");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.getCrossReport(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossReport()
    {
        return begin_getCrossReport(null, false, null);
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossReport(java.util.Map<String, String> __ctx)
    {
        return begin_getCrossReport(__ctx, true, null);
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossReport(Ice.Callback __cb)
    {
        return begin_getCrossReport(null, false, __cb);
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossReport(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCrossReport(__ctx, true, __cb);
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossReport(Callback_ArenaRank_getCrossReport __cb)
    {
        return begin_getCrossReport(null, false, __cb);
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossReport(java.util.Map<String, String> __ctx, Callback_ArenaRank_getCrossReport __cb)
    {
        return begin_getCrossReport(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCrossReport(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCrossReport_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCrossReport_name, __cb);
        try
        {
            __result.__prepare(__getCrossReport_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getCrossReport(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCrossReport_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossReport_async(AMI_ArenaRank_getCrossReport __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossReport_name);
            __r = begin_getCrossReport(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossReport_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossReport_async(AMI_ArenaRank_getCrossReport __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossReport_name);
            __r = begin_getCrossReport(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossReport_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFightMovie_name = "getFightMovie";

    public FightMovieView[] getFightMovie(String id)
        throws NoteException
    {
        return getFightMovie(id, null, false);
    }

    public FightMovieView[] getFightMovie(String id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFightMovie(id, __ctx, true);
    }

    private FightMovieView[] getFightMovie(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFightMovie", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFightMovie");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.getFightMovie(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFightMovie(String id)
    {
        return begin_getFightMovie(id, null, false, null);
    }

    public Ice.AsyncResult begin_getFightMovie(String id, java.util.Map<String, String> __ctx)
    {
        return begin_getFightMovie(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getFightMovie(String id, Ice.Callback __cb)
    {
        return begin_getFightMovie(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFightMovie(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFightMovie(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFightMovie(String id, Callback_ArenaRank_getFightMovie __cb)
    {
        return begin_getFightMovie(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFightMovie(String id, java.util.Map<String, String> __ctx, Callback_ArenaRank_getFightMovie __cb)
    {
        return begin_getFightMovie(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFightMovie(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFightMovie_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFightMovie_name, __cb);
        try
        {
            __result.__prepare(__getFightMovie_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public FightMovieView[] end_getFightMovie(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFightMovie_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightMovieView[] __ret;
            __ret = FightMovieViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFightMovie_async(AMI_ArenaRank_getFightMovie __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFightMovie_name);
            __r = begin_getFightMovie(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFightMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFightMovie_async(AMI_ArenaRank_getFightMovie __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFightMovie_name);
            __r = begin_getFightMovie(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFightMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refMallList_name = "refMallList";

    public String refMallList()
        throws NoteException
    {
        return refMallList(null, false);
    }

    public String refMallList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return refMallList(__ctx, true);
    }

    private String refMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refMallList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refMallList");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.refMallList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_refMallList()
    {
        return begin_refMallList(null, false, null);
    }

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx)
    {
        return begin_refMallList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_refMallList(Ice.Callback __cb)
    {
        return begin_refMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refMallList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_refMallList(Callback_ArenaRank_refMallList __cb)
    {
        return begin_refMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx, Callback_ArenaRank_refMallList __cb)
    {
        return begin_refMallList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refMallList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refMallList_name, __cb);
        try
        {
            __result.__prepare(__refMallList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_refMallList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refMallList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean refMallList_async(AMI_ArenaRank_refMallList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refMallList_name);
            __r = begin_refMallList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean refMallList_async(AMI_ArenaRank_refMallList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refMallList_name);
            __r = begin_refMallList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refreshCrossRival_name = "refreshCrossRival";

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     **/
    public String refreshCrossRival()
        throws NoteException
    {
        return refreshCrossRival(null, false);
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String refreshCrossRival(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return refreshCrossRival(__ctx, true);
    }

    private String refreshCrossRival(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refreshCrossRival", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refreshCrossRival");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.refreshCrossRival(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshCrossRival()
    {
        return begin_refreshCrossRival(null, false, null);
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(java.util.Map<String, String> __ctx)
    {
        return begin_refreshCrossRival(__ctx, true, null);
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(Ice.Callback __cb)
    {
        return begin_refreshCrossRival(null, false, __cb);
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refreshCrossRival(__ctx, true, __cb);
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(Callback_ArenaRank_refreshCrossRival __cb)
    {
        return begin_refreshCrossRival(null, false, __cb);
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshCrossRival(java.util.Map<String, String> __ctx, Callback_ArenaRank_refreshCrossRival __cb)
    {
        return begin_refreshCrossRival(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refreshCrossRival(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refreshCrossRival_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refreshCrossRival_name, __cb);
        try
        {
            __result.__prepare(__refreshCrossRival_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_refreshCrossRival(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refreshCrossRival_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean refreshCrossRival_async(AMI_ArenaRank_refreshCrossRival __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshCrossRival_name);
            __r = begin_refreshCrossRival(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshCrossRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean refreshCrossRival_async(AMI_ArenaRank_refreshCrossRival __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshCrossRival_name);
            __r = begin_refreshCrossRival(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshCrossRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __revenge_name = "revenge";

    public FightResultView revenge(String targetId, String formationId)
        throws NoteException
    {
        return revenge(targetId, formationId, null, false);
    }

    public FightResultView revenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return revenge(targetId, formationId, __ctx, true);
    }

    private FightResultView revenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "revenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("revenge");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.revenge(targetId, formationId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_revenge(String targetId, String formationId)
    {
        return begin_revenge(targetId, formationId, null, false, null);
    }

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        return begin_revenge(targetId, formationId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, Ice.Callback __cb)
    {
        return begin_revenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_revenge(targetId, formationId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, Callback_ArenaRank_revenge __cb)
    {
        return begin_revenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_revenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_ArenaRank_revenge __cb)
    {
        return begin_revenge(targetId, formationId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_revenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__revenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __revenge_name, __cb);
        try
        {
            __result.__prepare(__revenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeString(formationId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public FightResultView end_revenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __revenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightResultView __ret;
            __ret = new FightResultView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean revenge_async(AMI_ArenaRank_revenge __cb, String targetId, String formationId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__revenge_name);
            __r = begin_revenge(targetId, formationId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __revenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean revenge_async(AMI_ArenaRank_revenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__revenge_name);
            __r = begin_revenge(targetId, formationId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __revenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __robFightReport_name = "robFightReport";

    public String robFightReport()
        throws NoteException
    {
        return robFightReport(null, false);
    }

    public String robFightReport(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return robFightReport(__ctx, true);
    }

    private String robFightReport(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "robFightReport", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("robFightReport");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.robFightReport(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_robFightReport()
    {
        return begin_robFightReport(null, false, null);
    }

    public Ice.AsyncResult begin_robFightReport(java.util.Map<String, String> __ctx)
    {
        return begin_robFightReport(__ctx, true, null);
    }

    public Ice.AsyncResult begin_robFightReport(Ice.Callback __cb)
    {
        return begin_robFightReport(null, false, __cb);
    }

    public Ice.AsyncResult begin_robFightReport(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_robFightReport(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_robFightReport(Callback_ArenaRank_robFightReport __cb)
    {
        return begin_robFightReport(null, false, __cb);
    }

    public Ice.AsyncResult begin_robFightReport(java.util.Map<String, String> __ctx, Callback_ArenaRank_robFightReport __cb)
    {
        return begin_robFightReport(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_robFightReport(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__robFightReport_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __robFightReport_name, __cb);
        try
        {
            __result.__prepare(__robFightReport_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_robFightReport(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __robFightReport_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean robFightReport_async(AMI_ArenaRank_robFightReport __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__robFightReport_name);
            __r = begin_robFightReport(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __robFightReport_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean robFightReport_async(AMI_ArenaRank_robFightReport __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__robFightReport_name);
            __r = begin_robFightReport(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __robFightReport_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __saveBattle_name = "saveBattle";

    /**
     * 保存跨服竞技场阵容
     **/
    public void saveBattle()
        throws NoteException
    {
        saveBattle(null, false);
    }

    /**
     * 保存跨服竞技场阵容
     * @param __ctx The Context map to send with the invocation.
     **/
    public void saveBattle(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        saveBattle(__ctx, true);
    }

    private void saveBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveBattle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("saveBattle");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.saveBattle(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveBattle()
    {
        return begin_saveBattle(null, false, null);
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveBattle(java.util.Map<String, String> __ctx)
    {
        return begin_saveBattle(__ctx, true, null);
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveBattle(Ice.Callback __cb)
    {
        return begin_saveBattle(null, false, __cb);
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveBattle(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveBattle(__ctx, true, __cb);
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveBattle(Callback_ArenaRank_saveBattle __cb)
    {
        return begin_saveBattle(null, false, __cb);
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveBattle(java.util.Map<String, String> __ctx, Callback_ArenaRank_saveBattle __cb)
    {
        return begin_saveBattle(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveBattle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveBattle_name, __cb);
        try
        {
            __result.__prepare(__saveBattle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_saveBattle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __saveBattle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     **/
    public boolean saveBattle_async(AMI_ArenaRank_saveBattle __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveBattle_name);
            __r = begin_saveBattle(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean saveBattle_async(AMI_ArenaRank_saveBattle __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveBattle_name);
            __r = begin_saveBattle(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __saveGuard_name = "saveGuard";

    public void saveGuard(String guardId)
        throws NoteException
    {
        saveGuard(guardId, null, false);
    }

    public void saveGuard(String guardId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        saveGuard(guardId, __ctx, true);
    }

    private void saveGuard(String guardId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveGuard", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("saveGuard");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.saveGuard(guardId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_saveGuard(String guardId)
    {
        return begin_saveGuard(guardId, null, false, null);
    }

    public Ice.AsyncResult begin_saveGuard(String guardId, java.util.Map<String, String> __ctx)
    {
        return begin_saveGuard(guardId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_saveGuard(String guardId, Ice.Callback __cb)
    {
        return begin_saveGuard(guardId, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveGuard(String guardId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveGuard(guardId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_saveGuard(String guardId, Callback_ArenaRank_saveGuard __cb)
    {
        return begin_saveGuard(guardId, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveGuard(String guardId, java.util.Map<String, String> __ctx, Callback_ArenaRank_saveGuard __cb)
    {
        return begin_saveGuard(guardId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveGuard(String guardId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveGuard_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveGuard_name, __cb);
        try
        {
            __result.__prepare(__saveGuard_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(guardId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_saveGuard(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __saveGuard_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean saveGuard_async(AMI_ArenaRank_saveGuard __cb, String guardId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveGuard_name);
            __r = begin_saveGuard(guardId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveGuard_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean saveGuard_async(AMI_ArenaRank_saveGuard __cb, String guardId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveGuard_name);
            __r = begin_saveGuard(guardId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveGuard_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selHundredRank_name = "selHundredRank";

    public String selHundredRank()
        throws NoteException
    {
        return selHundredRank(null, false);
    }

    public String selHundredRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selHundredRank(__ctx, true);
    }

    private String selHundredRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selHundredRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selHundredRank");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.selHundredRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selHundredRank()
    {
        return begin_selHundredRank(null, false, null);
    }

    public Ice.AsyncResult begin_selHundredRank(java.util.Map<String, String> __ctx)
    {
        return begin_selHundredRank(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selHundredRank(Ice.Callback __cb)
    {
        return begin_selHundredRank(null, false, __cb);
    }

    public Ice.AsyncResult begin_selHundredRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selHundredRank(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selHundredRank(Callback_ArenaRank_selHundredRank __cb)
    {
        return begin_selHundredRank(null, false, __cb);
    }

    public Ice.AsyncResult begin_selHundredRank(java.util.Map<String, String> __ctx, Callback_ArenaRank_selHundredRank __cb)
    {
        return begin_selHundredRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selHundredRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selHundredRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selHundredRank_name, __cb);
        try
        {
            __result.__prepare(__selHundredRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selHundredRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selHundredRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selHundredRank_async(AMI_ArenaRank_selHundredRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selHundredRank_name);
            __r = begin_selHundredRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selHundredRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selHundredRank_async(AMI_ArenaRank_selHundredRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selHundredRank_name);
            __r = begin_selHundredRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selHundredRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selMallList_name = "selMallList";

    public String selMallList()
        throws NoteException
    {
        return selMallList(null, false);
    }

    public String selMallList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selMallList(__ctx, true);
    }

    private String selMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selMallList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selMallList");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.selMallList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selMallList()
    {
        return begin_selMallList(null, false, null);
    }

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx)
    {
        return begin_selMallList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selMallList(Ice.Callback __cb)
    {
        return begin_selMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selMallList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selMallList(Callback_ArenaRank_selMallList __cb)
    {
        return begin_selMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx, Callback_ArenaRank_selMallList __cb)
    {
        return begin_selMallList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selMallList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selMallList_name, __cb);
        try
        {
            __result.__prepare(__selMallList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selMallList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selMallList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selMallList_async(AMI_ArenaRank_selMallList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selMallList_name);
            __r = begin_selMallList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selMallList_async(AMI_ArenaRank_selMallList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selMallList_name);
            __r = begin_selMallList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectRank_name = "selectRank";

    public String selectRank()
        throws NoteException
    {
        return selectRank(null, false);
    }

    public String selectRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selectRank(__ctx, true);
    }

    private String selectRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectRank");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.selectRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectRank()
    {
        return begin_selectRank(null, false, null);
    }

    public Ice.AsyncResult begin_selectRank(java.util.Map<String, String> __ctx)
    {
        return begin_selectRank(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selectRank(Ice.Callback __cb)
    {
        return begin_selectRank(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectRank(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectRank(Callback_ArenaRank_selectRank __cb)
    {
        return begin_selectRank(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectRank(java.util.Map<String, String> __ctx, Callback_ArenaRank_selectRank __cb)
    {
        return begin_selectRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectRank_name, __cb);
        try
        {
            __result.__prepare(__selectRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selectRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectRank_async(AMI_ArenaRank_selectRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectRank_name);
            __r = begin_selectRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectRank_async(AMI_ArenaRank_selectRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectRank_name);
            __r = begin_selectRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectRivalRank_name = "selectRivalRank";

    public String selectRivalRank()
        throws NoteException
    {
        return selectRivalRank(null, false);
    }

    public String selectRivalRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selectRivalRank(__ctx, true);
    }

    private String selectRivalRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectRivalRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectRivalRank");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    return __del.selectRivalRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectRivalRank()
    {
        return begin_selectRivalRank(null, false, null);
    }

    public Ice.AsyncResult begin_selectRivalRank(java.util.Map<String, String> __ctx)
    {
        return begin_selectRivalRank(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selectRivalRank(Ice.Callback __cb)
    {
        return begin_selectRivalRank(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectRivalRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectRivalRank(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectRivalRank(Callback_ArenaRank_selectRivalRank __cb)
    {
        return begin_selectRivalRank(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectRivalRank(java.util.Map<String, String> __ctx, Callback_ArenaRank_selectRivalRank __cb)
    {
        return begin_selectRivalRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectRivalRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectRivalRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectRivalRank_name, __cb);
        try
        {
            __result.__prepare(__selectRivalRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selectRivalRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectRivalRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectRivalRank_async(AMI_ArenaRank_selectRivalRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectRivalRank_name);
            __r = begin_selectRivalRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectRivalRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectRivalRank_async(AMI_ArenaRank_selectRivalRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectRivalRank_name);
            __r = begin_selectRivalRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectRivalRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setSignature_name = "setSignature";

    /**
     * 设置个性签名
     **/
    public void setSignature(String signature)
        throws NoteException
    {
        setSignature(signature, null, false);
    }

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setSignature(String signature, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setSignature(signature, __ctx, true);
    }

    private void setSignature(String signature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setSignature", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setSignature");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.setSignature(signature, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setSignature(String signature)
    {
        return begin_setSignature(signature, null, false, null);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, java.util.Map<String, String> __ctx)
    {
        return begin_setSignature(signature, __ctx, true, null);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, Ice.Callback __cb)
    {
        return begin_setSignature(signature, null, false, __cb);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSignature(signature, __ctx, true, __cb);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, Callback_ArenaRank_setSignature __cb)
    {
        return begin_setSignature(signature, null, false, __cb);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSignature(String signature, java.util.Map<String, String> __ctx, Callback_ArenaRank_setSignature __cb)
    {
        return begin_setSignature(signature, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSignature(String signature, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setSignature_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSignature_name, __cb);
        try
        {
            __result.__prepare(__setSignature_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(signature);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_setSignature(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setSignature_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public boolean setSignature_async(AMI_ArenaRank_setSignature __cb, String signature)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setSignature_name);
            __r = begin_setSignature(signature, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setSignature_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean setSignature_async(AMI_ArenaRank_setSignature __cb, String signature, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setSignature_name);
            __r = begin_setSignature(signature, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setSignature_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setSneer_name = "setSneer";

    public void setSneer(int sneerId, String sneerStr)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        setSneer(sneerId, sneerStr, null, false);
    }

    public void setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        setSneer(sneerId, sneerStr, __ctx, true);
    }

    private void setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setSneer", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setSneer");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.setSneer(sneerId, sneerStr, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr)
    {
        return begin_setSneer(sneerId, sneerStr, null, false, null);
    }

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx)
    {
        return begin_setSneer(sneerId, sneerStr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, Ice.Callback __cb)
    {
        return begin_setSneer(sneerId, sneerStr, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSneer(sneerId, sneerStr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, Callback_ArenaRank_setSneer __cb)
    {
        return begin_setSneer(sneerId, sneerStr, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx, Callback_ArenaRank_setSneer __cb)
    {
        return begin_setSneer(sneerId, sneerStr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSneer(int sneerId, String sneerStr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setSneer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSneer_name, __cb);
        try
        {
            __result.__prepare(__setSneer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(sneerId);
            __os.writeString(sneerStr);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setSneer(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setSneer_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setSneer_async(AMI_ArenaRank_setSneer __cb, int sneerId, String sneerStr)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setSneer_name);
            __r = begin_setSneer(sneerId, sneerStr, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setSneer_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setSneer_async(AMI_ArenaRank_setSneer __cb, int sneerId, String sneerStr, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setSneer_name);
            __r = begin_setSneer(sneerId, sneerStr, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setSneer_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __strutReport_name = "strutReport";

    public void strutReport(String reportId, int channelType, String targetId, String content)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        strutReport(reportId, channelType, targetId, content, null, false);
    }

    public void strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        strutReport(reportId, channelType, targetId, content, __ctx, true);
    }

    private void strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "strutReport", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("strutReport");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.strutReport(reportId, channelType, targetId, content, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content)
    {
        return begin_strutReport(reportId, channelType, targetId, content, null, false, null);
    }

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx)
    {
        return begin_strutReport(reportId, channelType, targetId, content, __ctx, true, null);
    }

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, Ice.Callback __cb)
    {
        return begin_strutReport(reportId, channelType, targetId, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_strutReport(reportId, channelType, targetId, content, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, Callback_ArenaRank_strutReport __cb)
    {
        return begin_strutReport(reportId, channelType, targetId, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx, Callback_ArenaRank_strutReport __cb)
    {
        return begin_strutReport(reportId, channelType, targetId, content, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_strutReport(String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__strutReport_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __strutReport_name, __cb);
        try
        {
            __result.__prepare(__strutReport_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(reportId);
            __os.writeInt(channelType);
            __os.writeString(targetId);
            __os.writeString(content);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_strutReport(Ice.AsyncResult __result)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __strutReport_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoFactionException __ex)
                {
                    throw __ex;
                }
                catch(NoGroupException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean strutReport_async(AMI_ArenaRank_strutReport __cb, String reportId, int channelType, String targetId, String content)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__strutReport_name);
            __r = begin_strutReport(reportId, channelType, targetId, content, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __strutReport_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean strutReport_async(AMI_ArenaRank_strutReport __cb, String reportId, int channelType, String targetId, String content, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__strutReport_name);
            __r = begin_strutReport(reportId, channelType, targetId, content, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __strutReport_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __uploadFightMovie_name = "uploadFightMovie";

    public void uploadFightMovie(String id, FightMovieView movie)
        throws NoteException
    {
        uploadFightMovie(id, movie, null, false);
    }

    public void uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        uploadFightMovie(id, movie, __ctx, true);
    }

    private void uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "uploadFightMovie", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("uploadFightMovie");
                    __delBase = __getDelegate(false);
                    _ArenaRankDel __del = (_ArenaRankDel)__delBase;
                    __del.uploadFightMovie(id, movie, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie)
    {
        return begin_uploadFightMovie(id, movie, null, false, null);
    }

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx)
    {
        return begin_uploadFightMovie(id, movie, __ctx, true, null);
    }

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, Ice.Callback __cb)
    {
        return begin_uploadFightMovie(id, movie, null, false, __cb);
    }

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_uploadFightMovie(id, movie, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, Callback_ArenaRank_uploadFightMovie __cb)
    {
        return begin_uploadFightMovie(id, movie, null, false, __cb);
    }

    public Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx, Callback_ArenaRank_uploadFightMovie __cb)
    {
        return begin_uploadFightMovie(id, movie, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_uploadFightMovie(String id, FightMovieView movie, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__uploadFightMovie_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __uploadFightMovie_name, __cb);
        try
        {
            __result.__prepare(__uploadFightMovie_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            movie.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_uploadFightMovie(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __uploadFightMovie_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean uploadFightMovie_async(AMI_ArenaRank_uploadFightMovie __cb, String id, FightMovieView movie)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__uploadFightMovie_name);
            __r = begin_uploadFightMovie(id, movie, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __uploadFightMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean uploadFightMovie_async(AMI_ArenaRank_uploadFightMovie __cb, String id, FightMovieView movie, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__uploadFightMovie_name);
            __r = begin_uploadFightMovie(id, movie, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __uploadFightMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static ArenaRankPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ArenaRankPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ArenaRankPrx)
            {
                __d = (ArenaRankPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ArenaRankPrxHelper __h = new ArenaRankPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ArenaRankPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ArenaRankPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ArenaRankPrx)
            {
                __d = (ArenaRankPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ArenaRankPrxHelper __h = new ArenaRankPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ArenaRankPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ArenaRankPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ArenaRankPrxHelper __h = new ArenaRankPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ArenaRankPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ArenaRankPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ArenaRankPrxHelper __h = new ArenaRankPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ArenaRankPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ArenaRankPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ArenaRankPrx)
            {
                __d = (ArenaRankPrx)__obj;
            }
            else
            {
                ArenaRankPrxHelper __h = new ArenaRankPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ArenaRankPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ArenaRankPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ArenaRankPrxHelper __h = new ArenaRankPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::ArenaRank"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ArenaRankDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ArenaRankDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ArenaRankPrx v)
    {
        __os.writeProxy(v);
    }

    public static ArenaRankPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ArenaRankPrxHelper result = new ArenaRankPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
