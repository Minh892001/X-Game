// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AttackCastle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface AttackCastlePrx extends Ice.ObjectPrx
{
    public String requestAttackCastles()
        throws NoteException;

    public String requestAttackCastles(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_requestAttackCastles();

    public Ice.AsyncResult begin_requestAttackCastles(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_requestAttackCastles(Ice.Callback __cb);

    public Ice.AsyncResult begin_requestAttackCastles(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_requestAttackCastles(Callback_AttackCastle_requestAttackCastles __cb);

    public Ice.AsyncResult begin_requestAttackCastles(java.util.Map<String, String> __ctx, Callback_AttackCastle_requestAttackCastles __cb);

    public String end_requestAttackCastles(Ice.AsyncResult __result)
        throws NoteException;

    public boolean requestAttackCastles_async(AMI_AttackCastle_requestAttackCastles __cb);

    public boolean requestAttackCastles_async(AMI_AttackCastle_requestAttackCastles __cb, java.util.Map<String, String> __ctx);

    public String resetAttackCastles()
        throws NoteException;

    public String resetAttackCastles(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_resetAttackCastles();

    public Ice.AsyncResult begin_resetAttackCastles(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_resetAttackCastles(Ice.Callback __cb);

    public Ice.AsyncResult begin_resetAttackCastles(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_resetAttackCastles(Callback_AttackCastle_resetAttackCastles __cb);

    public Ice.AsyncResult begin_resetAttackCastles(java.util.Map<String, String> __ctx, Callback_AttackCastle_resetAttackCastles __cb);

    public String end_resetAttackCastles(Ice.AsyncResult __result)
        throws NoteException;

    public boolean resetAttackCastles_async(AMI_AttackCastle_resetAttackCastles __cb);

    public boolean resetAttackCastles_async(AMI_AttackCastle_resetAttackCastles __cb, java.util.Map<String, String> __ctx);

    public String getCastleOpponentView(int castleNodeId)
        throws NoteException;

    public String getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId);

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, Callback_AttackCastle_getCastleOpponentView __cb);

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx, Callback_AttackCastle_getCastleOpponentView __cb);

    public String end_getCastleOpponentView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getCastleOpponentView_async(AMI_AttackCastle_getCastleOpponentView __cb, int castleNodeId);

    public boolean getCastleOpponentView_async(AMI_AttackCastle_getCastleOpponentView __cb, int castleNodeId, java.util.Map<String, String> __ctx);

    public CastleNodeView beginAttackCastle(int castleNodeId)
        throws NoteException;

    public CastleNodeView beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId);

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, Callback_AttackCastle_beginAttackCastle __cb);

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, Callback_AttackCastle_beginAttackCastle __cb);

    public CastleNodeView end_beginAttackCastle(Ice.AsyncResult __result)
        throws NoteException;

    public boolean beginAttackCastle_async(AMI_AttackCastle_beginAttackCastle __cb, int castleNodeId);

    public boolean beginAttackCastle_async(AMI_AttackCastle_beginAttackCastle __cb, int castleNodeId, java.util.Map<String, String> __ctx);

    public void exitAttackCastle(int castleNodeId)
        throws NoteException;

    public void exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId);

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, Ice.Callback __cb);

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, Callback_AttackCastle_exitAttackCastle __cb);

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, Callback_AttackCastle_exitAttackCastle __cb);

    public void end_exitAttackCastle(Ice.AsyncResult __result)
        throws NoteException;

    public boolean exitAttackCastle_async(AMI_AttackCastle_exitAttackCastle __cb, int castleNodeId);

    public boolean exitAttackCastle_async(AMI_AttackCastle_exitAttackCastle __cb, int castleNodeId, java.util.Map<String, String> __ctx);

    public String endAttackCastle(int castleNodeId, byte remainHero)
        throws NoteException;

    public String endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero);

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, Ice.Callback __cb);

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, Callback_AttackCastle_endAttackCastle __cb);

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx, Callback_AttackCastle_endAttackCastle __cb);

    public String end_endAttackCastle(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endAttackCastle_async(AMI_AttackCastle_endAttackCastle __cb, int castleNodeId, byte remainHero);

    public boolean endAttackCastle_async(AMI_AttackCastle_endAttackCastle __cb, int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx);

    public String acceptRewards(int castleNodeId, int startCount)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public String acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount);

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, Ice.Callback __cb);

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, Callback_AttackCastle_acceptRewards __cb);

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx, Callback_AttackCastle_acceptRewards __cb);

    public String end_acceptRewards(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean acceptRewards_async(AMI_AttackCastle_acceptRewards __cb, int castleNodeId, int startCount);

    public boolean acceptRewards_async(AMI_AttackCastle_acceptRewards __cb, int castleNodeId, int startCount, java.util.Map<String, String> __ctx);

    public String shopRewardList()
        throws NoteException;

    public String shopRewardList(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_shopRewardList();

    public Ice.AsyncResult begin_shopRewardList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_shopRewardList(Ice.Callback __cb);

    public Ice.AsyncResult begin_shopRewardList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_shopRewardList(Callback_AttackCastle_shopRewardList __cb);

    public Ice.AsyncResult begin_shopRewardList(java.util.Map<String, String> __ctx, Callback_AttackCastle_shopRewardList __cb);

    public String end_shopRewardList(Ice.AsyncResult __result)
        throws NoteException;

    public boolean shopRewardList_async(AMI_AttackCastle_shopRewardList __cb);

    public boolean shopRewardList_async(AMI_AttackCastle_shopRewardList __cb, java.util.Map<String, String> __ctx);

    public String refreshShopList()
        throws NoteException;

    public String refreshShopList(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_refreshShopList();

    public Ice.AsyncResult begin_refreshShopList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_refreshShopList(Ice.Callback __cb);

    public Ice.AsyncResult begin_refreshShopList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_refreshShopList(Callback_AttackCastle_refreshShopList __cb);

    public Ice.AsyncResult begin_refreshShopList(java.util.Map<String, String> __ctx, Callback_AttackCastle_refreshShopList __cb);

    public String end_refreshShopList(Ice.AsyncResult __result)
        throws NoteException;

    public boolean refreshShopList_async(AMI_AttackCastle_refreshShopList __cb);

    public boolean refreshShopList_async(AMI_AttackCastle_refreshShopList __cb, java.util.Map<String, String> __ctx);

    public String exchangeItem(int itemId)
        throws NoteException;

    public String exchangeItem(int itemId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_exchangeItem(int itemId);

    public Ice.AsyncResult begin_exchangeItem(int itemId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_exchangeItem(int itemId, Ice.Callback __cb);

    public Ice.AsyncResult begin_exchangeItem(int itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_exchangeItem(int itemId, Callback_AttackCastle_exchangeItem __cb);

    public Ice.AsyncResult begin_exchangeItem(int itemId, java.util.Map<String, String> __ctx, Callback_AttackCastle_exchangeItem __cb);

    public String end_exchangeItem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean exchangeItem_async(AMI_AttackCastle_exchangeItem __cb, int itemId);

    public boolean exchangeItem_async(AMI_AttackCastle_exchangeItem __cb, int itemId, java.util.Map<String, String> __ctx);

    public String clearLevel()
        throws NoteException;

    public String clearLevel(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_clearLevel();

    public Ice.AsyncResult begin_clearLevel(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_clearLevel(Ice.Callback __cb);

    public Ice.AsyncResult begin_clearLevel(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_clearLevel(Callback_AttackCastle_clearLevel __cb);

    public Ice.AsyncResult begin_clearLevel(java.util.Map<String, String> __ctx, Callback_AttackCastle_clearLevel __cb);

    public String end_clearLevel(Ice.AsyncResult __result)
        throws NoteException;

    public boolean clearLevel_async(AMI_AttackCastle_clearLevel __cb);

    public boolean clearLevel_async(AMI_AttackCastle_clearLevel __cb, java.util.Map<String, String> __ctx);

    public String refresh(int castleNodeId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public String refresh(int castleNodeId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_refresh(int castleNodeId);

    public Ice.AsyncResult begin_refresh(int castleNodeId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_refresh(int castleNodeId, Ice.Callback __cb);

    public Ice.AsyncResult begin_refresh(int castleNodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_refresh(int castleNodeId, Callback_AttackCastle_refresh __cb);

    public Ice.AsyncResult begin_refresh(int castleNodeId, java.util.Map<String, String> __ctx, Callback_AttackCastle_refresh __cb);

    public String end_refresh(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean refresh_async(AMI_AttackCastle_refresh __cb, int castleNodeId);

    public boolean refresh_async(AMI_AttackCastle_refresh __cb, int castleNodeId, java.util.Map<String, String> __ctx);
}
