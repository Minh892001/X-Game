// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AttackCastle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class AttackCastlePrxHelper extends Ice.ObjectPrxHelperBase implements AttackCastlePrx
{
    private static final String __acceptRewards_name = "acceptRewards";

    public String acceptRewards(int castleNodeId, int startCount)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return acceptRewards(castleNodeId, startCount, null, false);
    }

    public String acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return acceptRewards(castleNodeId, startCount, __ctx, true);
    }

    private String acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptRewards", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptRewards");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.acceptRewards(castleNodeId, startCount, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount)
    {
        return begin_acceptRewards(castleNodeId, startCount, null, false, null);
    }

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx)
    {
        return begin_acceptRewards(castleNodeId, startCount, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, Ice.Callback __cb)
    {
        return begin_acceptRewards(castleNodeId, startCount, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptRewards(castleNodeId, startCount, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, Callback_AttackCastle_acceptRewards __cb)
    {
        return begin_acceptRewards(castleNodeId, startCount, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx, Callback_AttackCastle_acceptRewards __cb)
    {
        return begin_acceptRewards(castleNodeId, startCount, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptRewards(int castleNodeId, int startCount, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptRewards_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptRewards_name, __cb);
        try
        {
            __result.__prepare(__acceptRewards_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(castleNodeId);
            __os.writeInt(startCount);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_acceptRewards(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptRewards_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptRewards_async(AMI_AttackCastle_acceptRewards __cb, int castleNodeId, int startCount)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptRewards_name);
            __r = begin_acceptRewards(castleNodeId, startCount, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptRewards_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptRewards_async(AMI_AttackCastle_acceptRewards __cb, int castleNodeId, int startCount, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptRewards_name);
            __r = begin_acceptRewards(castleNodeId, startCount, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptRewards_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginAttackCastle_name = "beginAttackCastle";

    public CastleNodeView beginAttackCastle(int castleNodeId)
        throws NoteException
    {
        return beginAttackCastle(castleNodeId, null, false);
    }

    public CastleNodeView beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginAttackCastle(castleNodeId, __ctx, true);
    }

    private CastleNodeView beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginAttackCastle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginAttackCastle");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.beginAttackCastle(castleNodeId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId)
    {
        return begin_beginAttackCastle(castleNodeId, null, false, null);
    }

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx)
    {
        return begin_beginAttackCastle(castleNodeId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, Ice.Callback __cb)
    {
        return begin_beginAttackCastle(castleNodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginAttackCastle(castleNodeId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, Callback_AttackCastle_beginAttackCastle __cb)
    {
        return begin_beginAttackCastle(castleNodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, Callback_AttackCastle_beginAttackCastle __cb)
    {
        return begin_beginAttackCastle(castleNodeId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginAttackCastle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginAttackCastle_name, __cb);
        try
        {
            __result.__prepare(__beginAttackCastle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(castleNodeId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CastleNodeView end_beginAttackCastle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginAttackCastle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CastleNodeView __ret;
            __ret = new CastleNodeView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginAttackCastle_async(AMI_AttackCastle_beginAttackCastle __cb, int castleNodeId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginAttackCastle_name);
            __r = begin_beginAttackCastle(castleNodeId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginAttackCastle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginAttackCastle_async(AMI_AttackCastle_beginAttackCastle __cb, int castleNodeId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginAttackCastle_name);
            __r = begin_beginAttackCastle(castleNodeId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginAttackCastle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clearLevel_name = "clearLevel";

    public String clearLevel()
        throws NoteException
    {
        return clearLevel(null, false);
    }

    public String clearLevel(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return clearLevel(__ctx, true);
    }

    private String clearLevel(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearLevel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clearLevel");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.clearLevel(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_clearLevel()
    {
        return begin_clearLevel(null, false, null);
    }

    public Ice.AsyncResult begin_clearLevel(java.util.Map<String, String> __ctx)
    {
        return begin_clearLevel(__ctx, true, null);
    }

    public Ice.AsyncResult begin_clearLevel(Ice.Callback __cb)
    {
        return begin_clearLevel(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearLevel(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearLevel(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_clearLevel(Callback_AttackCastle_clearLevel __cb)
    {
        return begin_clearLevel(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearLevel(java.util.Map<String, String> __ctx, Callback_AttackCastle_clearLevel __cb)
    {
        return begin_clearLevel(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearLevel(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearLevel_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearLevel_name, __cb);
        try
        {
            __result.__prepare(__clearLevel_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_clearLevel(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clearLevel_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean clearLevel_async(AMI_AttackCastle_clearLevel __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearLevel_name);
            __r = begin_clearLevel(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearLevel_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean clearLevel_async(AMI_AttackCastle_clearLevel __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearLevel_name);
            __r = begin_clearLevel(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearLevel_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endAttackCastle_name = "endAttackCastle";

    public String endAttackCastle(int castleNodeId, byte remainHero)
        throws NoteException
    {
        return endAttackCastle(castleNodeId, remainHero, null, false);
    }

    public String endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endAttackCastle(castleNodeId, remainHero, __ctx, true);
    }

    private String endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endAttackCastle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endAttackCastle");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.endAttackCastle(castleNodeId, remainHero, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero)
    {
        return begin_endAttackCastle(castleNodeId, remainHero, null, false, null);
    }

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx)
    {
        return begin_endAttackCastle(castleNodeId, remainHero, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, Ice.Callback __cb)
    {
        return begin_endAttackCastle(castleNodeId, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endAttackCastle(castleNodeId, remainHero, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, Callback_AttackCastle_endAttackCastle __cb)
    {
        return begin_endAttackCastle(castleNodeId, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx, Callback_AttackCastle_endAttackCastle __cb)
    {
        return begin_endAttackCastle(castleNodeId, remainHero, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endAttackCastle(int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endAttackCastle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endAttackCastle_name, __cb);
        try
        {
            __result.__prepare(__endAttackCastle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(castleNodeId);
            __os.writeByte(remainHero);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_endAttackCastle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endAttackCastle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endAttackCastle_async(AMI_AttackCastle_endAttackCastle __cb, int castleNodeId, byte remainHero)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endAttackCastle_name);
            __r = begin_endAttackCastle(castleNodeId, remainHero, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endAttackCastle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endAttackCastle_async(AMI_AttackCastle_endAttackCastle __cb, int castleNodeId, byte remainHero, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endAttackCastle_name);
            __r = begin_endAttackCastle(castleNodeId, remainHero, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endAttackCastle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __exchangeItem_name = "exchangeItem";

    public String exchangeItem(int itemId)
        throws NoteException
    {
        return exchangeItem(itemId, null, false);
    }

    public String exchangeItem(int itemId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return exchangeItem(itemId, __ctx, true);
    }

    private String exchangeItem(int itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exchangeItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exchangeItem");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.exchangeItem(itemId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_exchangeItem(int itemId)
    {
        return begin_exchangeItem(itemId, null, false, null);
    }

    public Ice.AsyncResult begin_exchangeItem(int itemId, java.util.Map<String, String> __ctx)
    {
        return begin_exchangeItem(itemId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_exchangeItem(int itemId, Ice.Callback __cb)
    {
        return begin_exchangeItem(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exchangeItem(itemId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int itemId, Callback_AttackCastle_exchangeItem __cb)
    {
        return begin_exchangeItem(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int itemId, java.util.Map<String, String> __ctx, Callback_AttackCastle_exchangeItem __cb)
    {
        return begin_exchangeItem(itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exchangeItem(int itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exchangeItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
        try
        {
            __result.__prepare(__exchangeItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_exchangeItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exchangeItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean exchangeItem_async(AMI_AttackCastle_exchangeItem __cb, int itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeItem_name);
            __r = begin_exchangeItem(itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean exchangeItem_async(AMI_AttackCastle_exchangeItem __cb, int itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeItem_name);
            __r = begin_exchangeItem(itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __exitAttackCastle_name = "exitAttackCastle";

    public void exitAttackCastle(int castleNodeId)
        throws NoteException
    {
        exitAttackCastle(castleNodeId, null, false);
    }

    public void exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        exitAttackCastle(castleNodeId, __ctx, true);
    }

    private void exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exitAttackCastle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exitAttackCastle");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    __del.exitAttackCastle(castleNodeId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId)
    {
        return begin_exitAttackCastle(castleNodeId, null, false, null);
    }

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx)
    {
        return begin_exitAttackCastle(castleNodeId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, Ice.Callback __cb)
    {
        return begin_exitAttackCastle(castleNodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exitAttackCastle(castleNodeId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, Callback_AttackCastle_exitAttackCastle __cb)
    {
        return begin_exitAttackCastle(castleNodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, Callback_AttackCastle_exitAttackCastle __cb)
    {
        return begin_exitAttackCastle(castleNodeId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exitAttackCastle(int castleNodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exitAttackCastle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exitAttackCastle_name, __cb);
        try
        {
            __result.__prepare(__exitAttackCastle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(castleNodeId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_exitAttackCastle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exitAttackCastle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean exitAttackCastle_async(AMI_AttackCastle_exitAttackCastle __cb, int castleNodeId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exitAttackCastle_name);
            __r = begin_exitAttackCastle(castleNodeId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exitAttackCastle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean exitAttackCastle_async(AMI_AttackCastle_exitAttackCastle __cb, int castleNodeId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exitAttackCastle_name);
            __r = begin_exitAttackCastle(castleNodeId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exitAttackCastle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCastleOpponentView_name = "getCastleOpponentView";

    public String getCastleOpponentView(int castleNodeId)
        throws NoteException
    {
        return getCastleOpponentView(castleNodeId, null, false);
    }

    public String getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCastleOpponentView(castleNodeId, __ctx, true);
    }

    private String getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCastleOpponentView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCastleOpponentView");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.getCastleOpponentView(castleNodeId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId)
    {
        return begin_getCastleOpponentView(castleNodeId, null, false, null);
    }

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx)
    {
        return begin_getCastleOpponentView(castleNodeId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, Ice.Callback __cb)
    {
        return begin_getCastleOpponentView(castleNodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCastleOpponentView(castleNodeId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, Callback_AttackCastle_getCastleOpponentView __cb)
    {
        return begin_getCastleOpponentView(castleNodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx, Callback_AttackCastle_getCastleOpponentView __cb)
    {
        return begin_getCastleOpponentView(castleNodeId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCastleOpponentView(int castleNodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCastleOpponentView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCastleOpponentView_name, __cb);
        try
        {
            __result.__prepare(__getCastleOpponentView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(castleNodeId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getCastleOpponentView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCastleOpponentView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getCastleOpponentView_async(AMI_AttackCastle_getCastleOpponentView __cb, int castleNodeId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCastleOpponentView_name);
            __r = begin_getCastleOpponentView(castleNodeId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCastleOpponentView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getCastleOpponentView_async(AMI_AttackCastle_getCastleOpponentView __cb, int castleNodeId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCastleOpponentView_name);
            __r = begin_getCastleOpponentView(castleNodeId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCastleOpponentView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refresh_name = "refresh";

    public String refresh(int castleNodeId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return refresh(castleNodeId, null, false);
    }

    public String refresh(int castleNodeId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return refresh(castleNodeId, __ctx, true);
    }

    private String refresh(int castleNodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refresh", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refresh");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.refresh(castleNodeId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_refresh(int castleNodeId)
    {
        return begin_refresh(castleNodeId, null, false, null);
    }

    public Ice.AsyncResult begin_refresh(int castleNodeId, java.util.Map<String, String> __ctx)
    {
        return begin_refresh(castleNodeId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_refresh(int castleNodeId, Ice.Callback __cb)
    {
        return begin_refresh(castleNodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_refresh(int castleNodeId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refresh(castleNodeId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_refresh(int castleNodeId, Callback_AttackCastle_refresh __cb)
    {
        return begin_refresh(castleNodeId, null, false, __cb);
    }

    public Ice.AsyncResult begin_refresh(int castleNodeId, java.util.Map<String, String> __ctx, Callback_AttackCastle_refresh __cb)
    {
        return begin_refresh(castleNodeId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refresh(int castleNodeId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refresh_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refresh_name, __cb);
        try
        {
            __result.__prepare(__refresh_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(castleNodeId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_refresh(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refresh_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean refresh_async(AMI_AttackCastle_refresh __cb, int castleNodeId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refresh_name);
            __r = begin_refresh(castleNodeId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refresh_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean refresh_async(AMI_AttackCastle_refresh __cb, int castleNodeId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refresh_name);
            __r = begin_refresh(castleNodeId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refresh_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refreshShopList_name = "refreshShopList";

    public String refreshShopList()
        throws NoteException
    {
        return refreshShopList(null, false);
    }

    public String refreshShopList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return refreshShopList(__ctx, true);
    }

    private String refreshShopList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refreshShopList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refreshShopList");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.refreshShopList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_refreshShopList()
    {
        return begin_refreshShopList(null, false, null);
    }

    public Ice.AsyncResult begin_refreshShopList(java.util.Map<String, String> __ctx)
    {
        return begin_refreshShopList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_refreshShopList(Ice.Callback __cb)
    {
        return begin_refreshShopList(null, false, __cb);
    }

    public Ice.AsyncResult begin_refreshShopList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refreshShopList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_refreshShopList(Callback_AttackCastle_refreshShopList __cb)
    {
        return begin_refreshShopList(null, false, __cb);
    }

    public Ice.AsyncResult begin_refreshShopList(java.util.Map<String, String> __ctx, Callback_AttackCastle_refreshShopList __cb)
    {
        return begin_refreshShopList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refreshShopList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refreshShopList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refreshShopList_name, __cb);
        try
        {
            __result.__prepare(__refreshShopList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_refreshShopList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refreshShopList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean refreshShopList_async(AMI_AttackCastle_refreshShopList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshShopList_name);
            __r = begin_refreshShopList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshShopList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean refreshShopList_async(AMI_AttackCastle_refreshShopList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshShopList_name);
            __r = begin_refreshShopList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshShopList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __requestAttackCastles_name = "requestAttackCastles";

    public String requestAttackCastles()
        throws NoteException
    {
        return requestAttackCastles(null, false);
    }

    public String requestAttackCastles(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return requestAttackCastles(__ctx, true);
    }

    private String requestAttackCastles(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "requestAttackCastles", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("requestAttackCastles");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.requestAttackCastles(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_requestAttackCastles()
    {
        return begin_requestAttackCastles(null, false, null);
    }

    public Ice.AsyncResult begin_requestAttackCastles(java.util.Map<String, String> __ctx)
    {
        return begin_requestAttackCastles(__ctx, true, null);
    }

    public Ice.AsyncResult begin_requestAttackCastles(Ice.Callback __cb)
    {
        return begin_requestAttackCastles(null, false, __cb);
    }

    public Ice.AsyncResult begin_requestAttackCastles(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_requestAttackCastles(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_requestAttackCastles(Callback_AttackCastle_requestAttackCastles __cb)
    {
        return begin_requestAttackCastles(null, false, __cb);
    }

    public Ice.AsyncResult begin_requestAttackCastles(java.util.Map<String, String> __ctx, Callback_AttackCastle_requestAttackCastles __cb)
    {
        return begin_requestAttackCastles(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_requestAttackCastles(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__requestAttackCastles_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __requestAttackCastles_name, __cb);
        try
        {
            __result.__prepare(__requestAttackCastles_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_requestAttackCastles(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __requestAttackCastles_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean requestAttackCastles_async(AMI_AttackCastle_requestAttackCastles __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__requestAttackCastles_name);
            __r = begin_requestAttackCastles(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __requestAttackCastles_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean requestAttackCastles_async(AMI_AttackCastle_requestAttackCastles __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__requestAttackCastles_name);
            __r = begin_requestAttackCastles(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __requestAttackCastles_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __resetAttackCastles_name = "resetAttackCastles";

    public String resetAttackCastles()
        throws NoteException
    {
        return resetAttackCastles(null, false);
    }

    public String resetAttackCastles(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return resetAttackCastles(__ctx, true);
    }

    private String resetAttackCastles(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "resetAttackCastles", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("resetAttackCastles");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.resetAttackCastles(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_resetAttackCastles()
    {
        return begin_resetAttackCastles(null, false, null);
    }

    public Ice.AsyncResult begin_resetAttackCastles(java.util.Map<String, String> __ctx)
    {
        return begin_resetAttackCastles(__ctx, true, null);
    }

    public Ice.AsyncResult begin_resetAttackCastles(Ice.Callback __cb)
    {
        return begin_resetAttackCastles(null, false, __cb);
    }

    public Ice.AsyncResult begin_resetAttackCastles(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_resetAttackCastles(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_resetAttackCastles(Callback_AttackCastle_resetAttackCastles __cb)
    {
        return begin_resetAttackCastles(null, false, __cb);
    }

    public Ice.AsyncResult begin_resetAttackCastles(java.util.Map<String, String> __ctx, Callback_AttackCastle_resetAttackCastles __cb)
    {
        return begin_resetAttackCastles(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_resetAttackCastles(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__resetAttackCastles_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __resetAttackCastles_name, __cb);
        try
        {
            __result.__prepare(__resetAttackCastles_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_resetAttackCastles(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __resetAttackCastles_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean resetAttackCastles_async(AMI_AttackCastle_resetAttackCastles __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetAttackCastles_name);
            __r = begin_resetAttackCastles(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetAttackCastles_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean resetAttackCastles_async(AMI_AttackCastle_resetAttackCastles __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetAttackCastles_name);
            __r = begin_resetAttackCastles(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetAttackCastles_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __shopRewardList_name = "shopRewardList";

    public String shopRewardList()
        throws NoteException
    {
        return shopRewardList(null, false);
    }

    public String shopRewardList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return shopRewardList(__ctx, true);
    }

    private String shopRewardList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "shopRewardList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("shopRewardList");
                    __delBase = __getDelegate(false);
                    _AttackCastleDel __del = (_AttackCastleDel)__delBase;
                    return __del.shopRewardList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_shopRewardList()
    {
        return begin_shopRewardList(null, false, null);
    }

    public Ice.AsyncResult begin_shopRewardList(java.util.Map<String, String> __ctx)
    {
        return begin_shopRewardList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_shopRewardList(Ice.Callback __cb)
    {
        return begin_shopRewardList(null, false, __cb);
    }

    public Ice.AsyncResult begin_shopRewardList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shopRewardList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shopRewardList(Callback_AttackCastle_shopRewardList __cb)
    {
        return begin_shopRewardList(null, false, __cb);
    }

    public Ice.AsyncResult begin_shopRewardList(java.util.Map<String, String> __ctx, Callback_AttackCastle_shopRewardList __cb)
    {
        return begin_shopRewardList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shopRewardList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__shopRewardList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shopRewardList_name, __cb);
        try
        {
            __result.__prepare(__shopRewardList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_shopRewardList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __shopRewardList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean shopRewardList_async(AMI_AttackCastle_shopRewardList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__shopRewardList_name);
            __r = begin_shopRewardList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __shopRewardList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean shopRewardList_async(AMI_AttackCastle_shopRewardList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__shopRewardList_name);
            __r = begin_shopRewardList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __shopRewardList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static AttackCastlePrx checkedCast(Ice.ObjectPrx __obj)
    {
        AttackCastlePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AttackCastlePrx)
            {
                __d = (AttackCastlePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    AttackCastlePrxHelper __h = new AttackCastlePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AttackCastlePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        AttackCastlePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AttackCastlePrx)
            {
                __d = (AttackCastlePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    AttackCastlePrxHelper __h = new AttackCastlePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AttackCastlePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AttackCastlePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    AttackCastlePrxHelper __h = new AttackCastlePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AttackCastlePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        AttackCastlePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    AttackCastlePrxHelper __h = new AttackCastlePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AttackCastlePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        AttackCastlePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AttackCastlePrx)
            {
                __d = (AttackCastlePrx)__obj;
            }
            else
            {
                AttackCastlePrxHelper __h = new AttackCastlePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static AttackCastlePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AttackCastlePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            AttackCastlePrxHelper __h = new AttackCastlePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::AttackCastle"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _AttackCastleDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _AttackCastleDelD();
    }

    public static void __write(IceInternal.BasicStream __os, AttackCastlePrx v)
    {
        __os.writeProxy(v);
    }

    public static AttackCastlePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            AttackCastlePrxHelper result = new AttackCastlePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
