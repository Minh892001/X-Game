// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AttackCastle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class AttackCastleView implements java.lang.Cloneable, java.io.Serializable
{
    public int currentNodeId;

    public int attackCount;

    public long resetTime;

    public int prestige;

    public boolean clear;

    public int clearVipLevel;

    public CastleNodeView[] castleNodes;

    public AttackCastleView()
    {
    }

    public AttackCastleView(int currentNodeId, int attackCount, long resetTime, int prestige, boolean clear, int clearVipLevel, CastleNodeView[] castleNodes)
    {
        this.currentNodeId = currentNodeId;
        this.attackCount = attackCount;
        this.resetTime = resetTime;
        this.prestige = prestige;
        this.clear = clear;
        this.clearVipLevel = clearVipLevel;
        this.castleNodes = castleNodes;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AttackCastleView _r = null;
        if(rhs instanceof AttackCastleView)
        {
            _r = (AttackCastleView)rhs;
        }

        if(_r != null)
        {
            if(currentNodeId != _r.currentNodeId)
            {
                return false;
            }
            if(attackCount != _r.attackCount)
            {
                return false;
            }
            if(resetTime != _r.resetTime)
            {
                return false;
            }
            if(prestige != _r.prestige)
            {
                return false;
            }
            if(clear != _r.clear)
            {
                return false;
            }
            if(clearVipLevel != _r.clearVipLevel)
            {
                return false;
            }
            if(!java.util.Arrays.equals(castleNodes, _r.castleNodes))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::AttackCastleView");
        __h = IceInternal.HashUtil.hashAdd(__h, currentNodeId);
        __h = IceInternal.HashUtil.hashAdd(__h, attackCount);
        __h = IceInternal.HashUtil.hashAdd(__h, resetTime);
        __h = IceInternal.HashUtil.hashAdd(__h, prestige);
        __h = IceInternal.HashUtil.hashAdd(__h, clear);
        __h = IceInternal.HashUtil.hashAdd(__h, clearVipLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, castleNodes);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(currentNodeId);
        __os.writeInt(attackCount);
        __os.writeLong(resetTime);
        __os.writeInt(prestige);
        __os.writeBool(clear);
        __os.writeInt(clearVipLevel);
        CastleNodeViewSeqHelper.write(__os, castleNodes);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        currentNodeId = __is.readInt();
        attackCount = __is.readInt();
        resetTime = __is.readLong();
        prestige = __is.readInt();
        clear = __is.readBool();
        clearVipLevel = __is.readInt();
        castleNodes = CastleNodeViewSeqHelper.read(__is);
    }

    public static final long serialVersionUID = 1306328444L;
}
