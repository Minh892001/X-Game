// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AuctionHouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class AuctionHouseItemView implements java.lang.Cloneable, java.io.Serializable
{
    public String id;

    public ItemView name;

    public long basePrice;

    public long nextPrice;

    public long fixedPrice;

    public AuctionRoleView[] seller;

    public AuctionRoleView[] bidder;

    public long lastTime;

    public AuctionHouseItemView()
    {
    }

    public AuctionHouseItemView(String id, ItemView name, long basePrice, long nextPrice, long fixedPrice, AuctionRoleView[] seller, AuctionRoleView[] bidder, long lastTime)
    {
        this.id = id;
        this.name = name;
        this.basePrice = basePrice;
        this.nextPrice = nextPrice;
        this.fixedPrice = fixedPrice;
        this.seller = seller;
        this.bidder = bidder;
        this.lastTime = lastTime;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AuctionHouseItemView _r = null;
        if(rhs instanceof AuctionHouseItemView)
        {
            _r = (AuctionHouseItemView)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(basePrice != _r.basePrice)
            {
                return false;
            }
            if(nextPrice != _r.nextPrice)
            {
                return false;
            }
            if(fixedPrice != _r.fixedPrice)
            {
                return false;
            }
            if(!java.util.Arrays.equals(seller, _r.seller))
            {
                return false;
            }
            if(!java.util.Arrays.equals(bidder, _r.bidder))
            {
                return false;
            }
            if(lastTime != _r.lastTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::AuctionHouseItemView");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, basePrice);
        __h = IceInternal.HashUtil.hashAdd(__h, nextPrice);
        __h = IceInternal.HashUtil.hashAdd(__h, fixedPrice);
        __h = IceInternal.HashUtil.hashAdd(__h, seller);
        __h = IceInternal.HashUtil.hashAdd(__h, bidder);
        __h = IceInternal.HashUtil.hashAdd(__h, lastTime);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(id);
        name.__write(__os);
        __os.writeLong(basePrice);
        __os.writeLong(nextPrice);
        __os.writeLong(fixedPrice);
        AuctionRoleViewSeqHelper.write(__os, seller);
        AuctionRoleViewSeqHelper.write(__os, bidder);
        __os.writeLong(lastTime);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readString();
        name = new ItemView();
        name.__read(__is);
        basePrice = __is.readLong();
        nextPrice = __is.readLong();
        fixedPrice = __is.readLong();
        seller = AuctionRoleViewSeqHelper.read(__is);
        bidder = AuctionRoleViewSeqHelper.read(__is);
        lastTime = __is.readLong();
    }

    public static final long serialVersionUID = -960963674L;
}
