// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AuctionHouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface AuctionHousePrx extends Ice.ObjectPrx
{
    public long exchange(long price)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public long exchange(long price, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_exchange(long price);

    public Ice.AsyncResult begin_exchange(long price, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_exchange(long price, Ice.Callback __cb);

    public Ice.AsyncResult begin_exchange(long price, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_exchange(long price, Callback_AuctionHouse_exchange __cb);

    public Ice.AsyncResult begin_exchange(long price, java.util.Map<String, String> __ctx, Callback_AuctionHouse_exchange __cb);

    public long end_exchange(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean exchange_async(AMI_AuctionHouse_exchange __cb, long price);

    public boolean exchange_async(AMI_AuctionHouse_exchange __cb, long price, java.util.Map<String, String> __ctx);

    public String getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException;

    public String getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction);

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, Callback_AuctionHouse_getAuctionHouseItems __cb);

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Callback_AuctionHouse_getAuctionHouseItems __cb);

    public String end_getAuctionHouseItems(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getAuctionHouseItems_async(AMI_AuctionHouse_getAuctionHouseItems __cb, int startIndex, int count, int type, String key, int quality, int direction);

    public boolean getAuctionHouseItems_async(AMI_AuctionHouse_getAuctionHouseItems __cb, int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx);

    public String getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException;

    public String getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction);

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, Ice.Callback __cb);

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, Callback_AuctionHouse_getMyBidItems __cb);

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Callback_AuctionHouse_getMyBidItems __cb);

    public String end_getMyBidItems(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getMyBidItems_async(AMI_AuctionHouse_getMyBidItems __cb, int startIndex, int count, int type, String key, int quality, int direction);

    public boolean getMyBidItems_async(AMI_AuctionHouse_getMyBidItems __cb, int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx);

    public String getMySellItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException;

    public String getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction);

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, Ice.Callback __cb);

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, Callback_AuctionHouse_getMySellItems __cb);

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Callback_AuctionHouse_getMySellItems __cb);

    public String end_getMySellItems(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getMySellItems_async(AMI_AuctionHouse_getMySellItems __cb, int startIndex, int count, int type, String key, int quality, int direction);

    public boolean getMySellItems_async(AMI_AuctionHouse_getMySellItems __cb, int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx);

    public void sell(String id, int num, long price, long fixedPrice)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public void sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice);

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, Ice.Callback __cb);

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, Callback_AuctionHouse_sell __cb);

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx, Callback_AuctionHouse_sell __cb);

    public void end_sell(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean sell_async(AMI_AuctionHouse_sell __cb, String id, int num, long price, long fixedPrice);

    public boolean sell_async(AMI_AuctionHouse_sell __cb, String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx);

    public AuctionBuyResView buy(String id, int type)
        throws NoteException;

    public AuctionBuyResView buy(String id, int type, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_buy(String id, int type);

    public Ice.AsyncResult begin_buy(String id, int type, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buy(String id, int type, Ice.Callback __cb);

    public Ice.AsyncResult begin_buy(String id, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buy(String id, int type, Callback_AuctionHouse_buy __cb);

    public Ice.AsyncResult begin_buy(String id, int type, java.util.Map<String, String> __ctx, Callback_AuctionHouse_buy __cb);

    public AuctionBuyResView end_buy(Ice.AsyncResult __result)
        throws NoteException;

    public boolean buy_async(AMI_AuctionHouse_buy __cb, String id, int type);

    public boolean buy_async(AMI_AuctionHouse_buy __cb, String id, int type, java.util.Map<String, String> __ctx);

    public void cancelAuction(String id)
        throws NoteException;

    public void cancelAuction(String id, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_cancelAuction(String id);

    public Ice.AsyncResult begin_cancelAuction(String id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_cancelAuction(String id, Ice.Callback __cb);

    public Ice.AsyncResult begin_cancelAuction(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_cancelAuction(String id, Callback_AuctionHouse_cancelAuction __cb);

    public Ice.AsyncResult begin_cancelAuction(String id, java.util.Map<String, String> __ctx, Callback_AuctionHouse_cancelAuction __cb);

    public void end_cancelAuction(Ice.AsyncResult __result)
        throws NoteException;

    public boolean cancelAuction_async(AMI_AuctionHouse_cancelAuction __cb, String id);

    public boolean cancelAuction_async(AMI_AuctionHouse_cancelAuction __cb, String id, java.util.Map<String, String> __ctx);

    public String getAuctionShops()
        throws NoteException;

    public String getAuctionShops(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getAuctionShops();

    public Ice.AsyncResult begin_getAuctionShops(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAuctionShops(Ice.Callback __cb);

    public Ice.AsyncResult begin_getAuctionShops(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAuctionShops(Callback_AuctionHouse_getAuctionShops __cb);

    public Ice.AsyncResult begin_getAuctionShops(java.util.Map<String, String> __ctx, Callback_AuctionHouse_getAuctionShops __cb);

    public String end_getAuctionShops(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getAuctionShops_async(AMI_AuctionHouse_getAuctionShops __cb);

    public boolean getAuctionShops_async(AMI_AuctionHouse_getAuctionShops __cb, java.util.Map<String, String> __ctx);

    public String refreshAuctionShop()
        throws NoteException;

    public String refreshAuctionShop(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_refreshAuctionShop();

    public Ice.AsyncResult begin_refreshAuctionShop(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_refreshAuctionShop(Ice.Callback __cb);

    public Ice.AsyncResult begin_refreshAuctionShop(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_refreshAuctionShop(Callback_AuctionHouse_refreshAuctionShop __cb);

    public Ice.AsyncResult begin_refreshAuctionShop(java.util.Map<String, String> __ctx, Callback_AuctionHouse_refreshAuctionShop __cb);

    public String end_refreshAuctionShop(Ice.AsyncResult __result)
        throws NoteException;

    public boolean refreshAuctionShop_async(AMI_AuctionHouse_refreshAuctionShop __cb);

    public boolean refreshAuctionShop_async(AMI_AuctionHouse_refreshAuctionShop __cb, java.util.Map<String, String> __ctx);

    public long buyAuctionShop(int id)
        throws NoteException;

    public long buyAuctionShop(int id, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_buyAuctionShop(int id);

    public Ice.AsyncResult begin_buyAuctionShop(int id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyAuctionShop(int id, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyAuctionShop(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyAuctionShop(int id, Callback_AuctionHouse_buyAuctionShop __cb);

    public Ice.AsyncResult begin_buyAuctionShop(int id, java.util.Map<String, String> __ctx, Callback_AuctionHouse_buyAuctionShop __cb);

    public long end_buyAuctionShop(Ice.AsyncResult __result)
        throws NoteException;

    public boolean buyAuctionShop_async(AMI_AuctionHouse_buyAuctionShop __cb, int id);

    public boolean buyAuctionShop_async(AMI_AuctionHouse_buyAuctionShop __cb, int id, java.util.Map<String, String> __ctx);
}
