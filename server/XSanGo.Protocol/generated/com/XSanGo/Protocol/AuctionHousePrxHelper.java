// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AuctionHouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class AuctionHousePrxHelper extends Ice.ObjectPrxHelperBase implements AuctionHousePrx
{
    private static final String __buy_name = "buy";

    public AuctionBuyResView buy(String id, int type)
        throws NoteException
    {
        return buy(id, type, null, false);
    }

    public AuctionBuyResView buy(String id, int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return buy(id, type, __ctx, true);
    }

    private AuctionBuyResView buy(String id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buy");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    return __del.buy(id, type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buy(String id, int type)
    {
        return begin_buy(id, type, null, false, null);
    }

    public Ice.AsyncResult begin_buy(String id, int type, java.util.Map<String, String> __ctx)
    {
        return begin_buy(id, type, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buy(String id, int type, Ice.Callback __cb)
    {
        return begin_buy(id, type, null, false, __cb);
    }

    public Ice.AsyncResult begin_buy(String id, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buy(id, type, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buy(String id, int type, Callback_AuctionHouse_buy __cb)
    {
        return begin_buy(id, type, null, false, __cb);
    }

    public Ice.AsyncResult begin_buy(String id, int type, java.util.Map<String, String> __ctx, Callback_AuctionHouse_buy __cb)
    {
        return begin_buy(id, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buy(String id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buy_name, __cb);
        try
        {
            __result.__prepare(__buy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public AuctionBuyResView end_buy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            AuctionBuyResView __ret;
            __ret = new AuctionBuyResView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buy_async(AMI_AuctionHouse_buy __cb, String id, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buy_name);
            __r = begin_buy(id, type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buy_async(AMI_AuctionHouse_buy __cb, String id, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buy_name);
            __r = begin_buy(id, type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyAuctionShop_name = "buyAuctionShop";

    public long buyAuctionShop(int id)
        throws NoteException
    {
        return buyAuctionShop(id, null, false);
    }

    public long buyAuctionShop(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return buyAuctionShop(id, __ctx, true);
    }

    private long buyAuctionShop(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyAuctionShop", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyAuctionShop");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    return __del.buyAuctionShop(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyAuctionShop(int id)
    {
        return begin_buyAuctionShop(id, null, false, null);
    }

    public Ice.AsyncResult begin_buyAuctionShop(int id, java.util.Map<String, String> __ctx)
    {
        return begin_buyAuctionShop(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buyAuctionShop(int id, Ice.Callback __cb)
    {
        return begin_buyAuctionShop(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyAuctionShop(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyAuctionShop(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyAuctionShop(int id, Callback_AuctionHouse_buyAuctionShop __cb)
    {
        return begin_buyAuctionShop(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyAuctionShop(int id, java.util.Map<String, String> __ctx, Callback_AuctionHouse_buyAuctionShop __cb)
    {
        return begin_buyAuctionShop(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyAuctionShop(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyAuctionShop_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyAuctionShop_name, __cb);
        try
        {
            __result.__prepare(__buyAuctionShop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public long end_buyAuctionShop(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyAuctionShop_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyAuctionShop_async(AMI_AuctionHouse_buyAuctionShop __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyAuctionShop_name);
            __r = begin_buyAuctionShop(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyAuctionShop_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyAuctionShop_async(AMI_AuctionHouse_buyAuctionShop __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyAuctionShop_name);
            __r = begin_buyAuctionShop(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyAuctionShop_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __cancelAuction_name = "cancelAuction";

    public void cancelAuction(String id)
        throws NoteException
    {
        cancelAuction(id, null, false);
    }

    public void cancelAuction(String id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        cancelAuction(id, __ctx, true);
    }

    private void cancelAuction(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "cancelAuction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("cancelAuction");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    __del.cancelAuction(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_cancelAuction(String id)
    {
        return begin_cancelAuction(id, null, false, null);
    }

    public Ice.AsyncResult begin_cancelAuction(String id, java.util.Map<String, String> __ctx)
    {
        return begin_cancelAuction(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_cancelAuction(String id, Ice.Callback __cb)
    {
        return begin_cancelAuction(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_cancelAuction(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cancelAuction(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_cancelAuction(String id, Callback_AuctionHouse_cancelAuction __cb)
    {
        return begin_cancelAuction(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_cancelAuction(String id, java.util.Map<String, String> __ctx, Callback_AuctionHouse_cancelAuction __cb)
    {
        return begin_cancelAuction(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_cancelAuction(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__cancelAuction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __cancelAuction_name, __cb);
        try
        {
            __result.__prepare(__cancelAuction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_cancelAuction(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __cancelAuction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean cancelAuction_async(AMI_AuctionHouse_cancelAuction __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__cancelAuction_name);
            __r = begin_cancelAuction(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __cancelAuction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean cancelAuction_async(AMI_AuctionHouse_cancelAuction __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__cancelAuction_name);
            __r = begin_cancelAuction(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __cancelAuction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __exchange_name = "exchange";

    public long exchange(long price)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return exchange(price, null, false);
    }

    public long exchange(long price, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return exchange(price, __ctx, true);
    }

    private long exchange(long price, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exchange", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exchange");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    return __del.exchange(price, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_exchange(long price)
    {
        return begin_exchange(price, null, false, null);
    }

    public Ice.AsyncResult begin_exchange(long price, java.util.Map<String, String> __ctx)
    {
        return begin_exchange(price, __ctx, true, null);
    }

    public Ice.AsyncResult begin_exchange(long price, Ice.Callback __cb)
    {
        return begin_exchange(price, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchange(long price, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exchange(price, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_exchange(long price, Callback_AuctionHouse_exchange __cb)
    {
        return begin_exchange(price, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchange(long price, java.util.Map<String, String> __ctx, Callback_AuctionHouse_exchange __cb)
    {
        return begin_exchange(price, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exchange(long price, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exchange_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exchange_name, __cb);
        try
        {
            __result.__prepare(__exchange_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(price);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public long end_exchange(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exchange_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean exchange_async(AMI_AuctionHouse_exchange __cb, long price)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchange_name);
            __r = begin_exchange(price, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchange_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean exchange_async(AMI_AuctionHouse_exchange __cb, long price, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchange_name);
            __r = begin_exchange(price, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchange_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getAuctionHouseItems_name = "getAuctionHouseItems";

    public String getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException
    {
        return getAuctionHouseItems(startIndex, count, type, key, quality, direction, null, false);
    }

    public String getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getAuctionHouseItems(startIndex, count, type, key, quality, direction, __ctx, true);
    }

    private String getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAuctionHouseItems", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAuctionHouseItems");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    return __del.getAuctionHouseItems(startIndex, count, type, key, quality, direction, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction)
    {
        return begin_getAuctionHouseItems(startIndex, count, type, key, quality, direction, null, false, null);
    }

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
    {
        return begin_getAuctionHouseItems(startIndex, count, type, key, quality, direction, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, Ice.Callback __cb)
    {
        return begin_getAuctionHouseItems(startIndex, count, type, key, quality, direction, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAuctionHouseItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, Callback_AuctionHouse_getAuctionHouseItems __cb)
    {
        return begin_getAuctionHouseItems(startIndex, count, type, key, quality, direction, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Callback_AuctionHouse_getAuctionHouseItems __cb)
    {
        return begin_getAuctionHouseItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAuctionHouseItems_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAuctionHouseItems_name, __cb);
        try
        {
            __result.__prepare(__getAuctionHouseItems_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(startIndex);
            __os.writeInt(count);
            __os.writeInt(type);
            __os.writeString(key);
            __os.writeInt(quality);
            __os.writeInt(direction);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getAuctionHouseItems(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getAuctionHouseItems_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getAuctionHouseItems_async(AMI_AuctionHouse_getAuctionHouseItems __cb, int startIndex, int count, int type, String key, int quality, int direction)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAuctionHouseItems_name);
            __r = begin_getAuctionHouseItems(startIndex, count, type, key, quality, direction, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAuctionHouseItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getAuctionHouseItems_async(AMI_AuctionHouse_getAuctionHouseItems __cb, int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAuctionHouseItems_name);
            __r = begin_getAuctionHouseItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAuctionHouseItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getAuctionShops_name = "getAuctionShops";

    public String getAuctionShops()
        throws NoteException
    {
        return getAuctionShops(null, false);
    }

    public String getAuctionShops(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getAuctionShops(__ctx, true);
    }

    private String getAuctionShops(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAuctionShops", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAuctionShops");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    return __del.getAuctionShops(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAuctionShops()
    {
        return begin_getAuctionShops(null, false, null);
    }

    public Ice.AsyncResult begin_getAuctionShops(java.util.Map<String, String> __ctx)
    {
        return begin_getAuctionShops(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAuctionShops(Ice.Callback __cb)
    {
        return begin_getAuctionShops(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAuctionShops(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAuctionShops(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAuctionShops(Callback_AuctionHouse_getAuctionShops __cb)
    {
        return begin_getAuctionShops(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAuctionShops(java.util.Map<String, String> __ctx, Callback_AuctionHouse_getAuctionShops __cb)
    {
        return begin_getAuctionShops(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAuctionShops(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAuctionShops_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAuctionShops_name, __cb);
        try
        {
            __result.__prepare(__getAuctionShops_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getAuctionShops(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getAuctionShops_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getAuctionShops_async(AMI_AuctionHouse_getAuctionShops __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAuctionShops_name);
            __r = begin_getAuctionShops(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAuctionShops_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getAuctionShops_async(AMI_AuctionHouse_getAuctionShops __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAuctionShops_name);
            __r = begin_getAuctionShops(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAuctionShops_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getMyBidItems_name = "getMyBidItems";

    public String getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException
    {
        return getMyBidItems(startIndex, count, type, key, quality, direction, null, false);
    }

    public String getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getMyBidItems(startIndex, count, type, key, quality, direction, __ctx, true);
    }

    private String getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMyBidItems", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMyBidItems");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    return __del.getMyBidItems(startIndex, count, type, key, quality, direction, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction)
    {
        return begin_getMyBidItems(startIndex, count, type, key, quality, direction, null, false, null);
    }

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
    {
        return begin_getMyBidItems(startIndex, count, type, key, quality, direction, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, Ice.Callback __cb)
    {
        return begin_getMyBidItems(startIndex, count, type, key, quality, direction, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMyBidItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, Callback_AuctionHouse_getMyBidItems __cb)
    {
        return begin_getMyBidItems(startIndex, count, type, key, quality, direction, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Callback_AuctionHouse_getMyBidItems __cb)
    {
        return begin_getMyBidItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMyBidItems_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMyBidItems_name, __cb);
        try
        {
            __result.__prepare(__getMyBidItems_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(startIndex);
            __os.writeInt(count);
            __os.writeInt(type);
            __os.writeString(key);
            __os.writeInt(quality);
            __os.writeInt(direction);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getMyBidItems(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getMyBidItems_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getMyBidItems_async(AMI_AuctionHouse_getMyBidItems __cb, int startIndex, int count, int type, String key, int quality, int direction)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMyBidItems_name);
            __r = begin_getMyBidItems(startIndex, count, type, key, quality, direction, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMyBidItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getMyBidItems_async(AMI_AuctionHouse_getMyBidItems __cb, int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMyBidItems_name);
            __r = begin_getMyBidItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMyBidItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getMySellItems_name = "getMySellItems";

    public String getMySellItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException
    {
        return getMySellItems(startIndex, count, type, key, quality, direction, null, false);
    }

    public String getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getMySellItems(startIndex, count, type, key, quality, direction, __ctx, true);
    }

    private String getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMySellItems", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMySellItems");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    return __del.getMySellItems(startIndex, count, type, key, quality, direction, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction)
    {
        return begin_getMySellItems(startIndex, count, type, key, quality, direction, null, false, null);
    }

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
    {
        return begin_getMySellItems(startIndex, count, type, key, quality, direction, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, Ice.Callback __cb)
    {
        return begin_getMySellItems(startIndex, count, type, key, quality, direction, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMySellItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, Callback_AuctionHouse_getMySellItems __cb)
    {
        return begin_getMySellItems(startIndex, count, type, key, quality, direction, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, Callback_AuctionHouse_getMySellItems __cb)
    {
        return begin_getMySellItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMySellItems(int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMySellItems_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMySellItems_name, __cb);
        try
        {
            __result.__prepare(__getMySellItems_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(startIndex);
            __os.writeInt(count);
            __os.writeInt(type);
            __os.writeString(key);
            __os.writeInt(quality);
            __os.writeInt(direction);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getMySellItems(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getMySellItems_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getMySellItems_async(AMI_AuctionHouse_getMySellItems __cb, int startIndex, int count, int type, String key, int quality, int direction)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMySellItems_name);
            __r = begin_getMySellItems(startIndex, count, type, key, quality, direction, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMySellItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getMySellItems_async(AMI_AuctionHouse_getMySellItems __cb, int startIndex, int count, int type, String key, int quality, int direction, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMySellItems_name);
            __r = begin_getMySellItems(startIndex, count, type, key, quality, direction, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMySellItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refreshAuctionShop_name = "refreshAuctionShop";

    public String refreshAuctionShop()
        throws NoteException
    {
        return refreshAuctionShop(null, false);
    }

    public String refreshAuctionShop(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return refreshAuctionShop(__ctx, true);
    }

    private String refreshAuctionShop(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refreshAuctionShop", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refreshAuctionShop");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    return __del.refreshAuctionShop(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_refreshAuctionShop()
    {
        return begin_refreshAuctionShop(null, false, null);
    }

    public Ice.AsyncResult begin_refreshAuctionShop(java.util.Map<String, String> __ctx)
    {
        return begin_refreshAuctionShop(__ctx, true, null);
    }

    public Ice.AsyncResult begin_refreshAuctionShop(Ice.Callback __cb)
    {
        return begin_refreshAuctionShop(null, false, __cb);
    }

    public Ice.AsyncResult begin_refreshAuctionShop(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refreshAuctionShop(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_refreshAuctionShop(Callback_AuctionHouse_refreshAuctionShop __cb)
    {
        return begin_refreshAuctionShop(null, false, __cb);
    }

    public Ice.AsyncResult begin_refreshAuctionShop(java.util.Map<String, String> __ctx, Callback_AuctionHouse_refreshAuctionShop __cb)
    {
        return begin_refreshAuctionShop(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refreshAuctionShop(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refreshAuctionShop_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refreshAuctionShop_name, __cb);
        try
        {
            __result.__prepare(__refreshAuctionShop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_refreshAuctionShop(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refreshAuctionShop_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean refreshAuctionShop_async(AMI_AuctionHouse_refreshAuctionShop __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshAuctionShop_name);
            __r = begin_refreshAuctionShop(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshAuctionShop_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean refreshAuctionShop_async(AMI_AuctionHouse_refreshAuctionShop __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshAuctionShop_name);
            __r = begin_refreshAuctionShop(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshAuctionShop_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sell_name = "sell";

    public void sell(String id, int num, long price, long fixedPrice)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        sell(id, num, price, fixedPrice, null, false);
    }

    public void sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        sell(id, num, price, fixedPrice, __ctx, true);
    }

    private void sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sell", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sell");
                    __delBase = __getDelegate(false);
                    _AuctionHouseDel __del = (_AuctionHouseDel)__delBase;
                    __del.sell(id, num, price, fixedPrice, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice)
    {
        return begin_sell(id, num, price, fixedPrice, null, false, null);
    }

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx)
    {
        return begin_sell(id, num, price, fixedPrice, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, Ice.Callback __cb)
    {
        return begin_sell(id, num, price, fixedPrice, null, false, __cb);
    }

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sell(id, num, price, fixedPrice, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, Callback_AuctionHouse_sell __cb)
    {
        return begin_sell(id, num, price, fixedPrice, null, false, __cb);
    }

    public Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx, Callback_AuctionHouse_sell __cb)
    {
        return begin_sell(id, num, price, fixedPrice, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sell(String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sell_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sell_name, __cb);
        try
        {
            __result.__prepare(__sell_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeInt(num);
            __os.writeLong(price);
            __os.writeLong(fixedPrice);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sell(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sell_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean sell_async(AMI_AuctionHouse_sell __cb, String id, int num, long price, long fixedPrice)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sell_name);
            __r = begin_sell(id, num, price, fixedPrice, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sell_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean sell_async(AMI_AuctionHouse_sell __cb, String id, int num, long price, long fixedPrice, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sell_name);
            __r = begin_sell(id, num, price, fixedPrice, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sell_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static AuctionHousePrx checkedCast(Ice.ObjectPrx __obj)
    {
        AuctionHousePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AuctionHousePrx)
            {
                __d = (AuctionHousePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    AuctionHousePrxHelper __h = new AuctionHousePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AuctionHousePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        AuctionHousePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AuctionHousePrx)
            {
                __d = (AuctionHousePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    AuctionHousePrxHelper __h = new AuctionHousePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AuctionHousePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AuctionHousePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    AuctionHousePrxHelper __h = new AuctionHousePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AuctionHousePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        AuctionHousePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    AuctionHousePrxHelper __h = new AuctionHousePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AuctionHousePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        AuctionHousePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AuctionHousePrx)
            {
                __d = (AuctionHousePrx)__obj;
            }
            else
            {
                AuctionHousePrxHelper __h = new AuctionHousePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static AuctionHousePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AuctionHousePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            AuctionHousePrxHelper __h = new AuctionHousePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::AuctionHouse"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _AuctionHouseDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _AuctionHouseDelD();
    }

    public static void __write(IceInternal.BasicStream __os, AuctionHousePrx v)
    {
        __os.writeProxy(v);
    }

    public static AuctionHousePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            AuctionHousePrxHelper result = new AuctionHousePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
