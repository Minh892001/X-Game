// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Center.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface CenterCallbackPrx extends Ice.ObjectPrx
{
    public void addRole(String account, String roleId, String roleName);

    public void addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName);

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, Ice.Callback __cb);

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, Callback_CenterCallback_addRole __cb);

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx, Callback_CenterCallback_addRole __cb);

    public void end_addRole(Ice.AsyncResult __result);

    public boolean addRole_async(AMI_CenterCallback_addRole __cb, String account, String roleId, String roleName);

    public boolean addRole_async(AMI_CenterCallback_addRole __cb, String account, String roleId, String roleName, java.util.Map<String, String> __ctx);

    public void newMaxLevel(String account, String roleId, String roleName, int newLevel);

    public void newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel);

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, Ice.Callback __cb);

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, Callback_CenterCallback_newMaxLevel __cb);

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx, Callback_CenterCallback_newMaxLevel __cb);

    public void end_newMaxLevel(Ice.AsyncResult __result);

    public boolean newMaxLevel_async(AMI_CenterCallback_newMaxLevel __cb, String account, String roleId, String roleName, int newLevel);

    public boolean newMaxLevel_async(AMI_CenterCallback_newMaxLevel __cb, String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx);

    public void frozenAccount(String account, String remark);

    public void frozenAccount(String account, String remark, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_frozenAccount(String account, String remark);

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, Ice.Callback __cb);

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, Callback_CenterCallback_frozenAccount __cb);

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, java.util.Map<String, String> __ctx, Callback_CenterCallback_frozenAccount __cb);

    public void end_frozenAccount(Ice.AsyncResult __result);

    public boolean frozenAccount_async(AMI_CenterCallback_frozenAccount __cb, String account, String remark);

    public boolean frozenAccount_async(AMI_CenterCallback_frozenAccount __cb, String account, String remark, java.util.Map<String, String> __ctx);

    public Property[] beginUseCDK(String account, String cdk, int roleLevel, String factionName)
        throws NoteException;

    public Property[] beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName);

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, Callback_CenterCallback_beginUseCDK __cb);

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx, Callback_CenterCallback_beginUseCDK __cb);

    public Property[] end_beginUseCDK(Ice.AsyncResult __result)
        throws NoteException;

    public boolean beginUseCDK_async(AMI_CenterCallback_beginUseCDK __cb, String account, String cdk, int roleLevel, String factionName);

    public boolean beginUseCDK_async(AMI_CenterCallback_beginUseCDK __cb, String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx);

    public void endUseCDK(String cdk);

    public void endUseCDK(String cdk, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endUseCDK(String cdk);

    public Ice.AsyncResult begin_endUseCDK(String cdk, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endUseCDK(String cdk, Ice.Callback __cb);

    public Ice.AsyncResult begin_endUseCDK(String cdk, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endUseCDK(String cdk, Callback_CenterCallback_endUseCDK __cb);

    public Ice.AsyncResult begin_endUseCDK(String cdk, java.util.Map<String, String> __ctx, Callback_CenterCallback_endUseCDK __cb);

    public void end_endUseCDK(Ice.AsyncResult __result);

    public boolean endUseCDK_async(AMI_CenterCallback_endUseCDK __cb, String cdk);

    public boolean endUseCDK_async(AMI_CenterCallback_endUseCDK __cb, String cdk, java.util.Map<String, String> __ctx);

    public String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas)
        throws NoteException;

    public String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, Ice.Callback __cb);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, Callback_CenterCallback_getChannelOrderIdFromPayCenter __cb);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx, Callback_CenterCallback_getChannelOrderIdFromPayCenter __cb);

    public String end_getChannelOrderIdFromPayCenter(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getChannelOrderIdFromPayCenter_async(AMI_CenterCallback_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String username, String roleid, String parmas);

    public boolean getChannelOrderIdFromPayCenter_async(AMI_CenterCallback_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx);

    public void createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params)
        throws NoteException;

    public void createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, Ice.Callback __cb);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, Callback_CenterCallback_createOrderForAppleAppStore __cb);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx, Callback_CenterCallback_createOrderForAppleAppStore __cb);

    public void end_createOrderForAppleAppStore(Ice.AsyncResult __result)
        throws NoteException;

    public boolean createOrderForAppleAppStore_async(AMI_CenterCallback_createOrderForAppleAppStore __cb, String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params);

    public boolean createOrderForAppleAppStore_async(AMI_CenterCallback_createOrderForAppleAppStore __cb, String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx);

    public void sendAlarmSMS(AlarmType type, String smsText);

    public void sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText);

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, Callback_CenterCallback_sendAlarmSMS __cb);

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx, Callback_CenterCallback_sendAlarmSMS __cb);

    public void end_sendAlarmSMS(Ice.AsyncResult __result);

    public boolean sendAlarmSMS_async(AMI_CenterCallback_sendAlarmSMS __cb, AlarmType type, String smsText);

    public boolean sendAlarmSMS_async(AMI_CenterCallback_sendAlarmSMS __cb, AlarmType type, String smsText, java.util.Map<String, String> __ctx);
}
