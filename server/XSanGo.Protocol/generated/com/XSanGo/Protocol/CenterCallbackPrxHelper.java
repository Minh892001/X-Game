// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Center.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class CenterCallbackPrxHelper extends Ice.ObjectPrxHelperBase implements CenterCallbackPrx
{
    private static final String __addRole_name = "addRole";

    public void addRole(String account, String roleId, String roleName)
    {
        addRole(account, roleId, roleName, null, false);
    }

    public void addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx)
    {
        addRole(account, roleId, roleName, __ctx, true);
    }

    private void addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addRole", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterCallbackDel __del = (_CenterCallbackDel)__delBase;
                    __del.addRole(account, roleId, roleName, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName)
    {
        return begin_addRole(account, roleId, roleName, null, false, null);
    }

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx)
    {
        return begin_addRole(account, roleId, roleName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, Ice.Callback __cb)
    {
        return begin_addRole(account, roleId, roleName, null, false, __cb);
    }

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addRole(account, roleId, roleName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, Callback_CenterCallback_addRole __cb)
    {
        return begin_addRole(account, roleId, roleName, null, false, __cb);
    }

    public Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx, Callback_CenterCallback_addRole __cb)
    {
        return begin_addRole(account, roleId, roleName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addRole(String account, String roleId, String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addRole_name, __cb);
        try
        {
            __result.__prepare(__addRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(roleId);
            __os.writeString(roleName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addRole(Ice.AsyncResult __result)
    {
        __end(__result, __addRole_name);
    }

    public boolean addRole_async(AMI_CenterCallback_addRole __cb, String account, String roleId, String roleName)
    {
        Ice.AsyncResult __r = begin_addRole(account, roleId, roleName, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean addRole_async(AMI_CenterCallback_addRole __cb, String account, String roleId, String roleName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_addRole(account, roleId, roleName, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __beginUseCDK_name = "beginUseCDK";

    public Property[] beginUseCDK(String account, String cdk, int roleLevel, String factionName)
        throws NoteException
    {
        return beginUseCDK(account, cdk, roleLevel, factionName, null, false);
    }

    public Property[] beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginUseCDK(account, cdk, roleLevel, factionName, __ctx, true);
    }

    private Property[] beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginUseCDK", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginUseCDK");
                    __delBase = __getDelegate(false);
                    _CenterCallbackDel __del = (_CenterCallbackDel)__delBase;
                    return __del.beginUseCDK(account, cdk, roleLevel, factionName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName)
    {
        return begin_beginUseCDK(account, cdk, roleLevel, factionName, null, false, null);
    }

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx)
    {
        return begin_beginUseCDK(account, cdk, roleLevel, factionName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, Ice.Callback __cb)
    {
        return begin_beginUseCDK(account, cdk, roleLevel, factionName, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginUseCDK(account, cdk, roleLevel, factionName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, Callback_CenterCallback_beginUseCDK __cb)
    {
        return begin_beginUseCDK(account, cdk, roleLevel, factionName, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx, Callback_CenterCallback_beginUseCDK __cb)
    {
        return begin_beginUseCDK(account, cdk, roleLevel, factionName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginUseCDK(String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginUseCDK_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginUseCDK_name, __cb);
        try
        {
            __result.__prepare(__beginUseCDK_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(cdk);
            __os.writeInt(roleLevel);
            __os.writeString(factionName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Property[] end_beginUseCDK(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginUseCDK_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Property[] __ret;
            __ret = PropertySeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginUseCDK_async(AMI_CenterCallback_beginUseCDK __cb, String account, String cdk, int roleLevel, String factionName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginUseCDK_name);
            __r = begin_beginUseCDK(account, cdk, roleLevel, factionName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginUseCDK_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginUseCDK_async(AMI_CenterCallback_beginUseCDK __cb, String account, String cdk, int roleLevel, String factionName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginUseCDK_name);
            __r = begin_beginUseCDK(account, cdk, roleLevel, factionName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginUseCDK_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __createOrderForAppleAppStore_name = "createOrderForAppleAppStore";

    public void createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params)
        throws NoteException
    {
        createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, null, false);
    }

    public void createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, __ctx, true);
    }

    private void createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "createOrderForAppleAppStore", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("createOrderForAppleAppStore");
                    __delBase = __getDelegate(false);
                    _CenterCallbackDel __del = (_CenterCallbackDel)__delBase;
                    __del.createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params)
    {
        return begin_createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, null, false, null);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx)
    {
        return begin_createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, __ctx, true, null);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, Ice.Callback __cb)
    {
        return begin_createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, Callback_CenterCallback_createOrderForAppleAppStore __cb)
    {
        return begin_createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx, Callback_CenterCallback_createOrderForAppleAppStore __cb)
    {
        return begin_createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_createOrderForAppleAppStore(String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createOrderForAppleAppStore_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __createOrderForAppleAppStore_name, __cb);
        try
        {
            __result.__prepare(__createOrderForAppleAppStore_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appStoreOrderId);
            __os.writeInt(channel);
            __os.writeInt(appId);
            __os.writeInt(money);
            __os.writeString(itemId);
            __os.writeString(mac);
            __os.writeString(username);
            __os.writeString(roleid);
            __os.writeString(params);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_createOrderForAppleAppStore(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __createOrderForAppleAppStore_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean createOrderForAppleAppStore_async(AMI_CenterCallback_createOrderForAppleAppStore __cb, String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__createOrderForAppleAppStore_name);
            __r = begin_createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __createOrderForAppleAppStore_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean createOrderForAppleAppStore_async(AMI_CenterCallback_createOrderForAppleAppStore __cb, String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__createOrderForAppleAppStore_name);
            __r = begin_createOrderForAppleAppStore(appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __createOrderForAppleAppStore_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endUseCDK_name = "endUseCDK";

    public void endUseCDK(String cdk)
    {
        endUseCDK(cdk, null, false);
    }

    public void endUseCDK(String cdk, java.util.Map<String, String> __ctx)
    {
        endUseCDK(cdk, __ctx, true);
    }

    private void endUseCDK(String cdk, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endUseCDK", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterCallbackDel __del = (_CenterCallbackDel)__delBase;
                    __del.endUseCDK(cdk, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endUseCDK(String cdk)
    {
        return begin_endUseCDK(cdk, null, false, null);
    }

    public Ice.AsyncResult begin_endUseCDK(String cdk, java.util.Map<String, String> __ctx)
    {
        return begin_endUseCDK(cdk, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endUseCDK(String cdk, Ice.Callback __cb)
    {
        return begin_endUseCDK(cdk, null, false, __cb);
    }

    public Ice.AsyncResult begin_endUseCDK(String cdk, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endUseCDK(cdk, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endUseCDK(String cdk, Callback_CenterCallback_endUseCDK __cb)
    {
        return begin_endUseCDK(cdk, null, false, __cb);
    }

    public Ice.AsyncResult begin_endUseCDK(String cdk, java.util.Map<String, String> __ctx, Callback_CenterCallback_endUseCDK __cb)
    {
        return begin_endUseCDK(cdk, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endUseCDK(String cdk, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endUseCDK_name, __cb);
        try
        {
            __result.__prepare(__endUseCDK_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cdk);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_endUseCDK(Ice.AsyncResult __result)
    {
        __end(__result, __endUseCDK_name);
    }

    public boolean endUseCDK_async(AMI_CenterCallback_endUseCDK __cb, String cdk)
    {
        Ice.AsyncResult __r = begin_endUseCDK(cdk, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean endUseCDK_async(AMI_CenterCallback_endUseCDK __cb, String cdk, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_endUseCDK(cdk, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __frozenAccount_name = "frozenAccount";

    public void frozenAccount(String account, String remark)
    {
        frozenAccount(account, remark, null, false);
    }

    public void frozenAccount(String account, String remark, java.util.Map<String, String> __ctx)
    {
        frozenAccount(account, remark, __ctx, true);
    }

    private void frozenAccount(String account, String remark, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "frozenAccount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterCallbackDel __del = (_CenterCallbackDel)__delBase;
                    __del.frozenAccount(account, remark, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_frozenAccount(String account, String remark)
    {
        return begin_frozenAccount(account, remark, null, false, null);
    }

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, java.util.Map<String, String> __ctx)
    {
        return begin_frozenAccount(account, remark, __ctx, true, null);
    }

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, Ice.Callback __cb)
    {
        return begin_frozenAccount(account, remark, null, false, __cb);
    }

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_frozenAccount(account, remark, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, Callback_CenterCallback_frozenAccount __cb)
    {
        return begin_frozenAccount(account, remark, null, false, __cb);
    }

    public Ice.AsyncResult begin_frozenAccount(String account, String remark, java.util.Map<String, String> __ctx, Callback_CenterCallback_frozenAccount __cb)
    {
        return begin_frozenAccount(account, remark, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_frozenAccount(String account, String remark, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __frozenAccount_name, __cb);
        try
        {
            __result.__prepare(__frozenAccount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(remark);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_frozenAccount(Ice.AsyncResult __result)
    {
        __end(__result, __frozenAccount_name);
    }

    public boolean frozenAccount_async(AMI_CenterCallback_frozenAccount __cb, String account, String remark)
    {
        Ice.AsyncResult __r = begin_frozenAccount(account, remark, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean frozenAccount_async(AMI_CenterCallback_frozenAccount __cb, String account, String remark, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_frozenAccount(account, remark, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __getChannelOrderIdFromPayCenter_name = "getChannelOrderIdFromPayCenter";

    public String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas)
        throws NoteException
    {
        return getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, null, false);
    }

    public String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, __ctx, true);
    }

    private String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getChannelOrderIdFromPayCenter", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getChannelOrderIdFromPayCenter");
                    __delBase = __getDelegate(false);
                    _CenterCallbackDel __del = (_CenterCallbackDel)__delBase;
                    return __del.getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, null, false, null);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, Ice.Callback __cb)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, Callback_CenterCallback_getChannelOrderIdFromPayCenter __cb)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx, Callback_CenterCallback_getChannelOrderIdFromPayCenter __cb)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChannelOrderIdFromPayCenter_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChannelOrderIdFromPayCenter_name, __cb);
        try
        {
            __result.__prepare(__getChannelOrderIdFromPayCenter_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(channel);
            __os.writeInt(appId);
            __os.writeInt(money);
            __os.writeString(mac);
            __os.writeString(username);
            __os.writeString(roleid);
            __os.writeString(parmas);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getChannelOrderIdFromPayCenter(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getChannelOrderIdFromPayCenter_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getChannelOrderIdFromPayCenter_async(AMI_CenterCallback_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String username, String roleid, String parmas)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChannelOrderIdFromPayCenter_name);
            __r = begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChannelOrderIdFromPayCenter_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getChannelOrderIdFromPayCenter_async(AMI_CenterCallback_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String username, String roleid, String parmas, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChannelOrderIdFromPayCenter_name);
            __r = begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, username, roleid, parmas, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChannelOrderIdFromPayCenter_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __newMaxLevel_name = "newMaxLevel";

    public void newMaxLevel(String account, String roleId, String roleName, int newLevel)
    {
        newMaxLevel(account, roleId, roleName, newLevel, null, false);
    }

    public void newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx)
    {
        newMaxLevel(account, roleId, roleName, newLevel, __ctx, true);
    }

    private void newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "newMaxLevel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterCallbackDel __del = (_CenterCallbackDel)__delBase;
                    __del.newMaxLevel(account, roleId, roleName, newLevel, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel)
    {
        return begin_newMaxLevel(account, roleId, roleName, newLevel, null, false, null);
    }

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx)
    {
        return begin_newMaxLevel(account, roleId, roleName, newLevel, __ctx, true, null);
    }

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, Ice.Callback __cb)
    {
        return begin_newMaxLevel(account, roleId, roleName, newLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_newMaxLevel(account, roleId, roleName, newLevel, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, Callback_CenterCallback_newMaxLevel __cb)
    {
        return begin_newMaxLevel(account, roleId, roleName, newLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx, Callback_CenterCallback_newMaxLevel __cb)
    {
        return begin_newMaxLevel(account, roleId, roleName, newLevel, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_newMaxLevel(String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __newMaxLevel_name, __cb);
        try
        {
            __result.__prepare(__newMaxLevel_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(roleId);
            __os.writeString(roleName);
            __os.writeInt(newLevel);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_newMaxLevel(Ice.AsyncResult __result)
    {
        __end(__result, __newMaxLevel_name);
    }

    public boolean newMaxLevel_async(AMI_CenterCallback_newMaxLevel __cb, String account, String roleId, String roleName, int newLevel)
    {
        Ice.AsyncResult __r = begin_newMaxLevel(account, roleId, roleName, newLevel, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean newMaxLevel_async(AMI_CenterCallback_newMaxLevel __cb, String account, String roleId, String roleName, int newLevel, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_newMaxLevel(account, roleId, roleName, newLevel, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __sendAlarmSMS_name = "sendAlarmSMS";

    public void sendAlarmSMS(AlarmType type, String smsText)
    {
        sendAlarmSMS(type, smsText, null, false);
    }

    public void sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx)
    {
        sendAlarmSMS(type, smsText, __ctx, true);
    }

    private void sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendAlarmSMS", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterCallbackDel __del = (_CenterCallbackDel)__delBase;
                    __del.sendAlarmSMS(type, smsText, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText)
    {
        return begin_sendAlarmSMS(type, smsText, null, false, null);
    }

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx)
    {
        return begin_sendAlarmSMS(type, smsText, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, Ice.Callback __cb)
    {
        return begin_sendAlarmSMS(type, smsText, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendAlarmSMS(type, smsText, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, Callback_CenterCallback_sendAlarmSMS __cb)
    {
        return begin_sendAlarmSMS(type, smsText, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx, Callback_CenterCallback_sendAlarmSMS __cb)
    {
        return begin_sendAlarmSMS(type, smsText, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendAlarmSMS(AlarmType type, String smsText, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendAlarmSMS_name, __cb);
        try
        {
            __result.__prepare(__sendAlarmSMS_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            type.__write(__os);
            __os.writeString(smsText);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendAlarmSMS(Ice.AsyncResult __result)
    {
        __end(__result, __sendAlarmSMS_name);
    }

    public boolean sendAlarmSMS_async(AMI_CenterCallback_sendAlarmSMS __cb, AlarmType type, String smsText)
    {
        Ice.AsyncResult __r = begin_sendAlarmSMS(type, smsText, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean sendAlarmSMS_async(AMI_CenterCallback_sendAlarmSMS __cb, AlarmType type, String smsText, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_sendAlarmSMS(type, smsText, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static CenterCallbackPrx checkedCast(Ice.ObjectPrx __obj)
    {
        CenterCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CenterCallbackPrx)
            {
                __d = (CenterCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    CenterCallbackPrxHelper __h = new CenterCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CenterCallbackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CenterCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CenterCallbackPrx)
            {
                __d = (CenterCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    CenterCallbackPrxHelper __h = new CenterCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CenterCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CenterCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    CenterCallbackPrxHelper __h = new CenterCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CenterCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CenterCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    CenterCallbackPrxHelper __h = new CenterCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CenterCallbackPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        CenterCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CenterCallbackPrx)
            {
                __d = (CenterCallbackPrx)__obj;
            }
            else
            {
                CenterCallbackPrxHelper __h = new CenterCallbackPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CenterCallbackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CenterCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CenterCallbackPrxHelper __h = new CenterCallbackPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::CenterCallback"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _CenterCallbackDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _CenterCallbackDelD();
    }

    public static void __write(IceInternal.BasicStream __os, CenterCallbackPrx v)
    {
        __os.writeProxy(v);
    }

    public static CenterCallbackPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CenterCallbackPrxHelper result = new CenterCallbackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
