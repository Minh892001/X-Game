// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Center.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class CenterPrxHelper extends Ice.ObjectPrxHelperBase implements CenterPrx
{
    private static final String __charge_name = "charge";

    public void charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency)
    {
        charge(roleId, yuan, params, orderId, currency, null, false);
    }

    public void charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency, java.util.Map<String, String> __ctx)
    {
        charge(roleId, yuan, params, orderId, currency, __ctx, true);
    }

    private void charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "charge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.charge(roleId, yuan, params, orderId, currency, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency)
    {
        return begin_charge(roleId, yuan, params, orderId, currency, null, false, null);
    }

    public Ice.AsyncResult begin_charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency, java.util.Map<String, String> __ctx)
    {
        return begin_charge(roleId, yuan, params, orderId, currency, __ctx, true, null);
    }

    public Ice.AsyncResult begin_charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency, Ice.Callback __cb)
    {
        return begin_charge(roleId, yuan, params, orderId, currency, null, false, __cb);
    }

    public Ice.AsyncResult begin_charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_charge(roleId, yuan, params, orderId, currency, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency, Callback_Center_charge __cb)
    {
        return begin_charge(roleId, yuan, params, orderId, currency, null, false, __cb);
    }

    public Ice.AsyncResult begin_charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency, java.util.Map<String, String> __ctx, Callback_Center_charge __cb)
    {
        return begin_charge(roleId, yuan, params, orderId, currency, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_charge(String roleId, int yuan, CustomChargeParams params, String orderId, String currency, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __charge_name, __cb);
        try
        {
            __result.__prepare(__charge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __os.writeInt(yuan);
            params.__write(__os);
            __os.writeString(orderId);
            __os.writeString(currency);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_charge(Ice.AsyncResult __result)
    {
        __end(__result, __charge_name);
    }

    public boolean charge_async(AMI_Center_charge __cb, String roleId, int yuan, CustomChargeParams params, String orderId, String currency)
    {
        Ice.AsyncResult __r = begin_charge(roleId, yuan, params, orderId, currency, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean charge_async(AMI_Center_charge __cb, String roleId, int yuan, CustomChargeParams params, String orderId, String currency, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_charge(roleId, yuan, params, orderId, currency, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __deleteItem_name = "deleteItem";

    /**
     * 删除物品
     **/
    public String deleteItem(String roleId, String itemId, int num)
    {
        return deleteItem(roleId, itemId, num, null, false);
    }

    /**
     * 删除物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public String deleteItem(String roleId, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return deleteItem(roleId, itemId, num, __ctx, true);
    }

    private String deleteItem(String roleId, String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "deleteItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("deleteItem");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.deleteItem(roleId, itemId, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteItem(String roleId, String itemId, int num)
    {
        return begin_deleteItem(roleId, itemId, num, null, false, null);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteItem(String roleId, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_deleteItem(roleId, itemId, num, __ctx, true, null);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteItem(String roleId, String itemId, int num, Ice.Callback __cb)
    {
        return begin_deleteItem(roleId, itemId, num, null, false, __cb);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteItem(String roleId, String itemId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteItem(roleId, itemId, num, __ctx, true, __cb);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteItem(String roleId, String itemId, int num, Callback_Center_deleteItem __cb)
    {
        return begin_deleteItem(roleId, itemId, num, null, false, __cb);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteItem(String roleId, String itemId, int num, java.util.Map<String, String> __ctx, Callback_Center_deleteItem __cb)
    {
        return begin_deleteItem(roleId, itemId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteItem(String roleId, String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteItem_name, __cb);
        try
        {
            __result.__prepare(__deleteItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __os.writeString(itemId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_deleteItem(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public boolean deleteItem_async(AMI_Center_deleteItem __cb, String roleId, String itemId, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__deleteItem_name);
            __r = begin_deleteItem(roleId, itemId, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __deleteItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean deleteItem_async(AMI_Center_deleteItem __cb, String roleId, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__deleteItem_name);
            __r = begin_deleteItem(roleId, itemId, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __deleteItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __executeGroovyScript_name = "executeGroovyScript";

    public void executeGroovyScript(String script)
        throws NoteException
    {
        executeGroovyScript(script, null, false);
    }

    public void executeGroovyScript(String script, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        executeGroovyScript(script, __ctx, true);
    }

    private void executeGroovyScript(String script, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "executeGroovyScript", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("executeGroovyScript");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.executeGroovyScript(script, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_executeGroovyScript(String script)
    {
        return begin_executeGroovyScript(script, null, false, null);
    }

    public Ice.AsyncResult begin_executeGroovyScript(String script, java.util.Map<String, String> __ctx)
    {
        return begin_executeGroovyScript(script, __ctx, true, null);
    }

    public Ice.AsyncResult begin_executeGroovyScript(String script, Ice.Callback __cb)
    {
        return begin_executeGroovyScript(script, null, false, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyScript(String script, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_executeGroovyScript(script, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyScript(String script, Callback_Center_executeGroovyScript __cb)
    {
        return begin_executeGroovyScript(script, null, false, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyScript(String script, java.util.Map<String, String> __ctx, Callback_Center_executeGroovyScript __cb)
    {
        return begin_executeGroovyScript(script, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_executeGroovyScript(String script, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__executeGroovyScript_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __executeGroovyScript_name, __cb);
        try
        {
            __result.__prepare(__executeGroovyScript_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(script);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_executeGroovyScript(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __executeGroovyScript_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean executeGroovyScript_async(AMI_Center_executeGroovyScript __cb, String script)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__executeGroovyScript_name);
            __r = begin_executeGroovyScript(script, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __executeGroovyScript_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean executeGroovyScript_async(AMI_Center_executeGroovyScript __cb, String script, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__executeGroovyScript_name);
            __r = begin_executeGroovyScript(script, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __executeGroovyScript_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __findRoleViewList_name = "findRoleViewList";

    public String findRoleViewList(String accountName)
    {
        return findRoleViewList(accountName, null, false);
    }

    public String findRoleViewList(String accountName, java.util.Map<String, String> __ctx)
    {
        return findRoleViewList(accountName, __ctx, true);
    }

    private String findRoleViewList(String accountName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findRoleViewList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findRoleViewList");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.findRoleViewList(accountName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findRoleViewList(String accountName)
    {
        return begin_findRoleViewList(accountName, null, false, null);
    }

    public Ice.AsyncResult begin_findRoleViewList(String accountName, java.util.Map<String, String> __ctx)
    {
        return begin_findRoleViewList(accountName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findRoleViewList(String accountName, Ice.Callback __cb)
    {
        return begin_findRoleViewList(accountName, null, false, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewList(String accountName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findRoleViewList(accountName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewList(String accountName, Callback_Center_findRoleViewList __cb)
    {
        return begin_findRoleViewList(accountName, null, false, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewList(String accountName, java.util.Map<String, String> __ctx, Callback_Center_findRoleViewList __cb)
    {
        return begin_findRoleViewList(accountName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findRoleViewList(String accountName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findRoleViewList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findRoleViewList_name, __cb);
        try
        {
            __result.__prepare(__findRoleViewList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(accountName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_findRoleViewList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findRoleViewList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean findRoleViewList_async(AMI_Center_findRoleViewList __cb, String accountName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewList_name);
            __r = begin_findRoleViewList(accountName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean findRoleViewList_async(AMI_Center_findRoleViewList __cb, String accountName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewList_name);
            __r = begin_findRoleViewList(accountName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __findRoleViewListById_name = "findRoleViewListById";

    public String findRoleViewListById(String roleId)
    {
        return findRoleViewListById(roleId, null, false);
    }

    public String findRoleViewListById(String roleId, java.util.Map<String, String> __ctx)
    {
        return findRoleViewListById(roleId, __ctx, true);
    }

    private String findRoleViewListById(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findRoleViewListById", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findRoleViewListById");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.findRoleViewListById(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findRoleViewListById(String roleId)
    {
        return begin_findRoleViewListById(roleId, null, false, null);
    }

    public Ice.AsyncResult begin_findRoleViewListById(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_findRoleViewListById(roleId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findRoleViewListById(String roleId, Ice.Callback __cb)
    {
        return begin_findRoleViewListById(roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewListById(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findRoleViewListById(roleId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewListById(String roleId, Callback_Center_findRoleViewListById __cb)
    {
        return begin_findRoleViewListById(roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewListById(String roleId, java.util.Map<String, String> __ctx, Callback_Center_findRoleViewListById __cb)
    {
        return begin_findRoleViewListById(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findRoleViewListById(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findRoleViewListById_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findRoleViewListById_name, __cb);
        try
        {
            __result.__prepare(__findRoleViewListById_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_findRoleViewListById(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findRoleViewListById_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean findRoleViewListById_async(AMI_Center_findRoleViewListById __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewListById_name);
            __r = begin_findRoleViewListById(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewListById_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean findRoleViewListById_async(AMI_Center_findRoleViewListById __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewListById_name);
            __r = begin_findRoleViewListById(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewListById_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __findRoleViewListByRole_name = "findRoleViewListByRole";

    public String findRoleViewListByRole(String roleName)
    {
        return findRoleViewListByRole(roleName, null, false);
    }

    public String findRoleViewListByRole(String roleName, java.util.Map<String, String> __ctx)
    {
        return findRoleViewListByRole(roleName, __ctx, true);
    }

    private String findRoleViewListByRole(String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findRoleViewListByRole", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findRoleViewListByRole");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.findRoleViewListByRole(roleName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findRoleViewListByRole(String roleName)
    {
        return begin_findRoleViewListByRole(roleName, null, false, null);
    }

    public Ice.AsyncResult begin_findRoleViewListByRole(String roleName, java.util.Map<String, String> __ctx)
    {
        return begin_findRoleViewListByRole(roleName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findRoleViewListByRole(String roleName, Ice.Callback __cb)
    {
        return begin_findRoleViewListByRole(roleName, null, false, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewListByRole(String roleName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findRoleViewListByRole(roleName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewListByRole(String roleName, Callback_Center_findRoleViewListByRole __cb)
    {
        return begin_findRoleViewListByRole(roleName, null, false, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewListByRole(String roleName, java.util.Map<String, String> __ctx, Callback_Center_findRoleViewListByRole __cb)
    {
        return begin_findRoleViewListByRole(roleName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findRoleViewListByRole(String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findRoleViewListByRole_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findRoleViewListByRole_name, __cb);
        try
        {
            __result.__prepare(__findRoleViewListByRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_findRoleViewListByRole(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findRoleViewListByRole_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean findRoleViewListByRole_async(AMI_Center_findRoleViewListByRole __cb, String roleName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewListByRole_name);
            __r = begin_findRoleViewListByRole(roleName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewListByRole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean findRoleViewListByRole_async(AMI_Center_findRoleViewListByRole __cb, String roleName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewListByRole_name);
            __r = begin_findRoleViewListByRole(roleName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewListByRole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __findRoleViewListBySimpleAccount_name = "findRoleViewListBySimpleAccount";

    /**
     * 根据账号模糊查询
     **/
    public String findRoleViewListBySimpleAccount(String account)
    {
        return findRoleViewListBySimpleAccount(account, null, false);
    }

    /**
     * 根据账号模糊查询
     * @param __ctx The Context map to send with the invocation.
     **/
    public String findRoleViewListBySimpleAccount(String account, java.util.Map<String, String> __ctx)
    {
        return findRoleViewListBySimpleAccount(account, __ctx, true);
    }

    private String findRoleViewListBySimpleAccount(String account, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findRoleViewListBySimpleAccount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findRoleViewListBySimpleAccount");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.findRoleViewListBySimpleAccount(account, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleAccount(String account)
    {
        return begin_findRoleViewListBySimpleAccount(account, null, false, null);
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleAccount(String account, java.util.Map<String, String> __ctx)
    {
        return begin_findRoleViewListBySimpleAccount(account, __ctx, true, null);
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleAccount(String account, Ice.Callback __cb)
    {
        return begin_findRoleViewListBySimpleAccount(account, null, false, __cb);
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleAccount(String account, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findRoleViewListBySimpleAccount(account, __ctx, true, __cb);
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleAccount(String account, Callback_Center_findRoleViewListBySimpleAccount __cb)
    {
        return begin_findRoleViewListBySimpleAccount(account, null, false, __cb);
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleAccount(String account, java.util.Map<String, String> __ctx, Callback_Center_findRoleViewListBySimpleAccount __cb)
    {
        return begin_findRoleViewListBySimpleAccount(account, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findRoleViewListBySimpleAccount(String account, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findRoleViewListBySimpleAccount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findRoleViewListBySimpleAccount_name, __cb);
        try
        {
            __result.__prepare(__findRoleViewListBySimpleAccount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_findRoleViewListBySimpleAccount(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findRoleViewListBySimpleAccount_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     **/
    public boolean findRoleViewListBySimpleAccount_async(AMI_Center_findRoleViewListBySimpleAccount __cb, String account)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewListBySimpleAccount_name);
            __r = begin_findRoleViewListBySimpleAccount(account, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewListBySimpleAccount_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean findRoleViewListBySimpleAccount_async(AMI_Center_findRoleViewListBySimpleAccount __cb, String account, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewListBySimpleAccount_name);
            __r = begin_findRoleViewListBySimpleAccount(account, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewListBySimpleAccount_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __findRoleViewListBySimpleRole_name = "findRoleViewListBySimpleRole";

    /**
     * 根据roleName模糊查询
     **/
    public String findRoleViewListBySimpleRole(String roleName)
    {
        return findRoleViewListBySimpleRole(roleName, null, false);
    }

    /**
     * 根据roleName模糊查询
     * @param __ctx The Context map to send with the invocation.
     **/
    public String findRoleViewListBySimpleRole(String roleName, java.util.Map<String, String> __ctx)
    {
        return findRoleViewListBySimpleRole(roleName, __ctx, true);
    }

    private String findRoleViewListBySimpleRole(String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findRoleViewListBySimpleRole", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findRoleViewListBySimpleRole");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.findRoleViewListBySimpleRole(roleName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleRole(String roleName)
    {
        return begin_findRoleViewListBySimpleRole(roleName, null, false, null);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleRole(String roleName, java.util.Map<String, String> __ctx)
    {
        return begin_findRoleViewListBySimpleRole(roleName, __ctx, true, null);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleRole(String roleName, Ice.Callback __cb)
    {
        return begin_findRoleViewListBySimpleRole(roleName, null, false, __cb);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleRole(String roleName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findRoleViewListBySimpleRole(roleName, __ctx, true, __cb);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleRole(String roleName, Callback_Center_findRoleViewListBySimpleRole __cb)
    {
        return begin_findRoleViewListBySimpleRole(roleName, null, false, __cb);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findRoleViewListBySimpleRole(String roleName, java.util.Map<String, String> __ctx, Callback_Center_findRoleViewListBySimpleRole __cb)
    {
        return begin_findRoleViewListBySimpleRole(roleName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findRoleViewListBySimpleRole(String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findRoleViewListBySimpleRole_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findRoleViewListBySimpleRole_name, __cb);
        try
        {
            __result.__prepare(__findRoleViewListBySimpleRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_findRoleViewListBySimpleRole(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findRoleViewListBySimpleRole_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public boolean findRoleViewListBySimpleRole_async(AMI_Center_findRoleViewListBySimpleRole __cb, String roleName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewListBySimpleRole_name);
            __r = begin_findRoleViewListBySimpleRole(roleName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewListBySimpleRole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean findRoleViewListBySimpleRole_async(AMI_Center_findRoleViewListBySimpleRole __cb, String roleName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findRoleViewListBySimpleRole_name);
            __r = begin_findRoleViewListBySimpleRole(roleName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findRoleViewListBySimpleRole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getChargeItem_name = "getChargeItem";

    /**
     * 根据金额获取充值选项
     **/
    public String getChargeItem(int yuan)
    {
        return getChargeItem(yuan, null, false);
    }

    /**
     * 根据金额获取充值选项
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getChargeItem(int yuan, java.util.Map<String, String> __ctx)
    {
        return getChargeItem(yuan, __ctx, true);
    }

    private String getChargeItem(int yuan, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getChargeItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getChargeItem");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getChargeItem(yuan, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChargeItem(int yuan)
    {
        return begin_getChargeItem(yuan, null, false, null);
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChargeItem(int yuan, java.util.Map<String, String> __ctx)
    {
        return begin_getChargeItem(yuan, __ctx, true, null);
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChargeItem(int yuan, Ice.Callback __cb)
    {
        return begin_getChargeItem(yuan, null, false, __cb);
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChargeItem(int yuan, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChargeItem(yuan, __ctx, true, __cb);
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChargeItem(int yuan, Callback_Center_getChargeItem __cb)
    {
        return begin_getChargeItem(yuan, null, false, __cb);
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChargeItem(int yuan, java.util.Map<String, String> __ctx, Callback_Center_getChargeItem __cb)
    {
        return begin_getChargeItem(yuan, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChargeItem(int yuan, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChargeItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChargeItem_name, __cb);
        try
        {
            __result.__prepare(__getChargeItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(yuan);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getChargeItem(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getChargeItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     **/
    public boolean getChargeItem_async(AMI_Center_getChargeItem __cb, int yuan)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChargeItem_name);
            __r = begin_getChargeItem(yuan, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChargeItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getChargeItem_async(AMI_Center_getChargeItem __cb, int yuan, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChargeItem_name);
            __r = begin_getChargeItem(yuan, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChargeItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionList_name = "getFactionList";

    /**
     * 查找公会列表，通过factionName模糊查找
     **/
    public GmFactionView[] getFactionList(String factionName)
        throws NoteException
    {
        return getFactionList(factionName, null, false);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __ctx The Context map to send with the invocation.
     **/
    public GmFactionView[] getFactionList(String factionName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFactionList(factionName, __ctx, true);
    }

    private GmFactionView[] getFactionList(String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionList");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getFactionList(factionName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(String factionName)
    {
        return begin_getFactionList(factionName, null, false, null);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(String factionName, java.util.Map<String, String> __ctx)
    {
        return begin_getFactionList(factionName, __ctx, true, null);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(String factionName, Ice.Callback __cb)
    {
        return begin_getFactionList(factionName, null, false, __cb);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(String factionName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionList(factionName, __ctx, true, __cb);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(String factionName, Callback_Center_getFactionList __cb)
    {
        return begin_getFactionList(factionName, null, false, __cb);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(String factionName, java.util.Map<String, String> __ctx, Callback_Center_getFactionList __cb)
    {
        return begin_getFactionList(factionName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionList(String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionList_name, __cb);
        try
        {
            __result.__prepare(__getFactionList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(factionName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GmFactionView[] end_getFactionList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFactionList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GmFactionView[] __ret;
            __ret = GmFactionViewSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionList_async(AMI_Center_getFactionList __cb, String factionName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionList_name);
            __r = begin_getFactionList(factionName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionList_async(AMI_Center_getFactionList __cb, String factionName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionList_name);
            __r = begin_getFactionList(factionName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionMemberList_name = "getFactionMemberList";

    /**
     * 获取公会所有成员
     **/
    public GmFactionMemberView[] getFactionMemberList(String factionName)
        throws NoteException
    {
        return getFactionMemberList(factionName, null, false);
    }

    /**
     * 获取公会所有成员
     * @param __ctx The Context map to send with the invocation.
     **/
    public GmFactionMemberView[] getFactionMemberList(String factionName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFactionMemberList(factionName, __ctx, true);
    }

    private GmFactionMemberView[] getFactionMemberList(String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionMemberList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionMemberList");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getFactionMemberList(factionName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(String factionName)
    {
        return begin_getFactionMemberList(factionName, null, false, null);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(String factionName, java.util.Map<String, String> __ctx)
    {
        return begin_getFactionMemberList(factionName, __ctx, true, null);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(String factionName, Ice.Callback __cb)
    {
        return begin_getFactionMemberList(factionName, null, false, __cb);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(String factionName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionMemberList(factionName, __ctx, true, __cb);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(String factionName, Callback_Center_getFactionMemberList __cb)
    {
        return begin_getFactionMemberList(factionName, null, false, __cb);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(String factionName, java.util.Map<String, String> __ctx, Callback_Center_getFactionMemberList __cb)
    {
        return begin_getFactionMemberList(factionName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionMemberList(String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionMemberList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionMemberList_name, __cb);
        try
        {
            __result.__prepare(__getFactionMemberList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(factionName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GmFactionMemberView[] end_getFactionMemberList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFactionMemberList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GmFactionMemberView[] __ret;
            __ret = GmFactionMemberViewSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionMemberList_async(AMI_Center_getFactionMemberList __cb, String factionName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionMemberList_name);
            __r = begin_getFactionMemberList(factionName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionMemberList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionMemberList_async(AMI_Center_getFactionMemberList __cb, String factionName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionMemberList_name);
            __r = begin_getFactionMemberList(factionName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionMemberList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getHeroSkillConfig_name = "getHeroSkillConfig";

    public IntString[] getHeroSkillConfig()
        throws NoteException
    {
        return getHeroSkillConfig(null, false);
    }

    public IntString[] getHeroSkillConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getHeroSkillConfig(__ctx, true);
    }

    private IntString[] getHeroSkillConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getHeroSkillConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getHeroSkillConfig");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getHeroSkillConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getHeroSkillConfig()
    {
        return begin_getHeroSkillConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getHeroSkillConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(Ice.Callback __cb)
    {
        return begin_getHeroSkillConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getHeroSkillConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(Callback_Center_getHeroSkillConfig __cb)
    {
        return begin_getHeroSkillConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(java.util.Map<String, String> __ctx, Callback_Center_getHeroSkillConfig __cb)
    {
        return begin_getHeroSkillConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getHeroSkillConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getHeroSkillConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getHeroSkillConfig_name, __cb);
        try
        {
            __result.__prepare(__getHeroSkillConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public IntString[] end_getHeroSkillConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getHeroSkillConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntString[] __ret;
            __ret = IntStringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getHeroSkillConfig_async(AMI_Center_getHeroSkillConfig __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHeroSkillConfig_name);
            __r = begin_getHeroSkillConfig(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHeroSkillConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getHeroSkillConfig_async(AMI_Center_getHeroSkillConfig __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHeroSkillConfig_name);
            __r = begin_getHeroSkillConfig(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHeroSkillConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getItemConfig_name = "getItemConfig";

    public String[] getItemConfig()
        throws NoteException
    {
        return getItemConfig(null, false);
    }

    public String[] getItemConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getItemConfig(__ctx, true);
    }

    private String[] getItemConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getItemConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getItemConfig");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getItemConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getItemConfig()
    {
        return begin_getItemConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getItemConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getItemConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getItemConfig(Ice.Callback __cb)
    {
        return begin_getItemConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getItemConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getItemConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getItemConfig(Callback_Center_getItemConfig __cb)
    {
        return begin_getItemConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getItemConfig(java.util.Map<String, String> __ctx, Callback_Center_getItemConfig __cb)
    {
        return begin_getItemConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getItemConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getItemConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getItemConfig_name, __cb);
        try
        {
            __result.__prepare(__getItemConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getItemConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getItemConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = StringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getItemConfig_async(AMI_Center_getItemConfig __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getItemConfig_name);
            __r = begin_getItemConfig(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getItemConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getItemConfig_async(AMI_Center_getItemConfig __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getItemConfig_name);
            __r = begin_getItemConfig(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getItemConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getPayLog_name = "getPayLog";

    /**
     * 充值记录查询
     **/
    public GmPayView getPayLog(String roleName)
        throws NoteException
    {
        return getPayLog(roleName, null, false);
    }

    /**
     * 充值记录查询
     * @param __ctx The Context map to send with the invocation.
     **/
    public GmPayView getPayLog(String roleName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPayLog(roleName, __ctx, true);
    }

    private GmPayView getPayLog(String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPayLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPayLog");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getPayLog(roleName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPayLog(String roleName)
    {
        return begin_getPayLog(roleName, null, false, null);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPayLog(String roleName, java.util.Map<String, String> __ctx)
    {
        return begin_getPayLog(roleName, __ctx, true, null);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPayLog(String roleName, Ice.Callback __cb)
    {
        return begin_getPayLog(roleName, null, false, __cb);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPayLog(String roleName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPayLog(roleName, __ctx, true, __cb);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPayLog(String roleName, Callback_Center_getPayLog __cb)
    {
        return begin_getPayLog(roleName, null, false, __cb);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPayLog(String roleName, java.util.Map<String, String> __ctx, Callback_Center_getPayLog __cb)
    {
        return begin_getPayLog(roleName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPayLog(String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPayLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPayLog_name, __cb);
        try
        {
            __result.__prepare(__getPayLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GmPayView end_getPayLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPayLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GmPayViewHolder __ret = new GmPayViewHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPlayerSkillConfig_name = "getPlayerSkillConfig";

    public IntString[] getPlayerSkillConfig()
        throws NoteException
    {
        return getPlayerSkillConfig(null, false);
    }

    public IntString[] getPlayerSkillConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPlayerSkillConfig(__ctx, true);
    }

    private IntString[] getPlayerSkillConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPlayerSkillConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPlayerSkillConfig");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getPlayerSkillConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig()
    {
        return begin_getPlayerSkillConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getPlayerSkillConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(Ice.Callback __cb)
    {
        return begin_getPlayerSkillConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPlayerSkillConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(Callback_Center_getPlayerSkillConfig __cb)
    {
        return begin_getPlayerSkillConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(java.util.Map<String, String> __ctx, Callback_Center_getPlayerSkillConfig __cb)
    {
        return begin_getPlayerSkillConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPlayerSkillConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPlayerSkillConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPlayerSkillConfig_name, __cb);
        try
        {
            __result.__prepare(__getPlayerSkillConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public IntString[] end_getPlayerSkillConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPlayerSkillConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntString[] __ret;
            __ret = IntStringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getPlayerSkillConfig_async(AMI_Center_getPlayerSkillConfig __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPlayerSkillConfig_name);
            __r = begin_getPlayerSkillConfig(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPlayerSkillConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getPlayerSkillConfig_async(AMI_Center_getPlayerSkillConfig __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPlayerSkillConfig_name);
            __r = begin_getPlayerSkillConfig(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPlayerSkillConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getPropertyConfig_name = "getPropertyConfig";

    public String[] getPropertyConfig()
        throws NoteException
    {
        return getPropertyConfig(null, false);
    }

    public String[] getPropertyConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPropertyConfig(__ctx, true);
    }

    private String[] getPropertyConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPropertyConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPropertyConfig");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getPropertyConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPropertyConfig()
    {
        return begin_getPropertyConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getPropertyConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getPropertyConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPropertyConfig(Ice.Callback __cb)
    {
        return begin_getPropertyConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPropertyConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPropertyConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPropertyConfig(Callback_Center_getPropertyConfig __cb)
    {
        return begin_getPropertyConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPropertyConfig(java.util.Map<String, String> __ctx, Callback_Center_getPropertyConfig __cb)
    {
        return begin_getPropertyConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPropertyConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPropertyConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPropertyConfig_name, __cb);
        try
        {
            __result.__prepare(__getPropertyConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getPropertyConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPropertyConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = StringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getPropertyConfig_async(AMI_Center_getPropertyConfig __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPropertyConfig_name);
            __r = begin_getPropertyConfig(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPropertyConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getPropertyConfig_async(AMI_Center_getPropertyConfig __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPropertyConfig_name);
            __r = begin_getPropertyConfig(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPropertyConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRankList_name = "getRankList";

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     **/
    public GmRankView[] getRankList(int type)
        throws NoteException
    {
        return getRankList(type, null, false);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __ctx The Context map to send with the invocation.
     **/
    public GmRankView[] getRankList(int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRankList(type, __ctx, true);
    }

    private GmRankView[] getRankList(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRankList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRankList");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getRankList(type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRankList(int type)
    {
        return begin_getRankList(type, null, false, null);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRankList(int type, java.util.Map<String, String> __ctx)
    {
        return begin_getRankList(type, __ctx, true, null);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRankList(int type, Ice.Callback __cb)
    {
        return begin_getRankList(type, null, false, __cb);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRankList(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRankList(type, __ctx, true, __cb);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRankList(int type, Callback_Center_getRankList __cb)
    {
        return begin_getRankList(type, null, false, __cb);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRankList(int type, java.util.Map<String, String> __ctx, Callback_Center_getRankList __cb)
    {
        return begin_getRankList(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRankList(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRankList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRankList_name, __cb);
        try
        {
            __result.__prepare(__getRankList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GmRankView[] end_getRankList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRankList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GmRankView[] __ret;
            __ret = GmRankViewSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getRecentMessages_name = "getRecentMessages";

    public String getRecentMessages()
    {
        return getRecentMessages(null, false);
    }

    public String getRecentMessages(java.util.Map<String, String> __ctx)
    {
        return getRecentMessages(__ctx, true);
    }

    private String getRecentMessages(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRecentMessages", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRecentMessages");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getRecentMessages(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRecentMessages()
    {
        return begin_getRecentMessages(null, false, null);
    }

    public Ice.AsyncResult begin_getRecentMessages(java.util.Map<String, String> __ctx)
    {
        return begin_getRecentMessages(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getRecentMessages(Ice.Callback __cb)
    {
        return begin_getRecentMessages(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRecentMessages(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRecentMessages(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRecentMessages(Callback_Center_getRecentMessages __cb)
    {
        return begin_getRecentMessages(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRecentMessages(java.util.Map<String, String> __ctx, Callback_Center_getRecentMessages __cb)
    {
        return begin_getRecentMessages(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRecentMessages(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRecentMessages_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRecentMessages_name, __cb);
        try
        {
            __result.__prepare(__getRecentMessages_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getRecentMessages(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRecentMessages_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getRecentMessages_async(AMI_Center_getRecentMessages __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRecentMessages_name);
            __r = begin_getRecentMessages(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRecentMessages_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getRecentMessages_async(AMI_Center_getRecentMessages __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRecentMessages_name);
            __r = begin_getRecentMessages(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRecentMessages_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRelationConfig_name = "getRelationConfig";

    public IntString[] getRelationConfig()
        throws NoteException
    {
        return getRelationConfig(null, false);
    }

    public IntString[] getRelationConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRelationConfig(__ctx, true);
    }

    private IntString[] getRelationConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRelationConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRelationConfig");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getRelationConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRelationConfig()
    {
        return begin_getRelationConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getRelationConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getRelationConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getRelationConfig(Ice.Callback __cb)
    {
        return begin_getRelationConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRelationConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRelationConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRelationConfig(Callback_Center_getRelationConfig __cb)
    {
        return begin_getRelationConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRelationConfig(java.util.Map<String, String> __ctx, Callback_Center_getRelationConfig __cb)
    {
        return begin_getRelationConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRelationConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRelationConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRelationConfig_name, __cb);
        try
        {
            __result.__prepare(__getRelationConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public IntString[] end_getRelationConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRelationConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntString[] __ret;
            __ret = IntStringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getRelationConfig_async(AMI_Center_getRelationConfig __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRelationConfig_name);
            __r = begin_getRelationConfig(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRelationConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getRelationConfig_async(AMI_Center_getRelationConfig __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRelationConfig_name);
            __r = begin_getRelationConfig(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRelationConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRoleDB_name = "getRoleDB";

    /**
     * 获取角色相关数据
     **/
    public byte[] getRoleDB(String roleId)
        throws NoteException
    {
        return getRoleDB(roleId, null, false);
    }

    /**
     * 获取角色相关数据
     * @param __ctx The Context map to send with the invocation.
     **/
    public byte[] getRoleDB(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRoleDB(roleId, __ctx, true);
    }

    private byte[] getRoleDB(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRoleDB", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRoleDB");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.getRoleDB(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取角色相关数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleDB(String roleId)
    {
        return begin_getRoleDB(roleId, null, false, null);
    }

    /**
     * 获取角色相关数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleDB(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_getRoleDB(roleId, __ctx, true, null);
    }

    /**
     * 获取角色相关数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleDB(String roleId, Ice.Callback __cb)
    {
        return begin_getRoleDB(roleId, null, false, __cb);
    }

    /**
     * 获取角色相关数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleDB(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRoleDB(roleId, __ctx, true, __cb);
    }

    /**
     * 获取角色相关数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleDB(String roleId, Callback_Center_getRoleDB __cb)
    {
        return begin_getRoleDB(roleId, null, false, __cb);
    }

    /**
     * 获取角色相关数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleDB(String roleId, java.util.Map<String, String> __ctx, Callback_Center_getRoleDB __cb)
    {
        return begin_getRoleDB(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRoleDB(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRoleDB_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRoleDB_name, __cb);
        try
        {
            __result.__prepare(__getRoleDB_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public byte[] end_getRoleDB(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRoleDB_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = ByteSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __kick_name = "kick";

    public void kick(String account, String roleId)
    {
        kick(account, roleId, null, false);
    }

    public void kick(String account, String roleId, java.util.Map<String, String> __ctx)
    {
        kick(account, roleId, __ctx, true);
    }

    private void kick(String account, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "kick", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.kick(account, roleId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_kick(String account, String roleId)
    {
        return begin_kick(account, roleId, null, false, null);
    }

    public Ice.AsyncResult begin_kick(String account, String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_kick(account, roleId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_kick(String account, String roleId, Ice.Callback __cb)
    {
        return begin_kick(account, roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_kick(String account, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_kick(account, roleId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_kick(String account, String roleId, Callback_Center_kick __cb)
    {
        return begin_kick(account, roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_kick(String account, String roleId, java.util.Map<String, String> __ctx, Callback_Center_kick __cb)
    {
        return begin_kick(account, roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_kick(String account, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __kick_name, __cb);
        try
        {
            __result.__prepare(__kick_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_kick(Ice.AsyncResult __result)
    {
        __end(__result, __kick_name);
    }

    public boolean kick_async(AMI_Center_kick __cb, String account, String roleId)
    {
        Ice.AsyncResult __r = begin_kick(account, roleId, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean kick_async(AMI_Center_kick __cb, String account, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_kick(account, roleId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __ping_name = "ping";

    public ServerDetail ping()
    {
        return ping(null, false);
    }

    public ServerDetail ping(java.util.Map<String, String> __ctx)
    {
        return ping(__ctx, true);
    }

    private ServerDetail ping(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "ping", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("ping");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.ping(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_ping()
    {
        return begin_ping(null, false, null);
    }

    public Ice.AsyncResult begin_ping(java.util.Map<String, String> __ctx)
    {
        return begin_ping(__ctx, true, null);
    }

    public Ice.AsyncResult begin_ping(Ice.Callback __cb)
    {
        return begin_ping(null, false, __cb);
    }

    public Ice.AsyncResult begin_ping(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ping(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ping(Callback_Center_ping __cb)
    {
        return begin_ping(null, false, __cb);
    }

    public Ice.AsyncResult begin_ping(java.util.Map<String, String> __ctx, Callback_Center_ping __cb)
    {
        return begin_ping(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ping(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ping_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
        try
        {
            __result.__prepare(__ping_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ServerDetail end_ping(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ping_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ServerDetailHolder __ret = new ServerDetailHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean ping_async(AMI_Center_ping __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ping_name);
            __r = begin_ping(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean ping_async(AMI_Center_ping __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ping_name);
            __r = begin_ping(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __queryItemNum_name = "queryItemNum";

    /**
     * 查询物品数量
     **/
    public String queryItemNum(String roleName, String itemId)
    {
        return queryItemNum(roleName, itemId, null, false);
    }

    /**
     * 查询物品数量
     * @param __ctx The Context map to send with the invocation.
     **/
    public String queryItemNum(String roleName, String itemId, java.util.Map<String, String> __ctx)
    {
        return queryItemNum(roleName, itemId, __ctx, true);
    }

    private String queryItemNum(String roleName, String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryItemNum", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryItemNum");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.queryItemNum(roleName, itemId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryItemNum(String roleName, String itemId)
    {
        return begin_queryItemNum(roleName, itemId, null, false, null);
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryItemNum(String roleName, String itemId, java.util.Map<String, String> __ctx)
    {
        return begin_queryItemNum(roleName, itemId, __ctx, true, null);
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryItemNum(String roleName, String itemId, Ice.Callback __cb)
    {
        return begin_queryItemNum(roleName, itemId, null, false, __cb);
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryItemNum(String roleName, String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryItemNum(roleName, itemId, __ctx, true, __cb);
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryItemNum(String roleName, String itemId, Callback_Center_queryItemNum __cb)
    {
        return begin_queryItemNum(roleName, itemId, null, false, __cb);
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryItemNum(String roleName, String itemId, java.util.Map<String, String> __ctx, Callback_Center_queryItemNum __cb)
    {
        return begin_queryItemNum(roleName, itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryItemNum(String roleName, String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryItemNum_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryItemNum_name, __cb);
        try
        {
            __result.__prepare(__queryItemNum_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleName);
            __os.writeString(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_queryItemNum(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryItemNum_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     **/
    public boolean queryItemNum_async(AMI_Center_queryItemNum __cb, String roleName, String itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryItemNum_name);
            __r = begin_queryItemNum(roleName, itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryItemNum_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean queryItemNum_async(AMI_Center_queryItemNum __cb, String roleName, String itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryItemNum_name);
            __r = begin_queryItemNum(roleName, itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryItemNum_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __queryRoleByCDK_name = "queryRoleByCDK";

    /**
     * 根据CDK查询玩家信息
     **/
    public String queryRoleByCDK(String cdk)
        throws NoteException
    {
        return queryRoleByCDK(cdk, null, false);
    }

    /**
     * 根据CDK查询玩家信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public String queryRoleByCDK(String cdk, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return queryRoleByCDK(cdk, __ctx, true);
    }

    private String queryRoleByCDK(String cdk, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryRoleByCDK", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryRoleByCDK");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    return __del.queryRoleByCDK(cdk, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 根据CDK查询玩家信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryRoleByCDK(String cdk)
    {
        return begin_queryRoleByCDK(cdk, null, false, null);
    }

    /**
     * 根据CDK查询玩家信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryRoleByCDK(String cdk, java.util.Map<String, String> __ctx)
    {
        return begin_queryRoleByCDK(cdk, __ctx, true, null);
    }

    /**
     * 根据CDK查询玩家信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryRoleByCDK(String cdk, Ice.Callback __cb)
    {
        return begin_queryRoleByCDK(cdk, null, false, __cb);
    }

    /**
     * 根据CDK查询玩家信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryRoleByCDK(String cdk, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryRoleByCDK(cdk, __ctx, true, __cb);
    }

    /**
     * 根据CDK查询玩家信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryRoleByCDK(String cdk, Callback_Center_queryRoleByCDK __cb)
    {
        return begin_queryRoleByCDK(cdk, null, false, __cb);
    }

    /**
     * 根据CDK查询玩家信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryRoleByCDK(String cdk, java.util.Map<String, String> __ctx, Callback_Center_queryRoleByCDK __cb)
    {
        return begin_queryRoleByCDK(cdk, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryRoleByCDK(String cdk, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryRoleByCDK_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryRoleByCDK_name, __cb);
        try
        {
            __result.__prepare(__queryRoleByCDK_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cdk);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_queryRoleByCDK(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __queryRoleByCDK_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __saveRoleData_name = "saveRoleData";

    /**
     * 导入role数据
     **/
    public void saveRoleData(int serverId, byte[] data, String roleId)
        throws NoteException
    {
        saveRoleData(serverId, data, roleId, null, false);
    }

    /**
     * 导入role数据
     * @param __ctx The Context map to send with the invocation.
     **/
    public void saveRoleData(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        saveRoleData(serverId, data, roleId, __ctx, true);
    }

    private void saveRoleData(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveRoleData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("saveRoleData");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.saveRoleData(serverId, data, roleId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveRoleData(int serverId, byte[] data, String roleId)
    {
        return begin_saveRoleData(serverId, data, roleId, null, false, null);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveRoleData(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_saveRoleData(serverId, data, roleId, __ctx, true, null);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveRoleData(int serverId, byte[] data, String roleId, Ice.Callback __cb)
    {
        return begin_saveRoleData(serverId, data, roleId, null, false, __cb);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveRoleData(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveRoleData(serverId, data, roleId, __ctx, true, __cb);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveRoleData(int serverId, byte[] data, String roleId, Callback_Center_saveRoleData __cb)
    {
        return begin_saveRoleData(serverId, data, roleId, null, false, __cb);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveRoleData(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx, Callback_Center_saveRoleData __cb)
    {
        return begin_saveRoleData(serverId, data, roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveRoleData(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveRoleData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveRoleData_name, __cb);
        try
        {
            __result.__prepare(__saveRoleData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            ByteSeqHelper.write(__os, data);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_saveRoleData(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __saveRoleData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __sendMail_name = "sendMail";

    public void sendMail(String targetName, String title, String body, Property[] attach, String senderName)
        throws NoteException
    {
        sendMail(targetName, title, body, attach, senderName, null, false);
    }

    public void sendMail(String targetName, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sendMail(targetName, title, body, attach, senderName, __ctx, true);
    }

    private void sendMail(String targetName, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendMail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendMail");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.sendMail(targetName, title, body, attach, senderName, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendMail(String targetName, String title, String body, Property[] attach, String senderName)
    {
        return begin_sendMail(targetName, title, body, attach, senderName, null, false, null);
    }

    public Ice.AsyncResult begin_sendMail(String targetName, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx)
    {
        return begin_sendMail(targetName, title, body, attach, senderName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendMail(String targetName, String title, String body, Property[] attach, String senderName, Ice.Callback __cb)
    {
        return begin_sendMail(targetName, title, body, attach, senderName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendMail(String targetName, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendMail(targetName, title, body, attach, senderName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendMail(String targetName, String title, String body, Property[] attach, String senderName, Callback_Center_sendMail __cb)
    {
        return begin_sendMail(targetName, title, body, attach, senderName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendMail(String targetName, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx, Callback_Center_sendMail __cb)
    {
        return begin_sendMail(targetName, title, body, attach, senderName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendMail(String targetName, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendMail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendMail_name, __cb);
        try
        {
            __result.__prepare(__sendMail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetName);
            __os.writeString(title);
            __os.writeString(body);
            PropertySeqHelper.write(__os, attach);
            __os.writeString(senderName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendMail(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendMail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean sendMail_async(AMI_Center_sendMail __cb, String targetName, String title, String body, Property[] attach, String senderName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendMail_name);
            __r = begin_sendMail(targetName, title, body, attach, senderName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendMail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean sendMail_async(AMI_Center_sendMail __cb, String targetName, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendMail_name);
            __r = begin_sendMail(targetName, title, body, attach, senderName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendMail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sendMailByRoleId_name = "sendMailByRoleId";

    public void sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName)
        throws NoteException
    {
        sendMailByRoleId(roleId, title, body, attach, senderName, null, false);
    }

    public void sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sendMailByRoleId(roleId, title, body, attach, senderName, __ctx, true);
    }

    private void sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendMailByRoleId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendMailByRoleId");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.sendMailByRoleId(roleId, title, body, attach, senderName, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName)
    {
        return begin_sendMailByRoleId(roleId, title, body, attach, senderName, null, false, null);
    }

    public Ice.AsyncResult begin_sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx)
    {
        return begin_sendMailByRoleId(roleId, title, body, attach, senderName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName, Ice.Callback __cb)
    {
        return begin_sendMailByRoleId(roleId, title, body, attach, senderName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendMailByRoleId(roleId, title, body, attach, senderName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName, Callback_Center_sendMailByRoleId __cb)
    {
        return begin_sendMailByRoleId(roleId, title, body, attach, senderName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx, Callback_Center_sendMailByRoleId __cb)
    {
        return begin_sendMailByRoleId(roleId, title, body, attach, senderName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendMailByRoleId(String roleId, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendMailByRoleId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendMailByRoleId_name, __cb);
        try
        {
            __result.__prepare(__sendMailByRoleId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __os.writeString(title);
            __os.writeString(body);
            PropertySeqHelper.write(__os, attach);
            __os.writeString(senderName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendMailByRoleId(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendMailByRoleId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean sendMailByRoleId_async(AMI_Center_sendMailByRoleId __cb, String roleId, String title, String body, Property[] attach, String senderName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendMailByRoleId_name);
            __r = begin_sendMailByRoleId(roleId, title, body, attach, senderName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendMailByRoleId_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean sendMailByRoleId_async(AMI_Center_sendMailByRoleId __cb, String roleId, String title, String body, Property[] attach, String senderName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendMailByRoleId_name);
            __r = begin_sendMailByRoleId(roleId, title, body, attach, senderName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendMailByRoleId_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sendServerMail_name = "sendServerMail";

    public void sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName)
        throws NoteException
    {
        sendServerMail(title, body, attach, conditionParams, senderName, null, false);
    }

    public void sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sendServerMail(title, body, attach, conditionParams, senderName, __ctx, true);
    }

    private void sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendServerMail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendServerMail");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.sendServerMail(title, body, attach, conditionParams, senderName, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName)
    {
        return begin_sendServerMail(title, body, attach, conditionParams, senderName, null, false, null);
    }

    public Ice.AsyncResult begin_sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx)
    {
        return begin_sendServerMail(title, body, attach, conditionParams, senderName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName, Ice.Callback __cb)
    {
        return begin_sendServerMail(title, body, attach, conditionParams, senderName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendServerMail(title, body, attach, conditionParams, senderName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName, Callback_Center_sendServerMail __cb)
    {
        return begin_sendServerMail(title, body, attach, conditionParams, senderName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx, Callback_Center_sendServerMail __cb)
    {
        return begin_sendServerMail(title, body, attach, conditionParams, senderName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendServerMail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendServerMail_name, __cb);
        try
        {
            __result.__prepare(__sendServerMail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(title);
            __os.writeString(body);
            PropertySeqHelper.write(__os, attach);
            __os.writeString(conditionParams);
            __os.writeString(senderName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendServerMail(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendServerMail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean sendServerMail_async(AMI_Center_sendServerMail __cb, String title, String body, Property[] attach, String conditionParams, String senderName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendServerMail_name);
            __r = begin_sendServerMail(title, body, attach, conditionParams, senderName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendServerMail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean sendServerMail_async(AMI_Center_sendServerMail __cb, String title, String body, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendServerMail_name);
            __r = begin_sendServerMail(title, body, attach, conditionParams, senderName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendServerMail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sendTocken_name = "sendTocken";

    public void sendTocken(int id, String account, String tocken, DeviceInfo device)
        throws NoteException
    {
        sendTocken(id, account, tocken, device, null, false);
    }

    public void sendTocken(int id, String account, String tocken, DeviceInfo device, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sendTocken(id, account, tocken, device, __ctx, true);
    }

    private void sendTocken(int id, String account, String tocken, DeviceInfo device, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendTocken", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendTocken");
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.sendTocken(id, account, tocken, device, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendTocken(int id, String account, String tocken, DeviceInfo device)
    {
        return begin_sendTocken(id, account, tocken, device, null, false, null);
    }

    public Ice.AsyncResult begin_sendTocken(int id, String account, String tocken, DeviceInfo device, java.util.Map<String, String> __ctx)
    {
        return begin_sendTocken(id, account, tocken, device, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendTocken(int id, String account, String tocken, DeviceInfo device, Ice.Callback __cb)
    {
        return begin_sendTocken(id, account, tocken, device, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendTocken(int id, String account, String tocken, DeviceInfo device, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendTocken(id, account, tocken, device, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendTocken(int id, String account, String tocken, DeviceInfo device, Callback_Center_sendTocken __cb)
    {
        return begin_sendTocken(id, account, tocken, device, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendTocken(int id, String account, String tocken, DeviceInfo device, java.util.Map<String, String> __ctx, Callback_Center_sendTocken __cb)
    {
        return begin_sendTocken(id, account, tocken, device, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendTocken(int id, String account, String tocken, DeviceInfo device, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendTocken_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendTocken_name, __cb);
        try
        {
            __result.__prepare(__sendTocken_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(account);
            __os.writeString(tocken);
            __os.writeObject(device);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendTocken(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendTocken_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean sendTocken_async(AMI_Center_sendTocken __cb, int id, String account, String tocken, DeviceInfo device)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendTocken_name);
            __r = begin_sendTocken(id, account, tocken, device, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendTocken_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean sendTocken_async(AMI_Center_sendTocken __cb, int id, String account, String tocken, DeviceInfo device, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendTocken_name);
            __r = begin_sendTocken(id, account, tocken, device, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendTocken_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setCallback_name = "setCallback";

    public void setCallback(CenterCallbackPrx cb)
    {
        setCallback(cb, null, false);
    }

    public void setCallback(CenterCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        setCallback(cb, __ctx, true);
    }

    private void setCallback(CenterCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCallback", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.setCallback(cb, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCallback(CenterCallbackPrx cb)
    {
        return begin_setCallback(cb, null, false, null);
    }

    public Ice.AsyncResult begin_setCallback(CenterCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        return begin_setCallback(cb, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCallback(CenterCallbackPrx cb, Ice.Callback __cb)
    {
        return begin_setCallback(cb, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(CenterCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCallback(cb, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCallback(CenterCallbackPrx cb, Callback_Center_setCallback __cb)
    {
        return begin_setCallback(cb, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(CenterCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_Center_setCallback __cb)
    {
        return begin_setCallback(cb, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCallback(CenterCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCallback_name, __cb);
        try
        {
            __result.__prepare(__setCallback_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            CenterCallbackPrxHelper.__write(__os, cb);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCallback(Ice.AsyncResult __result)
    {
        __end(__result, __setCallback_name);
    }

    public boolean setCallback_async(AMI_Center_setCallback __cb, CenterCallbackPrx cb)
    {
        Ice.AsyncResult __r = begin_setCallback(cb, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean setCallback_async(AMI_Center_setCallback __cb, CenterCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_setCallback(cb, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __silence_name = "silence";

    public void silence(String roleId, String releaseTime)
    {
        silence(roleId, releaseTime, null, false);
    }

    public void silence(String roleId, String releaseTime, java.util.Map<String, String> __ctx)
    {
        silence(roleId, releaseTime, __ctx, true);
    }

    private void silence(String roleId, String releaseTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "silence", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.silence(roleId, releaseTime, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_silence(String roleId, String releaseTime)
    {
        return begin_silence(roleId, releaseTime, null, false, null);
    }

    public Ice.AsyncResult begin_silence(String roleId, String releaseTime, java.util.Map<String, String> __ctx)
    {
        return begin_silence(roleId, releaseTime, __ctx, true, null);
    }

    public Ice.AsyncResult begin_silence(String roleId, String releaseTime, Ice.Callback __cb)
    {
        return begin_silence(roleId, releaseTime, null, false, __cb);
    }

    public Ice.AsyncResult begin_silence(String roleId, String releaseTime, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_silence(roleId, releaseTime, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_silence(String roleId, String releaseTime, Callback_Center_silence __cb)
    {
        return begin_silence(roleId, releaseTime, null, false, __cb);
    }

    public Ice.AsyncResult begin_silence(String roleId, String releaseTime, java.util.Map<String, String> __ctx, Callback_Center_silence __cb)
    {
        return begin_silence(roleId, releaseTime, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_silence(String roleId, String releaseTime, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __silence_name, __cb);
        try
        {
            __result.__prepare(__silence_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __os.writeString(releaseTime);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_silence(Ice.AsyncResult __result)
    {
        __end(__result, __silence_name);
    }

    public boolean silence_async(AMI_Center_silence __cb, String roleId, String releaseTime)
    {
        Ice.AsyncResult __r = begin_silence(roleId, releaseTime, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean silence_async(AMI_Center_silence __cb, String roleId, String releaseTime, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_silence(roleId, releaseTime, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __systemAnnounce_name = "systemAnnounce";

    public void systemAnnounce(String announce)
    {
        systemAnnounce(announce, null, false);
    }

    public void systemAnnounce(String announce, java.util.Map<String, String> __ctx)
    {
        systemAnnounce(announce, __ctx, true);
    }

    private void systemAnnounce(String announce, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "systemAnnounce", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CenterDel __del = (_CenterDel)__delBase;
                    __del.systemAnnounce(announce, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_systemAnnounce(String announce)
    {
        return begin_systemAnnounce(announce, null, false, null);
    }

    public Ice.AsyncResult begin_systemAnnounce(String announce, java.util.Map<String, String> __ctx)
    {
        return begin_systemAnnounce(announce, __ctx, true, null);
    }

    public Ice.AsyncResult begin_systemAnnounce(String announce, Ice.Callback __cb)
    {
        return begin_systemAnnounce(announce, null, false, __cb);
    }

    public Ice.AsyncResult begin_systemAnnounce(String announce, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_systemAnnounce(announce, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_systemAnnounce(String announce, Callback_Center_systemAnnounce __cb)
    {
        return begin_systemAnnounce(announce, null, false, __cb);
    }

    public Ice.AsyncResult begin_systemAnnounce(String announce, java.util.Map<String, String> __ctx, Callback_Center_systemAnnounce __cb)
    {
        return begin_systemAnnounce(announce, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_systemAnnounce(String announce, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __systemAnnounce_name, __cb);
        try
        {
            __result.__prepare(__systemAnnounce_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(announce);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_systemAnnounce(Ice.AsyncResult __result)
    {
        __end(__result, __systemAnnounce_name);
    }

    public boolean systemAnnounce_async(AMI_Center_systemAnnounce __cb, String announce)
    {
        Ice.AsyncResult __r = begin_systemAnnounce(announce, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean systemAnnounce_async(AMI_Center_systemAnnounce __cb, String announce, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_systemAnnounce(announce, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static CenterPrx checkedCast(Ice.ObjectPrx __obj)
    {
        CenterPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CenterPrx)
            {
                __d = (CenterPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    CenterPrxHelper __h = new CenterPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CenterPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CenterPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CenterPrx)
            {
                __d = (CenterPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    CenterPrxHelper __h = new CenterPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CenterPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CenterPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    CenterPrxHelper __h = new CenterPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CenterPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CenterPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    CenterPrxHelper __h = new CenterPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CenterPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        CenterPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CenterPrx)
            {
                __d = (CenterPrx)__obj;
            }
            else
            {
                CenterPrxHelper __h = new CenterPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CenterPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CenterPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CenterPrxHelper __h = new CenterPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Center"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _CenterDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _CenterDelD();
    }

    public static void __write(IceInternal.BasicStream __os, CenterPrx v)
    {
        __os.writeProxy(v);
    }

    public static CenterPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CenterPrxHelper result = new CenterPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
