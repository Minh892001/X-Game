// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Copy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 挑战TA自动战报结果
 **/
public class ChallengeTaAutoResult implements java.lang.Cloneable, java.io.Serializable
{
    public SceneDuelView[] soloMovie;

    public byte[] fightMovie;

    public int fightStar;

    public int flag;

    public String movieId;

    public String rivalName;

    public int rivalVip;

    public int winType;

    public ChallengeTaAutoResult()
    {
    }

    public ChallengeTaAutoResult(SceneDuelView[] soloMovie, byte[] fightMovie, int fightStar, int flag, String movieId, String rivalName, int rivalVip, int winType)
    {
        this.soloMovie = soloMovie;
        this.fightMovie = fightMovie;
        this.fightStar = fightStar;
        this.flag = flag;
        this.movieId = movieId;
        this.rivalName = rivalName;
        this.rivalVip = rivalVip;
        this.winType = winType;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ChallengeTaAutoResult _r = null;
        if(rhs instanceof ChallengeTaAutoResult)
        {
            _r = (ChallengeTaAutoResult)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(soloMovie, _r.soloMovie))
            {
                return false;
            }
            if(!java.util.Arrays.equals(fightMovie, _r.fightMovie))
            {
                return false;
            }
            if(fightStar != _r.fightStar)
            {
                return false;
            }
            if(flag != _r.flag)
            {
                return false;
            }
            if(movieId != _r.movieId)
            {
                if(movieId == null || _r.movieId == null || !movieId.equals(_r.movieId))
                {
                    return false;
                }
            }
            if(rivalName != _r.rivalName)
            {
                if(rivalName == null || _r.rivalName == null || !rivalName.equals(_r.rivalName))
                {
                    return false;
                }
            }
            if(rivalVip != _r.rivalVip)
            {
                return false;
            }
            if(winType != _r.winType)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::ChallengeTaAutoResult");
        __h = IceInternal.HashUtil.hashAdd(__h, soloMovie);
        __h = IceInternal.HashUtil.hashAdd(__h, fightMovie);
        __h = IceInternal.HashUtil.hashAdd(__h, fightStar);
        __h = IceInternal.HashUtil.hashAdd(__h, flag);
        __h = IceInternal.HashUtil.hashAdd(__h, movieId);
        __h = IceInternal.HashUtil.hashAdd(__h, rivalName);
        __h = IceInternal.HashUtil.hashAdd(__h, rivalVip);
        __h = IceInternal.HashUtil.hashAdd(__h, winType);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        SceneDuelViewSeqHelper.write(__os, soloMovie);
        ByteSeqHelper.write(__os, fightMovie);
        __os.writeInt(fightStar);
        __os.writeInt(flag);
        __os.writeString(movieId);
        __os.writeString(rivalName);
        __os.writeInt(rivalVip);
        __os.writeInt(winType);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        soloMovie = SceneDuelViewSeqHelper.read(__is);
        fightMovie = ByteSeqHelper.read(__is);
        fightStar = __is.readInt();
        flag = __is.readInt();
        movieId = __is.readString();
        rivalName = __is.readString();
        rivalVip = __is.readInt();
        winType = __is.readInt();
    }

    public static final long serialVersionUID = 1497898194L;
}
