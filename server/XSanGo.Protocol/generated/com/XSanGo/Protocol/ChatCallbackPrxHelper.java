// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class ChatCallbackPrxHelper extends Ice.ObjectPrxHelperBase implements ChatCallbackPrx
{
    private static final String __confirm_name = "confirm";

    public void confirm(String text)
    {
        confirm(text, null, false);
    }

    public void confirm(String text, java.util.Map<String, String> __ctx)
    {
        confirm(text, __ctx, true);
    }

    private void confirm(String text, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "confirm", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ChatCallbackDel __del = (_ChatCallbackDel)__delBase;
                    __del.confirm(text, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_confirm(String text)
    {
        return begin_confirm(text, null, false, null);
    }

    public Ice.AsyncResult begin_confirm(String text, java.util.Map<String, String> __ctx)
    {
        return begin_confirm(text, __ctx, true, null);
    }

    public Ice.AsyncResult begin_confirm(String text, Ice.Callback __cb)
    {
        return begin_confirm(text, null, false, __cb);
    }

    public Ice.AsyncResult begin_confirm(String text, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_confirm(text, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_confirm(String text, Callback_ChatCallback_confirm __cb)
    {
        return begin_confirm(text, null, false, __cb);
    }

    public Ice.AsyncResult begin_confirm(String text, java.util.Map<String, String> __ctx, Callback_ChatCallback_confirm __cb)
    {
        return begin_confirm(text, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_confirm(String text, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __confirm_name, __cb);
        try
        {
            __result.__prepare(__confirm_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(text);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_confirm(Ice.AsyncResult __result)
    {
        __end(__result, __confirm_name);
    }

    public boolean confirm_async(AMI_ChatCallback_confirm __cb, String text)
    {
        Ice.AsyncResult __r = begin_confirm(text, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean confirm_async(AMI_ChatCallback_confirm __cb, String text, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_confirm(text, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __getColorfulEggView_name = "getColorfulEggView";

    /**
     * 登录后获取彩蛋视图
     **/
    public void getColorfulEggView(String view)
    {
        getColorfulEggView(view, null, false);
    }

    /**
     * 登录后获取彩蛋视图
     * @param __ctx The Context map to send with the invocation.
     **/
    public void getColorfulEggView(String view, java.util.Map<String, String> __ctx)
    {
        getColorfulEggView(view, __ctx, true);
    }

    private void getColorfulEggView(String view, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getColorfulEggView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ChatCallbackDel __del = (_ChatCallbackDel)__delBase;
                    __del.getColorfulEggView(view, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 登录后获取彩蛋视图
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getColorfulEggView(String view)
    {
        return begin_getColorfulEggView(view, null, false, null);
    }

    /**
     * 登录后获取彩蛋视图
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getColorfulEggView(String view, java.util.Map<String, String> __ctx)
    {
        return begin_getColorfulEggView(view, __ctx, true, null);
    }

    /**
     * 登录后获取彩蛋视图
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getColorfulEggView(String view, Ice.Callback __cb)
    {
        return begin_getColorfulEggView(view, null, false, __cb);
    }

    /**
     * 登录后获取彩蛋视图
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getColorfulEggView(String view, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getColorfulEggView(view, __ctx, true, __cb);
    }

    /**
     * 登录后获取彩蛋视图
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getColorfulEggView(String view, Callback_ChatCallback_getColorfulEggView __cb)
    {
        return begin_getColorfulEggView(view, null, false, __cb);
    }

    /**
     * 登录后获取彩蛋视图
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getColorfulEggView(String view, java.util.Map<String, String> __ctx, Callback_ChatCallback_getColorfulEggView __cb)
    {
        return begin_getColorfulEggView(view, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getColorfulEggView(String view, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getColorfulEggView_name, __cb);
        try
        {
            __result.__prepare(__getColorfulEggView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(view);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_getColorfulEggView(Ice.AsyncResult __result)
    {
        __end(__result, __getColorfulEggView_name);
    }

    /**
     * 登录后获取彩蛋视图
     * @param __cb The callback object for the operation.
     **/
    public boolean getColorfulEggView_async(AMI_ChatCallback_getColorfulEggView __cb, String view)
    {
        Ice.AsyncResult __r = begin_getColorfulEggView(view, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 登录后获取彩蛋视图
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getColorfulEggView_async(AMI_ChatCallback_getColorfulEggView __cb, String view, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_getColorfulEggView(view, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __messageReceived_name = "messageReceived";

    public void messageReceived(String senderId, String senderName, String msg)
    {
        messageReceived(senderId, senderName, msg, null, false);
    }

    public void messageReceived(String senderId, String senderName, String msg, java.util.Map<String, String> __ctx)
    {
        messageReceived(senderId, senderName, msg, __ctx, true);
    }

    private void messageReceived(String senderId, String senderName, String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "messageReceived", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ChatCallbackDel __del = (_ChatCallbackDel)__delBase;
                    __del.messageReceived(senderId, senderName, msg, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_messageReceived(String senderId, String senderName, String msg)
    {
        return begin_messageReceived(senderId, senderName, msg, null, false, null);
    }

    public Ice.AsyncResult begin_messageReceived(String senderId, String senderName, String msg, java.util.Map<String, String> __ctx)
    {
        return begin_messageReceived(senderId, senderName, msg, __ctx, true, null);
    }

    public Ice.AsyncResult begin_messageReceived(String senderId, String senderName, String msg, Ice.Callback __cb)
    {
        return begin_messageReceived(senderId, senderName, msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_messageReceived(String senderId, String senderName, String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_messageReceived(senderId, senderName, msg, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_messageReceived(String senderId, String senderName, String msg, Callback_ChatCallback_messageReceived __cb)
    {
        return begin_messageReceived(senderId, senderName, msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_messageReceived(String senderId, String senderName, String msg, java.util.Map<String, String> __ctx, Callback_ChatCallback_messageReceived __cb)
    {
        return begin_messageReceived(senderId, senderName, msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_messageReceived(String senderId, String senderName, String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __messageReceived_name, __cb);
        try
        {
            __result.__prepare(__messageReceived_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(senderId);
            __os.writeString(senderName);
            __os.writeString(msg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_messageReceived(Ice.AsyncResult __result)
    {
        __end(__result, __messageReceived_name);
    }

    public boolean messageReceived_async(AMI_ChatCallback_messageReceived __cb, String senderId, String senderName, String msg)
    {
        Ice.AsyncResult __r = begin_messageReceived(senderId, senderName, msg, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean messageReceived_async(AMI_ChatCallback_messageReceived __cb, String senderId, String senderName, String msg, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_messageReceived(senderId, senderName, msg, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __redPointSmit_name = "redPointSmit";

    public void redPointSmit(int type, boolean show)
    {
        redPointSmit(type, show, null, false);
    }

    public void redPointSmit(int type, boolean show, java.util.Map<String, String> __ctx)
    {
        redPointSmit(type, show, __ctx, true);
    }

    private void redPointSmit(int type, boolean show, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "redPointSmit", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ChatCallbackDel __del = (_ChatCallbackDel)__delBase;
                    __del.redPointSmit(type, show, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_redPointSmit(int type, boolean show)
    {
        return begin_redPointSmit(type, show, null, false, null);
    }

    public Ice.AsyncResult begin_redPointSmit(int type, boolean show, java.util.Map<String, String> __ctx)
    {
        return begin_redPointSmit(type, show, __ctx, true, null);
    }

    public Ice.AsyncResult begin_redPointSmit(int type, boolean show, Ice.Callback __cb)
    {
        return begin_redPointSmit(type, show, null, false, __cb);
    }

    public Ice.AsyncResult begin_redPointSmit(int type, boolean show, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_redPointSmit(type, show, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_redPointSmit(int type, boolean show, Callback_ChatCallback_redPointSmit __cb)
    {
        return begin_redPointSmit(type, show, null, false, __cb);
    }

    public Ice.AsyncResult begin_redPointSmit(int type, boolean show, java.util.Map<String, String> __ctx, Callback_ChatCallback_redPointSmit __cb)
    {
        return begin_redPointSmit(type, show, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_redPointSmit(int type, boolean show, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __redPointSmit_name, __cb);
        try
        {
            __result.__prepare(__redPointSmit_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeBool(show);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_redPointSmit(Ice.AsyncResult __result)
    {
        __end(__result, __redPointSmit_name);
    }

    public boolean redPointSmit_async(AMI_ChatCallback_redPointSmit __cb, int type, boolean show)
    {
        Ice.AsyncResult __r = begin_redPointSmit(type, show, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean redPointSmit_async(AMI_ChatCallback_redPointSmit __cb, int type, boolean show, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_redPointSmit(type, show, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __refreshHarmRank_name = "refreshHarmRank";

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     **/
    public void refreshHarmRank(String harmRanks)
    {
        refreshHarmRank(harmRanks, null, false);
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public void refreshHarmRank(String harmRanks, java.util.Map<String, String> __ctx)
    {
        refreshHarmRank(harmRanks, __ctx, true);
    }

    private void refreshHarmRank(String harmRanks, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refreshHarmRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ChatCallbackDel __del = (_ChatCallbackDel)__delBase;
                    __del.refreshHarmRank(harmRanks, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshHarmRank(String harmRanks)
    {
        return begin_refreshHarmRank(harmRanks, null, false, null);
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshHarmRank(String harmRanks, java.util.Map<String, String> __ctx)
    {
        return begin_refreshHarmRank(harmRanks, __ctx, true, null);
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshHarmRank(String harmRanks, Ice.Callback __cb)
    {
        return begin_refreshHarmRank(harmRanks, null, false, __cb);
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshHarmRank(String harmRanks, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refreshHarmRank(harmRanks, __ctx, true, __cb);
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshHarmRank(String harmRanks, Callback_ChatCallback_refreshHarmRank __cb)
    {
        return begin_refreshHarmRank(harmRanks, null, false, __cb);
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshHarmRank(String harmRanks, java.util.Map<String, String> __ctx, Callback_ChatCallback_refreshHarmRank __cb)
    {
        return begin_refreshHarmRank(harmRanks, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refreshHarmRank(String harmRanks, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refreshHarmRank_name, __cb);
        try
        {
            __result.__prepare(__refreshHarmRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(harmRanks);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_refreshHarmRank(Ice.AsyncResult __result)
    {
        __end(__result, __refreshHarmRank_name);
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean refreshHarmRank_async(AMI_ChatCallback_refreshHarmRank __cb, String harmRanks)
    {
        Ice.AsyncResult __r = begin_refreshHarmRank(harmRanks, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 刷新伤害排行榜，传入WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean refreshHarmRank_async(AMI_ChatCallback_refreshHarmRank __cb, String harmRanks, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_refreshHarmRank(harmRanks, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __refreshTreasure_name = "refreshTreasure";

    /**
     * 更新寻宝数据，返回TreasureView的lua
     **/
    public void refreshTreasure(String view)
    {
        refreshTreasure(view, null, false);
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public void refreshTreasure(String view, java.util.Map<String, String> __ctx)
    {
        refreshTreasure(view, __ctx, true);
    }

    private void refreshTreasure(String view, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refreshTreasure", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ChatCallbackDel __del = (_ChatCallbackDel)__delBase;
                    __del.refreshTreasure(view, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshTreasure(String view)
    {
        return begin_refreshTreasure(view, null, false, null);
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshTreasure(String view, java.util.Map<String, String> __ctx)
    {
        return begin_refreshTreasure(view, __ctx, true, null);
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshTreasure(String view, Ice.Callback __cb)
    {
        return begin_refreshTreasure(view, null, false, __cb);
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshTreasure(String view, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refreshTreasure(view, __ctx, true, __cb);
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshTreasure(String view, Callback_ChatCallback_refreshTreasure __cb)
    {
        return begin_refreshTreasure(view, null, false, __cb);
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshTreasure(String view, java.util.Map<String, String> __ctx, Callback_ChatCallback_refreshTreasure __cb)
    {
        return begin_refreshTreasure(view, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refreshTreasure(String view, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refreshTreasure_name, __cb);
        try
        {
            __result.__prepare(__refreshTreasure_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(view);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_refreshTreasure(Ice.AsyncResult __result)
    {
        __end(__result, __refreshTreasure_name);
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean refreshTreasure_async(AMI_ChatCallback_refreshTreasure __cb, String view)
    {
        Ice.AsyncResult __r = begin_refreshTreasure(view, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 更新寻宝数据，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean refreshTreasure_async(AMI_ChatCallback_refreshTreasure __cb, String view, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_refreshTreasure(view, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __showMainUIButton_name = "showMainUIButton";

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     **/
    public void showMainUIButton(String status)
    {
        showMainUIButton(status, null, false);
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __ctx The Context map to send with the invocation.
     **/
    public void showMainUIButton(String status, java.util.Map<String, String> __ctx)
    {
        showMainUIButton(status, __ctx, true);
    }

    private void showMainUIButton(String status, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "showMainUIButton", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ChatCallbackDel __del = (_ChatCallbackDel)__delBase;
                    __del.showMainUIButton(status, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_showMainUIButton(String status)
    {
        return begin_showMainUIButton(status, null, false, null);
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showMainUIButton(String status, java.util.Map<String, String> __ctx)
    {
        return begin_showMainUIButton(status, __ctx, true, null);
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_showMainUIButton(String status, Ice.Callback __cb)
    {
        return begin_showMainUIButton(status, null, false, __cb);
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showMainUIButton(String status, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showMainUIButton(status, __ctx, true, __cb);
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_showMainUIButton(String status, Callback_ChatCallback_showMainUIButton __cb)
    {
        return begin_showMainUIButton(status, null, false, __cb);
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showMainUIButton(String status, java.util.Map<String, String> __ctx, Callback_ChatCallback_showMainUIButton __cb)
    {
        return begin_showMainUIButton(status, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showMainUIButton(String status, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showMainUIButton_name, __cb);
        try
        {
            __result.__prepare(__showMainUIButton_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(status);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_showMainUIButton(Ice.AsyncResult __result)
    {
        __end(__result, __showMainUIButton_name);
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __cb The callback object for the operation.
     **/
    public boolean showMainUIButton_async(AMI_ChatCallback_showMainUIButton __cb, String status)
    {
        Ice.AsyncResult __r = begin_showMainUIButton(status, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 显示主界面的 图标 new IntSeq[]{酿酒,嘉年华}  0:隐藏  1:显示
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean showMainUIButton_async(AMI_ChatCallback_showMainUIButton __cb, String status, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_showMainUIButton(status, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __updateDoubleCard_name = "updateDoubleCard";

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     **/
    public void updateDoubleCard(String intPairSeq)
    {
        updateDoubleCard(intPairSeq, null, false);
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public void updateDoubleCard(String intPairSeq, java.util.Map<String, String> __ctx)
    {
        updateDoubleCard(intPairSeq, __ctx, true);
    }

    private void updateDoubleCard(String intPairSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "updateDoubleCard", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ChatCallbackDel __del = (_ChatCallbackDel)__delBase;
                    __del.updateDoubleCard(intPairSeq, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateDoubleCard(String intPairSeq)
    {
        return begin_updateDoubleCard(intPairSeq, null, false, null);
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateDoubleCard(String intPairSeq, java.util.Map<String, String> __ctx)
    {
        return begin_updateDoubleCard(intPairSeq, __ctx, true, null);
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateDoubleCard(String intPairSeq, Ice.Callback __cb)
    {
        return begin_updateDoubleCard(intPairSeq, null, false, __cb);
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateDoubleCard(String intPairSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateDoubleCard(intPairSeq, __ctx, true, __cb);
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateDoubleCard(String intPairSeq, Callback_ChatCallback_updateDoubleCard __cb)
    {
        return begin_updateDoubleCard(intPairSeq, null, false, __cb);
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateDoubleCard(String intPairSeq, java.util.Map<String, String> __ctx, Callback_ChatCallback_updateDoubleCard __cb)
    {
        return begin_updateDoubleCard(intPairSeq, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateDoubleCard(String intPairSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateDoubleCard_name, __cb);
        try
        {
            __result.__prepare(__updateDoubleCard_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(intPairSeq);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_updateDoubleCard(Ice.AsyncResult __result)
    {
        __end(__result, __updateDoubleCard_name);
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean updateDoubleCard_async(AMI_ChatCallback_updateDoubleCard __cb, String intPairSeq)
    {
        Ice.AsyncResult __r = begin_updateDoubleCard(intPairSeq, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 更新双倍卡剩余时间,传入IntIntPairSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean updateDoubleCard_async(AMI_ChatCallback_updateDoubleCard __cb, String intPairSeq, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_updateDoubleCard(intPairSeq, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static ChatCallbackPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ChatCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ChatCallbackPrx)
            {
                __d = (ChatCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ChatCallbackPrxHelper __h = new ChatCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ChatCallbackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ChatCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ChatCallbackPrx)
            {
                __d = (ChatCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ChatCallbackPrxHelper __h = new ChatCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ChatCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ChatCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ChatCallbackPrxHelper __h = new ChatCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ChatCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ChatCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ChatCallbackPrxHelper __h = new ChatCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ChatCallbackPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ChatCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ChatCallbackPrx)
            {
                __d = (ChatCallbackPrx)__obj;
            }
            else
            {
                ChatCallbackPrxHelper __h = new ChatCallbackPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ChatCallbackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ChatCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ChatCallbackPrxHelper __h = new ChatCallbackPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::ChatCallback"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ChatCallbackDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ChatCallbackDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ChatCallbackPrx v)
    {
        __os.writeProxy(v);
    }

    public static ChatCallbackPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ChatCallbackPrxHelper result = new ChatCallbackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
