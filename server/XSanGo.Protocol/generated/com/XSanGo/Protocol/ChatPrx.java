// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface ChatPrx extends Ice.ObjectPrx
{
    public void speak(String msg)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public void speak(String msg, java.util.Map<String, String> __ctx)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public Ice.AsyncResult begin_speak(String msg);

    public Ice.AsyncResult begin_speak(String msg, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_speak(String msg, Ice.Callback __cb);

    public Ice.AsyncResult begin_speak(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_speak(String msg, Callback_Chat_speak __cb);

    public Ice.AsyncResult begin_speak(String msg, java.util.Map<String, String> __ctx, Callback_Chat_speak __cb);

    public void end_speak(Ice.AsyncResult __result)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public boolean speak_async(AMI_Chat_speak __cb, String msg);

    public boolean speak_async(AMI_Chat_speak __cb, String msg, java.util.Map<String, String> __ctx);

    public void speakAction(String msg, String targetId)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public void speakAction(String msg, String targetId, java.util.Map<String, String> __ctx)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public Ice.AsyncResult begin_speakAction(String msg, String targetId);

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, Ice.Callback __cb);

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, Callback_Chat_speakAction __cb);

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, java.util.Map<String, String> __ctx, Callback_Chat_speakAction __cb);

    public void end_speakAction(Ice.AsyncResult __result)
        throws NoFactionException,
               NoGroupException,
               NoteException;

    public boolean speakAction_async(AMI_Chat_speakAction __cb, String msg, String targetId);

    public boolean speakAction_async(AMI_Chat_speakAction __cb, String msg, String targetId, java.util.Map<String, String> __ctx);

    public void speakTo(String targetId, String msg)
        throws NoteException;

    public void speakTo(String targetId, String msg, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_speakTo(String targetId, String msg);

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, Ice.Callback __cb);

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, Callback_Chat_speakTo __cb);

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, java.util.Map<String, String> __ctx, Callback_Chat_speakTo __cb);

    public void end_speakTo(Ice.AsyncResult __result)
        throws NoteException;

    public boolean speakTo_async(AMI_Chat_speakTo __cb, String targetId, String msg);

    public boolean speakTo_async(AMI_Chat_speakTo __cb, String targetId, String msg, java.util.Map<String, String> __ctx);

    public byte[] getAttachObject(int id)
        throws NoteException;

    public byte[] getAttachObject(int id, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getAttachObject(int id);

    public Ice.AsyncResult begin_getAttachObject(int id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAttachObject(int id, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAttachObject(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAttachObject(int id, Callback_Chat_getAttachObject __cb);

    public Ice.AsyncResult begin_getAttachObject(int id, java.util.Map<String, String> __ctx, Callback_Chat_getAttachObject __cb);

    public byte[] end_getAttachObject(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getAttachObject_async(AMI_Chat_getAttachObject __cb, int id);

    public boolean getAttachObject_async(AMI_Chat_getAttachObject __cb, int id, java.util.Map<String, String> __ctx);

    public String selSet()
        throws NoteException;

    public String selSet(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selSet();

    public Ice.AsyncResult begin_selSet(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selSet(Ice.Callback __cb);

    public Ice.AsyncResult begin_selSet(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selSet(Callback_Chat_selSet __cb);

    public Ice.AsyncResult begin_selSet(java.util.Map<String, String> __ctx, Callback_Chat_selSet __cb);

    public String end_selSet(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selSet_async(AMI_Chat_selSet __cb);

    public boolean selSet_async(AMI_Chat_selSet __cb, java.util.Map<String, String> __ctx);

    public void saveSet(String set)
        throws NoteException;

    public void saveSet(String set, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_saveSet(String set);

    public Ice.AsyncResult begin_saveSet(String set, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_saveSet(String set, Ice.Callback __cb);

    public Ice.AsyncResult begin_saveSet(String set, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_saveSet(String set, Callback_Chat_saveSet __cb);

    public Ice.AsyncResult begin_saveSet(String set, java.util.Map<String, String> __ctx, Callback_Chat_saveSet __cb);

    public void end_saveSet(Ice.AsyncResult __result)
        throws NoteException;

    public boolean saveSet_async(AMI_Chat_saveSet __cb, String set);

    public boolean saveSet_async(AMI_Chat_saveSet __cb, String set, java.util.Map<String, String> __ctx);

    public void saveSetColor(int type, String userColor)
        throws NoteException;

    public void saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor);

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, Ice.Callback __cb);

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, Callback_Chat_saveSetColor __cb);

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx, Callback_Chat_saveSetColor __cb);

    public void end_saveSetColor(Ice.AsyncResult __result)
        throws NoteException;

    public boolean saveSetColor_async(AMI_Chat_saveSetColor __cb, int type, String userColor);

    public boolean saveSetColor_async(AMI_Chat_saveSetColor __cb, int type, String userColor, java.util.Map<String, String> __ctx);

    public ItemView viewEquip(String itemId)
        throws NoteException;

    public ItemView viewEquip(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_viewEquip(String itemId);

    public Ice.AsyncResult begin_viewEquip(String itemId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_viewEquip(String itemId, Ice.Callback __cb);

    public Ice.AsyncResult begin_viewEquip(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_viewEquip(String itemId, Callback_Chat_viewEquip __cb);

    public Ice.AsyncResult begin_viewEquip(String itemId, java.util.Map<String, String> __ctx, Callback_Chat_viewEquip __cb);

    public ItemView end_viewEquip(Ice.AsyncResult __result)
        throws NoteException;

    public boolean viewEquip_async(AMI_Chat_viewEquip __cb, String itemId);

    public boolean viewEquip_async(AMI_Chat_viewEquip __cb, String itemId, java.util.Map<String, String> __ctx);

    public ItemView viewItem(String itemId)
        throws NoteException;

    public ItemView viewItem(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_viewItem(String itemId);

    public Ice.AsyncResult begin_viewItem(String itemId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_viewItem(String itemId, Ice.Callback __cb);

    public Ice.AsyncResult begin_viewItem(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_viewItem(String itemId, Callback_Chat_viewItem __cb);

    public Ice.AsyncResult begin_viewItem(String itemId, java.util.Map<String, String> __ctx, Callback_Chat_viewItem __cb);

    public ItemView end_viewItem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean viewItem_async(AMI_Chat_viewItem __cb, String itemId);

    public boolean viewItem_async(AMI_Chat_viewItem __cb, String itemId, java.util.Map<String, String> __ctx);

    public HeroView viewHero(String heroId)
        throws NoteException;

    public HeroView viewHero(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_viewHero(String heroId);

    public Ice.AsyncResult begin_viewHero(String heroId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_viewHero(String heroId, Ice.Callback __cb);

    public Ice.AsyncResult begin_viewHero(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_viewHero(String heroId, Callback_Chat_viewHero __cb);

    public Ice.AsyncResult begin_viewHero(String heroId, java.util.Map<String, String> __ctx, Callback_Chat_viewHero __cb);

    public HeroView end_viewHero(Ice.AsyncResult __result)
        throws NoteException;

    public boolean viewHero_async(AMI_Chat_viewHero __cb, String heroId);

    public boolean viewHero_async(AMI_Chat_viewHero __cb, String heroId, java.util.Map<String, String> __ctx);

    public void selectOfflineMess()
        throws NoteException;

    public void selectOfflineMess(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selectOfflineMess();

    public Ice.AsyncResult begin_selectOfflineMess(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectOfflineMess(Ice.Callback __cb);

    public Ice.AsyncResult begin_selectOfflineMess(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectOfflineMess(Callback_Chat_selectOfflineMess __cb);

    public Ice.AsyncResult begin_selectOfflineMess(java.util.Map<String, String> __ctx, Callback_Chat_selectOfflineMess __cb);

    public void end_selectOfflineMess(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selectOfflineMess_async(AMI_Chat_selectOfflineMess __cb);

    public boolean selectOfflineMess_async(AMI_Chat_selectOfflineMess __cb, java.util.Map<String, String> __ctx);

    public String selectChallenge(String targetId)
        throws NoteException;

    public String selectChallenge(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selectChallenge(String targetId);

    public Ice.AsyncResult begin_selectChallenge(String targetId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectChallenge(String targetId, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectChallenge(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectChallenge(String targetId, Callback_Chat_selectChallenge __cb);

    public Ice.AsyncResult begin_selectChallenge(String targetId, java.util.Map<String, String> __ctx, Callback_Chat_selectChallenge __cb);

    public String end_selectChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selectChallenge_async(AMI_Chat_selectChallenge __cb, String targetId);

    public boolean selectChallenge_async(AMI_Chat_selectChallenge __cb, String targetId, java.util.Map<String, String> __ctx);

    public PvpOpponentFormationView beginChallenge(String targetId, String formationId)
        throws NoteException;

    public PvpOpponentFormationView beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, Callback_Chat_beginChallenge __cb);

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_Chat_beginChallenge __cb);

    public PvpOpponentFormationView end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean beginChallenge_async(AMI_Chat_beginChallenge __cb, String targetId, String formationId);

    public boolean beginChallenge_async(AMI_Chat_beginChallenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx);

    public String endChallenge(String targetId, int resFlag, byte remainHero)
        throws NoteException;

    public String endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, Ice.Callback __cb);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, Callback_Chat_endChallenge __cb);

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Callback_Chat_endChallenge __cb);

    public String end_endChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endChallenge_async(AMI_Chat_endChallenge __cb, String targetId, int resFlag, byte remainHero);

    public boolean endChallenge_async(AMI_Chat_endChallenge __cb, String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx);

    public void voteForbidSpeak(int type, String targetID)
        throws NoteException;

    public void voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID);

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, Ice.Callback __cb);

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, Callback_Chat_voteForbidSpeak __cb);

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx, Callback_Chat_voteForbidSpeak __cb);

    public void end_voteForbidSpeak(Ice.AsyncResult __result)
        throws NoteException;

    public boolean voteForbidSpeak_async(AMI_Chat_voteForbidSpeak __cb, int type, String targetID);

    public boolean voteForbidSpeak_async(AMI_Chat_voteForbidSpeak __cb, int type, String targetID, java.util.Map<String, String> __ctx);
}
