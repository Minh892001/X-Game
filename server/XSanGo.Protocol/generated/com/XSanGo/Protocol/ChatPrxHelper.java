// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class ChatPrxHelper extends Ice.ObjectPrxHelperBase implements ChatPrx
{
    private static final String __beginChallenge_name = "beginChallenge";

    public PvpOpponentFormationView beginChallenge(String targetId, String formationId)
        throws NoteException
    {
        return beginChallenge(targetId, formationId, null, false);
    }

    public PvpOpponentFormationView beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginChallenge(targetId, formationId, __ctx, true);
    }

    private PvpOpponentFormationView beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginChallenge");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    return __del.beginChallenge(targetId, formationId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId)
    {
        return begin_beginChallenge(targetId, formationId, null, false, null);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        return begin_beginChallenge(targetId, formationId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, Ice.Callback __cb)
    {
        return begin_beginChallenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginChallenge(targetId, formationId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, Callback_Chat_beginChallenge __cb)
    {
        return begin_beginChallenge(targetId, formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, Callback_Chat_beginChallenge __cb)
    {
        return begin_beginChallenge(targetId, formationId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginChallenge(String targetId, String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
        try
        {
            __result.__prepare(__beginChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeString(formationId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PvpOpponentFormationView end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PvpOpponentFormationView __ret;
            __ret = new PvpOpponentFormationView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginChallenge_async(AMI_Chat_beginChallenge __cb, String targetId, String formationId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(targetId, formationId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginChallenge_async(AMI_Chat_beginChallenge __cb, String targetId, String formationId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(targetId, formationId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallenge_name = "endChallenge";

    public String endChallenge(String targetId, int resFlag, byte remainHero)
        throws NoteException
    {
        return endChallenge(targetId, resFlag, remainHero, null, false);
    }

    public String endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endChallenge(targetId, resFlag, remainHero, __ctx, true);
    }

    private String endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallenge");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    return __del.endChallenge(targetId, resFlag, remainHero, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, null, false, null);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, Ice.Callback __cb)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, Callback_Chat_endChallenge __cb)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Callback_Chat_endChallenge __cb)
    {
        return begin_endChallenge(targetId, resFlag, remainHero, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallenge(String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
        try
        {
            __result.__prepare(__endChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeInt(resFlag);
            __os.writeByte(remainHero);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_endChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endChallenge_async(AMI_Chat_endChallenge __cb, String targetId, int resFlag, byte remainHero)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(targetId, resFlag, remainHero, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endChallenge_async(AMI_Chat_endChallenge __cb, String targetId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(targetId, resFlag, remainHero, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getAttachObject_name = "getAttachObject";

    public byte[] getAttachObject(int id)
        throws NoteException
    {
        return getAttachObject(id, null, false);
    }

    public byte[] getAttachObject(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getAttachObject(id, __ctx, true);
    }

    private byte[] getAttachObject(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAttachObject", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAttachObject");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    return __del.getAttachObject(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAttachObject(int id)
    {
        return begin_getAttachObject(id, null, false, null);
    }

    public Ice.AsyncResult begin_getAttachObject(int id, java.util.Map<String, String> __ctx)
    {
        return begin_getAttachObject(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getAttachObject(int id, Ice.Callback __cb)
    {
        return begin_getAttachObject(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAttachObject(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAttachObject(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAttachObject(int id, Callback_Chat_getAttachObject __cb)
    {
        return begin_getAttachObject(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAttachObject(int id, java.util.Map<String, String> __ctx, Callback_Chat_getAttachObject __cb)
    {
        return begin_getAttachObject(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAttachObject(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAttachObject_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAttachObject_name, __cb);
        try
        {
            __result.__prepare(__getAttachObject_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public byte[] end_getAttachObject(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getAttachObject_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = ByteSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getAttachObject_async(AMI_Chat_getAttachObject __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAttachObject_name);
            __r = begin_getAttachObject(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAttachObject_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getAttachObject_async(AMI_Chat_getAttachObject __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAttachObject_name);
            __r = begin_getAttachObject(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAttachObject_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __saveSet_name = "saveSet";

    public void saveSet(String set)
        throws NoteException
    {
        saveSet(set, null, false);
    }

    public void saveSet(String set, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        saveSet(set, __ctx, true);
    }

    private void saveSet(String set, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveSet", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("saveSet");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    __del.saveSet(set, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_saveSet(String set)
    {
        return begin_saveSet(set, null, false, null);
    }

    public Ice.AsyncResult begin_saveSet(String set, java.util.Map<String, String> __ctx)
    {
        return begin_saveSet(set, __ctx, true, null);
    }

    public Ice.AsyncResult begin_saveSet(String set, Ice.Callback __cb)
    {
        return begin_saveSet(set, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveSet(String set, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveSet(set, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_saveSet(String set, Callback_Chat_saveSet __cb)
    {
        return begin_saveSet(set, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveSet(String set, java.util.Map<String, String> __ctx, Callback_Chat_saveSet __cb)
    {
        return begin_saveSet(set, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveSet(String set, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveSet_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveSet_name, __cb);
        try
        {
            __result.__prepare(__saveSet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(set);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_saveSet(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __saveSet_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean saveSet_async(AMI_Chat_saveSet __cb, String set)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveSet_name);
            __r = begin_saveSet(set, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveSet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean saveSet_async(AMI_Chat_saveSet __cb, String set, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveSet_name);
            __r = begin_saveSet(set, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveSet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __saveSetColor_name = "saveSetColor";

    public void saveSetColor(int type, String userColor)
        throws NoteException
    {
        saveSetColor(type, userColor, null, false);
    }

    public void saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        saveSetColor(type, userColor, __ctx, true);
    }

    private void saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveSetColor", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("saveSetColor");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    __del.saveSetColor(type, userColor, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor)
    {
        return begin_saveSetColor(type, userColor, null, false, null);
    }

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx)
    {
        return begin_saveSetColor(type, userColor, __ctx, true, null);
    }

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, Ice.Callback __cb)
    {
        return begin_saveSetColor(type, userColor, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveSetColor(type, userColor, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, Callback_Chat_saveSetColor __cb)
    {
        return begin_saveSetColor(type, userColor, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx, Callback_Chat_saveSetColor __cb)
    {
        return begin_saveSetColor(type, userColor, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveSetColor(int type, String userColor, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveSetColor_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveSetColor_name, __cb);
        try
        {
            __result.__prepare(__saveSetColor_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeString(userColor);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_saveSetColor(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __saveSetColor_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean saveSetColor_async(AMI_Chat_saveSetColor __cb, int type, String userColor)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveSetColor_name);
            __r = begin_saveSetColor(type, userColor, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveSetColor_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean saveSetColor_async(AMI_Chat_saveSetColor __cb, int type, String userColor, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveSetColor_name);
            __r = begin_saveSetColor(type, userColor, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveSetColor_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selSet_name = "selSet";

    public String selSet()
        throws NoteException
    {
        return selSet(null, false);
    }

    public String selSet(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selSet(__ctx, true);
    }

    private String selSet(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selSet", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selSet");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    return __del.selSet(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selSet()
    {
        return begin_selSet(null, false, null);
    }

    public Ice.AsyncResult begin_selSet(java.util.Map<String, String> __ctx)
    {
        return begin_selSet(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selSet(Ice.Callback __cb)
    {
        return begin_selSet(null, false, __cb);
    }

    public Ice.AsyncResult begin_selSet(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selSet(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selSet(Callback_Chat_selSet __cb)
    {
        return begin_selSet(null, false, __cb);
    }

    public Ice.AsyncResult begin_selSet(java.util.Map<String, String> __ctx, Callback_Chat_selSet __cb)
    {
        return begin_selSet(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selSet(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selSet_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selSet_name, __cb);
        try
        {
            __result.__prepare(__selSet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selSet(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selSet_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selSet_async(AMI_Chat_selSet __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selSet_name);
            __r = begin_selSet(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selSet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selSet_async(AMI_Chat_selSet __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selSet_name);
            __r = begin_selSet(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selSet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectChallenge_name = "selectChallenge";

    public String selectChallenge(String targetId)
        throws NoteException
    {
        return selectChallenge(targetId, null, false);
    }

    public String selectChallenge(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selectChallenge(targetId, __ctx, true);
    }

    private String selectChallenge(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectChallenge");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    return __del.selectChallenge(targetId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectChallenge(String targetId)
    {
        return begin_selectChallenge(targetId, null, false, null);
    }

    public Ice.AsyncResult begin_selectChallenge(String targetId, java.util.Map<String, String> __ctx)
    {
        return begin_selectChallenge(targetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectChallenge(String targetId, Ice.Callback __cb)
    {
        return begin_selectChallenge(targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectChallenge(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectChallenge(targetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectChallenge(String targetId, Callback_Chat_selectChallenge __cb)
    {
        return begin_selectChallenge(targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectChallenge(String targetId, java.util.Map<String, String> __ctx, Callback_Chat_selectChallenge __cb)
    {
        return begin_selectChallenge(targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectChallenge(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectChallenge_name, __cb);
        try
        {
            __result.__prepare(__selectChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selectChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectChallenge_async(AMI_Chat_selectChallenge __cb, String targetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectChallenge_name);
            __r = begin_selectChallenge(targetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectChallenge_async(AMI_Chat_selectChallenge __cb, String targetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectChallenge_name);
            __r = begin_selectChallenge(targetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectOfflineMess_name = "selectOfflineMess";

    public void selectOfflineMess()
        throws NoteException
    {
        selectOfflineMess(null, false);
    }

    public void selectOfflineMess(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        selectOfflineMess(__ctx, true);
    }

    private void selectOfflineMess(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectOfflineMess", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectOfflineMess");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    __del.selectOfflineMess(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectOfflineMess()
    {
        return begin_selectOfflineMess(null, false, null);
    }

    public Ice.AsyncResult begin_selectOfflineMess(java.util.Map<String, String> __ctx)
    {
        return begin_selectOfflineMess(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selectOfflineMess(Ice.Callback __cb)
    {
        return begin_selectOfflineMess(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectOfflineMess(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectOfflineMess(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectOfflineMess(Callback_Chat_selectOfflineMess __cb)
    {
        return begin_selectOfflineMess(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectOfflineMess(java.util.Map<String, String> __ctx, Callback_Chat_selectOfflineMess __cb)
    {
        return begin_selectOfflineMess(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectOfflineMess(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectOfflineMess_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectOfflineMess_name, __cb);
        try
        {
            __result.__prepare(__selectOfflineMess_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_selectOfflineMess(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectOfflineMess_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectOfflineMess_async(AMI_Chat_selectOfflineMess __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectOfflineMess_name);
            __r = begin_selectOfflineMess(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectOfflineMess_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectOfflineMess_async(AMI_Chat_selectOfflineMess __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectOfflineMess_name);
            __r = begin_selectOfflineMess(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectOfflineMess_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __speak_name = "speak";

    public void speak(String msg)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        speak(msg, null, false);
    }

    public void speak(String msg, java.util.Map<String, String> __ctx)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        speak(msg, __ctx, true);
    }

    private void speak(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "speak", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("speak");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    __del.speak(msg, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_speak(String msg)
    {
        return begin_speak(msg, null, false, null);
    }

    public Ice.AsyncResult begin_speak(String msg, java.util.Map<String, String> __ctx)
    {
        return begin_speak(msg, __ctx, true, null);
    }

    public Ice.AsyncResult begin_speak(String msg, Ice.Callback __cb)
    {
        return begin_speak(msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_speak(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_speak(msg, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_speak(String msg, Callback_Chat_speak __cb)
    {
        return begin_speak(msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_speak(String msg, java.util.Map<String, String> __ctx, Callback_Chat_speak __cb)
    {
        return begin_speak(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_speak(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__speak_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __speak_name, __cb);
        try
        {
            __result.__prepare(__speak_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(msg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_speak(Ice.AsyncResult __result)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __speak_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoFactionException __ex)
                {
                    throw __ex;
                }
                catch(NoGroupException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean speak_async(AMI_Chat_speak __cb, String msg)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__speak_name);
            __r = begin_speak(msg, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __speak_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean speak_async(AMI_Chat_speak __cb, String msg, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__speak_name);
            __r = begin_speak(msg, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __speak_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __speakAction_name = "speakAction";

    public void speakAction(String msg, String targetId)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        speakAction(msg, targetId, null, false);
    }

    public void speakAction(String msg, String targetId, java.util.Map<String, String> __ctx)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        speakAction(msg, targetId, __ctx, true);
    }

    private void speakAction(String msg, String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "speakAction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("speakAction");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    __del.speakAction(msg, targetId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_speakAction(String msg, String targetId)
    {
        return begin_speakAction(msg, targetId, null, false, null);
    }

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, java.util.Map<String, String> __ctx)
    {
        return begin_speakAction(msg, targetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, Ice.Callback __cb)
    {
        return begin_speakAction(msg, targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_speakAction(msg, targetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, Callback_Chat_speakAction __cb)
    {
        return begin_speakAction(msg, targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_speakAction(String msg, String targetId, java.util.Map<String, String> __ctx, Callback_Chat_speakAction __cb)
    {
        return begin_speakAction(msg, targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_speakAction(String msg, String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__speakAction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __speakAction_name, __cb);
        try
        {
            __result.__prepare(__speakAction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(msg);
            __os.writeString(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_speakAction(Ice.AsyncResult __result)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __speakAction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoFactionException __ex)
                {
                    throw __ex;
                }
                catch(NoGroupException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean speakAction_async(AMI_Chat_speakAction __cb, String msg, String targetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__speakAction_name);
            __r = begin_speakAction(msg, targetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __speakAction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean speakAction_async(AMI_Chat_speakAction __cb, String msg, String targetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__speakAction_name);
            __r = begin_speakAction(msg, targetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __speakAction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __speakTo_name = "speakTo";

    public void speakTo(String targetId, String msg)
        throws NoteException
    {
        speakTo(targetId, msg, null, false);
    }

    public void speakTo(String targetId, String msg, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        speakTo(targetId, msg, __ctx, true);
    }

    private void speakTo(String targetId, String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "speakTo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("speakTo");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    __del.speakTo(targetId, msg, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_speakTo(String targetId, String msg)
    {
        return begin_speakTo(targetId, msg, null, false, null);
    }

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, java.util.Map<String, String> __ctx)
    {
        return begin_speakTo(targetId, msg, __ctx, true, null);
    }

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, Ice.Callback __cb)
    {
        return begin_speakTo(targetId, msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_speakTo(targetId, msg, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, Callback_Chat_speakTo __cb)
    {
        return begin_speakTo(targetId, msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_speakTo(String targetId, String msg, java.util.Map<String, String> __ctx, Callback_Chat_speakTo __cb)
    {
        return begin_speakTo(targetId, msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_speakTo(String targetId, String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__speakTo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __speakTo_name, __cb);
        try
        {
            __result.__prepare(__speakTo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __os.writeString(msg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_speakTo(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __speakTo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean speakTo_async(AMI_Chat_speakTo __cb, String targetId, String msg)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__speakTo_name);
            __r = begin_speakTo(targetId, msg, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __speakTo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean speakTo_async(AMI_Chat_speakTo __cb, String targetId, String msg, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__speakTo_name);
            __r = begin_speakTo(targetId, msg, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __speakTo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __viewEquip_name = "viewEquip";

    public ItemView viewEquip(String itemId)
        throws NoteException
    {
        return viewEquip(itemId, null, false);
    }

    public ItemView viewEquip(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return viewEquip(itemId, __ctx, true);
    }

    private ItemView viewEquip(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "viewEquip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("viewEquip");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    return __del.viewEquip(itemId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_viewEquip(String itemId)
    {
        return begin_viewEquip(itemId, null, false, null);
    }

    public Ice.AsyncResult begin_viewEquip(String itemId, java.util.Map<String, String> __ctx)
    {
        return begin_viewEquip(itemId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_viewEquip(String itemId, Ice.Callback __cb)
    {
        return begin_viewEquip(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_viewEquip(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_viewEquip(itemId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_viewEquip(String itemId, Callback_Chat_viewEquip __cb)
    {
        return begin_viewEquip(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_viewEquip(String itemId, java.util.Map<String, String> __ctx, Callback_Chat_viewEquip __cb)
    {
        return begin_viewEquip(itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_viewEquip(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__viewEquip_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __viewEquip_name, __cb);
        try
        {
            __result.__prepare(__viewEquip_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView end_viewEquip(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __viewEquip_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView __ret;
            __ret = new ItemView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean viewEquip_async(AMI_Chat_viewEquip __cb, String itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__viewEquip_name);
            __r = begin_viewEquip(itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __viewEquip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean viewEquip_async(AMI_Chat_viewEquip __cb, String itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__viewEquip_name);
            __r = begin_viewEquip(itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __viewEquip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __viewHero_name = "viewHero";

    public HeroView viewHero(String heroId)
        throws NoteException
    {
        return viewHero(heroId, null, false);
    }

    public HeroView viewHero(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return viewHero(heroId, __ctx, true);
    }

    private HeroView viewHero(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "viewHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("viewHero");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    return __del.viewHero(heroId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_viewHero(String heroId)
    {
        return begin_viewHero(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_viewHero(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_viewHero(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_viewHero(String heroId, Ice.Callback __cb)
    {
        return begin_viewHero(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_viewHero(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_viewHero(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_viewHero(String heroId, Callback_Chat_viewHero __cb)
    {
        return begin_viewHero(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_viewHero(String heroId, java.util.Map<String, String> __ctx, Callback_Chat_viewHero __cb)
    {
        return begin_viewHero(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_viewHero(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__viewHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __viewHero_name, __cb);
        try
        {
            __result.__prepare(__viewHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public HeroView end_viewHero(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __viewHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            HeroView __ret;
            __ret = new HeroView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean viewHero_async(AMI_Chat_viewHero __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__viewHero_name);
            __r = begin_viewHero(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __viewHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean viewHero_async(AMI_Chat_viewHero __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__viewHero_name);
            __r = begin_viewHero(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __viewHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __viewItem_name = "viewItem";

    public ItemView viewItem(String itemId)
        throws NoteException
    {
        return viewItem(itemId, null, false);
    }

    public ItemView viewItem(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return viewItem(itemId, __ctx, true);
    }

    private ItemView viewItem(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "viewItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("viewItem");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    return __del.viewItem(itemId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_viewItem(String itemId)
    {
        return begin_viewItem(itemId, null, false, null);
    }

    public Ice.AsyncResult begin_viewItem(String itemId, java.util.Map<String, String> __ctx)
    {
        return begin_viewItem(itemId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_viewItem(String itemId, Ice.Callback __cb)
    {
        return begin_viewItem(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_viewItem(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_viewItem(itemId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_viewItem(String itemId, Callback_Chat_viewItem __cb)
    {
        return begin_viewItem(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_viewItem(String itemId, java.util.Map<String, String> __ctx, Callback_Chat_viewItem __cb)
    {
        return begin_viewItem(itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_viewItem(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__viewItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __viewItem_name, __cb);
        try
        {
            __result.__prepare(__viewItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView end_viewItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __viewItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView __ret;
            __ret = new ItemView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean viewItem_async(AMI_Chat_viewItem __cb, String itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__viewItem_name);
            __r = begin_viewItem(itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __viewItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean viewItem_async(AMI_Chat_viewItem __cb, String itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__viewItem_name);
            __r = begin_viewItem(itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __viewItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __voteForbidSpeak_name = "voteForbidSpeak";

    public void voteForbidSpeak(int type, String targetID)
        throws NoteException
    {
        voteForbidSpeak(type, targetID, null, false);
    }

    public void voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        voteForbidSpeak(type, targetID, __ctx, true);
    }

    private void voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "voteForbidSpeak", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("voteForbidSpeak");
                    __delBase = __getDelegate(false);
                    _ChatDel __del = (_ChatDel)__delBase;
                    __del.voteForbidSpeak(type, targetID, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID)
    {
        return begin_voteForbidSpeak(type, targetID, null, false, null);
    }

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx)
    {
        return begin_voteForbidSpeak(type, targetID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, Ice.Callback __cb)
    {
        return begin_voteForbidSpeak(type, targetID, null, false, __cb);
    }

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_voteForbidSpeak(type, targetID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, Callback_Chat_voteForbidSpeak __cb)
    {
        return begin_voteForbidSpeak(type, targetID, null, false, __cb);
    }

    public Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx, Callback_Chat_voteForbidSpeak __cb)
    {
        return begin_voteForbidSpeak(type, targetID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_voteForbidSpeak(int type, String targetID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__voteForbidSpeak_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __voteForbidSpeak_name, __cb);
        try
        {
            __result.__prepare(__voteForbidSpeak_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeString(targetID);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_voteForbidSpeak(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __voteForbidSpeak_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean voteForbidSpeak_async(AMI_Chat_voteForbidSpeak __cb, int type, String targetID)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__voteForbidSpeak_name);
            __r = begin_voteForbidSpeak(type, targetID, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __voteForbidSpeak_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean voteForbidSpeak_async(AMI_Chat_voteForbidSpeak __cb, int type, String targetID, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__voteForbidSpeak_name);
            __r = begin_voteForbidSpeak(type, targetID, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __voteForbidSpeak_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static ChatPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ChatPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ChatPrx)
            {
                __d = (ChatPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ChatPrxHelper __h = new ChatPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ChatPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ChatPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ChatPrx)
            {
                __d = (ChatPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ChatPrxHelper __h = new ChatPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ChatPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ChatPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ChatPrxHelper __h = new ChatPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ChatPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ChatPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ChatPrxHelper __h = new ChatPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ChatPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ChatPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ChatPrx)
            {
                __d = (ChatPrx)__obj;
            }
            else
            {
                ChatPrxHelper __h = new ChatPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ChatPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ChatPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ChatPrxHelper __h = new ChatPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Chat"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ChatDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ChatDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ChatPrx v)
    {
        __os.writeProxy(v);
    }

    public static ChatPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ChatPrxHelper result = new ChatPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
