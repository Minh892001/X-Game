// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ColorfullEgg.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class ColorfulEggPrxHelper extends Ice.ObjectPrxHelperBase implements ColorfulEggPrx
{
    private static final String __acceptReward_name = "acceptReward";

    public void acceptReward(String itemId, int num)
        throws NoteException
    {
        acceptReward(itemId, num, null, false);
    }

    public void acceptReward(String itemId, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        acceptReward(itemId, num, __ctx, true);
    }

    private void acceptReward(String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptReward");
                    __delBase = __getDelegate(false);
                    _ColorfulEggDel __del = (_ColorfulEggDel)__delBase;
                    __del.acceptReward(itemId, num, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptReward(String itemId, int num)
    {
        return begin_acceptReward(itemId, num, null, false, null);
    }

    public Ice.AsyncResult begin_acceptReward(String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_acceptReward(itemId, num, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptReward(String itemId, int num, Ice.Callback __cb)
    {
        return begin_acceptReward(itemId, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptReward(String itemId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptReward(itemId, num, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptReward(String itemId, int num, Callback_ColorfulEgg_acceptReward __cb)
    {
        return begin_acceptReward(itemId, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptReward(String itemId, int num, java.util.Map<String, String> __ctx, Callback_ColorfulEgg_acceptReward __cb)
    {
        return begin_acceptReward(itemId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptReward(String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptReward_name, __cb);
        try
        {
            __result.__prepare(__acceptReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_acceptReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptReward_async(AMI_ColorfulEgg_acceptReward __cb, String itemId, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptReward_name);
            __r = begin_acceptReward(itemId, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptReward_async(AMI_ColorfulEgg_acceptReward __cb, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptReward_name);
            __r = begin_acceptReward(itemId, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __brokenEgg_name = "brokenEgg";

    public String brokenEgg(byte eggId)
        throws NoteException
    {
        return brokenEgg(eggId, null, false);
    }

    public String brokenEgg(byte eggId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return brokenEgg(eggId, __ctx, true);
    }

    private String brokenEgg(byte eggId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "brokenEgg", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("brokenEgg");
                    __delBase = __getDelegate(false);
                    _ColorfulEggDel __del = (_ColorfulEggDel)__delBase;
                    return __del.brokenEgg(eggId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_brokenEgg(byte eggId)
    {
        return begin_brokenEgg(eggId, null, false, null);
    }

    public Ice.AsyncResult begin_brokenEgg(byte eggId, java.util.Map<String, String> __ctx)
    {
        return begin_brokenEgg(eggId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_brokenEgg(byte eggId, Ice.Callback __cb)
    {
        return begin_brokenEgg(eggId, null, false, __cb);
    }

    public Ice.AsyncResult begin_brokenEgg(byte eggId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_brokenEgg(eggId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_brokenEgg(byte eggId, Callback_ColorfulEgg_brokenEgg __cb)
    {
        return begin_brokenEgg(eggId, null, false, __cb);
    }

    public Ice.AsyncResult begin_brokenEgg(byte eggId, java.util.Map<String, String> __ctx, Callback_ColorfulEgg_brokenEgg __cb)
    {
        return begin_brokenEgg(eggId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_brokenEgg(byte eggId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__brokenEgg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __brokenEgg_name, __cb);
        try
        {
            __result.__prepare(__brokenEgg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(eggId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_brokenEgg(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __brokenEgg_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean brokenEgg_async(AMI_ColorfulEgg_brokenEgg __cb, byte eggId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__brokenEgg_name);
            __r = begin_brokenEgg(eggId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __brokenEgg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean brokenEgg_async(AMI_ColorfulEgg_brokenEgg __cb, byte eggId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__brokenEgg_name);
            __r = begin_brokenEgg(eggId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __brokenEgg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getView_name = "getView";

    public String getView()
        throws NoteException
    {
        return getView(null, false);
    }

    public String getView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getView(__ctx, true);
    }

    private String getView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getView");
                    __delBase = __getDelegate(false);
                    _ColorfulEggDel __del = (_ColorfulEggDel)__delBase;
                    return __del.getView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getView()
    {
        return begin_getView(null, false, null);
    }

    public Ice.AsyncResult begin_getView(java.util.Map<String, String> __ctx)
    {
        return begin_getView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getView(Ice.Callback __cb)
    {
        return begin_getView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getView(Callback_ColorfulEgg_getView __cb)
    {
        return begin_getView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getView(java.util.Map<String, String> __ctx, Callback_ColorfulEgg_getView __cb)
    {
        return begin_getView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getView_name, __cb);
        try
        {
            __result.__prepare(__getView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getView_async(AMI_ColorfulEgg_getView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getView_name);
            __r = begin_getView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getView_async(AMI_ColorfulEgg_getView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getView_name);
            __r = begin_getView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static ColorfulEggPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ColorfulEggPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ColorfulEggPrx)
            {
                __d = (ColorfulEggPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ColorfulEggPrxHelper __h = new ColorfulEggPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ColorfulEggPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ColorfulEggPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ColorfulEggPrx)
            {
                __d = (ColorfulEggPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ColorfulEggPrxHelper __h = new ColorfulEggPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ColorfulEggPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ColorfulEggPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ColorfulEggPrxHelper __h = new ColorfulEggPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ColorfulEggPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ColorfulEggPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ColorfulEggPrxHelper __h = new ColorfulEggPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ColorfulEggPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ColorfulEggPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ColorfulEggPrx)
            {
                __d = (ColorfulEggPrx)__obj;
            }
            else
            {
                ColorfulEggPrxHelper __h = new ColorfulEggPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ColorfulEggPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ColorfulEggPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ColorfulEggPrxHelper __h = new ColorfulEggPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::ColorfulEgg"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ColorfulEggDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ColorfulEggDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ColorfulEggPrx v)
    {
        __os.writeProxy(v);
    }

    public static ColorfulEggPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ColorfulEggPrxHelper result = new ColorfulEggPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
