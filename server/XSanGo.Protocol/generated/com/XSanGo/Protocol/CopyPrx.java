// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Copy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface CopyPrx extends Ice.ObjectPrx
{
    public BigCopyView getBigCopyView();

    public BigCopyView getBigCopyView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getBigCopyView();

    public Ice.AsyncResult begin_getBigCopyView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getBigCopyView(Ice.Callback __cb);

    public Ice.AsyncResult begin_getBigCopyView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getBigCopyView(Callback_Copy_getBigCopyView __cb);

    public Ice.AsyncResult begin_getBigCopyView(java.util.Map<String, String> __ctx, Callback_Copy_getBigCopyView __cb);

    public BigCopyView end_getBigCopyView(Ice.AsyncResult __result);

    public boolean getBigCopyView_async(AMI_Copy_getBigCopyView __cb);

    public boolean getBigCopyView_async(AMI_Copy_getBigCopyView __cb, java.util.Map<String, String> __ctx);

    public SmallCopyView getSmallCopyView(int copyId);

    public SmallCopyView getSmallCopyView(int copyId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getSmallCopyView(int copyId);

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, Ice.Callback __cb);

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, Callback_Copy_getSmallCopyView __cb);

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_getSmallCopyView __cb);

    public SmallCopyView end_getSmallCopyView(Ice.AsyncResult __result);

    public boolean getSmallCopyView_async(AMI_Copy_getSmallCopyView __cb, int copyId);

    public boolean getSmallCopyView_async(AMI_Copy_getSmallCopyView __cb, int copyId, java.util.Map<String, String> __ctx);

    public SmallCopyViewWithWarmup getSmallCopyViewWithWarmup(int copyId)
        throws NoteException;

    public SmallCopyViewWithWarmup getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId);

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, Ice.Callback __cb);

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, Callback_Copy_getSmallCopyViewWithWarmup __cb);

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_getSmallCopyViewWithWarmup __cb);

    public SmallCopyViewWithWarmup end_getSmallCopyViewWithWarmup(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getSmallCopyViewWithWarmup_async(AMI_Copy_getSmallCopyViewWithWarmup __cb, int copyId);

    public boolean getSmallCopyViewWithWarmup_async(AMI_Copy_getSmallCopyViewWithWarmup __cb, int copyId, java.util.Map<String, String> __ctx);

    public String beginWarmup()
        throws NoteException;

    public String beginWarmup(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_beginWarmup();

    public Ice.AsyncResult begin_beginWarmup(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginWarmup(Ice.Callback __cb);

    public Ice.AsyncResult begin_beginWarmup(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginWarmup(Callback_Copy_beginWarmup __cb);

    public Ice.AsyncResult begin_beginWarmup(java.util.Map<String, String> __ctx, Callback_Copy_beginWarmup __cb);

    public String end_beginWarmup(Ice.AsyncResult __result)
        throws NoteException;

    public boolean beginWarmup_async(AMI_Copy_beginWarmup __cb);

    public boolean beginWarmup_async(AMI_Copy_beginWarmup __cb, java.util.Map<String, String> __ctx);

    public byte endWarmup(byte remainHero)
        throws NoteException;

    public byte endWarmup(byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endWarmup(byte remainHero);

    public Ice.AsyncResult begin_endWarmup(byte remainHero, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endWarmup(byte remainHero, Ice.Callback __cb);

    public Ice.AsyncResult begin_endWarmup(byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endWarmup(byte remainHero, Callback_Copy_endWarmup __cb);

    public Ice.AsyncResult begin_endWarmup(byte remainHero, java.util.Map<String, String> __ctx, Callback_Copy_endWarmup __cb);

    public byte end_endWarmup(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endWarmup_async(AMI_Copy_endWarmup __cb, byte remainHero);

    public boolean endWarmup_async(AMI_Copy_endWarmup __cb, byte remainHero, java.util.Map<String, String> __ctx);

    public CopyChallengeResultView beginChallenge(String formationId, int copyId)
        throws NotEnoughException,
               NoteException;

    public CopyChallengeResultView beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx)
        throws NotEnoughException,
               NoteException;

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId);

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, Callback_Copy_beginChallenge __cb);

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx, Callback_Copy_beginChallenge __cb);

    public CopyChallengeResultView end_beginChallenge(Ice.AsyncResult __result)
        throws NotEnoughException,
               NoteException;

    public boolean beginChallenge_async(AMI_Copy_beginChallenge __cb, String formationId, int copyId);

    public boolean beginChallenge_async(AMI_Copy_beginChallenge __cb, String formationId, int copyId, java.util.Map<String, String> __ctx);

    public int calculateStar(byte remainHero, byte killNum, float minTime, float maxTime)
        throws NoteException;

    public int calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime);

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, Ice.Callback __cb);

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, Callback_Copy_calculateStar __cb);

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx, Callback_Copy_calculateStar __cb);

    public int end_calculateStar(Ice.AsyncResult __result)
        throws NoteException;

    public boolean calculateStar_async(AMI_Copy_calculateStar __cb, byte remainHero, byte killNum, float minTime, float maxTime);

    public boolean calculateStar_async(AMI_Copy_calculateStar __cb, byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx);

    public EndChallengeResultView endChallenge()
        throws NoteException;

    public EndChallengeResultView endChallenge(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endChallenge();

    public Ice.AsyncResult begin_endChallenge(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endChallenge(Ice.Callback __cb);

    public Ice.AsyncResult begin_endChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endChallenge(Callback_Copy_endChallenge __cb);

    public Ice.AsyncResult begin_endChallenge(java.util.Map<String, String> __ctx, Callback_Copy_endChallenge __cb);

    public EndChallengeResultView end_endChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endChallenge_async(AMI_Copy_endChallenge __cb);

    public boolean endChallenge_async(AMI_Copy_endChallenge __cb, java.util.Map<String, String> __ctx);

    public void failChallenge()
        throws NoteException;

    public void failChallenge(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_failChallenge();

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_failChallenge(Ice.Callback __cb);

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_failChallenge(Callback_Copy_failChallenge __cb);

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, Callback_Copy_failChallenge __cb);

    public void end_failChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean failChallenge_async(AMI_Copy_failChallenge __cb);

    public boolean failChallenge_async(AMI_Copy_failChallenge __cb, java.util.Map<String, String> __ctx);

    public int getYuanbaoPrice(ItemView[] items)
        throws NoteException;

    public int getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items);

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, Ice.Callback __cb);

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, Callback_Copy_getYuanbaoPrice __cb);

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx, Callback_Copy_getYuanbaoPrice __cb);

    public int end_getYuanbaoPrice(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getYuanbaoPrice_async(AMI_Copy_getYuanbaoPrice __cb, ItemView[] items);

    public boolean getYuanbaoPrice_async(AMI_Copy_getYuanbaoPrice __cb, ItemView[] items, java.util.Map<String, String> __ctx);

    public void buySuccess(ItemView[] items)
        throws NotEnoughYuanBaoException,
               NoteException;

    public void buySuccess(ItemView[] items, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buySuccess(ItemView[] items);

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, Ice.Callback __cb);

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, Callback_Copy_buySuccess __cb);

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, java.util.Map<String, String> __ctx, Callback_Copy_buySuccess __cb);

    public void end_buySuccess(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean buySuccess_async(AMI_Copy_buySuccess __cb, ItemView[] items);

    public boolean buySuccess_async(AMI_Copy_buySuccess __cb, ItemView[] items, java.util.Map<String, String> __ctx);

    public void buyChallengeChance(int copyId)
        throws NotEnoughYuanBaoException,
               NoteException;

    public void buyChallengeChance(int copyId, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyChallengeChance(int copyId);

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, Callback_Copy_buyChallengeChance __cb);

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_buyChallengeChance __cb);

    public void end_buyChallengeChance(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean buyChallengeChance_async(AMI_Copy_buyChallengeChance __cb, int copyId);

    public boolean buyChallengeChance_async(AMI_Copy_buyChallengeChance __cb, int copyId, java.util.Map<String, String> __ctx);

    public IntIntPair[] buyChapterChallengeChance(int chapterId)
        throws NotEnoughYuanBaoException,
               NoteException;

    public IntIntPair[] buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId);

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, Callback_Copy_buyChapterChallengeChance __cb);

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx, Callback_Copy_buyChapterChallengeChance __cb);

    public IntIntPair[] end_buyChapterChallengeChance(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean buyChapterChallengeChance_async(AMI_Copy_buyChapterChallengeChance __cb, int chapterId);

    public boolean buyChapterChallengeChance_async(AMI_Copy_buyChapterChallengeChance __cb, int chapterId, java.util.Map<String, String> __ctx);

    public String clear(int copyTemplateId, int count)
        throws NotEnoughException,
               NoteException;

    public String clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx)
        throws NotEnoughException,
               NoteException;

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count);

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, Ice.Callback __cb);

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, Callback_Copy_clear __cb);

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx, Callback_Copy_clear __cb);

    public String end_clear(Ice.AsyncResult __result)
        throws NotEnoughException,
               NoteException;

    public boolean clear_async(AMI_Copy_clear __cb, int copyTemplateId, int count);

    public boolean clear_async(AMI_Copy_clear __cb, int copyTemplateId, int count, java.util.Map<String, String> __ctx);

    public ChapterRewardView getChapterRewardView(int chapterId);

    public ChapterRewardView getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId);

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, Ice.Callback __cb);

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, Callback_Copy_getChapterRewardView __cb);

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx, Callback_Copy_getChapterRewardView __cb);

    public ChapterRewardView end_getChapterRewardView(Ice.AsyncResult __result);

    public boolean getChapterRewardView_async(AMI_Copy_getChapterRewardView __cb, int chapterId);

    public boolean getChapterRewardView_async(AMI_Copy_getChapterRewardView __cb, int chapterId, java.util.Map<String, String> __ctx);

    public void receiveChapterReward(int chapterId, int level)
        throws NoteException;

    public void receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level);

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, Callback_Copy_receiveChapterReward __cb);

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx, Callback_Copy_receiveChapterReward __cb);

    public void end_receiveChapterReward(Ice.AsyncResult __result)
        throws NoteException;

    public boolean receiveChapterReward_async(AMI_Copy_receiveChapterReward __cb, int chapterId, int level);

    public boolean receiveChapterReward_async(AMI_Copy_receiveChapterReward __cb, int chapterId, int level, java.util.Map<String, String> __ctx);

    public void releaseCaptured();

    public void releaseCaptured(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_releaseCaptured();

    public Ice.AsyncResult begin_releaseCaptured(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_releaseCaptured(Ice.Callback __cb);

    public Ice.AsyncResult begin_releaseCaptured(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_releaseCaptured(Callback_Copy_releaseCaptured __cb);

    public Ice.AsyncResult begin_releaseCaptured(java.util.Map<String, String> __ctx, Callback_Copy_releaseCaptured __cb);

    public void end_releaseCaptured(Ice.AsyncResult __result);

    public boolean releaseCaptured_async(AMI_Copy_releaseCaptured __cb);

    public boolean releaseCaptured_async(AMI_Copy_releaseCaptured __cb, java.util.Map<String, String> __ctx);

    public int killCaptured();

    public int killCaptured(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_killCaptured();

    public Ice.AsyncResult begin_killCaptured(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_killCaptured(Ice.Callback __cb);

    public Ice.AsyncResult begin_killCaptured(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_killCaptured(Callback_Copy_killCaptured __cb);

    public Ice.AsyncResult begin_killCaptured(java.util.Map<String, String> __ctx, Callback_Copy_killCaptured __cb);

    public int end_killCaptured(Ice.AsyncResult __result);

    public boolean killCaptured_async(AMI_Copy_killCaptured __cb);

    public boolean killCaptured_async(AMI_Copy_killCaptured __cb, java.util.Map<String, String> __ctx);

    public String employCaptured()
        throws NotEnoughMoneyException;

    public String employCaptured(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException;

    public Ice.AsyncResult begin_employCaptured();

    public Ice.AsyncResult begin_employCaptured(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_employCaptured(Ice.Callback __cb);

    public Ice.AsyncResult begin_employCaptured(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_employCaptured(Callback_Copy_employCaptured __cb);

    public Ice.AsyncResult begin_employCaptured(java.util.Map<String, String> __ctx, Callback_Copy_employCaptured __cb);

    public String end_employCaptured(Ice.AsyncResult __result)
        throws NotEnoughMoneyException;

    public boolean employCaptured_async(AMI_Copy_employCaptured __cb);

    public boolean employCaptured_async(AMI_Copy_employCaptured __cb, java.util.Map<String, String> __ctx);

    public String getCopyChallengeInfo(String idStr);

    public String getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr);

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, Callback_Copy_getCopyChallengeInfo __cb);

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx, Callback_Copy_getCopyChallengeInfo __cb);

    public String end_getCopyChallengeInfo(Ice.AsyncResult __result);

    public boolean getCopyChallengeInfo_async(AMI_Copy_getCopyChallengeInfo __cb, String idStr);

    public boolean getCopyChallengeInfo_async(AMI_Copy_getCopyChallengeInfo __cb, String idStr, java.util.Map<String, String> __ctx);

    public String hallOfFameList();

    public String hallOfFameList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_hallOfFameList();

    public Ice.AsyncResult begin_hallOfFameList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_hallOfFameList(Ice.Callback __cb);

    public Ice.AsyncResult begin_hallOfFameList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_hallOfFameList(Callback_Copy_hallOfFameList __cb);

    public Ice.AsyncResult begin_hallOfFameList(java.util.Map<String, String> __ctx, Callback_Copy_hallOfFameList __cb);

    public String end_hallOfFameList(Ice.AsyncResult __result);

    public boolean hallOfFameList_async(AMI_Copy_hallOfFameList __cb);

    public boolean hallOfFameList_async(AMI_Copy_hallOfFameList __cb, java.util.Map<String, String> __ctx);

    /**
     * 打开互动界面 返回HuDongView的lua格式
     **/
    public String getHuDongView(int copyId)
        throws NoteException;

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getHuDongView(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId);

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, java.util.Map<String, String> __ctx);

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, Ice.Callback __cb);

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, Callback_Copy_getHuDongView __cb);

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_getHuDongView __cb);

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __result The asynchronous result object.
     **/
    public String end_getHuDongView(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     **/
    public boolean getHuDongView_async(AMI_Copy_getHuDongView __cb, int copyId);

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getHuDongView_async(AMI_Copy_getHuDongView __cb, int copyId, java.util.Map<String, String> __ctx);

    /**
     * 挑战TA
     **/
    public ChallengeTaView beginChallengeTa(int copyId)
        throws NoteException;

    /**
     * 挑战TA
     * @param __ctx The Context map to send with the invocation.
     **/
    public ChallengeTaView beginChallengeTa(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 挑战TA
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId);

    /**
     * 挑战TA
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, java.util.Map<String, String> __ctx);

    /**
     * 挑战TA
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, Ice.Callback __cb);

    /**
     * 挑战TA
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 挑战TA
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, Callback_Copy_beginChallengeTa __cb);

    /**
     * 挑战TA
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_beginChallengeTa __cb);

    /**
     * 挑战TA
     * @param __result The asynchronous result object.
     **/
    public ChallengeTaView end_beginChallengeTa(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     **/
    public boolean beginChallengeTa_async(AMI_Copy_beginChallengeTa __cb, int copyId);

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginChallengeTa_async(AMI_Copy_beginChallengeTa __cb, int copyId, java.util.Map<String, String> __ctx);

    /**
     * 自动挑战TA
     **/
    public ChallengeTaAutoResult autoChallengeTa(int copyId)
        throws NoteException;

    /**
     * 自动挑战TA
     * @param __ctx The Context map to send with the invocation.
     **/
    public ChallengeTaAutoResult autoChallengeTa(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 自动挑战TA
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId);

    /**
     * 自动挑战TA
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, java.util.Map<String, String> __ctx);

    /**
     * 自动挑战TA
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, Ice.Callback __cb);

    /**
     * 自动挑战TA
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 自动挑战TA
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, Callback_Copy_autoChallengeTa __cb);

    /**
     * 自动挑战TA
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_autoChallengeTa __cb);

    /**
     * 自动挑战TA
     * @param __result The asynchronous result object.
     **/
    public ChallengeTaAutoResult end_autoChallengeTa(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     **/
    public boolean autoChallengeTa_async(AMI_Copy_autoChallengeTa __cb, int copyId);

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean autoChallengeTa_async(AMI_Copy_autoChallengeTa __cb, int copyId, java.util.Map<String, String> __ctx);

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     **/
    public ChallengeTaResult endChallengeTa(int resFlag)
        throws NoteException;

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __ctx The Context map to send with the invocation.
     **/
    public ChallengeTaResult endChallengeTa(int resFlag, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag);

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, java.util.Map<String, String> __ctx);

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, Ice.Callback __cb);

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, Callback_Copy_endChallengeTa __cb);

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, java.util.Map<String, String> __ctx, Callback_Copy_endChallengeTa __cb);

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __result The asynchronous result object.
     **/
    public ChallengeTaResult end_endChallengeTa(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallengeTa_async(AMI_Copy_endChallengeTa __cb, int resFlag);

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallengeTa_async(AMI_Copy_endChallengeTa __cb, int resFlag, java.util.Map<String, String> __ctx);

    /**
     * 膜拜TA
     **/
    public int worshipTa(int copyId)
        throws NoteException;

    /**
     * 膜拜TA
     * @param __ctx The Context map to send with the invocation.
     **/
    public int worshipTa(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 膜拜TA
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId);

    /**
     * 膜拜TA
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, java.util.Map<String, String> __ctx);

    /**
     * 膜拜TA
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, Ice.Callback __cb);

    /**
     * 膜拜TA
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 膜拜TA
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, Callback_Copy_worshipTa __cb);

    /**
     * 膜拜TA
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_worshipTa __cb);

    /**
     * 膜拜TA
     * @param __result The asynchronous result object.
     **/
    public int end_worshipTa(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     **/
    public boolean worshipTa_async(AMI_Copy_worshipTa __cb, int copyId);

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean worshipTa_async(AMI_Copy_worshipTa __cb, int copyId, java.util.Map<String, String> __ctx);

    /**
     * 购买互动次数
     **/
    public void buyHuDong(int copyId)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 购买互动次数
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyHuDong(int copyId, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 购买互动次数
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId);

    /**
     * 购买互动次数
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, java.util.Map<String, String> __ctx);

    /**
     * 购买互动次数
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, Ice.Callback __cb);

    /**
     * 购买互动次数
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 购买互动次数
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, Callback_Copy_buyHuDong __cb);

    /**
     * 购买互动次数
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_buyHuDong __cb);

    /**
     * 购买互动次数
     * @param __result The asynchronous result object.
     **/
    public void end_buyHuDong(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     **/
    public boolean buyHuDong_async(AMI_Copy_buyHuDong __cb, int copyId);

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyHuDong_async(AMI_Copy_buyHuDong __cb, int copyId, java.util.Map<String, String> __ctx);

    public IntIntPair getMyOccupy()
        throws NoteException;

    public IntIntPair getMyOccupy(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getMyOccupy();

    public Ice.AsyncResult begin_getMyOccupy(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getMyOccupy(Ice.Callback __cb);

    public Ice.AsyncResult begin_getMyOccupy(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getMyOccupy(Callback_Copy_getMyOccupy __cb);

    public Ice.AsyncResult begin_getMyOccupy(java.util.Map<String, String> __ctx, Callback_Copy_getMyOccupy __cb);

    public IntIntPair end_getMyOccupy(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getMyOccupy_async(AMI_Copy_getMyOccupy __cb);

    public boolean getMyOccupy_async(AMI_Copy_getMyOccupy __cb, java.util.Map<String, String> __ctx);

    public BuyMilitaryOrderView getBuyMilitaryOrderView()
        throws NoteException;

    public BuyMilitaryOrderView getBuyMilitaryOrderView(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getBuyMilitaryOrderView();

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(Ice.Callback __cb);

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(Callback_Copy_getBuyMilitaryOrderView __cb);

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(java.util.Map<String, String> __ctx, Callback_Copy_getBuyMilitaryOrderView __cb);

    public BuyMilitaryOrderView end_getBuyMilitaryOrderView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getBuyMilitaryOrderView_async(AMI_Copy_getBuyMilitaryOrderView __cb);

    public boolean getBuyMilitaryOrderView_async(AMI_Copy_getBuyMilitaryOrderView __cb, java.util.Map<String, String> __ctx);

    public void buyMilitaryOrder()
        throws NotEnoughYuanBaoException,
               NoteException;

    public void buyMilitaryOrder(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyMilitaryOrder();

    public Ice.AsyncResult begin_buyMilitaryOrder(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyMilitaryOrder(Ice.Callback __cb);

    public Ice.AsyncResult begin_buyMilitaryOrder(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyMilitaryOrder(Callback_Copy_buyMilitaryOrder __cb);

    public Ice.AsyncResult begin_buyMilitaryOrder(java.util.Map<String, String> __ctx, Callback_Copy_buyMilitaryOrder __cb);

    public void end_buyMilitaryOrder(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean buyMilitaryOrder_async(AMI_Copy_buyMilitaryOrder __cb);

    public boolean buyMilitaryOrder_async(AMI_Copy_buyMilitaryOrder __cb, java.util.Map<String, String> __ctx);

    public String cancelWarmup(boolean first)
        throws NoteException;

    public String cancelWarmup(boolean first, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_cancelWarmup(boolean first);

    public Ice.AsyncResult begin_cancelWarmup(boolean first, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_cancelWarmup(boolean first, Ice.Callback __cb);

    public Ice.AsyncResult begin_cancelWarmup(boolean first, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_cancelWarmup(boolean first, Callback_Copy_cancelWarmup __cb);

    public Ice.AsyncResult begin_cancelWarmup(boolean first, java.util.Map<String, String> __ctx, Callback_Copy_cancelWarmup __cb);

    public String end_cancelWarmup(Ice.AsyncResult __result)
        throws NoteException;

    public boolean cancelWarmup_async(AMI_Copy_cancelWarmup __cb, boolean first);

    public boolean cancelWarmup_async(AMI_Copy_cancelWarmup __cb, boolean first, java.util.Map<String, String> __ctx);

    /**
     * 征收
     **/
    public int levyCopy(int copyId)
        throws NoteException;

    /**
     * 征收
     * @param __ctx The Context map to send with the invocation.
     **/
    public int levyCopy(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 征收
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId);

    /**
     * 征收
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, java.util.Map<String, String> __ctx);

    /**
     * 征收
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, Ice.Callback __cb);

    /**
     * 征收
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 征收
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, Callback_Copy_levyCopy __cb);

    /**
     * 征收
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_levyCopy __cb);

    /**
     * 征收
     * @param __result The asynchronous result object.
     **/
    public int end_levyCopy(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 征收
     * @param __cb The callback object for the operation.
     **/
    public boolean levyCopy_async(AMI_Copy_levyCopy __cb, int copyId);

    /**
     * 征收
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean levyCopy_async(AMI_Copy_levyCopy __cb, int copyId, java.util.Map<String, String> __ctx);

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     **/
    public String myOccupyList()
        throws NoteException;

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String myOccupyList(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_myOccupyList();

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_myOccupyList(java.util.Map<String, String> __ctx);

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_myOccupyList(Ice.Callback __cb);

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_myOccupyList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_myOccupyList(Callback_Copy_myOccupyList __cb);

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_myOccupyList(java.util.Map<String, String> __ctx, Callback_Copy_myOccupyList __cb);

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __result The asynchronous result object.
     **/
    public String end_myOccupyList(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean myOccupyList_async(AMI_Copy_myOccupyList __cb);

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean myOccupyList_async(AMI_Copy_myOccupyList __cb, java.util.Map<String, String> __ctx);

    /**
     * 放弃占领
     **/
    public void giveCopy(int copyId)
        throws NoteException;

    /**
     * 放弃占领
     * @param __ctx The Context map to send with the invocation.
     **/
    public void giveCopy(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 放弃占领
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId);

    /**
     * 放弃占领
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, java.util.Map<String, String> __ctx);

    /**
     * 放弃占领
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, Ice.Callback __cb);

    /**
     * 放弃占领
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 放弃占领
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, Callback_Copy_giveCopy __cb);

    /**
     * 放弃占领
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_giveCopy __cb);

    /**
     * 放弃占领
     * @param __result The asynchronous result object.
     **/
    public void end_giveCopy(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     **/
    public boolean giveCopy_async(AMI_Copy_giveCopy __cb, int copyId);

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean giveCopy_async(AMI_Copy_giveCopy __cb, int copyId, java.util.Map<String, String> __ctx);
}
