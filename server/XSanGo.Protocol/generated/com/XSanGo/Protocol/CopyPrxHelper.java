// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Copy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class CopyPrxHelper extends Ice.ObjectPrxHelperBase implements CopyPrx
{
    private static final String __autoChallengeTa_name = "autoChallengeTa";

    /**
     * 自动挑战TA
     **/
    public ChallengeTaAutoResult autoChallengeTa(int copyId)
        throws NoteException
    {
        return autoChallengeTa(copyId, null, false);
    }

    /**
     * 自动挑战TA
     * @param __ctx The Context map to send with the invocation.
     **/
    public ChallengeTaAutoResult autoChallengeTa(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return autoChallengeTa(copyId, __ctx, true);
    }

    private ChallengeTaAutoResult autoChallengeTa(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "autoChallengeTa", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("autoChallengeTa");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.autoChallengeTa(copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId)
    {
        return begin_autoChallengeTa(copyId, null, false, null);
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_autoChallengeTa(copyId, __ctx, true, null);
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, Ice.Callback __cb)
    {
        return begin_autoChallengeTa(copyId, null, false, __cb);
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_autoChallengeTa(copyId, __ctx, true, __cb);
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, Callback_Copy_autoChallengeTa __cb)
    {
        return begin_autoChallengeTa(copyId, null, false, __cb);
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_autoChallengeTa(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_autoChallengeTa __cb)
    {
        return begin_autoChallengeTa(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_autoChallengeTa(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__autoChallengeTa_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __autoChallengeTa_name, __cb);
        try
        {
            __result.__prepare(__autoChallengeTa_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public ChallengeTaAutoResult end_autoChallengeTa(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __autoChallengeTa_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ChallengeTaAutoResult __ret;
            __ret = new ChallengeTaAutoResult();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     **/
    public boolean autoChallengeTa_async(AMI_Copy_autoChallengeTa __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__autoChallengeTa_name);
            __r = begin_autoChallengeTa(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __autoChallengeTa_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean autoChallengeTa_async(AMI_Copy_autoChallengeTa __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__autoChallengeTa_name);
            __r = begin_autoChallengeTa(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __autoChallengeTa_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginChallenge_name = "beginChallenge";

    public CopyChallengeResultView beginChallenge(String formationId, int copyId)
        throws NotEnoughException,
               NoteException
    {
        return beginChallenge(formationId, copyId, null, false);
    }

    public CopyChallengeResultView beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx)
        throws NotEnoughException,
               NoteException
    {
        return beginChallenge(formationId, copyId, __ctx, true);
    }

    private CopyChallengeResultView beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginChallenge");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.beginChallenge(formationId, copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId)
    {
        return begin_beginChallenge(formationId, copyId, null, false, null);
    }

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_beginChallenge(formationId, copyId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, Ice.Callback __cb)
    {
        return begin_beginChallenge(formationId, copyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginChallenge(formationId, copyId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, Callback_Copy_beginChallenge __cb)
    {
        return begin_beginChallenge(formationId, copyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx, Callback_Copy_beginChallenge __cb)
    {
        return begin_beginChallenge(formationId, copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginChallenge(String formationId, int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
        try
        {
            __result.__prepare(__beginChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(formationId);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CopyChallengeResultView end_beginChallenge(Ice.AsyncResult __result)
        throws NotEnoughException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CopyChallengeResultView __ret;
            __ret = new CopyChallengeResultView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginChallenge_async(AMI_Copy_beginChallenge __cb, String formationId, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(formationId, copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginChallenge_async(AMI_Copy_beginChallenge __cb, String formationId, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(formationId, copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginChallengeTa_name = "beginChallengeTa";

    /**
     * 挑战TA
     **/
    public ChallengeTaView beginChallengeTa(int copyId)
        throws NoteException
    {
        return beginChallengeTa(copyId, null, false);
    }

    /**
     * 挑战TA
     * @param __ctx The Context map to send with the invocation.
     **/
    public ChallengeTaView beginChallengeTa(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginChallengeTa(copyId, __ctx, true);
    }

    private ChallengeTaView beginChallengeTa(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginChallengeTa", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginChallengeTa");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.beginChallengeTa(copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId)
    {
        return begin_beginChallengeTa(copyId, null, false, null);
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_beginChallengeTa(copyId, __ctx, true, null);
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, Ice.Callback __cb)
    {
        return begin_beginChallengeTa(copyId, null, false, __cb);
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginChallengeTa(copyId, __ctx, true, __cb);
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, Callback_Copy_beginChallengeTa __cb)
    {
        return begin_beginChallengeTa(copyId, null, false, __cb);
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallengeTa(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_beginChallengeTa __cb)
    {
        return begin_beginChallengeTa(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginChallengeTa(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginChallengeTa_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginChallengeTa_name, __cb);
        try
        {
            __result.__prepare(__beginChallengeTa_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public ChallengeTaView end_beginChallengeTa(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginChallengeTa_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ChallengeTaView __ret;
            __ret = new ChallengeTaView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     **/
    public boolean beginChallengeTa_async(AMI_Copy_beginChallengeTa __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallengeTa_name);
            __r = begin_beginChallengeTa(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallengeTa_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginChallengeTa_async(AMI_Copy_beginChallengeTa __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallengeTa_name);
            __r = begin_beginChallengeTa(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallengeTa_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginWarmup_name = "beginWarmup";

    public String beginWarmup()
        throws NoteException
    {
        return beginWarmup(null, false);
    }

    public String beginWarmup(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginWarmup(__ctx, true);
    }

    private String beginWarmup(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginWarmup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginWarmup");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.beginWarmup(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginWarmup()
    {
        return begin_beginWarmup(null, false, null);
    }

    public Ice.AsyncResult begin_beginWarmup(java.util.Map<String, String> __ctx)
    {
        return begin_beginWarmup(__ctx, true, null);
    }

    public Ice.AsyncResult begin_beginWarmup(Ice.Callback __cb)
    {
        return begin_beginWarmup(null, false, __cb);
    }

    public Ice.AsyncResult begin_beginWarmup(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginWarmup(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginWarmup(Callback_Copy_beginWarmup __cb)
    {
        return begin_beginWarmup(null, false, __cb);
    }

    public Ice.AsyncResult begin_beginWarmup(java.util.Map<String, String> __ctx, Callback_Copy_beginWarmup __cb)
    {
        return begin_beginWarmup(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginWarmup(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginWarmup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginWarmup_name, __cb);
        try
        {
            __result.__prepare(__beginWarmup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_beginWarmup(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginWarmup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginWarmup_async(AMI_Copy_beginWarmup __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginWarmup_name);
            __r = begin_beginWarmup(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginWarmup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginWarmup_async(AMI_Copy_beginWarmup __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginWarmup_name);
            __r = begin_beginWarmup(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginWarmup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyChallengeChance_name = "buyChallengeChance";

    public void buyChallengeChance(int copyId)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyChallengeChance(copyId, null, false);
    }

    public void buyChallengeChance(int copyId, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyChallengeChance(copyId, __ctx, true);
    }

    private void buyChallengeChance(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyChallengeChance", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyChallengeChance");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    __del.buyChallengeChance(copyId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyChallengeChance(int copyId)
    {
        return begin_buyChallengeChance(copyId, null, false, null);
    }

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_buyChallengeChance(copyId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, Ice.Callback __cb)
    {
        return begin_buyChallengeChance(copyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyChallengeChance(copyId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, Callback_Copy_buyChallengeChance __cb)
    {
        return begin_buyChallengeChance(copyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyChallengeChance(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_buyChallengeChance __cb)
    {
        return begin_buyChallengeChance(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyChallengeChance(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyChallengeChance_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyChallengeChance_name, __cb);
        try
        {
            __result.__prepare(__buyChallengeChance_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyChallengeChance(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyChallengeChance_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyChallengeChance_async(AMI_Copy_buyChallengeChance __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChallengeChance_name);
            __r = begin_buyChallengeChance(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChallengeChance_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyChallengeChance_async(AMI_Copy_buyChallengeChance __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChallengeChance_name);
            __r = begin_buyChallengeChance(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChallengeChance_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyChapterChallengeChance_name = "buyChapterChallengeChance";

    public IntIntPair[] buyChapterChallengeChance(int chapterId)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return buyChapterChallengeChance(chapterId, null, false);
    }

    public IntIntPair[] buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return buyChapterChallengeChance(chapterId, __ctx, true);
    }

    private IntIntPair[] buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyChapterChallengeChance", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyChapterChallengeChance");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.buyChapterChallengeChance(chapterId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId)
    {
        return begin_buyChapterChallengeChance(chapterId, null, false, null);
    }

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx)
    {
        return begin_buyChapterChallengeChance(chapterId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, Ice.Callback __cb)
    {
        return begin_buyChapterChallengeChance(chapterId, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyChapterChallengeChance(chapterId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, Callback_Copy_buyChapterChallengeChance __cb)
    {
        return begin_buyChapterChallengeChance(chapterId, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx, Callback_Copy_buyChapterChallengeChance __cb)
    {
        return begin_buyChapterChallengeChance(chapterId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyChapterChallengeChance(int chapterId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyChapterChallengeChance_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyChapterChallengeChance_name, __cb);
        try
        {
            __result.__prepare(__buyChapterChallengeChance_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(chapterId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public IntIntPair[] end_buyChapterChallengeChance(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyChapterChallengeChance_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntIntPair[] __ret;
            __ret = IntIntPairSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyChapterChallengeChance_async(AMI_Copy_buyChapterChallengeChance __cb, int chapterId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChapterChallengeChance_name);
            __r = begin_buyChapterChallengeChance(chapterId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChapterChallengeChance_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyChapterChallengeChance_async(AMI_Copy_buyChapterChallengeChance __cb, int chapterId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChapterChallengeChance_name);
            __r = begin_buyChapterChallengeChance(chapterId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChapterChallengeChance_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyHuDong_name = "buyHuDong";

    /**
     * 购买互动次数
     **/
    public void buyHuDong(int copyId)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyHuDong(copyId, null, false);
    }

    /**
     * 购买互动次数
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyHuDong(int copyId, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyHuDong(copyId, __ctx, true);
    }

    private void buyHuDong(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyHuDong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyHuDong");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    __del.buyHuDong(copyId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId)
    {
        return begin_buyHuDong(copyId, null, false, null);
    }

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_buyHuDong(copyId, __ctx, true, null);
    }

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, Ice.Callback __cb)
    {
        return begin_buyHuDong(copyId, null, false, __cb);
    }

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyHuDong(copyId, __ctx, true, __cb);
    }

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, Callback_Copy_buyHuDong __cb)
    {
        return begin_buyHuDong(copyId, null, false, __cb);
    }

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyHuDong(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_buyHuDong __cb)
    {
        return begin_buyHuDong(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyHuDong(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyHuDong_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyHuDong_name, __cb);
        try
        {
            __result.__prepare(__buyHuDong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_buyHuDong(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyHuDong_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     **/
    public boolean buyHuDong_async(AMI_Copy_buyHuDong __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyHuDong_name);
            __r = begin_buyHuDong(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyHuDong_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 购买互动次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyHuDong_async(AMI_Copy_buyHuDong __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyHuDong_name);
            __r = begin_buyHuDong(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyHuDong_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyMilitaryOrder_name = "buyMilitaryOrder";

    public void buyMilitaryOrder()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyMilitaryOrder(null, false);
    }

    public void buyMilitaryOrder(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyMilitaryOrder(__ctx, true);
    }

    private void buyMilitaryOrder(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyMilitaryOrder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyMilitaryOrder");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    __del.buyMilitaryOrder(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyMilitaryOrder()
    {
        return begin_buyMilitaryOrder(null, false, null);
    }

    public Ice.AsyncResult begin_buyMilitaryOrder(java.util.Map<String, String> __ctx)
    {
        return begin_buyMilitaryOrder(__ctx, true, null);
    }

    public Ice.AsyncResult begin_buyMilitaryOrder(Ice.Callback __cb)
    {
        return begin_buyMilitaryOrder(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyMilitaryOrder(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyMilitaryOrder(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyMilitaryOrder(Callback_Copy_buyMilitaryOrder __cb)
    {
        return begin_buyMilitaryOrder(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyMilitaryOrder(java.util.Map<String, String> __ctx, Callback_Copy_buyMilitaryOrder __cb)
    {
        return begin_buyMilitaryOrder(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyMilitaryOrder(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyMilitaryOrder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyMilitaryOrder_name, __cb);
        try
        {
            __result.__prepare(__buyMilitaryOrder_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyMilitaryOrder(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyMilitaryOrder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyMilitaryOrder_async(AMI_Copy_buyMilitaryOrder __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyMilitaryOrder_name);
            __r = begin_buyMilitaryOrder(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyMilitaryOrder_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyMilitaryOrder_async(AMI_Copy_buyMilitaryOrder __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyMilitaryOrder_name);
            __r = begin_buyMilitaryOrder(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyMilitaryOrder_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buySuccess_name = "buySuccess";

    public void buySuccess(ItemView[] items)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buySuccess(items, null, false);
    }

    public void buySuccess(ItemView[] items, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buySuccess(items, __ctx, true);
    }

    private void buySuccess(ItemView[] items, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buySuccess", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buySuccess");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    __del.buySuccess(items, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buySuccess(ItemView[] items)
    {
        return begin_buySuccess(items, null, false, null);
    }

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, java.util.Map<String, String> __ctx)
    {
        return begin_buySuccess(items, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, Ice.Callback __cb)
    {
        return begin_buySuccess(items, null, false, __cb);
    }

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buySuccess(items, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, Callback_Copy_buySuccess __cb)
    {
        return begin_buySuccess(items, null, false, __cb);
    }

    public Ice.AsyncResult begin_buySuccess(ItemView[] items, java.util.Map<String, String> __ctx, Callback_Copy_buySuccess __cb)
    {
        return begin_buySuccess(items, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buySuccess(ItemView[] items, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buySuccess_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buySuccess_name, __cb);
        try
        {
            __result.__prepare(__buySuccess_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ItemViewSeqHelper.write(__os, items);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buySuccess(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buySuccess_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buySuccess_async(AMI_Copy_buySuccess __cb, ItemView[] items)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buySuccess_name);
            __r = begin_buySuccess(items, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buySuccess_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buySuccess_async(AMI_Copy_buySuccess __cb, ItemView[] items, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buySuccess_name);
            __r = begin_buySuccess(items, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buySuccess_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __calculateStar_name = "calculateStar";

    public int calculateStar(byte remainHero, byte killNum, float minTime, float maxTime)
        throws NoteException
    {
        return calculateStar(remainHero, killNum, minTime, maxTime, null, false);
    }

    public int calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return calculateStar(remainHero, killNum, minTime, maxTime, __ctx, true);
    }

    private int calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "calculateStar", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("calculateStar");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.calculateStar(remainHero, killNum, minTime, maxTime, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime)
    {
        return begin_calculateStar(remainHero, killNum, minTime, maxTime, null, false, null);
    }

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx)
    {
        return begin_calculateStar(remainHero, killNum, minTime, maxTime, __ctx, true, null);
    }

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, Ice.Callback __cb)
    {
        return begin_calculateStar(remainHero, killNum, minTime, maxTime, null, false, __cb);
    }

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_calculateStar(remainHero, killNum, minTime, maxTime, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, Callback_Copy_calculateStar __cb)
    {
        return begin_calculateStar(remainHero, killNum, minTime, maxTime, null, false, __cb);
    }

    public Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx, Callback_Copy_calculateStar __cb)
    {
        return begin_calculateStar(remainHero, killNum, minTime, maxTime, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_calculateStar(byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__calculateStar_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __calculateStar_name, __cb);
        try
        {
            __result.__prepare(__calculateStar_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(remainHero);
            __os.writeByte(killNum);
            __os.writeFloat(minTime);
            __os.writeFloat(maxTime);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_calculateStar(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __calculateStar_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean calculateStar_async(AMI_Copy_calculateStar __cb, byte remainHero, byte killNum, float minTime, float maxTime)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__calculateStar_name);
            __r = begin_calculateStar(remainHero, killNum, minTime, maxTime, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __calculateStar_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean calculateStar_async(AMI_Copy_calculateStar __cb, byte remainHero, byte killNum, float minTime, float maxTime, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__calculateStar_name);
            __r = begin_calculateStar(remainHero, killNum, minTime, maxTime, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __calculateStar_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __cancelWarmup_name = "cancelWarmup";

    public String cancelWarmup(boolean first)
        throws NoteException
    {
        return cancelWarmup(first, null, false);
    }

    public String cancelWarmup(boolean first, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return cancelWarmup(first, __ctx, true);
    }

    private String cancelWarmup(boolean first, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "cancelWarmup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("cancelWarmup");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.cancelWarmup(first, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_cancelWarmup(boolean first)
    {
        return begin_cancelWarmup(first, null, false, null);
    }

    public Ice.AsyncResult begin_cancelWarmup(boolean first, java.util.Map<String, String> __ctx)
    {
        return begin_cancelWarmup(first, __ctx, true, null);
    }

    public Ice.AsyncResult begin_cancelWarmup(boolean first, Ice.Callback __cb)
    {
        return begin_cancelWarmup(first, null, false, __cb);
    }

    public Ice.AsyncResult begin_cancelWarmup(boolean first, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cancelWarmup(first, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_cancelWarmup(boolean first, Callback_Copy_cancelWarmup __cb)
    {
        return begin_cancelWarmup(first, null, false, __cb);
    }

    public Ice.AsyncResult begin_cancelWarmup(boolean first, java.util.Map<String, String> __ctx, Callback_Copy_cancelWarmup __cb)
    {
        return begin_cancelWarmup(first, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_cancelWarmup(boolean first, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__cancelWarmup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __cancelWarmup_name, __cb);
        try
        {
            __result.__prepare(__cancelWarmup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(first);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_cancelWarmup(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __cancelWarmup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean cancelWarmup_async(AMI_Copy_cancelWarmup __cb, boolean first)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__cancelWarmup_name);
            __r = begin_cancelWarmup(first, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __cancelWarmup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean cancelWarmup_async(AMI_Copy_cancelWarmup __cb, boolean first, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__cancelWarmup_name);
            __r = begin_cancelWarmup(first, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __cancelWarmup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clear_name = "clear";

    public String clear(int copyTemplateId, int count)
        throws NotEnoughException,
               NoteException
    {
        return clear(copyTemplateId, count, null, false);
    }

    public String clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx)
        throws NotEnoughException,
               NoteException
    {
        return clear(copyTemplateId, count, __ctx, true);
    }

    private String clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clear", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clear");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.clear(copyTemplateId, count, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count)
    {
        return begin_clear(copyTemplateId, count, null, false, null);
    }

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx)
    {
        return begin_clear(copyTemplateId, count, __ctx, true, null);
    }

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, Ice.Callback __cb)
    {
        return begin_clear(copyTemplateId, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clear(copyTemplateId, count, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, Callback_Copy_clear __cb)
    {
        return begin_clear(copyTemplateId, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx, Callback_Copy_clear __cb)
    {
        return begin_clear(copyTemplateId, count, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clear(int copyTemplateId, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clear_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clear_name, __cb);
        try
        {
            __result.__prepare(__clear_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyTemplateId);
            __os.writeInt(count);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_clear(Ice.AsyncResult __result)
        throws NotEnoughException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clear_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean clear_async(AMI_Copy_clear __cb, int copyTemplateId, int count)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clear_name);
            __r = begin_clear(copyTemplateId, count, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clear_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean clear_async(AMI_Copy_clear __cb, int copyTemplateId, int count, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clear_name);
            __r = begin_clear(copyTemplateId, count, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clear_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __employCaptured_name = "employCaptured";

    public String employCaptured()
        throws NotEnoughMoneyException
    {
        return employCaptured(null, false);
    }

    public String employCaptured(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException
    {
        return employCaptured(__ctx, true);
    }

    private String employCaptured(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "employCaptured", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("employCaptured");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.employCaptured(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_employCaptured()
    {
        return begin_employCaptured(null, false, null);
    }

    public Ice.AsyncResult begin_employCaptured(java.util.Map<String, String> __ctx)
    {
        return begin_employCaptured(__ctx, true, null);
    }

    public Ice.AsyncResult begin_employCaptured(Ice.Callback __cb)
    {
        return begin_employCaptured(null, false, __cb);
    }

    public Ice.AsyncResult begin_employCaptured(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_employCaptured(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_employCaptured(Callback_Copy_employCaptured __cb)
    {
        return begin_employCaptured(null, false, __cb);
    }

    public Ice.AsyncResult begin_employCaptured(java.util.Map<String, String> __ctx, Callback_Copy_employCaptured __cb)
    {
        return begin_employCaptured(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_employCaptured(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__employCaptured_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __employCaptured_name, __cb);
        try
        {
            __result.__prepare(__employCaptured_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_employCaptured(Ice.AsyncResult __result)
        throws NotEnoughMoneyException
    {
        Ice.AsyncResult.__check(__result, this, __employCaptured_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean employCaptured_async(AMI_Copy_employCaptured __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__employCaptured_name);
            __r = begin_employCaptured(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __employCaptured_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean employCaptured_async(AMI_Copy_employCaptured __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__employCaptured_name);
            __r = begin_employCaptured(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __employCaptured_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallenge_name = "endChallenge";

    public EndChallengeResultView endChallenge()
        throws NoteException
    {
        return endChallenge(null, false);
    }

    public EndChallengeResultView endChallenge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endChallenge(__ctx, true);
    }

    private EndChallengeResultView endChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallenge");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.endChallenge(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endChallenge()
    {
        return begin_endChallenge(null, false, null);
    }

    public Ice.AsyncResult begin_endChallenge(java.util.Map<String, String> __ctx)
    {
        return begin_endChallenge(__ctx, true, null);
    }

    public Ice.AsyncResult begin_endChallenge(Ice.Callback __cb)
    {
        return begin_endChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallenge(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(Callback_Copy_endChallenge __cb)
    {
        return begin_endChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(java.util.Map<String, String> __ctx, Callback_Copy_endChallenge __cb)
    {
        return begin_endChallenge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
        try
        {
            __result.__prepare(__endChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public EndChallengeResultView end_endChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            EndChallengeResultView __ret;
            __ret = new EndChallengeResultView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endChallenge_async(AMI_Copy_endChallenge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endChallenge_async(AMI_Copy_endChallenge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallengeTa_name = "endChallengeTa";

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     **/
    public ChallengeTaResult endChallengeTa(int resFlag)
        throws NoteException
    {
        return endChallengeTa(resFlag, null, false);
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __ctx The Context map to send with the invocation.
     **/
    public ChallengeTaResult endChallengeTa(int resFlag, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endChallengeTa(resFlag, __ctx, true);
    }

    private ChallengeTaResult endChallengeTa(int resFlag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallengeTa", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallengeTa");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.endChallengeTa(resFlag, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag)
    {
        return begin_endChallengeTa(resFlag, null, false, null);
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, java.util.Map<String, String> __ctx)
    {
        return begin_endChallengeTa(resFlag, __ctx, true, null);
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, Ice.Callback __cb)
    {
        return begin_endChallengeTa(resFlag, null, false, __cb);
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallengeTa(resFlag, __ctx, true, __cb);
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, Callback_Copy_endChallengeTa __cb)
    {
        return begin_endChallengeTa(resFlag, null, false, __cb);
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallengeTa(int resFlag, java.util.Map<String, String> __ctx, Callback_Copy_endChallengeTa __cb)
    {
        return begin_endChallengeTa(resFlag, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallengeTa(int resFlag, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallengeTa_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallengeTa_name, __cb);
        try
        {
            __result.__prepare(__endChallengeTa_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(resFlag);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public ChallengeTaResult end_endChallengeTa(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallengeTa_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ChallengeTaResult __ret;
            __ret = new ChallengeTaResult();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallengeTa_async(AMI_Copy_endChallengeTa __cb, int resFlag)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallengeTa_name);
            __r = begin_endChallengeTa(resFlag, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallengeTa_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallengeTa_async(AMI_Copy_endChallengeTa __cb, int resFlag, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallengeTa_name);
            __r = begin_endChallengeTa(resFlag, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallengeTa_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endWarmup_name = "endWarmup";

    public byte endWarmup(byte remainHero)
        throws NoteException
    {
        return endWarmup(remainHero, null, false);
    }

    public byte endWarmup(byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endWarmup(remainHero, __ctx, true);
    }

    private byte endWarmup(byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endWarmup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endWarmup");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.endWarmup(remainHero, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endWarmup(byte remainHero)
    {
        return begin_endWarmup(remainHero, null, false, null);
    }

    public Ice.AsyncResult begin_endWarmup(byte remainHero, java.util.Map<String, String> __ctx)
    {
        return begin_endWarmup(remainHero, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endWarmup(byte remainHero, Ice.Callback __cb)
    {
        return begin_endWarmup(remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endWarmup(byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endWarmup(remainHero, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endWarmup(byte remainHero, Callback_Copy_endWarmup __cb)
    {
        return begin_endWarmup(remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endWarmup(byte remainHero, java.util.Map<String, String> __ctx, Callback_Copy_endWarmup __cb)
    {
        return begin_endWarmup(remainHero, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endWarmup(byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endWarmup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endWarmup_name, __cb);
        try
        {
            __result.__prepare(__endWarmup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(remainHero);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public byte end_endWarmup(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endWarmup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte __ret;
            __ret = __is.readByte();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endWarmup_async(AMI_Copy_endWarmup __cb, byte remainHero)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endWarmup_name);
            __r = begin_endWarmup(remainHero, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endWarmup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endWarmup_async(AMI_Copy_endWarmup __cb, byte remainHero, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endWarmup_name);
            __r = begin_endWarmup(remainHero, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endWarmup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __failChallenge_name = "failChallenge";

    public void failChallenge()
        throws NoteException
    {
        failChallenge(null, false);
    }

    public void failChallenge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        failChallenge(__ctx, true);
    }

    private void failChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "failChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("failChallenge");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    __del.failChallenge(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_failChallenge()
    {
        return begin_failChallenge(null, false, null);
    }

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx)
    {
        return begin_failChallenge(__ctx, true, null);
    }

    public Ice.AsyncResult begin_failChallenge(Ice.Callback __cb)
    {
        return begin_failChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_failChallenge(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_failChallenge(Callback_Copy_failChallenge __cb)
    {
        return begin_failChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, Callback_Copy_failChallenge __cb)
    {
        return begin_failChallenge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__failChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __failChallenge_name, __cb);
        try
        {
            __result.__prepare(__failChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_failChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __failChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean failChallenge_async(AMI_Copy_failChallenge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__failChallenge_name);
            __r = begin_failChallenge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __failChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean failChallenge_async(AMI_Copy_failChallenge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__failChallenge_name);
            __r = begin_failChallenge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __failChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getBigCopyView_name = "getBigCopyView";

    public BigCopyView getBigCopyView()
    {
        return getBigCopyView(null, false);
    }

    public BigCopyView getBigCopyView(java.util.Map<String, String> __ctx)
    {
        return getBigCopyView(__ctx, true);
    }

    private BigCopyView getBigCopyView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBigCopyView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBigCopyView");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getBigCopyView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBigCopyView()
    {
        return begin_getBigCopyView(null, false, null);
    }

    public Ice.AsyncResult begin_getBigCopyView(java.util.Map<String, String> __ctx)
    {
        return begin_getBigCopyView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBigCopyView(Ice.Callback __cb)
    {
        return begin_getBigCopyView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBigCopyView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBigCopyView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBigCopyView(Callback_Copy_getBigCopyView __cb)
    {
        return begin_getBigCopyView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBigCopyView(java.util.Map<String, String> __ctx, Callback_Copy_getBigCopyView __cb)
    {
        return begin_getBigCopyView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBigCopyView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBigCopyView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBigCopyView_name, __cb);
        try
        {
            __result.__prepare(__getBigCopyView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public BigCopyView end_getBigCopyView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBigCopyView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            BigCopyView __ret;
            __ret = new BigCopyView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getBigCopyView_async(AMI_Copy_getBigCopyView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigCopyView_name);
            __r = begin_getBigCopyView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigCopyView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getBigCopyView_async(AMI_Copy_getBigCopyView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBigCopyView_name);
            __r = begin_getBigCopyView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBigCopyView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getBuyMilitaryOrderView_name = "getBuyMilitaryOrderView";

    public BuyMilitaryOrderView getBuyMilitaryOrderView()
        throws NoteException
    {
        return getBuyMilitaryOrderView(null, false);
    }

    public BuyMilitaryOrderView getBuyMilitaryOrderView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getBuyMilitaryOrderView(__ctx, true);
    }

    private BuyMilitaryOrderView getBuyMilitaryOrderView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBuyMilitaryOrderView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBuyMilitaryOrderView");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getBuyMilitaryOrderView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBuyMilitaryOrderView()
    {
        return begin_getBuyMilitaryOrderView(null, false, null);
    }

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(java.util.Map<String, String> __ctx)
    {
        return begin_getBuyMilitaryOrderView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(Ice.Callback __cb)
    {
        return begin_getBuyMilitaryOrderView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBuyMilitaryOrderView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(Callback_Copy_getBuyMilitaryOrderView __cb)
    {
        return begin_getBuyMilitaryOrderView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBuyMilitaryOrderView(java.util.Map<String, String> __ctx, Callback_Copy_getBuyMilitaryOrderView __cb)
    {
        return begin_getBuyMilitaryOrderView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBuyMilitaryOrderView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBuyMilitaryOrderView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBuyMilitaryOrderView_name, __cb);
        try
        {
            __result.__prepare(__getBuyMilitaryOrderView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public BuyMilitaryOrderView end_getBuyMilitaryOrderView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getBuyMilitaryOrderView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            BuyMilitaryOrderView __ret;
            __ret = new BuyMilitaryOrderView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getBuyMilitaryOrderView_async(AMI_Copy_getBuyMilitaryOrderView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBuyMilitaryOrderView_name);
            __r = begin_getBuyMilitaryOrderView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBuyMilitaryOrderView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getBuyMilitaryOrderView_async(AMI_Copy_getBuyMilitaryOrderView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBuyMilitaryOrderView_name);
            __r = begin_getBuyMilitaryOrderView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBuyMilitaryOrderView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getChapterRewardView_name = "getChapterRewardView";

    public ChapterRewardView getChapterRewardView(int chapterId)
    {
        return getChapterRewardView(chapterId, null, false);
    }

    public ChapterRewardView getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx)
    {
        return getChapterRewardView(chapterId, __ctx, true);
    }

    private ChapterRewardView getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getChapterRewardView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getChapterRewardView");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getChapterRewardView(chapterId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId)
    {
        return begin_getChapterRewardView(chapterId, null, false, null);
    }

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx)
    {
        return begin_getChapterRewardView(chapterId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, Ice.Callback __cb)
    {
        return begin_getChapterRewardView(chapterId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChapterRewardView(chapterId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, Callback_Copy_getChapterRewardView __cb)
    {
        return begin_getChapterRewardView(chapterId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx, Callback_Copy_getChapterRewardView __cb)
    {
        return begin_getChapterRewardView(chapterId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChapterRewardView(int chapterId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChapterRewardView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChapterRewardView_name, __cb);
        try
        {
            __result.__prepare(__getChapterRewardView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(chapterId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ChapterRewardView end_getChapterRewardView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getChapterRewardView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ChapterRewardView __ret;
            __ret = new ChapterRewardView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getChapterRewardView_async(AMI_Copy_getChapterRewardView __cb, int chapterId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChapterRewardView_name);
            __r = begin_getChapterRewardView(chapterId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChapterRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getChapterRewardView_async(AMI_Copy_getChapterRewardView __cb, int chapterId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChapterRewardView_name);
            __r = begin_getChapterRewardView(chapterId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChapterRewardView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCopyChallengeInfo_name = "getCopyChallengeInfo";

    public String getCopyChallengeInfo(String idStr)
    {
        return getCopyChallengeInfo(idStr, null, false);
    }

    public String getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx)
    {
        return getCopyChallengeInfo(idStr, __ctx, true);
    }

    private String getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCopyChallengeInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCopyChallengeInfo");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getCopyChallengeInfo(idStr, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr)
    {
        return begin_getCopyChallengeInfo(idStr, null, false, null);
    }

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx)
    {
        return begin_getCopyChallengeInfo(idStr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, Ice.Callback __cb)
    {
        return begin_getCopyChallengeInfo(idStr, null, false, __cb);
    }

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCopyChallengeInfo(idStr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, Callback_Copy_getCopyChallengeInfo __cb)
    {
        return begin_getCopyChallengeInfo(idStr, null, false, __cb);
    }

    public Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx, Callback_Copy_getCopyChallengeInfo __cb)
    {
        return begin_getCopyChallengeInfo(idStr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCopyChallengeInfo(String idStr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCopyChallengeInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCopyChallengeInfo_name, __cb);
        try
        {
            __result.__prepare(__getCopyChallengeInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(idStr);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getCopyChallengeInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCopyChallengeInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getCopyChallengeInfo_async(AMI_Copy_getCopyChallengeInfo __cb, String idStr)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCopyChallengeInfo_name);
            __r = begin_getCopyChallengeInfo(idStr, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCopyChallengeInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getCopyChallengeInfo_async(AMI_Copy_getCopyChallengeInfo __cb, String idStr, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCopyChallengeInfo_name);
            __r = begin_getCopyChallengeInfo(idStr, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCopyChallengeInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getHuDongView_name = "getHuDongView";

    /**
     * 打开互动界面 返回HuDongView的lua格式
     **/
    public String getHuDongView(int copyId)
        throws NoteException
    {
        return getHuDongView(copyId, null, false);
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getHuDongView(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getHuDongView(copyId, __ctx, true);
    }

    private String getHuDongView(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getHuDongView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getHuDongView");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getHuDongView(copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId)
    {
        return begin_getHuDongView(copyId, null, false, null);
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_getHuDongView(copyId, __ctx, true, null);
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, Ice.Callback __cb)
    {
        return begin_getHuDongView(copyId, null, false, __cb);
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getHuDongView(copyId, __ctx, true, __cb);
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, Callback_Copy_getHuDongView __cb)
    {
        return begin_getHuDongView(copyId, null, false, __cb);
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHuDongView(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_getHuDongView __cb)
    {
        return begin_getHuDongView(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getHuDongView(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getHuDongView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getHuDongView_name, __cb);
        try
        {
            __result.__prepare(__getHuDongView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getHuDongView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getHuDongView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     **/
    public boolean getHuDongView_async(AMI_Copy_getHuDongView __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHuDongView_name);
            __r = begin_getHuDongView(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHuDongView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getHuDongView_async(AMI_Copy_getHuDongView __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHuDongView_name);
            __r = begin_getHuDongView(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHuDongView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getMyOccupy_name = "getMyOccupy";

    public IntIntPair getMyOccupy()
        throws NoteException
    {
        return getMyOccupy(null, false);
    }

    public IntIntPair getMyOccupy(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getMyOccupy(__ctx, true);
    }

    private IntIntPair getMyOccupy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMyOccupy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMyOccupy");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getMyOccupy(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMyOccupy()
    {
        return begin_getMyOccupy(null, false, null);
    }

    public Ice.AsyncResult begin_getMyOccupy(java.util.Map<String, String> __ctx)
    {
        return begin_getMyOccupy(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getMyOccupy(Ice.Callback __cb)
    {
        return begin_getMyOccupy(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMyOccupy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMyOccupy(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMyOccupy(Callback_Copy_getMyOccupy __cb)
    {
        return begin_getMyOccupy(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMyOccupy(java.util.Map<String, String> __ctx, Callback_Copy_getMyOccupy __cb)
    {
        return begin_getMyOccupy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMyOccupy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMyOccupy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMyOccupy_name, __cb);
        try
        {
            __result.__prepare(__getMyOccupy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public IntIntPair end_getMyOccupy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getMyOccupy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntIntPair __ret;
            __ret = new IntIntPair();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getMyOccupy_async(AMI_Copy_getMyOccupy __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMyOccupy_name);
            __r = begin_getMyOccupy(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMyOccupy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getMyOccupy_async(AMI_Copy_getMyOccupy __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMyOccupy_name);
            __r = begin_getMyOccupy(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMyOccupy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSmallCopyView_name = "getSmallCopyView";

    public SmallCopyView getSmallCopyView(int copyId)
    {
        return getSmallCopyView(copyId, null, false);
    }

    public SmallCopyView getSmallCopyView(int copyId, java.util.Map<String, String> __ctx)
    {
        return getSmallCopyView(copyId, __ctx, true);
    }

    private SmallCopyView getSmallCopyView(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSmallCopyView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSmallCopyView");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getSmallCopyView(copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSmallCopyView(int copyId)
    {
        return begin_getSmallCopyView(copyId, null, false, null);
    }

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_getSmallCopyView(copyId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, Ice.Callback __cb)
    {
        return begin_getSmallCopyView(copyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSmallCopyView(copyId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, Callback_Copy_getSmallCopyView __cb)
    {
        return begin_getSmallCopyView(copyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSmallCopyView(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_getSmallCopyView __cb)
    {
        return begin_getSmallCopyView(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSmallCopyView(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSmallCopyView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSmallCopyView_name, __cb);
        try
        {
            __result.__prepare(__getSmallCopyView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public SmallCopyView end_getSmallCopyView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSmallCopyView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            SmallCopyView __ret;
            __ret = new SmallCopyView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getSmallCopyView_async(AMI_Copy_getSmallCopyView __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSmallCopyView_name);
            __r = begin_getSmallCopyView(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSmallCopyView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getSmallCopyView_async(AMI_Copy_getSmallCopyView __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSmallCopyView_name);
            __r = begin_getSmallCopyView(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSmallCopyView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSmallCopyViewWithWarmup_name = "getSmallCopyViewWithWarmup";

    public SmallCopyViewWithWarmup getSmallCopyViewWithWarmup(int copyId)
        throws NoteException
    {
        return getSmallCopyViewWithWarmup(copyId, null, false);
    }

    public SmallCopyViewWithWarmup getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getSmallCopyViewWithWarmup(copyId, __ctx, true);
    }

    private SmallCopyViewWithWarmup getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSmallCopyViewWithWarmup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSmallCopyViewWithWarmup");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getSmallCopyViewWithWarmup(copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId)
    {
        return begin_getSmallCopyViewWithWarmup(copyId, null, false, null);
    }

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_getSmallCopyViewWithWarmup(copyId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, Ice.Callback __cb)
    {
        return begin_getSmallCopyViewWithWarmup(copyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSmallCopyViewWithWarmup(copyId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, Callback_Copy_getSmallCopyViewWithWarmup __cb)
    {
        return begin_getSmallCopyViewWithWarmup(copyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_getSmallCopyViewWithWarmup __cb)
    {
        return begin_getSmallCopyViewWithWarmup(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSmallCopyViewWithWarmup(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSmallCopyViewWithWarmup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSmallCopyViewWithWarmup_name, __cb);
        try
        {
            __result.__prepare(__getSmallCopyViewWithWarmup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public SmallCopyViewWithWarmup end_getSmallCopyViewWithWarmup(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getSmallCopyViewWithWarmup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            SmallCopyViewWithWarmup __ret;
            __ret = new SmallCopyViewWithWarmup();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getSmallCopyViewWithWarmup_async(AMI_Copy_getSmallCopyViewWithWarmup __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSmallCopyViewWithWarmup_name);
            __r = begin_getSmallCopyViewWithWarmup(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSmallCopyViewWithWarmup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getSmallCopyViewWithWarmup_async(AMI_Copy_getSmallCopyViewWithWarmup __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSmallCopyViewWithWarmup_name);
            __r = begin_getSmallCopyViewWithWarmup(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSmallCopyViewWithWarmup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getYuanbaoPrice_name = "getYuanbaoPrice";

    public int getYuanbaoPrice(ItemView[] items)
        throws NoteException
    {
        return getYuanbaoPrice(items, null, false);
    }

    public int getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getYuanbaoPrice(items, __ctx, true);
    }

    private int getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getYuanbaoPrice", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getYuanbaoPrice");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.getYuanbaoPrice(items, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items)
    {
        return begin_getYuanbaoPrice(items, null, false, null);
    }

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx)
    {
        return begin_getYuanbaoPrice(items, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, Ice.Callback __cb)
    {
        return begin_getYuanbaoPrice(items, null, false, __cb);
    }

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getYuanbaoPrice(items, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, Callback_Copy_getYuanbaoPrice __cb)
    {
        return begin_getYuanbaoPrice(items, null, false, __cb);
    }

    public Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx, Callback_Copy_getYuanbaoPrice __cb)
    {
        return begin_getYuanbaoPrice(items, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getYuanbaoPrice(ItemView[] items, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getYuanbaoPrice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getYuanbaoPrice_name, __cb);
        try
        {
            __result.__prepare(__getYuanbaoPrice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ItemViewSeqHelper.write(__os, items);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getYuanbaoPrice(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getYuanbaoPrice_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getYuanbaoPrice_async(AMI_Copy_getYuanbaoPrice __cb, ItemView[] items)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getYuanbaoPrice_name);
            __r = begin_getYuanbaoPrice(items, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getYuanbaoPrice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getYuanbaoPrice_async(AMI_Copy_getYuanbaoPrice __cb, ItemView[] items, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getYuanbaoPrice_name);
            __r = begin_getYuanbaoPrice(items, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getYuanbaoPrice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __giveCopy_name = "giveCopy";

    /**
     * 放弃占领
     **/
    public void giveCopy(int copyId)
        throws NoteException
    {
        giveCopy(copyId, null, false);
    }

    /**
     * 放弃占领
     * @param __ctx The Context map to send with the invocation.
     **/
    public void giveCopy(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        giveCopy(copyId, __ctx, true);
    }

    private void giveCopy(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "giveCopy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("giveCopy");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    __del.giveCopy(copyId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId)
    {
        return begin_giveCopy(copyId, null, false, null);
    }

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_giveCopy(copyId, __ctx, true, null);
    }

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, Ice.Callback __cb)
    {
        return begin_giveCopy(copyId, null, false, __cb);
    }

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_giveCopy(copyId, __ctx, true, __cb);
    }

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, Callback_Copy_giveCopy __cb)
    {
        return begin_giveCopy(copyId, null, false, __cb);
    }

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_giveCopy(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_giveCopy __cb)
    {
        return begin_giveCopy(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_giveCopy(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__giveCopy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __giveCopy_name, __cb);
        try
        {
            __result.__prepare(__giveCopy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_giveCopy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __giveCopy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     **/
    public boolean giveCopy_async(AMI_Copy_giveCopy __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__giveCopy_name);
            __r = begin_giveCopy(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __giveCopy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 放弃占领
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean giveCopy_async(AMI_Copy_giveCopy __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__giveCopy_name);
            __r = begin_giveCopy(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __giveCopy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __hallOfFameList_name = "hallOfFameList";

    public String hallOfFameList()
    {
        return hallOfFameList(null, false);
    }

    public String hallOfFameList(java.util.Map<String, String> __ctx)
    {
        return hallOfFameList(__ctx, true);
    }

    private String hallOfFameList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hallOfFameList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hallOfFameList");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.hallOfFameList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hallOfFameList()
    {
        return begin_hallOfFameList(null, false, null);
    }

    public Ice.AsyncResult begin_hallOfFameList(java.util.Map<String, String> __ctx)
    {
        return begin_hallOfFameList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hallOfFameList(Ice.Callback __cb)
    {
        return begin_hallOfFameList(null, false, __cb);
    }

    public Ice.AsyncResult begin_hallOfFameList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hallOfFameList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hallOfFameList(Callback_Copy_hallOfFameList __cb)
    {
        return begin_hallOfFameList(null, false, __cb);
    }

    public Ice.AsyncResult begin_hallOfFameList(java.util.Map<String, String> __ctx, Callback_Copy_hallOfFameList __cb)
    {
        return begin_hallOfFameList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hallOfFameList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hallOfFameList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hallOfFameList_name, __cb);
        try
        {
            __result.__prepare(__hallOfFameList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_hallOfFameList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hallOfFameList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean hallOfFameList_async(AMI_Copy_hallOfFameList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__hallOfFameList_name);
            __r = begin_hallOfFameList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __hallOfFameList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean hallOfFameList_async(AMI_Copy_hallOfFameList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__hallOfFameList_name);
            __r = begin_hallOfFameList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __hallOfFameList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __killCaptured_name = "killCaptured";

    public int killCaptured()
    {
        return killCaptured(null, false);
    }

    public int killCaptured(java.util.Map<String, String> __ctx)
    {
        return killCaptured(__ctx, true);
    }

    private int killCaptured(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "killCaptured", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("killCaptured");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.killCaptured(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_killCaptured()
    {
        return begin_killCaptured(null, false, null);
    }

    public Ice.AsyncResult begin_killCaptured(java.util.Map<String, String> __ctx)
    {
        return begin_killCaptured(__ctx, true, null);
    }

    public Ice.AsyncResult begin_killCaptured(Ice.Callback __cb)
    {
        return begin_killCaptured(null, false, __cb);
    }

    public Ice.AsyncResult begin_killCaptured(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_killCaptured(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_killCaptured(Callback_Copy_killCaptured __cb)
    {
        return begin_killCaptured(null, false, __cb);
    }

    public Ice.AsyncResult begin_killCaptured(java.util.Map<String, String> __ctx, Callback_Copy_killCaptured __cb)
    {
        return begin_killCaptured(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_killCaptured(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__killCaptured_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __killCaptured_name, __cb);
        try
        {
            __result.__prepare(__killCaptured_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_killCaptured(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __killCaptured_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean killCaptured_async(AMI_Copy_killCaptured __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__killCaptured_name);
            __r = begin_killCaptured(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __killCaptured_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean killCaptured_async(AMI_Copy_killCaptured __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__killCaptured_name);
            __r = begin_killCaptured(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __killCaptured_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __levyCopy_name = "levyCopy";

    /**
     * 征收
     **/
    public int levyCopy(int copyId)
        throws NoteException
    {
        return levyCopy(copyId, null, false);
    }

    /**
     * 征收
     * @param __ctx The Context map to send with the invocation.
     **/
    public int levyCopy(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return levyCopy(copyId, __ctx, true);
    }

    private int levyCopy(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "levyCopy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("levyCopy");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.levyCopy(copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 征收
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId)
    {
        return begin_levyCopy(copyId, null, false, null);
    }

    /**
     * 征收
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_levyCopy(copyId, __ctx, true, null);
    }

    /**
     * 征收
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, Ice.Callback __cb)
    {
        return begin_levyCopy(copyId, null, false, __cb);
    }

    /**
     * 征收
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_levyCopy(copyId, __ctx, true, __cb);
    }

    /**
     * 征收
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, Callback_Copy_levyCopy __cb)
    {
        return begin_levyCopy(copyId, null, false, __cb);
    }

    /**
     * 征收
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_levyCopy(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_levyCopy __cb)
    {
        return begin_levyCopy(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_levyCopy(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__levyCopy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __levyCopy_name, __cb);
        try
        {
            __result.__prepare(__levyCopy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_levyCopy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __levyCopy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 征收
     * @param __cb The callback object for the operation.
     **/
    public boolean levyCopy_async(AMI_Copy_levyCopy __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levyCopy_name);
            __r = begin_levyCopy(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levyCopy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 征收
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean levyCopy_async(AMI_Copy_levyCopy __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levyCopy_name);
            __r = begin_levyCopy(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levyCopy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __myOccupyList_name = "myOccupyList";

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     **/
    public String myOccupyList()
        throws NoteException
    {
        return myOccupyList(null, false);
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String myOccupyList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return myOccupyList(__ctx, true);
    }

    private String myOccupyList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "myOccupyList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("myOccupyList");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.myOccupyList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_myOccupyList()
    {
        return begin_myOccupyList(null, false, null);
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_myOccupyList(java.util.Map<String, String> __ctx)
    {
        return begin_myOccupyList(__ctx, true, null);
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_myOccupyList(Ice.Callback __cb)
    {
        return begin_myOccupyList(null, false, __cb);
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_myOccupyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_myOccupyList(__ctx, true, __cb);
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_myOccupyList(Callback_Copy_myOccupyList __cb)
    {
        return begin_myOccupyList(null, false, __cb);
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_myOccupyList(java.util.Map<String, String> __ctx, Callback_Copy_myOccupyList __cb)
    {
        return begin_myOccupyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_myOccupyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__myOccupyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __myOccupyList_name, __cb);
        try
        {
            __result.__prepare(__myOccupyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_myOccupyList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __myOccupyList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean myOccupyList_async(AMI_Copy_myOccupyList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__myOccupyList_name);
            __r = begin_myOccupyList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __myOccupyList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean myOccupyList_async(AMI_Copy_myOccupyList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__myOccupyList_name);
            __r = begin_myOccupyList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __myOccupyList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveChapterReward_name = "receiveChapterReward";

    public void receiveChapterReward(int chapterId, int level)
        throws NoteException
    {
        receiveChapterReward(chapterId, level, null, false);
    }

    public void receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        receiveChapterReward(chapterId, level, __ctx, true);
    }

    private void receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveChapterReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveChapterReward");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    __del.receiveChapterReward(chapterId, level, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level)
    {
        return begin_receiveChapterReward(chapterId, level, null, false, null);
    }

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx)
    {
        return begin_receiveChapterReward(chapterId, level, __ctx, true, null);
    }

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, Ice.Callback __cb)
    {
        return begin_receiveChapterReward(chapterId, level, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveChapterReward(chapterId, level, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, Callback_Copy_receiveChapterReward __cb)
    {
        return begin_receiveChapterReward(chapterId, level, null, false, __cb);
    }

    public Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx, Callback_Copy_receiveChapterReward __cb)
    {
        return begin_receiveChapterReward(chapterId, level, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveChapterReward(int chapterId, int level, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveChapterReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveChapterReward_name, __cb);
        try
        {
            __result.__prepare(__receiveChapterReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(chapterId);
            __os.writeInt(level);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_receiveChapterReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveChapterReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean receiveChapterReward_async(AMI_Copy_receiveChapterReward __cb, int chapterId, int level)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveChapterReward_name);
            __r = begin_receiveChapterReward(chapterId, level, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveChapterReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean receiveChapterReward_async(AMI_Copy_receiveChapterReward __cb, int chapterId, int level, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveChapterReward_name);
            __r = begin_receiveChapterReward(chapterId, level, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveChapterReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __releaseCaptured_name = "releaseCaptured";

    public void releaseCaptured()
    {
        releaseCaptured(null, false);
    }

    public void releaseCaptured(java.util.Map<String, String> __ctx)
    {
        releaseCaptured(__ctx, true);
    }

    private void releaseCaptured(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "releaseCaptured", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    __del.releaseCaptured(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_releaseCaptured()
    {
        return begin_releaseCaptured(null, false, null);
    }

    public Ice.AsyncResult begin_releaseCaptured(java.util.Map<String, String> __ctx)
    {
        return begin_releaseCaptured(__ctx, true, null);
    }

    public Ice.AsyncResult begin_releaseCaptured(Ice.Callback __cb)
    {
        return begin_releaseCaptured(null, false, __cb);
    }

    public Ice.AsyncResult begin_releaseCaptured(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_releaseCaptured(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_releaseCaptured(Callback_Copy_releaseCaptured __cb)
    {
        return begin_releaseCaptured(null, false, __cb);
    }

    public Ice.AsyncResult begin_releaseCaptured(java.util.Map<String, String> __ctx, Callback_Copy_releaseCaptured __cb)
    {
        return begin_releaseCaptured(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_releaseCaptured(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __releaseCaptured_name, __cb);
        try
        {
            __result.__prepare(__releaseCaptured_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_releaseCaptured(Ice.AsyncResult __result)
    {
        __end(__result, __releaseCaptured_name);
    }

    public boolean releaseCaptured_async(AMI_Copy_releaseCaptured __cb)
    {
        Ice.AsyncResult __r = begin_releaseCaptured(null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean releaseCaptured_async(AMI_Copy_releaseCaptured __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_releaseCaptured(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __worshipTa_name = "worshipTa";

    /**
     * 膜拜TA
     **/
    public int worshipTa(int copyId)
        throws NoteException
    {
        return worshipTa(copyId, null, false);
    }

    /**
     * 膜拜TA
     * @param __ctx The Context map to send with the invocation.
     **/
    public int worshipTa(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return worshipTa(copyId, __ctx, true);
    }

    private int worshipTa(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "worshipTa", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("worshipTa");
                    __delBase = __getDelegate(false);
                    _CopyDel __del = (_CopyDel)__delBase;
                    return __del.worshipTa(copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId)
    {
        return begin_worshipTa(copyId, null, false, null);
    }

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_worshipTa(copyId, __ctx, true, null);
    }

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, Ice.Callback __cb)
    {
        return begin_worshipTa(copyId, null, false, __cb);
    }

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_worshipTa(copyId, __ctx, true, __cb);
    }

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, Callback_Copy_worshipTa __cb)
    {
        return begin_worshipTa(copyId, null, false, __cb);
    }

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_worshipTa(int copyId, java.util.Map<String, String> __ctx, Callback_Copy_worshipTa __cb)
    {
        return begin_worshipTa(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_worshipTa(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__worshipTa_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __worshipTa_name, __cb);
        try
        {
            __result.__prepare(__worshipTa_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_worshipTa(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __worshipTa_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     **/
    public boolean worshipTa_async(AMI_Copy_worshipTa __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__worshipTa_name);
            __r = begin_worshipTa(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __worshipTa_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 膜拜TA
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean worshipTa_async(AMI_Copy_worshipTa __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__worshipTa_name);
            __r = begin_worshipTa(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __worshipTa_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static CopyPrx checkedCast(Ice.ObjectPrx __obj)
    {
        CopyPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CopyPrx)
            {
                __d = (CopyPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    CopyPrxHelper __h = new CopyPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CopyPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CopyPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CopyPrx)
            {
                __d = (CopyPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    CopyPrxHelper __h = new CopyPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CopyPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CopyPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    CopyPrxHelper __h = new CopyPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CopyPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CopyPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    CopyPrxHelper __h = new CopyPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CopyPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        CopyPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CopyPrx)
            {
                __d = (CopyPrx)__obj;
            }
            else
            {
                CopyPrxHelper __h = new CopyPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CopyPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CopyPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CopyPrxHelper __h = new CopyPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Copy"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _CopyDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _CopyDelD();
    }

    public static void __write(IceInternal.BasicStream __os, CopyPrx v)
    {
        __os.writeProxy(v);
    }

    public static CopyPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CopyPrxHelper result = new CopyPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
