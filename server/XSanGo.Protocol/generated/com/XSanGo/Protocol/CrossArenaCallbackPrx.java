// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ArenaRank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 跨服竞技场回调
 **/
public interface CrossArenaCallbackPrx extends Ice.ObjectPrx
{
    /**
     * 更新跨服竞技场数据
     **/
    public RivalRank updateArena(RivalRank rank, PvpOpponentFormationView pvpView);

    /**
     * 更新跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     **/
    public RivalRank updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx);

    /**
     * 更新跨服竞技场数据
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView);

    /**
     * 更新跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx);

    /**
     * 更新跨服竞技场数据
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, Ice.Callback __cb);

    /**
     * 更新跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 更新跨服竞技场数据
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, Callback_CrossArenaCallback_updateArena __cb);

    /**
     * 更新跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_updateArena __cb);

    /**
     * 更新跨服竞技场数据
     * @param __result The asynchronous result object.
     **/
    public RivalRank end_updateArena(Ice.AsyncResult __result);

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public boolean updateArena_async(AMI_CrossArenaCallback_updateArena __cb, RivalRank rank, PvpOpponentFormationView pvpView);

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean updateArena_async(AMI_CrossArenaCallback_updateArena __cb, RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx);

    /**
     * 获取玩家跨服竞技场数据
     **/
    public RivalRank getRoleRivalRank(String roleId);

    /**
     * 获取玩家跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     **/
    public RivalRank getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取玩家跨服竞技场数据
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId);

    /**
     * 获取玩家跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, Ice.Callback __cb);

    /**
     * 获取玩家跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, Callback_CrossArenaCallback_getRoleRivalRank __cb);

    /**
     * 获取玩家跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getRoleRivalRank __cb);

    /**
     * 获取玩家跨服竞技场数据
     * @param __result The asynchronous result object.
     **/
    public RivalRank end_getRoleRivalRank(Ice.AsyncResult __result);

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public boolean getRoleRivalRank_async(AMI_CrossArenaCallback_getRoleRivalRank __cb, String roleId);

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRoleRivalRank_async(AMI_CrossArenaCallback_getRoleRivalRank __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取玩家保存的阵容信息
     **/
    public PvpOpponentFormationView getRolePvpView(String roleId);

    /**
     * 获取玩家保存的阵容信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public PvpOpponentFormationView getRolePvpView(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取玩家保存的阵容信息
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId);

    /**
     * 获取玩家保存的阵容信息
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, Ice.Callback __cb);

    /**
     * 获取玩家保存的阵容信息
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, Callback_CrossArenaCallback_getRolePvpView __cb);

    /**
     * 获取玩家保存的阵容信息
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getRolePvpView __cb);

    /**
     * 获取玩家保存的阵容信息
     * @param __result The asynchronous result object.
     **/
    public PvpOpponentFormationView end_getRolePvpView(Ice.AsyncResult __result);

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     **/
    public boolean getRolePvpView_async(AMI_CrossArenaCallback_getRolePvpView __cb, String roleId);

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRolePvpView_async(AMI_CrossArenaCallback_getRolePvpView __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场排行榜
     **/
    public RivalRank[] getArenaRank(int size);

    /**
     * 获取跨服竞技场排行榜
     * @param __ctx The Context map to send with the invocation.
     **/
    public RivalRank[] getArenaRank(int size, java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场排行榜
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size);

    /**
     * 获取跨服竞技场排行榜
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, Ice.Callback __cb);

    /**
     * 获取跨服竞技场排行榜
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, Callback_CrossArenaCallback_getArenaRank __cb);

    /**
     * 获取跨服竞技场排行榜
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getArenaRank __cb);

    /**
     * 获取跨服竞技场排行榜
     * @param __result The asynchronous result object.
     **/
    public RivalRank[] end_getArenaRank(Ice.AsyncResult __result);

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     **/
    public boolean getArenaRank_async(AMI_CrossArenaCallback_getArenaRank __cb, int size);

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getArenaRank_async(AMI_CrossArenaCallback_getArenaRank __cb, int size, java.util.Map<String, String> __ctx);

    /**
     * 刷新对手
     **/
    public RivalRank[] refreshRival(String roleId);

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     **/
    public RivalRank[] refreshRival(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 刷新对手
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId);

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 刷新对手
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, Ice.Callback __cb);

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 刷新对手
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, Callback_CrossArenaCallback_refreshRival __cb);

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_refreshRival __cb);

    /**
     * 刷新对手
     * @param __result The asynchronous result object.
     **/
    public RivalRank[] end_refreshRival(Ice.AsyncResult __result);

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public boolean refreshRival_async(AMI_CrossArenaCallback_refreshRival __cb, String roleId);

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean refreshRival_async(AMI_CrossArenaCallback_refreshRival __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取双方竞技场PVPView
     **/
    public CrossArenaPvpView[] getCrossArenaPvpView(String leftRoleId, String rightRoleId);

    /**
     * 获取双方竞技场PVPView
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossArenaPvpView[] getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx);

    /**
     * 获取双方竞技场PVPView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId);

    /**
     * 获取双方竞技场PVPView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx);

    /**
     * 获取双方竞技场PVPView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, Ice.Callback __cb);

    /**
     * 获取双方竞技场PVPView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取双方竞技场PVPView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, Callback_CrossArenaCallback_getCrossArenaPvpView __cb);

    /**
     * 获取双方竞技场PVPView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getCrossArenaPvpView __cb);

    /**
     * 获取双方竞技场PVPView
     * @param __result The asynchronous result object.
     **/
    public CrossArenaPvpView[] end_getCrossArenaPvpView(Ice.AsyncResult __result);

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossArenaPvpView_async(AMI_CrossArenaCallback_getCrossArenaPvpView __cb, String leftRoleId, String rightRoleId);

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossArenaPvpView_async(AMI_CrossArenaCallback_getCrossArenaPvpView __cb, String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx);

    /**
     * 结束战斗，返回当前排名和排名变化
     **/
    public IntIntPair endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __ctx The Context map to send with the invocation.
     **/
    public IntIntPair endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, Ice.Callback __cb);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, Callback_CrossArenaCallback_endFight __cb);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_endFight __cb);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __result The asynchronous result object.
     **/
    public IntIntPair end_endFight(Ice.AsyncResult __result);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     **/
    public boolean endFight_async(AMI_CrossArenaCallback_endFight __cb, String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView);

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endFight_async(AMI_CrossArenaCallback_endFight __cb, String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx);

    /**
     * 设置个性签名
     **/
    public void setSignature(String roleId, String signature);

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setSignature(String roleId, String signature, java.util.Map<String, String> __ctx);

    /**
     * 设置个性签名
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature);

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, java.util.Map<String, String> __ctx);

    /**
     * 设置个性签名
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, Ice.Callback __cb);

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置个性签名
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, Callback_CrossArenaCallback_setSignature __cb);

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_setSignature __cb);

    /**
     * 设置个性签名
     * @param __result The asynchronous result object.
     **/
    public void end_setSignature(Ice.AsyncResult __result);

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public boolean setSignature_async(AMI_CrossArenaCallback_setSignature __cb, String roleId, String signature);

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean setSignature_async(AMI_CrossArenaCallback_setSignature __cb, String roleId, String signature, java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场战报
     **/
    public FightMovieView getCrossMovie(String id)
        throws NoteException;

    /**
     * 获取跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     **/
    public FightMovieView getCrossMovie(String id, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取跨服竞技场战报
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id);

    /**
     * 获取跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx);

    /**
     * 获取跨服竞技场战报
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, Ice.Callback __cb);

    /**
     * 获取跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取跨服竞技场战报
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, Callback_CrossArenaCallback_getCrossMovie __cb);

    /**
     * 获取跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getCrossMovie __cb);

    /**
     * 获取跨服竞技场战报
     * @param __result The asynchronous result object.
     **/
    public FightMovieView end_getCrossMovie(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossMovie_async(AMI_CrossArenaCallback_getCrossMovie __cb, String id);

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossMovie_async(AMI_CrossArenaCallback_getCrossMovie __cb, String id, java.util.Map<String, String> __ctx);
}
