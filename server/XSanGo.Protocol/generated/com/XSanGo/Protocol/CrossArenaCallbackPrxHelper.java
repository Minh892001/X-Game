// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ArenaRank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 跨服竞技场回调
 **/
public final class CrossArenaCallbackPrxHelper extends Ice.ObjectPrxHelperBase implements CrossArenaCallbackPrx
{
    private static final String __endFight_name = "endFight";

    /**
     * 结束战斗，返回当前排名和排名变化
     **/
    public IntIntPair endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView)
    {
        return endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, null, false);
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __ctx The Context map to send with the invocation.
     **/
    public IntIntPair endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx)
    {
        return endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, __ctx, true);
    }

    private IntIntPair endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endFight", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endFight");
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    return __del.endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView)
    {
        return begin_endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, null, false, null);
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx)
    {
        return begin_endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, __ctx, true, null);
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, Ice.Callback __cb)
    {
        return begin_endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, null, false, __cb);
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, __ctx, true, __cb);
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, Callback_CrossArenaCallback_endFight __cb)
    {
        return begin_endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, null, false, __cb);
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_endFight __cb)
    {
        return begin_endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endFight(String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endFight_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endFight_name, __cb);
        try
        {
            __result.__prepare(__endFight_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sourceRoleId);
            __os.writeBool(isWin);
            __os.writeString(rivalRoleId);
            __os.writeString(movieId);
            movieView.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public IntIntPair end_endFight(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __endFight_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntIntPair __ret;
            __ret = new IntIntPair();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     **/
    public boolean endFight_async(AMI_CrossArenaCallback_endFight __cb, String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endFight_name);
            __r = begin_endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 结束战斗，返回当前排名和排名变化
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endFight_async(AMI_CrossArenaCallback_endFight __cb, String sourceRoleId, boolean isWin, String rivalRoleId, String movieId, FightMovieView movieView, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endFight_name);
            __r = begin_endFight(sourceRoleId, isWin, rivalRoleId, movieId, movieView, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getArenaRank_name = "getArenaRank";

    /**
     * 获取跨服竞技场排行榜
     **/
    public RivalRank[] getArenaRank(int size)
    {
        return getArenaRank(size, null, false);
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __ctx The Context map to send with the invocation.
     **/
    public RivalRank[] getArenaRank(int size, java.util.Map<String, String> __ctx)
    {
        return getArenaRank(size, __ctx, true);
    }

    private RivalRank[] getArenaRank(int size, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getArenaRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getArenaRank");
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    return __del.getArenaRank(size, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size)
    {
        return begin_getArenaRank(size, null, false, null);
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, java.util.Map<String, String> __ctx)
    {
        return begin_getArenaRank(size, __ctx, true, null);
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, Ice.Callback __cb)
    {
        return begin_getArenaRank(size, null, false, __cb);
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getArenaRank(size, __ctx, true, __cb);
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, Callback_CrossArenaCallback_getArenaRank __cb)
    {
        return begin_getArenaRank(size, null, false, __cb);
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getArenaRank(int size, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getArenaRank __cb)
    {
        return begin_getArenaRank(size, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getArenaRank(int size, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getArenaRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getArenaRank_name, __cb);
        try
        {
            __result.__prepare(__getArenaRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(size);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public RivalRank[] end_getArenaRank(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getArenaRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RivalRank[] __ret;
            __ret = RivalRankSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     **/
    public boolean getArenaRank_async(AMI_CrossArenaCallback_getArenaRank __cb, int size)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getArenaRank_name);
            __r = begin_getArenaRank(size, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getArenaRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取跨服竞技场排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getArenaRank_async(AMI_CrossArenaCallback_getArenaRank __cb, int size, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getArenaRank_name);
            __r = begin_getArenaRank(size, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getArenaRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCrossArenaPvpView_name = "getCrossArenaPvpView";

    /**
     * 获取双方竞技场PVPView
     **/
    public CrossArenaPvpView[] getCrossArenaPvpView(String leftRoleId, String rightRoleId)
    {
        return getCrossArenaPvpView(leftRoleId, rightRoleId, null, false);
    }

    /**
     * 获取双方竞技场PVPView
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossArenaPvpView[] getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx)
    {
        return getCrossArenaPvpView(leftRoleId, rightRoleId, __ctx, true);
    }

    private CrossArenaPvpView[] getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCrossArenaPvpView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCrossArenaPvpView");
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    return __del.getCrossArenaPvpView(leftRoleId, rightRoleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId)
    {
        return begin_getCrossArenaPvpView(leftRoleId, rightRoleId, null, false, null);
    }

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx)
    {
        return begin_getCrossArenaPvpView(leftRoleId, rightRoleId, __ctx, true, null);
    }

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, Ice.Callback __cb)
    {
        return begin_getCrossArenaPvpView(leftRoleId, rightRoleId, null, false, __cb);
    }

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCrossArenaPvpView(leftRoleId, rightRoleId, __ctx, true, __cb);
    }

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, Callback_CrossArenaCallback_getCrossArenaPvpView __cb)
    {
        return begin_getCrossArenaPvpView(leftRoleId, rightRoleId, null, false, __cb);
    }

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getCrossArenaPvpView __cb)
    {
        return begin_getCrossArenaPvpView(leftRoleId, rightRoleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCrossArenaPvpView(String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCrossArenaPvpView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCrossArenaPvpView_name, __cb);
        try
        {
            __result.__prepare(__getCrossArenaPvpView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(leftRoleId);
            __os.writeString(rightRoleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public CrossArenaPvpView[] end_getCrossArenaPvpView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCrossArenaPvpView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CrossArenaPvpView[] __ret;
            __ret = CrossArenaPvpViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossArenaPvpView_async(AMI_CrossArenaCallback_getCrossArenaPvpView __cb, String leftRoleId, String rightRoleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossArenaPvpView_name);
            __r = begin_getCrossArenaPvpView(leftRoleId, rightRoleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossArenaPvpView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取双方竞技场PVPView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossArenaPvpView_async(AMI_CrossArenaCallback_getCrossArenaPvpView __cb, String leftRoleId, String rightRoleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossArenaPvpView_name);
            __r = begin_getCrossArenaPvpView(leftRoleId, rightRoleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossArenaPvpView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCrossMovie_name = "getCrossMovie";

    /**
     * 获取跨服竞技场战报
     **/
    public FightMovieView getCrossMovie(String id)
        throws NoteException
    {
        return getCrossMovie(id, null, false);
    }

    /**
     * 获取跨服竞技场战报
     * @param __ctx The Context map to send with the invocation.
     **/
    public FightMovieView getCrossMovie(String id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCrossMovie(id, __ctx, true);
    }

    private FightMovieView getCrossMovie(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCrossMovie", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCrossMovie");
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    return __del.getCrossMovie(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id)
    {
        return begin_getCrossMovie(id, null, false, null);
    }

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx)
    {
        return begin_getCrossMovie(id, __ctx, true, null);
    }

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, Ice.Callback __cb)
    {
        return begin_getCrossMovie(id, null, false, __cb);
    }

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCrossMovie(id, __ctx, true, __cb);
    }

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, Callback_CrossArenaCallback_getCrossMovie __cb)
    {
        return begin_getCrossMovie(id, null, false, __cb);
    }

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getCrossMovie __cb)
    {
        return begin_getCrossMovie(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCrossMovie(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCrossMovie_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCrossMovie_name, __cb);
        try
        {
            __result.__prepare(__getCrossMovie_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public FightMovieView end_getCrossMovie(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCrossMovie_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightMovieView __ret;
            __ret = new FightMovieView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossMovie_async(AMI_CrossArenaCallback_getCrossMovie __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossMovie_name);
            __r = begin_getCrossMovie(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取跨服竞技场战报
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossMovie_async(AMI_CrossArenaCallback_getCrossMovie __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossMovie_name);
            __r = begin_getCrossMovie(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRolePvpView_name = "getRolePvpView";

    /**
     * 获取玩家保存的阵容信息
     **/
    public PvpOpponentFormationView getRolePvpView(String roleId)
    {
        return getRolePvpView(roleId, null, false);
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public PvpOpponentFormationView getRolePvpView(String roleId, java.util.Map<String, String> __ctx)
    {
        return getRolePvpView(roleId, __ctx, true);
    }

    private PvpOpponentFormationView getRolePvpView(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRolePvpView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRolePvpView");
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    return __del.getRolePvpView(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId)
    {
        return begin_getRolePvpView(roleId, null, false, null);
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_getRolePvpView(roleId, __ctx, true, null);
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, Ice.Callback __cb)
    {
        return begin_getRolePvpView(roleId, null, false, __cb);
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRolePvpView(roleId, __ctx, true, __cb);
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, Callback_CrossArenaCallback_getRolePvpView __cb)
    {
        return begin_getRolePvpView(roleId, null, false, __cb);
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRolePvpView(String roleId, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getRolePvpView __cb)
    {
        return begin_getRolePvpView(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRolePvpView(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRolePvpView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRolePvpView_name, __cb);
        try
        {
            __result.__prepare(__getRolePvpView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public PvpOpponentFormationView end_getRolePvpView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRolePvpView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PvpOpponentFormationView __ret;
            __ret = new PvpOpponentFormationView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     **/
    public boolean getRolePvpView_async(AMI_CrossArenaCallback_getRolePvpView __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRolePvpView_name);
            __r = begin_getRolePvpView(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRolePvpView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取玩家保存的阵容信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRolePvpView_async(AMI_CrossArenaCallback_getRolePvpView __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRolePvpView_name);
            __r = begin_getRolePvpView(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRolePvpView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRoleRivalRank_name = "getRoleRivalRank";

    /**
     * 获取玩家跨服竞技场数据
     **/
    public RivalRank getRoleRivalRank(String roleId)
    {
        return getRoleRivalRank(roleId, null, false);
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     **/
    public RivalRank getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx)
    {
        return getRoleRivalRank(roleId, __ctx, true);
    }

    private RivalRank getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRoleRivalRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRoleRivalRank");
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    return __del.getRoleRivalRank(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId)
    {
        return begin_getRoleRivalRank(roleId, null, false, null);
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_getRoleRivalRank(roleId, __ctx, true, null);
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, Ice.Callback __cb)
    {
        return begin_getRoleRivalRank(roleId, null, false, __cb);
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRoleRivalRank(roleId, __ctx, true, __cb);
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, Callback_CrossArenaCallback_getRoleRivalRank __cb)
    {
        return begin_getRoleRivalRank(roleId, null, false, __cb);
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_getRoleRivalRank __cb)
    {
        return begin_getRoleRivalRank(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRoleRivalRank(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRoleRivalRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRoleRivalRank_name, __cb);
        try
        {
            __result.__prepare(__getRoleRivalRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public RivalRank end_getRoleRivalRank(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRoleRivalRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RivalRank __ret;
            __ret = new RivalRank();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public boolean getRoleRivalRank_async(AMI_CrossArenaCallback_getRoleRivalRank __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRoleRivalRank_name);
            __r = begin_getRoleRivalRank(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRoleRivalRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取玩家跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRoleRivalRank_async(AMI_CrossArenaCallback_getRoleRivalRank __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRoleRivalRank_name);
            __r = begin_getRoleRivalRank(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRoleRivalRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refreshRival_name = "refreshRival";

    /**
     * 刷新对手
     **/
    public RivalRank[] refreshRival(String roleId)
    {
        return refreshRival(roleId, null, false);
    }

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     **/
    public RivalRank[] refreshRival(String roleId, java.util.Map<String, String> __ctx)
    {
        return refreshRival(roleId, __ctx, true);
    }

    private RivalRank[] refreshRival(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refreshRival", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refreshRival");
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    return __del.refreshRival(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId)
    {
        return begin_refreshRival(roleId, null, false, null);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_refreshRival(roleId, __ctx, true, null);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, Ice.Callback __cb)
    {
        return begin_refreshRival(roleId, null, false, __cb);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refreshRival(roleId, __ctx, true, __cb);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, Callback_CrossArenaCallback_refreshRival __cb)
    {
        return begin_refreshRival(roleId, null, false, __cb);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_refreshRival __cb)
    {
        return begin_refreshRival(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refreshRival_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refreshRival_name, __cb);
        try
        {
            __result.__prepare(__refreshRival_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public RivalRank[] end_refreshRival(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __refreshRival_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RivalRank[] __ret;
            __ret = RivalRankSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public boolean refreshRival_async(AMI_CrossArenaCallback_refreshRival __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshRival_name);
            __r = begin_refreshRival(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean refreshRival_async(AMI_CrossArenaCallback_refreshRival __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshRival_name);
            __r = begin_refreshRival(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setSignature_name = "setSignature";

    /**
     * 设置个性签名
     **/
    public void setSignature(String roleId, String signature)
    {
        setSignature(roleId, signature, null, false);
    }

    /**
     * 设置个性签名
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setSignature(String roleId, String signature, java.util.Map<String, String> __ctx)
    {
        setSignature(roleId, signature, __ctx, true);
    }

    private void setSignature(String roleId, String signature, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setSignature", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    __del.setSignature(roleId, signature, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature)
    {
        return begin_setSignature(roleId, signature, null, false, null);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, java.util.Map<String, String> __ctx)
    {
        return begin_setSignature(roleId, signature, __ctx, true, null);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, Ice.Callback __cb)
    {
        return begin_setSignature(roleId, signature, null, false, __cb);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSignature(roleId, signature, __ctx, true, __cb);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, Callback_CrossArenaCallback_setSignature __cb)
    {
        return begin_setSignature(roleId, signature, null, false, __cb);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSignature(String roleId, String signature, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_setSignature __cb)
    {
        return begin_setSignature(roleId, signature, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSignature(String roleId, String signature, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSignature_name, __cb);
        try
        {
            __result.__prepare(__setSignature_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __os.writeString(signature);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_setSignature(Ice.AsyncResult __result)
    {
        __end(__result, __setSignature_name);
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     **/
    public boolean setSignature_async(AMI_CrossArenaCallback_setSignature __cb, String roleId, String signature)
    {
        Ice.AsyncResult __r = begin_setSignature(roleId, signature, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 设置个性签名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean setSignature_async(AMI_CrossArenaCallback_setSignature __cb, String roleId, String signature, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_setSignature(roleId, signature, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __updateArena_name = "updateArena";

    /**
     * 更新跨服竞技场数据
     **/
    public RivalRank updateArena(RivalRank rank, PvpOpponentFormationView pvpView)
    {
        return updateArena(rank, pvpView, null, false);
    }

    /**
     * 更新跨服竞技场数据
     * @param __ctx The Context map to send with the invocation.
     **/
    public RivalRank updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
    {
        return updateArena(rank, pvpView, __ctx, true);
    }

    private RivalRank updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "updateArena", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("updateArena");
                    __delBase = __getDelegate(false);
                    _CrossArenaCallbackDel __del = (_CrossArenaCallbackDel)__delBase;
                    return __del.updateArena(rank, pvpView, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView)
    {
        return begin_updateArena(rank, pvpView, null, false, null);
    }

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
    {
        return begin_updateArena(rank, pvpView, __ctx, true, null);
    }

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, Ice.Callback __cb)
    {
        return begin_updateArena(rank, pvpView, null, false, __cb);
    }

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateArena(rank, pvpView, __ctx, true, __cb);
    }

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, Callback_CrossArenaCallback_updateArena __cb)
    {
        return begin_updateArena(rank, pvpView, null, false, __cb);
    }

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Callback_CrossArenaCallback_updateArena __cb)
    {
        return begin_updateArena(rank, pvpView, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateArena(RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateArena_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateArena_name, __cb);
        try
        {
            __result.__prepare(__updateArena_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            rank.__write(__os);
            pvpView.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public RivalRank end_updateArena(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __updateArena_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RivalRank __ret;
            __ret = new RivalRank();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     **/
    public boolean updateArena_async(AMI_CrossArenaCallback_updateArena __cb, RivalRank rank, PvpOpponentFormationView pvpView)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__updateArena_name);
            __r = begin_updateArena(rank, pvpView, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __updateArena_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 更新跨服竞技场数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean updateArena_async(AMI_CrossArenaCallback_updateArena __cb, RivalRank rank, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__updateArena_name);
            __r = begin_updateArena(rank, pvpView, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __updateArena_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static CrossArenaCallbackPrx checkedCast(Ice.ObjectPrx __obj)
    {
        CrossArenaCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossArenaCallbackPrx)
            {
                __d = (CrossArenaCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    CrossArenaCallbackPrxHelper __h = new CrossArenaCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CrossArenaCallbackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CrossArenaCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossArenaCallbackPrx)
            {
                __d = (CrossArenaCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    CrossArenaCallbackPrxHelper __h = new CrossArenaCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CrossArenaCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CrossArenaCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    CrossArenaCallbackPrxHelper __h = new CrossArenaCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CrossArenaCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CrossArenaCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    CrossArenaCallbackPrxHelper __h = new CrossArenaCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CrossArenaCallbackPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        CrossArenaCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossArenaCallbackPrx)
            {
                __d = (CrossArenaCallbackPrx)__obj;
            }
            else
            {
                CrossArenaCallbackPrxHelper __h = new CrossArenaCallbackPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CrossArenaCallbackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CrossArenaCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CrossArenaCallbackPrxHelper __h = new CrossArenaCallbackPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::CrossArenaCallback"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _CrossArenaCallbackDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _CrossArenaCallbackDelD();
    }

    public static void __write(IceInternal.BasicStream __os, CrossArenaCallbackPrx v)
    {
        __os.writeProxy(v);
    }

    public static CrossArenaCallbackPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CrossArenaCallbackPrxHelper result = new CrossArenaCallbackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
