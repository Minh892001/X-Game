// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ArenaRank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 跨服竞技场通信
 **/
public interface CrossArenaPrx extends Ice.ObjectPrx
{
    public boolean ping(long time);

    public boolean ping(long time, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_ping(long time);

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_ping(long time, Ice.Callback __cb);

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_ping(long time, Callback_CrossArena_ping __cb);

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx, Callback_CrossArena_ping __cb);

    public boolean end_ping(Ice.AsyncResult __result);

    public boolean ping_async(AMI_CrossArena_ping __cb, long time);

    public boolean ping_async(AMI_CrossArena_ping __cb, long time, java.util.Map<String, String> __ctx);

    public void setCallback(CrossArenaCallbackPrx cb);

    public void setCallback(CrossArenaCallbackPrx cb, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setCallback(CrossArenaCallbackPrx cb);

    public Ice.AsyncResult begin_setCallback(CrossArenaCallbackPrx cb, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setCallback(CrossArenaCallbackPrx cb, Ice.Callback __cb);

    public Ice.AsyncResult begin_setCallback(CrossArenaCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setCallback(CrossArenaCallbackPrx cb, Callback_CrossArena_setCallback __cb);

    public Ice.AsyncResult begin_setCallback(CrossArenaCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_CrossArena_setCallback __cb);

    public void end_setCallback(Ice.AsyncResult __result);

    public boolean setCallback_async(AMI_CrossArena_setCallback __cb, CrossArenaCallbackPrx cb);

    public boolean setCallback_async(AMI_CrossArena_setCallback __cb, CrossArenaCallbackPrx cb, java.util.Map<String, String> __ctx);

    public void initRank();

    public void initRank(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_initRank();

    public Ice.AsyncResult begin_initRank(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_initRank(Ice.Callback __cb);

    public Ice.AsyncResult begin_initRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_initRank(Callback_CrossArena_initRank __cb);

    public Ice.AsyncResult begin_initRank(java.util.Map<String, String> __ctx, Callback_CrossArena_initRank __cb);

    public void end_initRank(Ice.AsyncResult __result);

    public boolean initRank_async(AMI_CrossArena_initRank __cb);

    public boolean initRank_async(AMI_CrossArena_initRank __cb, java.util.Map<String, String> __ctx);

    /**
     * 增加战斗记录
     **/
    public void addCrossArenaLog(String roleId, ArenaReportView report);

    /**
     * 增加战斗记录
     * @param __ctx The Context map to send with the invocation.
     **/
    public void addCrossArenaLog(String roleId, ArenaReportView report, java.util.Map<String, String> __ctx);

    /**
     * 增加战斗记录
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCrossArenaLog(String roleId, ArenaReportView report);

    /**
     * 增加战斗记录
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCrossArenaLog(String roleId, ArenaReportView report, java.util.Map<String, String> __ctx);

    /**
     * 增加战斗记录
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCrossArenaLog(String roleId, ArenaReportView report, Ice.Callback __cb);

    /**
     * 增加战斗记录
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCrossArenaLog(String roleId, ArenaReportView report, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 增加战斗记录
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCrossArenaLog(String roleId, ArenaReportView report, Callback_CrossArena_addCrossArenaLog __cb);

    /**
     * 增加战斗记录
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCrossArenaLog(String roleId, ArenaReportView report, java.util.Map<String, String> __ctx, Callback_CrossArena_addCrossArenaLog __cb);

    /**
     * 增加战斗记录
     * @param __result The asynchronous result object.
     **/
    public void end_addCrossArenaLog(Ice.AsyncResult __result);

    /**
     * 增加战斗记录
     * @param __cb The callback object for the operation.
     **/
    public boolean addCrossArenaLog_async(AMI_CrossArena_addCrossArenaLog __cb, String roleId, ArenaReportView report);

    /**
     * 增加战斗记录
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean addCrossArenaLog_async(AMI_CrossArena_addCrossArenaLog __cb, String roleId, ArenaReportView report, java.util.Map<String, String> __ctx);
}
