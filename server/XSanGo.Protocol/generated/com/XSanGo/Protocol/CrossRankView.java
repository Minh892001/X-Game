// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CrossServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 排行榜View
 **/
public class CrossRankView implements java.lang.Cloneable, java.io.Serializable
{
    public CrossRankItem[] rankItem;

    public int myScore;

    public int myRank;

    public int myServerId;

    public CrossRankView()
    {
    }

    public CrossRankView(CrossRankItem[] rankItem, int myScore, int myRank, int myServerId)
    {
        this.rankItem = rankItem;
        this.myScore = myScore;
        this.myRank = myRank;
        this.myServerId = myServerId;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CrossRankView _r = null;
        if(rhs instanceof CrossRankView)
        {
            _r = (CrossRankView)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(rankItem, _r.rankItem))
            {
                return false;
            }
            if(myScore != _r.myScore)
            {
                return false;
            }
            if(myRank != _r.myRank)
            {
                return false;
            }
            if(myServerId != _r.myServerId)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::CrossRankView");
        __h = IceInternal.HashUtil.hashAdd(__h, rankItem);
        __h = IceInternal.HashUtil.hashAdd(__h, myScore);
        __h = IceInternal.HashUtil.hashAdd(__h, myRank);
        __h = IceInternal.HashUtil.hashAdd(__h, myServerId);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        CrossRankItemSeqHelper.write(__os, rankItem);
        __os.writeInt(myScore);
        __os.writeInt(myRank);
        __os.writeInt(myServerId);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        rankItem = CrossRankItemSeqHelper.read(__is);
        myScore = __is.readInt();
        myRank = __is.readInt();
        myServerId = __is.readInt();
    }

    public static final long serialVersionUID = 2004871412L;
}
