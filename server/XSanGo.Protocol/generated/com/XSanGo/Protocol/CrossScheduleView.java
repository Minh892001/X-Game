// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CrossServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 淘汰赛对阵表
 **/
public class CrossScheduleView implements java.lang.Cloneable, java.io.Serializable
{
    public int id;

    public ScheduleRoleView leftRole;

    public ScheduleRoleView rightRole;

    public String winRoleId;

    public int stage;

    public int groupNum;

    public int orderNum;

    public CrossScheduleView()
    {
    }

    public CrossScheduleView(int id, ScheduleRoleView leftRole, ScheduleRoleView rightRole, String winRoleId, int stage, int groupNum, int orderNum)
    {
        this.id = id;
        this.leftRole = leftRole;
        this.rightRole = rightRole;
        this.winRoleId = winRoleId;
        this.stage = stage;
        this.groupNum = groupNum;
        this.orderNum = orderNum;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CrossScheduleView _r = null;
        if(rhs instanceof CrossScheduleView)
        {
            _r = (CrossScheduleView)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(leftRole != _r.leftRole)
            {
                if(leftRole == null || _r.leftRole == null || !leftRole.equals(_r.leftRole))
                {
                    return false;
                }
            }
            if(rightRole != _r.rightRole)
            {
                if(rightRole == null || _r.rightRole == null || !rightRole.equals(_r.rightRole))
                {
                    return false;
                }
            }
            if(winRoleId != _r.winRoleId)
            {
                if(winRoleId == null || _r.winRoleId == null || !winRoleId.equals(_r.winRoleId))
                {
                    return false;
                }
            }
            if(stage != _r.stage)
            {
                return false;
            }
            if(groupNum != _r.groupNum)
            {
                return false;
            }
            if(orderNum != _r.orderNum)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::CrossScheduleView");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, leftRole);
        __h = IceInternal.HashUtil.hashAdd(__h, rightRole);
        __h = IceInternal.HashUtil.hashAdd(__h, winRoleId);
        __h = IceInternal.HashUtil.hashAdd(__h, stage);
        __h = IceInternal.HashUtil.hashAdd(__h, groupNum);
        __h = IceInternal.HashUtil.hashAdd(__h, orderNum);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(id);
        __os.writeObject(leftRole);
        __os.writeObject(rightRole);
        __os.writeString(winRoleId);
        __os.writeInt(stage);
        __os.writeInt(groupNum);
        __os.writeInt(orderNum);
    }

    private class Patcher implements IceInternal.Patcher
    {
        Patcher(int member)
        {
            __member = member;
        }

        public void
        patch(Ice.Object v)
        {
            switch(__member)
            {
            case 0:
                __typeId = "::com::XSanGo::Protocol::ScheduleRoleView";
                if(v == null || v instanceof ScheduleRoleView)
                {
                    leftRole = (ScheduleRoleView)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            case 1:
                __typeId = "::com::XSanGo::Protocol::ScheduleRoleView";
                if(v == null || v instanceof ScheduleRoleView)
                {
                    rightRole = (ScheduleRoleView)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            }
        }

        public String
        type()
        {
            return __typeId;
        }

        private int __member;
        private String __typeId;
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readInt();
        __is.readObject(new Patcher(0));
        __is.readObject(new Patcher(1));
        winRoleId = __is.readString();
        stage = __is.readInt();
        groupNum = __is.readInt();
        orderNum = __is.readInt();
    }

    public static final long serialVersionUID = -1109442837L;
}
