// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CrossServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface CrossServerCallbackPrx extends Ice.ObjectPrx
{
    /**
     * 报名
     **/
    public void apply(CrossRoleView roleView, PvpOpponentFormationView pvpView)
        throws NoteException;

    /**
     * 报名
     * @param __ctx The Context map to send with the invocation.
     **/
    public void apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 报名
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView);

    /**
     * 报名
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx);

    /**
     * 报名
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, Ice.Callback __cb);

    /**
     * 报名
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 报名
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, Callback_CrossServerCallback_apply __cb);

    /**
     * 报名
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_apply __cb);

    /**
     * 报名
     * @param __result The asynchronous result object.
     **/
    public void end_apply(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 报名
     * @param __cb The callback object for the operation.
     **/
    public boolean apply_async(AMI_CrossServerCallback_apply __cb, CrossRoleView roleView, PvpOpponentFormationView pvpView);

    /**
     * 报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean apply_async(AMI_CrossServerCallback_apply __cb, CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx);

    /**
     * 获取排行榜
     **/
    public CrossRankView getCrossRank(String roleId)
        throws NoteException;

    /**
     * 获取排行榜
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossRankView getCrossRank(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取排行榜
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId);

    /**
     * 获取排行榜
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取排行榜
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, Ice.Callback __cb);

    /**
     * 获取排行榜
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取排行榜
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, Callback_CrossServerCallback_getCrossRank __cb);

    /**
     * 获取排行榜
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getCrossRank __cb);

    /**
     * 获取排行榜
     * @param __result The asynchronous result object.
     **/
    public CrossRankView end_getCrossRank(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossRank_async(AMI_CrossServerCallback_getCrossRank __cb, String roleId);

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossRank_async(AMI_CrossServerCallback_getCrossRank __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取自己排名和积分
     **/
    public IntIntPair getMyRankScore(String roleId)
        throws NoteException;

    /**
     * 获取自己排名和积分
     * @param __ctx The Context map to send with the invocation.
     **/
    public IntIntPair getMyRankScore(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取自己排名和积分
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId);

    /**
     * 获取自己排名和积分
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取自己排名和积分
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, Ice.Callback __cb);

    /**
     * 获取自己排名和积分
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取自己排名和积分
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, Callback_CrossServerCallback_getMyRankScore __cb);

    /**
     * 获取自己排名和积分
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getMyRankScore __cb);

    /**
     * 获取自己排名和积分
     * @param __result The asynchronous result object.
     **/
    public IntIntPair end_getMyRankScore(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     **/
    public boolean getMyRankScore_async(AMI_CrossServerCallback_getMyRankScore __cb, String roleId);

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getMyRankScore_async(AMI_CrossServerCallback_getMyRankScore __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 保存部队阵容
     **/
    public void saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView)
        throws NoteException;

    /**
     * 保存部队阵容
     * @param __ctx The Context map to send with the invocation.
     **/
    public void saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 保存部队阵容
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView);

    /**
     * 保存部队阵容
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx);

    /**
     * 保存部队阵容
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, Ice.Callback __cb);

    /**
     * 保存部队阵容
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 保存部队阵容
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, Callback_CrossServerCallback_saveBattle __cb);

    /**
     * 保存部队阵容
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_saveBattle __cb);

    /**
     * 保存部队阵容
     * @param __result The asynchronous result object.
     **/
    public void end_saveBattle(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     **/
    public boolean saveBattle_async(AMI_CrossServerCallback_saveBattle __cb, CrossRoleView roleView, PvpOpponentFormationView pvpView);

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean saveBattle_async(AMI_CrossServerCallback_saveBattle __cb, CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx);

    /**
     * 匹配对手
     **/
    public CrossRivalView[] matchRival(String roleId)
        throws NoteException;

    /**
     * 匹配对手
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossRivalView[] matchRival(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 匹配对手
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId);

    /**
     * 匹配对手
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 匹配对手
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, Ice.Callback __cb);

    /**
     * 匹配对手
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 匹配对手
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, Callback_CrossServerCallback_matchRival __cb);

    /**
     * 匹配对手
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_matchRival __cb);

    /**
     * 匹配对手
     * @param __result The asynchronous result object.
     **/
    public CrossRivalView[] end_matchRival(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     **/
    public boolean matchRival_async(AMI_CrossServerCallback_matchRival __cb, String roleId);

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean matchRival_async(AMI_CrossServerCallback_matchRival __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 刷新对手
     **/
    public CrossRivalView[] refreshRival(String roleId)
        throws NoteException;

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossRivalView[] refreshRival(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 刷新对手
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId);

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 刷新对手
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, Ice.Callback __cb);

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 刷新对手
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, Callback_CrossServerCallback_refreshRival __cb);

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_refreshRival __cb);

    /**
     * 刷新对手
     * @param __result The asynchronous result object.
     **/
    public CrossRivalView[] end_refreshRival(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public boolean refreshRival_async(AMI_CrossServerCallback_refreshRival __cb, String roleId);

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean refreshRival_async(AMI_CrossServerCallback_refreshRival __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 结束挑战
     **/
    public String endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId)
        throws NoteException;

    /**
     * 结束挑战
     * @param __ctx The Context map to send with the invocation.
     **/
    public String endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 结束挑战
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId);

    /**
     * 结束挑战
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx);

    /**
     * 结束挑战
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, Ice.Callback __cb);

    /**
     * 结束挑战
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 结束挑战
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, Callback_CrossServerCallback_endChallenge __cb);

    /**
     * 结束挑战
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_endChallenge __cb);

    /**
     * 结束挑战
     * @param __result The asynchronous result object.
     **/
    public String end_endChallenge(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallenge_async(AMI_CrossServerCallback_endChallenge __cb, CrossRoleView myRoleView, boolean isWin, String rivalRoleId);

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge_async(AMI_CrossServerCallback_endChallenge __cb, CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx);

    /**
     * 获取淘汰赛对阵表
     **/
    public CrossScheduleView[] getSchedule()
        throws NoteException;

    /**
     * 获取淘汰赛对阵表
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossScheduleView[] getSchedule(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取淘汰赛对阵表
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSchedule();

    /**
     * 获取淘汰赛对阵表
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSchedule(java.util.Map<String, String> __ctx);

    /**
     * 获取淘汰赛对阵表
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSchedule(Ice.Callback __cb);

    /**
     * 获取淘汰赛对阵表
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSchedule(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取淘汰赛对阵表
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSchedule(Callback_CrossServerCallback_getSchedule __cb);

    /**
     * 获取淘汰赛对阵表
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSchedule(java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getSchedule __cb);

    /**
     * 获取淘汰赛对阵表
     * @param __result The asynchronous result object.
     **/
    public CrossScheduleView[] end_getSchedule(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     **/
    public boolean getSchedule_async(AMI_CrossServerCallback_getSchedule __cb);

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getSchedule_async(AMI_CrossServerCallback_getSchedule __cb, java.util.Map<String, String> __ctx);

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     **/
    public String[] getScheduleMovieList(int id)
        throws NoteException;

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __ctx The Context map to send with the invocation.
     **/
    public String[] getScheduleMovieList(int id, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id);

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, java.util.Map<String, String> __ctx);

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, Ice.Callback __cb);

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, Callback_CrossServerCallback_getScheduleMovieList __cb);

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getScheduleMovieList __cb);

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __result The asynchronous result object.
     **/
    public String[] end_getScheduleMovieList(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     **/
    public boolean getScheduleMovieList_async(AMI_CrossServerCallback_getScheduleMovieList __cb, int id);

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getScheduleMovieList_async(AMI_CrossServerCallback_getScheduleMovieList __cb, int id, java.util.Map<String, String> __ctx);

    /**
     * 播放淘汰赛战报,index从0开始
     **/
    public CrossMovieView getScheduleMovieData(int id, int index)
        throws NoteException;

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossMovieView getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 播放淘汰赛战报,index从0开始
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index);

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx);

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, Ice.Callback __cb);

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, Callback_CrossServerCallback_getScheduleMovieData __cb);

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getScheduleMovieData __cb);

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __result The asynchronous result object.
     **/
    public CrossMovieView end_getScheduleMovieData(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     **/
    public boolean getScheduleMovieData_async(AMI_CrossServerCallback_getScheduleMovieData __cb, int id, int index);

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getScheduleMovieData_async(AMI_CrossServerCallback_getScheduleMovieData __cb, int id, int index, java.util.Map<String, String> __ctx);

    /**
     * 押注(敬酒)
     **/
    public void crossBet(String winRoleId)
        throws NoteException;

    /**
     * 押注(敬酒)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void crossBet(String winRoleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 押注(敬酒)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId);

    /**
     * 押注(敬酒)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, java.util.Map<String, String> __ctx);

    /**
     * 押注(敬酒)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, Ice.Callback __cb);

    /**
     * 押注(敬酒)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 押注(敬酒)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, Callback_CrossServerCallback_crossBet __cb);

    /**
     * 押注(敬酒)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_crossBet __cb);

    /**
     * 押注(敬酒)
     * @param __result The asynchronous result object.
     **/
    public void end_crossBet(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     **/
    public boolean crossBet_async(AMI_CrossServerCallback_crossBet __cb, String winRoleId);

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean crossBet_async(AMI_CrossServerCallback_crossBet __cb, String winRoleId, java.util.Map<String, String> __ctx);

    /**
     * 获取玩家阵容
     **/
    public PvpOpponentFormationView getRoleFormationView(String roleId)
        throws NoteException;

    /**
     * 获取玩家阵容
     * @param __ctx The Context map to send with the invocation.
     **/
    public PvpOpponentFormationView getRoleFormationView(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取玩家阵容
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId);

    /**
     * 获取玩家阵容
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取玩家阵容
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, Ice.Callback __cb);

    /**
     * 获取玩家阵容
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取玩家阵容
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, Callback_CrossServerCallback_getRoleFormationView __cb);

    /**
     * 获取玩家阵容
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getRoleFormationView __cb);

    /**
     * 获取玩家阵容
     * @param __result The asynchronous result object.
     **/
    public PvpOpponentFormationView end_getRoleFormationView(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     **/
    public boolean getRoleFormationView_async(AMI_CrossServerCallback_getRoleFormationView __cb, String roleId);

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRoleFormationView_async(AMI_CrossServerCallback_getRoleFormationView __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 获取服务器时间
     **/
    public long getServerTime();

    /**
     * 获取服务器时间
     * @param __ctx The Context map to send with the invocation.
     **/
    public long getServerTime(java.util.Map<String, String> __ctx);

    /**
     * 获取服务器时间
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServerTime();

    /**
     * 获取服务器时间
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServerTime(java.util.Map<String, String> __ctx);

    /**
     * 获取服务器时间
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServerTime(Ice.Callback __cb);

    /**
     * 获取服务器时间
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServerTime(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取服务器时间
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServerTime(Callback_CrossServerCallback_getServerTime __cb);

    /**
     * 获取服务器时间
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServerTime(java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getServerTime __cb);

    /**
     * 获取服务器时间
     * @param __result The asynchronous result object.
     **/
    public long end_getServerTime(Ice.AsyncResult __result);

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     **/
    public boolean getServerTime_async(AMI_CrossServerCallback_getServerTime __cb);

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getServerTime_async(AMI_CrossServerCallback_getServerTime __cb, java.util.Map<String, String> __ctx);

    /**
     * 是否晋级32强
     **/
    public boolean isInRank(String roleId)
        throws NoteException;

    /**
     * 是否晋级32强
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isInRank(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 是否晋级32强
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId);

    /**
     * 是否晋级32强
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 是否晋级32强
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, Ice.Callback __cb);

    /**
     * 是否晋级32强
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 是否晋级32强
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, Callback_CrossServerCallback_isInRank __cb);

    /**
     * 是否晋级32强
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_isInRank __cb);

    /**
     * 是否晋级32强
     * @param __result The asynchronous result object.
     **/
    public boolean end_isInRank(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     **/
    public boolean isInRank_async(AMI_CrossServerCallback_isInRank __cb, String roleId);

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isInRank_async(AMI_CrossServerCallback_isInRank __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 是否报名
     **/
    public boolean isApply(String roleId)
        throws NoteException;

    /**
     * 是否报名
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isApply(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 是否报名
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isApply(String roleId);

    /**
     * 是否报名
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 是否报名
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, Ice.Callback __cb);

    /**
     * 是否报名
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 是否报名
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, Callback_CrossServerCallback_isApply __cb);

    /**
     * 是否报名
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_isApply __cb);

    /**
     * 是否报名
     * @param __result The asynchronous result object.
     **/
    public boolean end_isApply(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     **/
    public boolean isApply_async(AMI_CrossServerCallback_isApply __cb, String roleId);

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isApply_async(AMI_CrossServerCallback_isApply __cb, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 是否淘汰
     **/
    public boolean isOut(String roleId)
        throws NoteException;

    /**
     * 是否淘汰
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isOut(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 是否淘汰
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isOut(String roleId);

    /**
     * 是否淘汰
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, java.util.Map<String, String> __ctx);

    /**
     * 是否淘汰
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, Ice.Callback __cb);

    /**
     * 是否淘汰
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 是否淘汰
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, Callback_CrossServerCallback_isOut __cb);

    /**
     * 是否淘汰
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_isOut __cb);

    /**
     * 是否淘汰
     * @param __result The asynchronous result object.
     **/
    public boolean end_isOut(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     **/
    public boolean isOut_async(AMI_CrossServerCallback_isOut __cb, String roleId);

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isOut_async(AMI_CrossServerCallback_isOut __cb, String roleId, java.util.Map<String, String> __ctx);
}
