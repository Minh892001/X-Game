// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CrossServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class CrossServerCallbackPrxHelper extends Ice.ObjectPrxHelperBase implements CrossServerCallbackPrx
{
    private static final String __apply_name = "apply";

    /**
     * 报名
     **/
    public void apply(CrossRoleView roleView, PvpOpponentFormationView pvpView)
        throws NoteException
    {
        apply(roleView, pvpView, null, false);
    }

    /**
     * 报名
     * @param __ctx The Context map to send with the invocation.
     **/
    public void apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        apply(roleView, pvpView, __ctx, true);
    }

    private void apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "apply", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("apply");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    __del.apply(roleView, pvpView, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView)
    {
        return begin_apply(roleView, pvpView, null, false, null);
    }

    /**
     * 报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
    {
        return begin_apply(roleView, pvpView, __ctx, true, null);
    }

    /**
     * 报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, Ice.Callback __cb)
    {
        return begin_apply(roleView, pvpView, null, false, __cb);
    }

    /**
     * 报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_apply(roleView, pvpView, __ctx, true, __cb);
    }

    /**
     * 报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, Callback_CrossServerCallback_apply __cb)
    {
        return begin_apply(roleView, pvpView, null, false, __cb);
    }

    /**
     * 报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_apply __cb)
    {
        return begin_apply(roleView, pvpView, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_apply(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__apply_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __apply_name, __cb);
        try
        {
            __result.__prepare(__apply_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            roleView.__write(__os);
            pvpView.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_apply(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __apply_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 报名
     * @param __cb The callback object for the operation.
     **/
    public boolean apply_async(AMI_CrossServerCallback_apply __cb, CrossRoleView roleView, PvpOpponentFormationView pvpView)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__apply_name);
            __r = begin_apply(roleView, pvpView, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __apply_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean apply_async(AMI_CrossServerCallback_apply __cb, CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__apply_name);
            __r = begin_apply(roleView, pvpView, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __apply_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __crossBet_name = "crossBet";

    /**
     * 押注(敬酒)
     **/
    public void crossBet(String winRoleId)
        throws NoteException
    {
        crossBet(winRoleId, null, false);
    }

    /**
     * 押注(敬酒)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void crossBet(String winRoleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        crossBet(winRoleId, __ctx, true);
    }

    private void crossBet(String winRoleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "crossBet", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("crossBet");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    __del.crossBet(winRoleId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId)
    {
        return begin_crossBet(winRoleId, null, false, null);
    }

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, java.util.Map<String, String> __ctx)
    {
        return begin_crossBet(winRoleId, __ctx, true, null);
    }

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, Ice.Callback __cb)
    {
        return begin_crossBet(winRoleId, null, false, __cb);
    }

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_crossBet(winRoleId, __ctx, true, __cb);
    }

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, Callback_CrossServerCallback_crossBet __cb)
    {
        return begin_crossBet(winRoleId, null, false, __cb);
    }

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_crossBet(String winRoleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_crossBet __cb)
    {
        return begin_crossBet(winRoleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_crossBet(String winRoleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__crossBet_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __crossBet_name, __cb);
        try
        {
            __result.__prepare(__crossBet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(winRoleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_crossBet(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __crossBet_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     **/
    public boolean crossBet_async(AMI_CrossServerCallback_crossBet __cb, String winRoleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__crossBet_name);
            __r = begin_crossBet(winRoleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __crossBet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 押注(敬酒)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean crossBet_async(AMI_CrossServerCallback_crossBet __cb, String winRoleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__crossBet_name);
            __r = begin_crossBet(winRoleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __crossBet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallenge_name = "endChallenge";

    /**
     * 结束挑战
     **/
    public String endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId)
        throws NoteException
    {
        return endChallenge(myRoleView, isWin, rivalRoleId, null, false);
    }

    /**
     * 结束挑战
     * @param __ctx The Context map to send with the invocation.
     **/
    public String endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endChallenge(myRoleView, isWin, rivalRoleId, __ctx, true);
    }

    private String endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallenge");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.endChallenge(myRoleView, isWin, rivalRoleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId)
    {
        return begin_endChallenge(myRoleView, isWin, rivalRoleId, null, false, null);
    }

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx)
    {
        return begin_endChallenge(myRoleView, isWin, rivalRoleId, __ctx, true, null);
    }

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, Ice.Callback __cb)
    {
        return begin_endChallenge(myRoleView, isWin, rivalRoleId, null, false, __cb);
    }

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallenge(myRoleView, isWin, rivalRoleId, __ctx, true, __cb);
    }

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, Callback_CrossServerCallback_endChallenge __cb)
    {
        return begin_endChallenge(myRoleView, isWin, rivalRoleId, null, false, __cb);
    }

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_endChallenge __cb)
    {
        return begin_endChallenge(myRoleView, isWin, rivalRoleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
        try
        {
            __result.__prepare(__endChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            myRoleView.__write(__os);
            __os.writeBool(isWin);
            __os.writeString(rivalRoleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_endChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallenge_async(AMI_CrossServerCallback_endChallenge __cb, CrossRoleView myRoleView, boolean isWin, String rivalRoleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(myRoleView, isWin, rivalRoleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 结束挑战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge_async(AMI_CrossServerCallback_endChallenge __cb, CrossRoleView myRoleView, boolean isWin, String rivalRoleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(myRoleView, isWin, rivalRoleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCrossRank_name = "getCrossRank";

    /**
     * 获取排行榜
     **/
    public CrossRankView getCrossRank(String roleId)
        throws NoteException
    {
        return getCrossRank(roleId, null, false);
    }

    /**
     * 获取排行榜
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossRankView getCrossRank(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCrossRank(roleId, __ctx, true);
    }

    private CrossRankView getCrossRank(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCrossRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCrossRank");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.getCrossRank(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId)
    {
        return begin_getCrossRank(roleId, null, false, null);
    }

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_getCrossRank(roleId, __ctx, true, null);
    }

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, Ice.Callback __cb)
    {
        return begin_getCrossRank(roleId, null, false, __cb);
    }

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCrossRank(roleId, __ctx, true, __cb);
    }

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, Callback_CrossServerCallback_getCrossRank __cb)
    {
        return begin_getCrossRank(roleId, null, false, __cb);
    }

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCrossRank(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getCrossRank __cb)
    {
        return begin_getCrossRank(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCrossRank(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCrossRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCrossRank_name, __cb);
        try
        {
            __result.__prepare(__getCrossRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public CrossRankView end_getCrossRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCrossRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CrossRankView __ret;
            __ret = new CrossRankView();
            __ret.__read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     **/
    public boolean getCrossRank_async(AMI_CrossServerCallback_getCrossRank __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossRank_name);
            __r = begin_getCrossRank(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取排行榜
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCrossRank_async(AMI_CrossServerCallback_getCrossRank __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCrossRank_name);
            __r = begin_getCrossRank(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCrossRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getMyRankScore_name = "getMyRankScore";

    /**
     * 获取自己排名和积分
     **/
    public IntIntPair getMyRankScore(String roleId)
        throws NoteException
    {
        return getMyRankScore(roleId, null, false);
    }

    /**
     * 获取自己排名和积分
     * @param __ctx The Context map to send with the invocation.
     **/
    public IntIntPair getMyRankScore(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getMyRankScore(roleId, __ctx, true);
    }

    private IntIntPair getMyRankScore(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMyRankScore", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMyRankScore");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.getMyRankScore(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId)
    {
        return begin_getMyRankScore(roleId, null, false, null);
    }

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_getMyRankScore(roleId, __ctx, true, null);
    }

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, Ice.Callback __cb)
    {
        return begin_getMyRankScore(roleId, null, false, __cb);
    }

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMyRankScore(roleId, __ctx, true, __cb);
    }

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, Callback_CrossServerCallback_getMyRankScore __cb)
    {
        return begin_getMyRankScore(roleId, null, false, __cb);
    }

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getMyRankScore(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getMyRankScore __cb)
    {
        return begin_getMyRankScore(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMyRankScore(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMyRankScore_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMyRankScore_name, __cb);
        try
        {
            __result.__prepare(__getMyRankScore_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public IntIntPair end_getMyRankScore(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getMyRankScore_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntIntPair __ret;
            __ret = new IntIntPair();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     **/
    public boolean getMyRankScore_async(AMI_CrossServerCallback_getMyRankScore __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMyRankScore_name);
            __r = begin_getMyRankScore(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMyRankScore_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取自己排名和积分
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getMyRankScore_async(AMI_CrossServerCallback_getMyRankScore __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMyRankScore_name);
            __r = begin_getMyRankScore(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMyRankScore_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRoleFormationView_name = "getRoleFormationView";

    /**
     * 获取玩家阵容
     **/
    public PvpOpponentFormationView getRoleFormationView(String roleId)
        throws NoteException
    {
        return getRoleFormationView(roleId, null, false);
    }

    /**
     * 获取玩家阵容
     * @param __ctx The Context map to send with the invocation.
     **/
    public PvpOpponentFormationView getRoleFormationView(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRoleFormationView(roleId, __ctx, true);
    }

    private PvpOpponentFormationView getRoleFormationView(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRoleFormationView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRoleFormationView");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.getRoleFormationView(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId)
    {
        return begin_getRoleFormationView(roleId, null, false, null);
    }

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_getRoleFormationView(roleId, __ctx, true, null);
    }

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, Ice.Callback __cb)
    {
        return begin_getRoleFormationView(roleId, null, false, __cb);
    }

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRoleFormationView(roleId, __ctx, true, __cb);
    }

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, Callback_CrossServerCallback_getRoleFormationView __cb)
    {
        return begin_getRoleFormationView(roleId, null, false, __cb);
    }

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRoleFormationView(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getRoleFormationView __cb)
    {
        return begin_getRoleFormationView(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRoleFormationView(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRoleFormationView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRoleFormationView_name, __cb);
        try
        {
            __result.__prepare(__getRoleFormationView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public PvpOpponentFormationView end_getRoleFormationView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRoleFormationView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PvpOpponentFormationView __ret;
            __ret = new PvpOpponentFormationView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     **/
    public boolean getRoleFormationView_async(AMI_CrossServerCallback_getRoleFormationView __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRoleFormationView_name);
            __r = begin_getRoleFormationView(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRoleFormationView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取玩家阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRoleFormationView_async(AMI_CrossServerCallback_getRoleFormationView __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRoleFormationView_name);
            __r = begin_getRoleFormationView(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRoleFormationView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSchedule_name = "getSchedule";

    /**
     * 获取淘汰赛对阵表
     **/
    public CrossScheduleView[] getSchedule()
        throws NoteException
    {
        return getSchedule(null, false);
    }

    /**
     * 获取淘汰赛对阵表
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossScheduleView[] getSchedule(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getSchedule(__ctx, true);
    }

    private CrossScheduleView[] getSchedule(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSchedule", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSchedule");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.getSchedule(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSchedule()
    {
        return begin_getSchedule(null, false, null);
    }

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSchedule(java.util.Map<String, String> __ctx)
    {
        return begin_getSchedule(__ctx, true, null);
    }

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSchedule(Ice.Callback __cb)
    {
        return begin_getSchedule(null, false, __cb);
    }

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSchedule(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSchedule(__ctx, true, __cb);
    }

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSchedule(Callback_CrossServerCallback_getSchedule __cb)
    {
        return begin_getSchedule(null, false, __cb);
    }

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSchedule(java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getSchedule __cb)
    {
        return begin_getSchedule(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSchedule(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSchedule_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSchedule_name, __cb);
        try
        {
            __result.__prepare(__getSchedule_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public CrossScheduleView[] end_getSchedule(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getSchedule_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CrossScheduleView[] __ret;
            __ret = CrossScheduleViewSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     **/
    public boolean getSchedule_async(AMI_CrossServerCallback_getSchedule __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSchedule_name);
            __r = begin_getSchedule(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSchedule_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取淘汰赛对阵表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getSchedule_async(AMI_CrossServerCallback_getSchedule __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSchedule_name);
            __r = begin_getSchedule(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSchedule_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getScheduleMovieData_name = "getScheduleMovieData";

    /**
     * 播放淘汰赛战报,index从0开始
     **/
    public CrossMovieView getScheduleMovieData(int id, int index)
        throws NoteException
    {
        return getScheduleMovieData(id, index, null, false);
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossMovieView getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getScheduleMovieData(id, index, __ctx, true);
    }

    private CrossMovieView getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getScheduleMovieData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getScheduleMovieData");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.getScheduleMovieData(id, index, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index)
    {
        return begin_getScheduleMovieData(id, index, null, false, null);
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx)
    {
        return begin_getScheduleMovieData(id, index, __ctx, true, null);
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, Ice.Callback __cb)
    {
        return begin_getScheduleMovieData(id, index, null, false, __cb);
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScheduleMovieData(id, index, __ctx, true, __cb);
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, Callback_CrossServerCallback_getScheduleMovieData __cb)
    {
        return begin_getScheduleMovieData(id, index, null, false, __cb);
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getScheduleMovieData __cb)
    {
        return begin_getScheduleMovieData(id, index, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScheduleMovieData(int id, int index, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScheduleMovieData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScheduleMovieData_name, __cb);
        try
        {
            __result.__prepare(__getScheduleMovieData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(index);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public CrossMovieView end_getScheduleMovieData(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getScheduleMovieData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CrossMovieView __ret;
            __ret = new CrossMovieView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     **/
    public boolean getScheduleMovieData_async(AMI_CrossServerCallback_getScheduleMovieData __cb, int id, int index)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getScheduleMovieData_name);
            __r = begin_getScheduleMovieData(id, index, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getScheduleMovieData_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 播放淘汰赛战报,index从0开始
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getScheduleMovieData_async(AMI_CrossServerCallback_getScheduleMovieData __cb, int id, int index, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getScheduleMovieData_name);
            __r = begin_getScheduleMovieData(id, index, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getScheduleMovieData_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getScheduleMovieList_name = "getScheduleMovieList";

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     **/
    public String[] getScheduleMovieList(int id)
        throws NoteException
    {
        return getScheduleMovieList(id, null, false);
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __ctx The Context map to send with the invocation.
     **/
    public String[] getScheduleMovieList(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getScheduleMovieList(id, __ctx, true);
    }

    private String[] getScheduleMovieList(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getScheduleMovieList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getScheduleMovieList");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.getScheduleMovieList(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id)
    {
        return begin_getScheduleMovieList(id, null, false, null);
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, java.util.Map<String, String> __ctx)
    {
        return begin_getScheduleMovieList(id, __ctx, true, null);
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, Ice.Callback __cb)
    {
        return begin_getScheduleMovieList(id, null, false, __cb);
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScheduleMovieList(id, __ctx, true, __cb);
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, Callback_CrossServerCallback_getScheduleMovieList __cb)
    {
        return begin_getScheduleMovieList(id, null, false, __cb);
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScheduleMovieList(int id, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getScheduleMovieList __cb)
    {
        return begin_getScheduleMovieList(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScheduleMovieList(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScheduleMovieList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScheduleMovieList_name, __cb);
        try
        {
            __result.__prepare(__getScheduleMovieList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String[] end_getScheduleMovieList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getScheduleMovieList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = StringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     **/
    public boolean getScheduleMovieList_async(AMI_CrossServerCallback_getScheduleMovieList __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getScheduleMovieList_name);
            __r = begin_getScheduleMovieList(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getScheduleMovieList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getScheduleMovieList_async(AMI_CrossServerCallback_getScheduleMovieList __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getScheduleMovieList_name);
            __r = begin_getScheduleMovieList(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getScheduleMovieList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getServerTime_name = "getServerTime";

    /**
     * 获取服务器时间
     **/
    public long getServerTime()
    {
        return getServerTime(null, false);
    }

    /**
     * 获取服务器时间
     * @param __ctx The Context map to send with the invocation.
     **/
    public long getServerTime(java.util.Map<String, String> __ctx)
    {
        return getServerTime(__ctx, true);
    }

    private long getServerTime(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getServerTime", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getServerTime");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.getServerTime(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getServerTime()
    {
        return begin_getServerTime(null, false, null);
    }

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getServerTime(java.util.Map<String, String> __ctx)
    {
        return begin_getServerTime(__ctx, true, null);
    }

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getServerTime(Ice.Callback __cb)
    {
        return begin_getServerTime(null, false, __cb);
    }

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getServerTime(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getServerTime(__ctx, true, __cb);
    }

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getServerTime(Callback_CrossServerCallback_getServerTime __cb)
    {
        return begin_getServerTime(null, false, __cb);
    }

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getServerTime(java.util.Map<String, String> __ctx, Callback_CrossServerCallback_getServerTime __cb)
    {
        return begin_getServerTime(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getServerTime(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getServerTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getServerTime_name, __cb);
        try
        {
            __result.__prepare(__getServerTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public long end_getServerTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getServerTime_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     **/
    public boolean getServerTime_async(AMI_CrossServerCallback_getServerTime __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getServerTime_name);
            __r = begin_getServerTime(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getServerTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取服务器时间
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getServerTime_async(AMI_CrossServerCallback_getServerTime __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getServerTime_name);
            __r = begin_getServerTime(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getServerTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __isApply_name = "isApply";

    /**
     * 是否报名
     **/
    public boolean isApply(String roleId)
        throws NoteException
    {
        return isApply(roleId, null, false);
    }

    /**
     * 是否报名
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isApply(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return isApply(roleId, __ctx, true);
    }

    private boolean isApply(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "isApply", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("isApply");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.isApply(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isApply(String roleId)
    {
        return begin_isApply(roleId, null, false, null);
    }

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_isApply(roleId, __ctx, true, null);
    }

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, Ice.Callback __cb)
    {
        return begin_isApply(roleId, null, false, __cb);
    }

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_isApply(roleId, __ctx, true, __cb);
    }

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, Callback_CrossServerCallback_isApply __cb)
    {
        return begin_isApply(roleId, null, false, __cb);
    }

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isApply(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_isApply __cb)
    {
        return begin_isApply(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_isApply(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__isApply_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __isApply_name, __cb);
        try
        {
            __result.__prepare(__isApply_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public boolean end_isApply(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __isApply_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     **/
    public boolean isApply_async(AMI_CrossServerCallback_isApply __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__isApply_name);
            __r = begin_isApply(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __isApply_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 是否报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isApply_async(AMI_CrossServerCallback_isApply __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__isApply_name);
            __r = begin_isApply(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __isApply_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __isInRank_name = "isInRank";

    /**
     * 是否晋级32强
     **/
    public boolean isInRank(String roleId)
        throws NoteException
    {
        return isInRank(roleId, null, false);
    }

    /**
     * 是否晋级32强
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isInRank(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return isInRank(roleId, __ctx, true);
    }

    private boolean isInRank(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "isInRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("isInRank");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.isInRank(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId)
    {
        return begin_isInRank(roleId, null, false, null);
    }

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_isInRank(roleId, __ctx, true, null);
    }

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, Ice.Callback __cb)
    {
        return begin_isInRank(roleId, null, false, __cb);
    }

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_isInRank(roleId, __ctx, true, __cb);
    }

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, Callback_CrossServerCallback_isInRank __cb)
    {
        return begin_isInRank(roleId, null, false, __cb);
    }

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isInRank(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_isInRank __cb)
    {
        return begin_isInRank(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_isInRank(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__isInRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __isInRank_name, __cb);
        try
        {
            __result.__prepare(__isInRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public boolean end_isInRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __isInRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     **/
    public boolean isInRank_async(AMI_CrossServerCallback_isInRank __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__isInRank_name);
            __r = begin_isInRank(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __isInRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 是否晋级32强
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isInRank_async(AMI_CrossServerCallback_isInRank __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__isInRank_name);
            __r = begin_isInRank(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __isInRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __isOut_name = "isOut";

    /**
     * 是否淘汰
     **/
    public boolean isOut(String roleId)
        throws NoteException
    {
        return isOut(roleId, null, false);
    }

    /**
     * 是否淘汰
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isOut(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return isOut(roleId, __ctx, true);
    }

    private boolean isOut(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "isOut", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("isOut");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.isOut(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isOut(String roleId)
    {
        return begin_isOut(roleId, null, false, null);
    }

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_isOut(roleId, __ctx, true, null);
    }

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, Ice.Callback __cb)
    {
        return begin_isOut(roleId, null, false, __cb);
    }

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_isOut(roleId, __ctx, true, __cb);
    }

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, Callback_CrossServerCallback_isOut __cb)
    {
        return begin_isOut(roleId, null, false, __cb);
    }

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_isOut(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_isOut __cb)
    {
        return begin_isOut(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_isOut(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__isOut_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __isOut_name, __cb);
        try
        {
            __result.__prepare(__isOut_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public boolean end_isOut(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __isOut_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     **/
    public boolean isOut_async(AMI_CrossServerCallback_isOut __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__isOut_name);
            __r = begin_isOut(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __isOut_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 是否淘汰
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean isOut_async(AMI_CrossServerCallback_isOut __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__isOut_name);
            __r = begin_isOut(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __isOut_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __matchRival_name = "matchRival";

    /**
     * 匹配对手
     **/
    public CrossRivalView[] matchRival(String roleId)
        throws NoteException
    {
        return matchRival(roleId, null, false);
    }

    /**
     * 匹配对手
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossRivalView[] matchRival(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return matchRival(roleId, __ctx, true);
    }

    private CrossRivalView[] matchRival(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "matchRival", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("matchRival");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.matchRival(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId)
    {
        return begin_matchRival(roleId, null, false, null);
    }

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_matchRival(roleId, __ctx, true, null);
    }

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, Ice.Callback __cb)
    {
        return begin_matchRival(roleId, null, false, __cb);
    }

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_matchRival(roleId, __ctx, true, __cb);
    }

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, Callback_CrossServerCallback_matchRival __cb)
    {
        return begin_matchRival(roleId, null, false, __cb);
    }

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_matchRival(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_matchRival __cb)
    {
        return begin_matchRival(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_matchRival(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__matchRival_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __matchRival_name, __cb);
        try
        {
            __result.__prepare(__matchRival_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public CrossRivalView[] end_matchRival(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __matchRival_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CrossRivalView[] __ret;
            __ret = CrossRivalViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     **/
    public boolean matchRival_async(AMI_CrossServerCallback_matchRival __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__matchRival_name);
            __r = begin_matchRival(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __matchRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 匹配对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean matchRival_async(AMI_CrossServerCallback_matchRival __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__matchRival_name);
            __r = begin_matchRival(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __matchRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refreshRival_name = "refreshRival";

    /**
     * 刷新对手
     **/
    public CrossRivalView[] refreshRival(String roleId)
        throws NoteException
    {
        return refreshRival(roleId, null, false);
    }

    /**
     * 刷新对手
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossRivalView[] refreshRival(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return refreshRival(roleId, __ctx, true);
    }

    private CrossRivalView[] refreshRival(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refreshRival", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refreshRival");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    return __del.refreshRival(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId)
    {
        return begin_refreshRival(roleId, null, false, null);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_refreshRival(roleId, __ctx, true, null);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, Ice.Callback __cb)
    {
        return begin_refreshRival(roleId, null, false, __cb);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refreshRival(roleId, __ctx, true, __cb);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, Callback_CrossServerCallback_refreshRival __cb)
    {
        return begin_refreshRival(roleId, null, false, __cb);
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_refreshRival __cb)
    {
        return begin_refreshRival(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refreshRival(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refreshRival_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refreshRival_name, __cb);
        try
        {
            __result.__prepare(__refreshRival_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public CrossRivalView[] end_refreshRival(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refreshRival_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CrossRivalView[] __ret;
            __ret = CrossRivalViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     **/
    public boolean refreshRival_async(AMI_CrossServerCallback_refreshRival __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshRival_name);
            __r = begin_refreshRival(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 刷新对手
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean refreshRival_async(AMI_CrossServerCallback_refreshRival __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshRival_name);
            __r = begin_refreshRival(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __saveBattle_name = "saveBattle";

    /**
     * 保存部队阵容
     **/
    public void saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView)
        throws NoteException
    {
        saveBattle(roleView, pvpView, null, false);
    }

    /**
     * 保存部队阵容
     * @param __ctx The Context map to send with the invocation.
     **/
    public void saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        saveBattle(roleView, pvpView, __ctx, true);
    }

    private void saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveBattle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("saveBattle");
                    __delBase = __getDelegate(false);
                    _CrossServerCallbackDel __del = (_CrossServerCallbackDel)__delBase;
                    __del.saveBattle(roleView, pvpView, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView)
    {
        return begin_saveBattle(roleView, pvpView, null, false, null);
    }

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
    {
        return begin_saveBattle(roleView, pvpView, __ctx, true, null);
    }

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, Ice.Callback __cb)
    {
        return begin_saveBattle(roleView, pvpView, null, false, __cb);
    }

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveBattle(roleView, pvpView, __ctx, true, __cb);
    }

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, Callback_CrossServerCallback_saveBattle __cb)
    {
        return begin_saveBattle(roleView, pvpView, null, false, __cb);
    }

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, Callback_CrossServerCallback_saveBattle __cb)
    {
        return begin_saveBattle(roleView, pvpView, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveBattle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveBattle_name, __cb);
        try
        {
            __result.__prepare(__saveBattle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            roleView.__write(__os);
            pvpView.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_saveBattle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __saveBattle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     **/
    public boolean saveBattle_async(AMI_CrossServerCallback_saveBattle __cb, CrossRoleView roleView, PvpOpponentFormationView pvpView)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveBattle_name);
            __r = begin_saveBattle(roleView, pvpView, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 保存部队阵容
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean saveBattle_async(AMI_CrossServerCallback_saveBattle __cb, CrossRoleView roleView, PvpOpponentFormationView pvpView, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveBattle_name);
            __r = begin_saveBattle(roleView, pvpView, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static CrossServerCallbackPrx checkedCast(Ice.ObjectPrx __obj)
    {
        CrossServerCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossServerCallbackPrx)
            {
                __d = (CrossServerCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    CrossServerCallbackPrxHelper __h = new CrossServerCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CrossServerCallbackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CrossServerCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossServerCallbackPrx)
            {
                __d = (CrossServerCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    CrossServerCallbackPrxHelper __h = new CrossServerCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CrossServerCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CrossServerCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    CrossServerCallbackPrxHelper __h = new CrossServerCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CrossServerCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CrossServerCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    CrossServerCallbackPrxHelper __h = new CrossServerCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CrossServerCallbackPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        CrossServerCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossServerCallbackPrx)
            {
                __d = (CrossServerCallbackPrx)__obj;
            }
            else
            {
                CrossServerCallbackPrxHelper __h = new CrossServerCallbackPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CrossServerCallbackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CrossServerCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CrossServerCallbackPrxHelper __h = new CrossServerCallbackPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::CrossServerCallback"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _CrossServerCallbackDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _CrossServerCallbackDelD();
    }

    public static void __write(IceInternal.BasicStream __os, CrossServerCallbackPrx v)
    {
        __os.writeProxy(v);
    }

    public static CrossServerCallbackPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CrossServerCallbackPrxHelper result = new CrossServerCallbackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
