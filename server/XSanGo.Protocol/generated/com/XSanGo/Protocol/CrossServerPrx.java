// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CrossServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface CrossServerPrx extends Ice.ObjectPrx
{
    public boolean ping(long time);

    public boolean ping(long time, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_ping(long time);

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_ping(long time, Ice.Callback __cb);

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_ping(long time, Callback_CrossServer_ping __cb);

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx, Callback_CrossServer_ping __cb);

    public boolean end_ping(Ice.AsyncResult __result);

    public boolean ping_async(AMI_CrossServer_ping __cb, long time);

    public boolean ping_async(AMI_CrossServer_ping __cb, long time, java.util.Map<String, String> __ctx);

    public void setCallback(CrossServerCallbackPrx cb);

    public void setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb);

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, Ice.Callback __cb);

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, Callback_CrossServer_setCallback __cb);

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_CrossServer_setCallback __cb);

    public void end_setCallback(Ice.AsyncResult __result);

    public boolean setCallback_async(AMI_CrossServer_setCallback __cb, CrossServerCallbackPrx cb);

    public boolean setCallback_async(AMI_CrossServer_setCallback __cb, CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx);

    /**
     * 竞猜结果
     **/
    public void guessResult(int id, String winRoleId);

    /**
     * 竞猜结果
     * @param __ctx The Context map to send with the invocation.
     **/
    public void guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx);

    /**
     * 竞猜结果
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId);

    /**
     * 竞猜结果
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx);

    /**
     * 竞猜结果
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, Ice.Callback __cb);

    /**
     * 竞猜结果
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 竞猜结果
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, Callback_CrossServer_guessResult __cb);

    /**
     * 竞猜结果
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx, Callback_CrossServer_guessResult __cb);

    /**
     * 竞猜结果
     * @param __result The asynchronous result object.
     **/
    public void end_guessResult(Ice.AsyncResult __result);

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     **/
    public boolean guessResult_async(AMI_CrossServer_guessResult __cb, int id, String winRoleId);

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean guessResult_async(AMI_CrossServer_guessResult __cb, int id, String winRoleId, java.util.Map<String, String> __ctx);

    /**
     * 获取机器人信息
     **/
    public CrossRankItem[] getRobot(int num);

    /**
     * 获取机器人信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossRankItem[] getRobot(int num, java.util.Map<String, String> __ctx);

    /**
     * 获取机器人信息
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRobot(int num);

    /**
     * 获取机器人信息
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRobot(int num, java.util.Map<String, String> __ctx);

    /**
     * 获取机器人信息
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRobot(int num, Ice.Callback __cb);

    /**
     * 获取机器人信息
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRobot(int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取机器人信息
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRobot(int num, Callback_CrossServer_getRobot __cb);

    /**
     * 获取机器人信息
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRobot(int num, java.util.Map<String, String> __ctx, Callback_CrossServer_getRobot __cb);

    /**
     * 获取机器人信息
     * @param __result The asynchronous result object.
     **/
    public CrossRankItem[] end_getRobot(Ice.AsyncResult __result);

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     **/
    public boolean getRobot_async(AMI_CrossServer_getRobot __cb, int num);

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRobot_async(AMI_CrossServer_getRobot __cb, int num, java.util.Map<String, String> __ctx);

    /**
     * 发放各阶段奖励
     **/
    public void sendCrossAward(int rank, String[] roleIds);

    /**
     * 发放各阶段奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx);

    /**
     * 发放各阶段奖励
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds);

    /**
     * 发放各阶段奖励
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx);

    /**
     * 发放各阶段奖励
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, Ice.Callback __cb);

    /**
     * 发放各阶段奖励
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 发放各阶段奖励
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, Callback_CrossServer_sendCrossAward __cb);

    /**
     * 发放各阶段奖励
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx, Callback_CrossServer_sendCrossAward __cb);

    /**
     * 发放各阶段奖励
     * @param __result The asynchronous result object.
     **/
    public void end_sendCrossAward(Ice.AsyncResult __result);

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean sendCrossAward_async(AMI_CrossServer_sendCrossAward __cb, int rank, String[] roleIds);

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sendCrossAward_async(AMI_CrossServer_sendCrossAward __cb, int rank, String[] roleIds, java.util.Map<String, String> __ctx);

    /**
     * 发放积分奖励
     **/
    public void sendScoreAward(int score, String roleId);

    /**
     * 发放积分奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 发放积分奖励
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId);

    /**
     * 发放积分奖励
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 发放积分奖励
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, Ice.Callback __cb);

    /**
     * 发放积分奖励
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 发放积分奖励
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, Callback_CrossServer_sendScoreAward __cb);

    /**
     * 发放积分奖励
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx, Callback_CrossServer_sendScoreAward __cb);

    /**
     * 发放积分奖励
     * @param __result The asynchronous result object.
     **/
    public void end_sendScoreAward(Ice.AsyncResult __result);

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean sendScoreAward_async(AMI_CrossServer_sendScoreAward __cb, int score, String roleId);

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sendScoreAward_async(AMI_CrossServer_sendScoreAward __cb, int score, String roleId, java.util.Map<String, String> __ctx);

    /**
     * 发送比武大会脚本
     **/
    public void sendScript(byte[] data);

    /**
     * 发送比武大会脚本
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendScript(byte[] data, java.util.Map<String, String> __ctx);

    /**
     * 发送比武大会脚本
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data);

    /**
     * 发送比武大会脚本
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, java.util.Map<String, String> __ctx);

    /**
     * 发送比武大会脚本
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, Ice.Callback __cb);

    /**
     * 发送比武大会脚本
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 发送比武大会脚本
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, Callback_CrossServer_sendScript __cb);

    /**
     * 发送比武大会脚本
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, java.util.Map<String, String> __ctx, Callback_CrossServer_sendScript __cb);

    /**
     * 发送比武大会脚本
     * @param __result The asynchronous result object.
     **/
    public void end_sendScript(Ice.AsyncResult __result);

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     **/
    public boolean sendScript_async(AMI_CrossServer_sendScript __cb, byte[] data);

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sendScript_async(AMI_CrossServer_sendScript __cb, byte[] data, java.util.Map<String, String> __ctx);
}
