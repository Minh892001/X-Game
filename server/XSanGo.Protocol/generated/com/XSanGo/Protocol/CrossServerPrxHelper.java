// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CrossServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class CrossServerPrxHelper extends Ice.ObjectPrxHelperBase implements CrossServerPrx
{
    private static final String __getRobot_name = "getRobot";

    /**
     * 获取机器人信息
     **/
    public CrossRankItem[] getRobot(int num)
    {
        return getRobot(num, null, false);
    }

    /**
     * 获取机器人信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public CrossRankItem[] getRobot(int num, java.util.Map<String, String> __ctx)
    {
        return getRobot(num, __ctx, true);
    }

    private CrossRankItem[] getRobot(int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRobot", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRobot");
                    __delBase = __getDelegate(false);
                    _CrossServerDel __del = (_CrossServerDel)__delBase;
                    return __del.getRobot(num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRobot(int num)
    {
        return begin_getRobot(num, null, false, null);
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRobot(int num, java.util.Map<String, String> __ctx)
    {
        return begin_getRobot(num, __ctx, true, null);
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRobot(int num, Ice.Callback __cb)
    {
        return begin_getRobot(num, null, false, __cb);
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRobot(int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRobot(num, __ctx, true, __cb);
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRobot(int num, Callback_CrossServer_getRobot __cb)
    {
        return begin_getRobot(num, null, false, __cb);
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRobot(int num, java.util.Map<String, String> __ctx, Callback_CrossServer_getRobot __cb)
    {
        return begin_getRobot(num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRobot(int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRobot_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRobot_name, __cb);
        try
        {
            __result.__prepare(__getRobot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public CrossRankItem[] end_getRobot(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRobot_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CrossRankItem[] __ret;
            __ret = CrossRankItemSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     **/
    public boolean getRobot_async(AMI_CrossServer_getRobot __cb, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRobot_name);
            __r = begin_getRobot(num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRobot_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRobot_async(AMI_CrossServer_getRobot __cb, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRobot_name);
            __r = begin_getRobot(num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRobot_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __guessResult_name = "guessResult";

    /**
     * 竞猜结果
     **/
    public void guessResult(int id, String winRoleId)
    {
        guessResult(id, winRoleId, null, false);
    }

    /**
     * 竞猜结果
     * @param __ctx The Context map to send with the invocation.
     **/
    public void guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx)
    {
        guessResult(id, winRoleId, __ctx, true);
    }

    private void guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "guessResult", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CrossServerDel __del = (_CrossServerDel)__delBase;
                    __del.guessResult(id, winRoleId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId)
    {
        return begin_guessResult(id, winRoleId, null, false, null);
    }

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx)
    {
        return begin_guessResult(id, winRoleId, __ctx, true, null);
    }

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, Ice.Callback __cb)
    {
        return begin_guessResult(id, winRoleId, null, false, __cb);
    }

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_guessResult(id, winRoleId, __ctx, true, __cb);
    }

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, Callback_CrossServer_guessResult __cb)
    {
        return begin_guessResult(id, winRoleId, null, false, __cb);
    }

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx, Callback_CrossServer_guessResult __cb)
    {
        return begin_guessResult(id, winRoleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_guessResult(int id, String winRoleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __guessResult_name, __cb);
        try
        {
            __result.__prepare(__guessResult_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(winRoleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_guessResult(Ice.AsyncResult __result)
    {
        __end(__result, __guessResult_name);
    }

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     **/
    public boolean guessResult_async(AMI_CrossServer_guessResult __cb, int id, String winRoleId)
    {
        Ice.AsyncResult __r = begin_guessResult(id, winRoleId, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 竞猜结果
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean guessResult_async(AMI_CrossServer_guessResult __cb, int id, String winRoleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_guessResult(id, winRoleId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __ping_name = "ping";

    public boolean ping(long time)
    {
        return ping(time, null, false);
    }

    public boolean ping(long time, java.util.Map<String, String> __ctx)
    {
        return ping(time, __ctx, true);
    }

    private boolean ping(long time, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "ping", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("ping");
                    __delBase = __getDelegate(false);
                    _CrossServerDel __del = (_CrossServerDel)__delBase;
                    return __del.ping(time, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_ping(long time)
    {
        return begin_ping(time, null, false, null);
    }

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx)
    {
        return begin_ping(time, __ctx, true, null);
    }

    public Ice.AsyncResult begin_ping(long time, Ice.Callback __cb)
    {
        return begin_ping(time, null, false, __cb);
    }

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ping(time, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ping(long time, Callback_CrossServer_ping __cb)
    {
        return begin_ping(time, null, false, __cb);
    }

    public Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx, Callback_CrossServer_ping __cb)
    {
        return begin_ping(time, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ping(long time, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ping_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
        try
        {
            __result.__prepare(__ping_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(time);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_ping(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ping_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean ping_async(AMI_CrossServer_ping __cb, long time)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ping_name);
            __r = begin_ping(time, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean ping_async(AMI_CrossServer_ping __cb, long time, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ping_name);
            __r = begin_ping(time, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sendCrossAward_name = "sendCrossAward";

    /**
     * 发放各阶段奖励
     **/
    public void sendCrossAward(int rank, String[] roleIds)
    {
        sendCrossAward(rank, roleIds, null, false);
    }

    /**
     * 发放各阶段奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx)
    {
        sendCrossAward(rank, roleIds, __ctx, true);
    }

    private void sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendCrossAward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CrossServerDel __del = (_CrossServerDel)__delBase;
                    __del.sendCrossAward(rank, roleIds, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds)
    {
        return begin_sendCrossAward(rank, roleIds, null, false, null);
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx)
    {
        return begin_sendCrossAward(rank, roleIds, __ctx, true, null);
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, Ice.Callback __cb)
    {
        return begin_sendCrossAward(rank, roleIds, null, false, __cb);
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendCrossAward(rank, roleIds, __ctx, true, __cb);
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, Callback_CrossServer_sendCrossAward __cb)
    {
        return begin_sendCrossAward(rank, roleIds, null, false, __cb);
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx, Callback_CrossServer_sendCrossAward __cb)
    {
        return begin_sendCrossAward(rank, roleIds, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendCrossAward(int rank, String[] roleIds, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendCrossAward_name, __cb);
        try
        {
            __result.__prepare(__sendCrossAward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(rank);
            StringSeqHelper.write(__os, roleIds);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_sendCrossAward(Ice.AsyncResult __result)
    {
        __end(__result, __sendCrossAward_name);
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean sendCrossAward_async(AMI_CrossServer_sendCrossAward __cb, int rank, String[] roleIds)
    {
        Ice.AsyncResult __r = begin_sendCrossAward(rank, roleIds, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sendCrossAward_async(AMI_CrossServer_sendCrossAward __cb, int rank, String[] roleIds, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_sendCrossAward(rank, roleIds, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __sendScoreAward_name = "sendScoreAward";

    /**
     * 发放积分奖励
     **/
    public void sendScoreAward(int score, String roleId)
    {
        sendScoreAward(score, roleId, null, false);
    }

    /**
     * 发放积分奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx)
    {
        sendScoreAward(score, roleId, __ctx, true);
    }

    private void sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendScoreAward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CrossServerDel __del = (_CrossServerDel)__delBase;
                    __del.sendScoreAward(score, roleId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId)
    {
        return begin_sendScoreAward(score, roleId, null, false, null);
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_sendScoreAward(score, roleId, __ctx, true, null);
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, Ice.Callback __cb)
    {
        return begin_sendScoreAward(score, roleId, null, false, __cb);
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendScoreAward(score, roleId, __ctx, true, __cb);
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, Callback_CrossServer_sendScoreAward __cb)
    {
        return begin_sendScoreAward(score, roleId, null, false, __cb);
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx, Callback_CrossServer_sendScoreAward __cb)
    {
        return begin_sendScoreAward(score, roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendScoreAward(int score, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendScoreAward_name, __cb);
        try
        {
            __result.__prepare(__sendScoreAward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(score);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_sendScoreAward(Ice.AsyncResult __result)
    {
        __end(__result, __sendScoreAward_name);
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean sendScoreAward_async(AMI_CrossServer_sendScoreAward __cb, int score, String roleId)
    {
        Ice.AsyncResult __r = begin_sendScoreAward(score, roleId, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sendScoreAward_async(AMI_CrossServer_sendScoreAward __cb, int score, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_sendScoreAward(score, roleId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __sendScript_name = "sendScript";

    /**
     * 发送比武大会脚本
     **/
    public void sendScript(byte[] data)
    {
        sendScript(data, null, false);
    }

    /**
     * 发送比武大会脚本
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendScript(byte[] data, java.util.Map<String, String> __ctx)
    {
        sendScript(data, __ctx, true);
    }

    private void sendScript(byte[] data, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendScript", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CrossServerDel __del = (_CrossServerDel)__delBase;
                    __del.sendScript(data, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data)
    {
        return begin_sendScript(data, null, false, null);
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, java.util.Map<String, String> __ctx)
    {
        return begin_sendScript(data, __ctx, true, null);
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, Ice.Callback __cb)
    {
        return begin_sendScript(data, null, false, __cb);
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendScript(data, __ctx, true, __cb);
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, Callback_CrossServer_sendScript __cb)
    {
        return begin_sendScript(data, null, false, __cb);
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendScript(byte[] data, java.util.Map<String, String> __ctx, Callback_CrossServer_sendScript __cb)
    {
        return begin_sendScript(data, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendScript(byte[] data, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendScript_name, __cb);
        try
        {
            __result.__prepare(__sendScript_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSeqHelper.write(__os, data);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_sendScript(Ice.AsyncResult __result)
    {
        __end(__result, __sendScript_name);
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     **/
    public boolean sendScript_async(AMI_CrossServer_sendScript __cb, byte[] data)
    {
        Ice.AsyncResult __r = begin_sendScript(data, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sendScript_async(AMI_CrossServer_sendScript __cb, byte[] data, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_sendScript(data, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __setCallback_name = "setCallback";

    public void setCallback(CrossServerCallbackPrx cb)
    {
        setCallback(cb, null, false);
    }

    public void setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        setCallback(cb, __ctx, true);
    }

    private void setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCallback", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CrossServerDel __del = (_CrossServerDel)__delBase;
                    __del.setCallback(cb, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb)
    {
        return begin_setCallback(cb, null, false, null);
    }

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        return begin_setCallback(cb, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, Ice.Callback __cb)
    {
        return begin_setCallback(cb, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCallback(cb, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, Callback_CrossServer_setCallback __cb)
    {
        return begin_setCallback(cb, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_CrossServer_setCallback __cb)
    {
        return begin_setCallback(cb, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCallback(CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCallback_name, __cb);
        try
        {
            __result.__prepare(__setCallback_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            CrossServerCallbackPrxHelper.__write(__os, cb);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCallback(Ice.AsyncResult __result)
    {
        __end(__result, __setCallback_name);
    }

    public boolean setCallback_async(AMI_CrossServer_setCallback __cb, CrossServerCallbackPrx cb)
    {
        Ice.AsyncResult __r = begin_setCallback(cb, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean setCallback_async(AMI_CrossServer_setCallback __cb, CrossServerCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_setCallback(cb, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static CrossServerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        CrossServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossServerPrx)
            {
                __d = (CrossServerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    CrossServerPrxHelper __h = new CrossServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CrossServerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CrossServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossServerPrx)
            {
                __d = (CrossServerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    CrossServerPrxHelper __h = new CrossServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CrossServerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CrossServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    CrossServerPrxHelper __h = new CrossServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CrossServerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CrossServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    CrossServerPrxHelper __h = new CrossServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CrossServerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        CrossServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CrossServerPrx)
            {
                __d = (CrossServerPrx)__obj;
            }
            else
            {
                CrossServerPrxHelper __h = new CrossServerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CrossServerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CrossServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CrossServerPrxHelper __h = new CrossServerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::CrossServer"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _CrossServerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _CrossServerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, CrossServerPrx v)
    {
        __os.writeProxy(v);
    }

    public static CrossServerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CrossServerPrxHelper result = new CrossServerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
