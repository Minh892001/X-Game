// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Dreamland.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface DreamlandPrx extends Ice.ObjectPrx
{
    /**
     * 幻境主界面数据(DreamlandShow)
     **/
    public String dreamlandPage(int groupId)
        throws NoteException;

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandPage(int groupId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 幻境主界面数据(DreamlandShow)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId);

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, java.util.Map<String, String> __ctx);

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, Ice.Callback __cb);

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, Callback_Dreamland_dreamlandPage __cb);

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandPage __cb);

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __result The asynchronous result object.
     **/
    public String end_dreamlandPage(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandPage_async(AMI_Dreamland_dreamlandPage __cb, int groupId);

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandPage_async(AMI_Dreamland_dreamlandPage __cb, int groupId, java.util.Map<String, String> __ctx);

    /**
     * 幻境关卡组切换(DreamlandShow)
     **/
    public String dreamlandSwitchSceneGroup(int groupId, boolean isFront)
        throws NoteException;

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront);

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx);

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, Ice.Callback __cb);

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, Callback_Dreamland_dreamlandSwitchSceneGroup __cb);

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandSwitchSceneGroup __cb);

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __result The asynchronous result object.
     **/
    public String end_dreamlandSwitchSceneGroup(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandSwitchSceneGroup_async(AMI_Dreamland_dreamlandSwitchSceneGroup __cb, int groupId, boolean isFront);

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandSwitchSceneGroup_async(AMI_Dreamland_dreamlandSwitchSceneGroup __cb, int groupId, boolean isFront, java.util.Map<String, String> __ctx);

    /**
     * 战斗开始 返回战报编号
     **/
    public String beginDreamland(int sceneId)
        throws NoteException;

    /**
     * 战斗开始 返回战报编号
     * @param __ctx The Context map to send with the invocation.
     **/
    public String beginDreamland(int sceneId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 战斗开始 返回战报编号
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId);

    /**
     * 战斗开始 返回战报编号
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, java.util.Map<String, String> __ctx);

    /**
     * 战斗开始 返回战报编号
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, Ice.Callback __cb);

    /**
     * 战斗开始 返回战报编号
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 战斗开始 返回战报编号
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, Callback_Dreamland_beginDreamland __cb);

    /**
     * 战斗开始 返回战报编号
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, java.util.Map<String, String> __ctx, Callback_Dreamland_beginDreamland __cb);

    /**
     * 战斗开始 返回战报编号
     * @param __result The asynchronous result object.
     **/
    public String end_beginDreamland(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     **/
    public boolean beginDreamland_async(AMI_Dreamland_beginDreamland __cb, int sceneId);

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginDreamland_async(AMI_Dreamland_beginDreamland __cb, int sceneId, java.util.Map<String, String> __ctx);

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     **/
    public String endDreamland(int sceneId, byte remainHero)
        throws NoteException;

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero);

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx);

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, Ice.Callback __cb);

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, Callback_Dreamland_endDreamland __cb);

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx, Callback_Dreamland_endDreamland __cb);

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __result The asynchronous result object.
     **/
    public String end_endDreamland(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     **/
    public boolean endDreamland_async(AMI_Dreamland_endDreamland __cb, int sceneId, byte remainHero);

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endDreamland_async(AMI_Dreamland_endDreamland __cb, int sceneId, byte remainHero, java.util.Map<String, String> __ctx);

    /**
     * 扫荡(DreamlandSweepResult)
     **/
    public String dreamlandSweep(int sceneId)
        throws NoteException;

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 扫荡(DreamlandSweepResult)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId);

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx);

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, Ice.Callback __cb);

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, Callback_Dreamland_dreamlandSweep __cb);

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandSweep __cb);

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __result The asynchronous result object.
     **/
    public String end_dreamlandSweep(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandSweep_async(AMI_Dreamland_dreamlandSweep __cb, int sceneId);

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandSweep_async(AMI_Dreamland_dreamlandSweep __cb, int sceneId, java.util.Map<String, String> __ctx);

    /**
     * 排行(DreamlandRankView)
     **/
    public String lookDreamlandRank()
        throws NoteException;

    /**
     * 排行(DreamlandRankView)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lookDreamlandRank(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 排行(DreamlandRankView)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank();

    /**
     * 排行(DreamlandRankView)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(java.util.Map<String, String> __ctx);

    /**
     * 排行(DreamlandRankView)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(Ice.Callback __cb);

    /**
     * 排行(DreamlandRankView)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 排行(DreamlandRankView)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(Callback_Dreamland_lookDreamlandRank __cb);

    /**
     * 排行(DreamlandRankView)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(java.util.Map<String, String> __ctx, Callback_Dreamland_lookDreamlandRank __cb);

    /**
     * 排行(DreamlandRankView)
     * @param __result The asynchronous result object.
     **/
    public String end_lookDreamlandRank(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     **/
    public boolean lookDreamlandRank_async(AMI_Dreamland_lookDreamlandRank __cb);

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lookDreamlandRank_async(AMI_Dreamland_lookDreamlandRank __cb, java.util.Map<String, String> __ctx);

    /**
     * 星数奖励界面(DreamlandAwardView)
     **/
    public String dreamlandAwardPage()
        throws NoteException;

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandAwardPage(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage();

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(java.util.Map<String, String> __ctx);

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(Ice.Callback __cb);

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(Callback_Dreamland_dreamlandAwardPage __cb);

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandAwardPage __cb);

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __result The asynchronous result object.
     **/
    public String end_dreamlandAwardPage(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandAwardPage_async(AMI_Dreamland_dreamlandAwardPage __cb);

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandAwardPage_async(AMI_Dreamland_dreamlandAwardPage __cb, java.util.Map<String, String> __ctx);

    /**
     * 领取星数奖励(IntStringSeq)
     **/
    public String drawStarAward(int star)
        throws NoteException;

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String drawStarAward(int star, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 领取星数奖励(IntStringSeq)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star);

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, java.util.Map<String, String> __ctx);

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, Ice.Callback __cb);

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, Callback_Dreamland_drawStarAward __cb);

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, java.util.Map<String, String> __ctx, Callback_Dreamland_drawStarAward __cb);

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __result The asynchronous result object.
     **/
    public String end_drawStarAward(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     **/
    public boolean drawStarAward_async(AMI_Dreamland_drawStarAward __cb, int star);

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean drawStarAward_async(AMI_Dreamland_drawStarAward __cb, int star, java.util.Map<String, String> __ctx);

    /**
     * 商店界面(DreamlandShopItemView)
     **/
    public String dreamlandShopPage()
        throws NoteException;

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandShopPage(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 商店界面(DreamlandShopItemView)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage();

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(java.util.Map<String, String> __ctx);

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(Ice.Callback __cb);

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(Callback_Dreamland_dreamlandShopPage __cb);

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandShopPage __cb);

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __result The asynchronous result object.
     **/
    public String end_dreamlandShopPage(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandShopPage_async(AMI_Dreamland_dreamlandShopPage __cb);

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandShopPage_async(AMI_Dreamland_dreamlandShopPage __cb, java.util.Map<String, String> __ctx);

    /**
     * 商店刷新 (DreamlandShopItemView)
     **/
    public String dreamlandRefreshShop()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandRefreshShop(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop();

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(java.util.Map<String, String> __ctx);

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(Ice.Callback __cb);

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(Callback_Dreamland_dreamlandRefreshShop __cb);

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandRefreshShop __cb);

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __result The asynchronous result object.
     **/
    public String end_dreamlandRefreshShop(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandRefreshShop_async(AMI_Dreamland_dreamlandRefreshShop __cb);

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandRefreshShop_async(AMI_Dreamland_dreamlandRefreshShop __cb, java.util.Map<String, String> __ctx);

    /**
     * 商店物品兑换 (IntString)
     **/
    public String buyDreamlandShopItem(int id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 商店物品兑换 (IntString)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 商店物品兑换 (IntString)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id);

    /**
     * 商店物品兑换 (IntString)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx);

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, Ice.Callback __cb);

    /**
     * 商店物品兑换 (IntString)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, Callback_Dreamland_buyDreamlandShopItem __cb);

    /**
     * 商店物品兑换 (IntString)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx, Callback_Dreamland_buyDreamlandShopItem __cb);

    /**
     * 商店物品兑换 (IntString)
     * @param __result The asynchronous result object.
     **/
    public String end_buyDreamlandShopItem(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     **/
    public boolean buyDreamlandShopItem_async(AMI_Dreamland_buyDreamlandShopItem __cb, int id);

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyDreamlandShopItem_async(AMI_Dreamland_buyDreamlandShopItem __cb, int id, java.util.Map<String, String> __ctx);

    /**
     * 购买每日挑战次数
     **/
    public int buyChallengeNum()
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 购买每日挑战次数
     * @param __ctx The Context map to send with the invocation.
     **/
    public int buyChallengeNum(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 购买每日挑战次数
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyChallengeNum();

    /**
     * 购买每日挑战次数
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(java.util.Map<String, String> __ctx);

    /**
     * 购买每日挑战次数
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(Ice.Callback __cb);

    /**
     * 购买每日挑战次数
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 购买每日挑战次数
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(Callback_Dreamland_buyChallengeNum __cb);

    /**
     * 购买每日挑战次数
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(java.util.Map<String, String> __ctx, Callback_Dreamland_buyChallengeNum __cb);

    /**
     * 购买每日挑战次数
     * @param __result The asynchronous result object.
     **/
    public int end_buyChallengeNum(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     **/
    public boolean buyChallengeNum_async(AMI_Dreamland_buyChallengeNum __cb);

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyChallengeNum_async(AMI_Dreamland_buyChallengeNum __cb, java.util.Map<String, String> __ctx);
}
