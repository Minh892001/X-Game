// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Dreamland.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class DreamlandPrxHelper extends Ice.ObjectPrxHelperBase implements DreamlandPrx
{
    private static final String __beginDreamland_name = "beginDreamland";

    /**
     * 战斗开始 返回战报编号
     **/
    public String beginDreamland(int sceneId)
        throws NoteException
    {
        return beginDreamland(sceneId, null, false);
    }

    /**
     * 战斗开始 返回战报编号
     * @param __ctx The Context map to send with the invocation.
     **/
    public String beginDreamland(int sceneId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginDreamland(sceneId, __ctx, true);
    }

    private String beginDreamland(int sceneId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginDreamland", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginDreamland");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.beginDreamland(sceneId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId)
    {
        return begin_beginDreamland(sceneId, null, false, null);
    }

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, java.util.Map<String, String> __ctx)
    {
        return begin_beginDreamland(sceneId, __ctx, true, null);
    }

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, Ice.Callback __cb)
    {
        return begin_beginDreamland(sceneId, null, false, __cb);
    }

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginDreamland(sceneId, __ctx, true, __cb);
    }

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, Callback_Dreamland_beginDreamland __cb)
    {
        return begin_beginDreamland(sceneId, null, false, __cb);
    }

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginDreamland(int sceneId, java.util.Map<String, String> __ctx, Callback_Dreamland_beginDreamland __cb)
    {
        return begin_beginDreamland(sceneId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginDreamland(int sceneId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginDreamland_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginDreamland_name, __cb);
        try
        {
            __result.__prepare(__beginDreamland_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(sceneId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_beginDreamland(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginDreamland_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     **/
    public boolean beginDreamland_async(AMI_Dreamland_beginDreamland __cb, int sceneId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginDreamland_name);
            __r = begin_beginDreamland(sceneId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginDreamland_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 战斗开始 返回战报编号
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginDreamland_async(AMI_Dreamland_beginDreamland __cb, int sceneId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginDreamland_name);
            __r = begin_beginDreamland(sceneId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginDreamland_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyChallengeNum_name = "buyChallengeNum";

    /**
     * 购买每日挑战次数
     **/
    public int buyChallengeNum()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return buyChallengeNum(null, false);
    }

    /**
     * 购买每日挑战次数
     * @param __ctx The Context map to send with the invocation.
     **/
    public int buyChallengeNum(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return buyChallengeNum(__ctx, true);
    }

    private int buyChallengeNum(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyChallengeNum", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyChallengeNum");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.buyChallengeNum(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyChallengeNum()
    {
        return begin_buyChallengeNum(null, false, null);
    }

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(java.util.Map<String, String> __ctx)
    {
        return begin_buyChallengeNum(__ctx, true, null);
    }

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(Ice.Callback __cb)
    {
        return begin_buyChallengeNum(null, false, __cb);
    }

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyChallengeNum(__ctx, true, __cb);
    }

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(Callback_Dreamland_buyChallengeNum __cb)
    {
        return begin_buyChallengeNum(null, false, __cb);
    }

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyChallengeNum(java.util.Map<String, String> __ctx, Callback_Dreamland_buyChallengeNum __cb)
    {
        return begin_buyChallengeNum(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyChallengeNum(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyChallengeNum_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyChallengeNum_name, __cb);
        try
        {
            __result.__prepare(__buyChallengeNum_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_buyChallengeNum(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyChallengeNum_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     **/
    public boolean buyChallengeNum_async(AMI_Dreamland_buyChallengeNum __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChallengeNum_name);
            __r = begin_buyChallengeNum(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChallengeNum_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 购买每日挑战次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyChallengeNum_async(AMI_Dreamland_buyChallengeNum __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChallengeNum_name);
            __r = begin_buyChallengeNum(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChallengeNum_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyDreamlandShopItem_name = "buyDreamlandShopItem";

    /**
     * 商店物品兑换 (IntString)
     **/
    public String buyDreamlandShopItem(int id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyDreamlandShopItem(id, null, false);
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyDreamlandShopItem(id, __ctx, true);
    }

    private String buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyDreamlandShopItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyDreamlandShopItem");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.buyDreamlandShopItem(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id)
    {
        return begin_buyDreamlandShopItem(id, null, false, null);
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx)
    {
        return begin_buyDreamlandShopItem(id, __ctx, true, null);
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, Ice.Callback __cb)
    {
        return begin_buyDreamlandShopItem(id, null, false, __cb);
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyDreamlandShopItem(id, __ctx, true, __cb);
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, Callback_Dreamland_buyDreamlandShopItem __cb)
    {
        return begin_buyDreamlandShopItem(id, null, false, __cb);
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx, Callback_Dreamland_buyDreamlandShopItem __cb)
    {
        return begin_buyDreamlandShopItem(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyDreamlandShopItem(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyDreamlandShopItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyDreamlandShopItem_name, __cb);
        try
        {
            __result.__prepare(__buyDreamlandShopItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_buyDreamlandShopItem(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyDreamlandShopItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     **/
    public boolean buyDreamlandShopItem_async(AMI_Dreamland_buyDreamlandShopItem __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyDreamlandShopItem_name);
            __r = begin_buyDreamlandShopItem(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyDreamlandShopItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 商店物品兑换 (IntString)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyDreamlandShopItem_async(AMI_Dreamland_buyDreamlandShopItem __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyDreamlandShopItem_name);
            __r = begin_buyDreamlandShopItem(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyDreamlandShopItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __drawStarAward_name = "drawStarAward";

    /**
     * 领取星数奖励(IntStringSeq)
     **/
    public String drawStarAward(int star)
        throws NoteException
    {
        return drawStarAward(star, null, false);
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String drawStarAward(int star, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return drawStarAward(star, __ctx, true);
    }

    private String drawStarAward(int star, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "drawStarAward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("drawStarAward");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.drawStarAward(star, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star)
    {
        return begin_drawStarAward(star, null, false, null);
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, java.util.Map<String, String> __ctx)
    {
        return begin_drawStarAward(star, __ctx, true, null);
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, Ice.Callback __cb)
    {
        return begin_drawStarAward(star, null, false, __cb);
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_drawStarAward(star, __ctx, true, __cb);
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, Callback_Dreamland_drawStarAward __cb)
    {
        return begin_drawStarAward(star, null, false, __cb);
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_drawStarAward(int star, java.util.Map<String, String> __ctx, Callback_Dreamland_drawStarAward __cb)
    {
        return begin_drawStarAward(star, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_drawStarAward(int star, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__drawStarAward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __drawStarAward_name, __cb);
        try
        {
            __result.__prepare(__drawStarAward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(star);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_drawStarAward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __drawStarAward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     **/
    public boolean drawStarAward_async(AMI_Dreamland_drawStarAward __cb, int star)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__drawStarAward_name);
            __r = begin_drawStarAward(star, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __drawStarAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取星数奖励(IntStringSeq)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean drawStarAward_async(AMI_Dreamland_drawStarAward __cb, int star, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__drawStarAward_name);
            __r = begin_drawStarAward(star, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __drawStarAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __dreamlandAwardPage_name = "dreamlandAwardPage";

    /**
     * 星数奖励界面(DreamlandAwardView)
     **/
    public String dreamlandAwardPage()
        throws NoteException
    {
        return dreamlandAwardPage(null, false);
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandAwardPage(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return dreamlandAwardPage(__ctx, true);
    }

    private String dreamlandAwardPage(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "dreamlandAwardPage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("dreamlandAwardPage");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.dreamlandAwardPage(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage()
    {
        return begin_dreamlandAwardPage(null, false, null);
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(java.util.Map<String, String> __ctx)
    {
        return begin_dreamlandAwardPage(__ctx, true, null);
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(Ice.Callback __cb)
    {
        return begin_dreamlandAwardPage(null, false, __cb);
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dreamlandAwardPage(__ctx, true, __cb);
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(Callback_Dreamland_dreamlandAwardPage __cb)
    {
        return begin_dreamlandAwardPage(null, false, __cb);
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandAwardPage(java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandAwardPage __cb)
    {
        return begin_dreamlandAwardPage(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_dreamlandAwardPage(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dreamlandAwardPage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __dreamlandAwardPage_name, __cb);
        try
        {
            __result.__prepare(__dreamlandAwardPage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_dreamlandAwardPage(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __dreamlandAwardPage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandAwardPage_async(AMI_Dreamland_dreamlandAwardPage __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandAwardPage_name);
            __r = begin_dreamlandAwardPage(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandAwardPage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandAwardPage_async(AMI_Dreamland_dreamlandAwardPage __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandAwardPage_name);
            __r = begin_dreamlandAwardPage(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandAwardPage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __dreamlandPage_name = "dreamlandPage";

    /**
     * 幻境主界面数据(DreamlandShow)
     **/
    public String dreamlandPage(int groupId)
        throws NoteException
    {
        return dreamlandPage(groupId, null, false);
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandPage(int groupId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return dreamlandPage(groupId, __ctx, true);
    }

    private String dreamlandPage(int groupId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "dreamlandPage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("dreamlandPage");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.dreamlandPage(groupId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId)
    {
        return begin_dreamlandPage(groupId, null, false, null);
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, java.util.Map<String, String> __ctx)
    {
        return begin_dreamlandPage(groupId, __ctx, true, null);
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, Ice.Callback __cb)
    {
        return begin_dreamlandPage(groupId, null, false, __cb);
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dreamlandPage(groupId, __ctx, true, __cb);
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, Callback_Dreamland_dreamlandPage __cb)
    {
        return begin_dreamlandPage(groupId, null, false, __cb);
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandPage(int groupId, java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandPage __cb)
    {
        return begin_dreamlandPage(groupId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_dreamlandPage(int groupId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dreamlandPage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __dreamlandPage_name, __cb);
        try
        {
            __result.__prepare(__dreamlandPage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(groupId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_dreamlandPage(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __dreamlandPage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandPage_async(AMI_Dreamland_dreamlandPage __cb, int groupId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandPage_name);
            __r = begin_dreamlandPage(groupId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandPage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandPage_async(AMI_Dreamland_dreamlandPage __cb, int groupId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandPage_name);
            __r = begin_dreamlandPage(groupId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandPage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __dreamlandRefreshShop_name = "dreamlandRefreshShop";

    /**
     * 商店刷新 (DreamlandShopItemView)
     **/
    public String dreamlandRefreshShop()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return dreamlandRefreshShop(null, false);
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandRefreshShop(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return dreamlandRefreshShop(__ctx, true);
    }

    private String dreamlandRefreshShop(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "dreamlandRefreshShop", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("dreamlandRefreshShop");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.dreamlandRefreshShop(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop()
    {
        return begin_dreamlandRefreshShop(null, false, null);
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(java.util.Map<String, String> __ctx)
    {
        return begin_dreamlandRefreshShop(__ctx, true, null);
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(Ice.Callback __cb)
    {
        return begin_dreamlandRefreshShop(null, false, __cb);
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dreamlandRefreshShop(__ctx, true, __cb);
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(Callback_Dreamland_dreamlandRefreshShop __cb)
    {
        return begin_dreamlandRefreshShop(null, false, __cb);
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandRefreshShop(java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandRefreshShop __cb)
    {
        return begin_dreamlandRefreshShop(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_dreamlandRefreshShop(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dreamlandRefreshShop_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __dreamlandRefreshShop_name, __cb);
        try
        {
            __result.__prepare(__dreamlandRefreshShop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_dreamlandRefreshShop(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __dreamlandRefreshShop_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandRefreshShop_async(AMI_Dreamland_dreamlandRefreshShop __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandRefreshShop_name);
            __r = begin_dreamlandRefreshShop(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandRefreshShop_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandRefreshShop_async(AMI_Dreamland_dreamlandRefreshShop __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandRefreshShop_name);
            __r = begin_dreamlandRefreshShop(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandRefreshShop_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __dreamlandShopPage_name = "dreamlandShopPage";

    /**
     * 商店界面(DreamlandShopItemView)
     **/
    public String dreamlandShopPage()
        throws NoteException
    {
        return dreamlandShopPage(null, false);
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandShopPage(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return dreamlandShopPage(__ctx, true);
    }

    private String dreamlandShopPage(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "dreamlandShopPage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("dreamlandShopPage");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.dreamlandShopPage(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage()
    {
        return begin_dreamlandShopPage(null, false, null);
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(java.util.Map<String, String> __ctx)
    {
        return begin_dreamlandShopPage(__ctx, true, null);
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(Ice.Callback __cb)
    {
        return begin_dreamlandShopPage(null, false, __cb);
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dreamlandShopPage(__ctx, true, __cb);
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(Callback_Dreamland_dreamlandShopPage __cb)
    {
        return begin_dreamlandShopPage(null, false, __cb);
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandShopPage(java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandShopPage __cb)
    {
        return begin_dreamlandShopPage(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_dreamlandShopPage(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dreamlandShopPage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __dreamlandShopPage_name, __cb);
        try
        {
            __result.__prepare(__dreamlandShopPage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_dreamlandShopPage(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __dreamlandShopPage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandShopPage_async(AMI_Dreamland_dreamlandShopPage __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandShopPage_name);
            __r = begin_dreamlandShopPage(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandShopPage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 商店界面(DreamlandShopItemView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandShopPage_async(AMI_Dreamland_dreamlandShopPage __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandShopPage_name);
            __r = begin_dreamlandShopPage(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandShopPage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __dreamlandSweep_name = "dreamlandSweep";

    /**
     * 扫荡(DreamlandSweepResult)
     **/
    public String dreamlandSweep(int sceneId)
        throws NoteException
    {
        return dreamlandSweep(sceneId, null, false);
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return dreamlandSweep(sceneId, __ctx, true);
    }

    private String dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "dreamlandSweep", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("dreamlandSweep");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.dreamlandSweep(sceneId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId)
    {
        return begin_dreamlandSweep(sceneId, null, false, null);
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx)
    {
        return begin_dreamlandSweep(sceneId, __ctx, true, null);
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, Ice.Callback __cb)
    {
        return begin_dreamlandSweep(sceneId, null, false, __cb);
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dreamlandSweep(sceneId, __ctx, true, __cb);
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, Callback_Dreamland_dreamlandSweep __cb)
    {
        return begin_dreamlandSweep(sceneId, null, false, __cb);
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandSweep __cb)
    {
        return begin_dreamlandSweep(sceneId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_dreamlandSweep(int sceneId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dreamlandSweep_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __dreamlandSweep_name, __cb);
        try
        {
            __result.__prepare(__dreamlandSweep_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(sceneId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_dreamlandSweep(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __dreamlandSweep_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandSweep_async(AMI_Dreamland_dreamlandSweep __cb, int sceneId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandSweep_name);
            __r = begin_dreamlandSweep(sceneId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandSweep_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 扫荡(DreamlandSweepResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandSweep_async(AMI_Dreamland_dreamlandSweep __cb, int sceneId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandSweep_name);
            __r = begin_dreamlandSweep(sceneId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandSweep_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __dreamlandSwitchSceneGroup_name = "dreamlandSwitchSceneGroup";

    /**
     * 幻境关卡组切换(DreamlandShow)
     **/
    public String dreamlandSwitchSceneGroup(int groupId, boolean isFront)
        throws NoteException
    {
        return dreamlandSwitchSceneGroup(groupId, isFront, null, false);
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return dreamlandSwitchSceneGroup(groupId, isFront, __ctx, true);
    }

    private String dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "dreamlandSwitchSceneGroup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("dreamlandSwitchSceneGroup");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.dreamlandSwitchSceneGroup(groupId, isFront, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront)
    {
        return begin_dreamlandSwitchSceneGroup(groupId, isFront, null, false, null);
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx)
    {
        return begin_dreamlandSwitchSceneGroup(groupId, isFront, __ctx, true, null);
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, Ice.Callback __cb)
    {
        return begin_dreamlandSwitchSceneGroup(groupId, isFront, null, false, __cb);
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dreamlandSwitchSceneGroup(groupId, isFront, __ctx, true, __cb);
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, Callback_Dreamland_dreamlandSwitchSceneGroup __cb)
    {
        return begin_dreamlandSwitchSceneGroup(groupId, isFront, null, false, __cb);
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx, Callback_Dreamland_dreamlandSwitchSceneGroup __cb)
    {
        return begin_dreamlandSwitchSceneGroup(groupId, isFront, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_dreamlandSwitchSceneGroup(int groupId, boolean isFront, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dreamlandSwitchSceneGroup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __dreamlandSwitchSceneGroup_name, __cb);
        try
        {
            __result.__prepare(__dreamlandSwitchSceneGroup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(groupId);
            __os.writeBool(isFront);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_dreamlandSwitchSceneGroup(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __dreamlandSwitchSceneGroup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     **/
    public boolean dreamlandSwitchSceneGroup_async(AMI_Dreamland_dreamlandSwitchSceneGroup __cb, int groupId, boolean isFront)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandSwitchSceneGroup_name);
            __r = begin_dreamlandSwitchSceneGroup(groupId, isFront, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandSwitchSceneGroup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean dreamlandSwitchSceneGroup_async(AMI_Dreamland_dreamlandSwitchSceneGroup __cb, int groupId, boolean isFront, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__dreamlandSwitchSceneGroup_name);
            __r = begin_dreamlandSwitchSceneGroup(groupId, isFront, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __dreamlandSwitchSceneGroup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endDreamland_name = "endDreamland";

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     **/
    public String endDreamland(int sceneId, byte remainHero)
        throws NoteException
    {
        return endDreamland(sceneId, remainHero, null, false);
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endDreamland(sceneId, remainHero, __ctx, true);
    }

    private String endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endDreamland", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endDreamland");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.endDreamland(sceneId, remainHero, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero)
    {
        return begin_endDreamland(sceneId, remainHero, null, false, null);
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx)
    {
        return begin_endDreamland(sceneId, remainHero, __ctx, true, null);
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, Ice.Callback __cb)
    {
        return begin_endDreamland(sceneId, remainHero, null, false, __cb);
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endDreamland(sceneId, remainHero, __ctx, true, __cb);
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, Callback_Dreamland_endDreamland __cb)
    {
        return begin_endDreamland(sceneId, remainHero, null, false, __cb);
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx, Callback_Dreamland_endDreamland __cb)
    {
        return begin_endDreamland(sceneId, remainHero, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endDreamland(int sceneId, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endDreamland_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endDreamland_name, __cb);
        try
        {
            __result.__prepare(__endDreamland_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(sceneId);
            __os.writeByte(remainHero);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_endDreamland(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endDreamland_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     **/
    public boolean endDreamland_async(AMI_Dreamland_endDreamland __cb, int sceneId, byte remainHero)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endDreamland_name);
            __r = begin_endDreamland(sceneId, remainHero, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endDreamland_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endDreamland_async(AMI_Dreamland_endDreamland __cb, int sceneId, byte remainHero, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endDreamland_name);
            __r = begin_endDreamland(sceneId, remainHero, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endDreamland_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lookDreamlandRank_name = "lookDreamlandRank";

    /**
     * 排行(DreamlandRankView)
     **/
    public String lookDreamlandRank()
        throws NoteException
    {
        return lookDreamlandRank(null, false);
    }

    /**
     * 排行(DreamlandRankView)
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lookDreamlandRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lookDreamlandRank(__ctx, true);
    }

    private String lookDreamlandRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lookDreamlandRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lookDreamlandRank");
                    __delBase = __getDelegate(false);
                    _DreamlandDel __del = (_DreamlandDel)__delBase;
                    return __del.lookDreamlandRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank()
    {
        return begin_lookDreamlandRank(null, false, null);
    }

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(java.util.Map<String, String> __ctx)
    {
        return begin_lookDreamlandRank(__ctx, true, null);
    }

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(Ice.Callback __cb)
    {
        return begin_lookDreamlandRank(null, false, __cb);
    }

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lookDreamlandRank(__ctx, true, __cb);
    }

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(Callback_Dreamland_lookDreamlandRank __cb)
    {
        return begin_lookDreamlandRank(null, false, __cb);
    }

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookDreamlandRank(java.util.Map<String, String> __ctx, Callback_Dreamland_lookDreamlandRank __cb)
    {
        return begin_lookDreamlandRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lookDreamlandRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lookDreamlandRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lookDreamlandRank_name, __cb);
        try
        {
            __result.__prepare(__lookDreamlandRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lookDreamlandRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lookDreamlandRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     **/
    public boolean lookDreamlandRank_async(AMI_Dreamland_lookDreamlandRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookDreamlandRank_name);
            __r = begin_lookDreamlandRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookDreamlandRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 排行(DreamlandRankView)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lookDreamlandRank_async(AMI_Dreamland_lookDreamlandRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookDreamlandRank_name);
            __r = begin_lookDreamlandRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookDreamlandRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static DreamlandPrx checkedCast(Ice.ObjectPrx __obj)
    {
        DreamlandPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DreamlandPrx)
            {
                __d = (DreamlandPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    DreamlandPrxHelper __h = new DreamlandPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DreamlandPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        DreamlandPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DreamlandPrx)
            {
                __d = (DreamlandPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    DreamlandPrxHelper __h = new DreamlandPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DreamlandPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DreamlandPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    DreamlandPrxHelper __h = new DreamlandPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DreamlandPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        DreamlandPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    DreamlandPrxHelper __h = new DreamlandPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DreamlandPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        DreamlandPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DreamlandPrx)
            {
                __d = (DreamlandPrx)__obj;
            }
            else
            {
                DreamlandPrxHelper __h = new DreamlandPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static DreamlandPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DreamlandPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            DreamlandPrxHelper __h = new DreamlandPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Dreamland"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _DreamlandDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _DreamlandDelD();
    }

    public static void __write(IceInternal.BasicStream __os, DreamlandPrx v)
    {
        __os.writeProxy(v);
    }

    public static DreamlandPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DreamlandPrxHelper result = new DreamlandPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
