// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Dreamland.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 主界面数据
 **/
public class DreamlandShow implements java.lang.Cloneable, java.io.Serializable
{
    public SceneStateUnitGroup group;

    public int groupId;

    public int curSceneId;

    public int surplusChallengeNum;

    public int buyNum;

    public boolean isRedPoint;

    public DreamlandShow()
    {
    }

    public DreamlandShow(SceneStateUnitGroup group, int groupId, int curSceneId, int surplusChallengeNum, int buyNum, boolean isRedPoint)
    {
        this.group = group;
        this.groupId = groupId;
        this.curSceneId = curSceneId;
        this.surplusChallengeNum = surplusChallengeNum;
        this.buyNum = buyNum;
        this.isRedPoint = isRedPoint;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DreamlandShow _r = null;
        if(rhs instanceof DreamlandShow)
        {
            _r = (DreamlandShow)rhs;
        }

        if(_r != null)
        {
            if(group != _r.group)
            {
                if(group == null || _r.group == null || !group.equals(_r.group))
                {
                    return false;
                }
            }
            if(groupId != _r.groupId)
            {
                return false;
            }
            if(curSceneId != _r.curSceneId)
            {
                return false;
            }
            if(surplusChallengeNum != _r.surplusChallengeNum)
            {
                return false;
            }
            if(buyNum != _r.buyNum)
            {
                return false;
            }
            if(isRedPoint != _r.isRedPoint)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::DreamlandShow");
        __h = IceInternal.HashUtil.hashAdd(__h, group);
        __h = IceInternal.HashUtil.hashAdd(__h, groupId);
        __h = IceInternal.HashUtil.hashAdd(__h, curSceneId);
        __h = IceInternal.HashUtil.hashAdd(__h, surplusChallengeNum);
        __h = IceInternal.HashUtil.hashAdd(__h, buyNum);
        __h = IceInternal.HashUtil.hashAdd(__h, isRedPoint);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        group.__write(__os);
        __os.writeInt(groupId);
        __os.writeInt(curSceneId);
        __os.writeInt(surplusChallengeNum);
        __os.writeInt(buyNum);
        __os.writeBool(isRedPoint);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        group = new SceneStateUnitGroup();
        group.__read(__is);
        groupId = __is.readInt();
        curSceneId = __is.readInt();
        surplusChallengeNum = __is.readInt();
        buyNum = __is.readInt();
        isRedPoint = __is.readBool();
    }

    public static final long serialVersionUID = -2105354377L;
}
