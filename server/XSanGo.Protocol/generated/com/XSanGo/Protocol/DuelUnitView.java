// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class DuelUnitView implements java.lang.Cloneable, java.io.Serializable
{
    public int identity;

    public DuelTemplateType type;

    public int templateId;

    public String name;

    public int hp;

    public int maxHp;

    public int sp;

    public int maxSp;

    public int lastHp;

    public int power;

    public int star;

    public int colorLevel;

    public int quality;

    public byte breakLevel;

    public int level;

    public int brave;

    public int calm;

    public int intel;

    public int dodge;

    public int critRate;

    public int critResRate;

    public int damageRes;

    public DuelSkillTemplateView[] skills;

    public DuelUnitView()
    {
    }

    public DuelUnitView(int identity, DuelTemplateType type, int templateId, String name, int hp, int maxHp, int sp, int maxSp, int lastHp, int power, int star, int colorLevel, int quality, byte breakLevel, int level, int brave, int calm, int intel, int dodge, int critRate, int critResRate, int damageRes, DuelSkillTemplateView[] skills)
    {
        this.identity = identity;
        this.type = type;
        this.templateId = templateId;
        this.name = name;
        this.hp = hp;
        this.maxHp = maxHp;
        this.sp = sp;
        this.maxSp = maxSp;
        this.lastHp = lastHp;
        this.power = power;
        this.star = star;
        this.colorLevel = colorLevel;
        this.quality = quality;
        this.breakLevel = breakLevel;
        this.level = level;
        this.brave = brave;
        this.calm = calm;
        this.intel = intel;
        this.dodge = dodge;
        this.critRate = critRate;
        this.critResRate = critResRate;
        this.damageRes = damageRes;
        this.skills = skills;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DuelUnitView _r = null;
        if(rhs instanceof DuelUnitView)
        {
            _r = (DuelUnitView)rhs;
        }

        if(_r != null)
        {
            if(identity != _r.identity)
            {
                return false;
            }
            if(type != _r.type)
            {
                if(type == null || _r.type == null || !type.equals(_r.type))
                {
                    return false;
                }
            }
            if(templateId != _r.templateId)
            {
                return false;
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(hp != _r.hp)
            {
                return false;
            }
            if(maxHp != _r.maxHp)
            {
                return false;
            }
            if(sp != _r.sp)
            {
                return false;
            }
            if(maxSp != _r.maxSp)
            {
                return false;
            }
            if(lastHp != _r.lastHp)
            {
                return false;
            }
            if(power != _r.power)
            {
                return false;
            }
            if(star != _r.star)
            {
                return false;
            }
            if(colorLevel != _r.colorLevel)
            {
                return false;
            }
            if(quality != _r.quality)
            {
                return false;
            }
            if(breakLevel != _r.breakLevel)
            {
                return false;
            }
            if(level != _r.level)
            {
                return false;
            }
            if(brave != _r.brave)
            {
                return false;
            }
            if(calm != _r.calm)
            {
                return false;
            }
            if(intel != _r.intel)
            {
                return false;
            }
            if(dodge != _r.dodge)
            {
                return false;
            }
            if(critRate != _r.critRate)
            {
                return false;
            }
            if(critResRate != _r.critResRate)
            {
                return false;
            }
            if(damageRes != _r.damageRes)
            {
                return false;
            }
            if(!java.util.Arrays.equals(skills, _r.skills))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::DuelUnitView");
        __h = IceInternal.HashUtil.hashAdd(__h, identity);
        __h = IceInternal.HashUtil.hashAdd(__h, type);
        __h = IceInternal.HashUtil.hashAdd(__h, templateId);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, hp);
        __h = IceInternal.HashUtil.hashAdd(__h, maxHp);
        __h = IceInternal.HashUtil.hashAdd(__h, sp);
        __h = IceInternal.HashUtil.hashAdd(__h, maxSp);
        __h = IceInternal.HashUtil.hashAdd(__h, lastHp);
        __h = IceInternal.HashUtil.hashAdd(__h, power);
        __h = IceInternal.HashUtil.hashAdd(__h, star);
        __h = IceInternal.HashUtil.hashAdd(__h, colorLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, quality);
        __h = IceInternal.HashUtil.hashAdd(__h, breakLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, level);
        __h = IceInternal.HashUtil.hashAdd(__h, brave);
        __h = IceInternal.HashUtil.hashAdd(__h, calm);
        __h = IceInternal.HashUtil.hashAdd(__h, intel);
        __h = IceInternal.HashUtil.hashAdd(__h, dodge);
        __h = IceInternal.HashUtil.hashAdd(__h, critRate);
        __h = IceInternal.HashUtil.hashAdd(__h, critResRate);
        __h = IceInternal.HashUtil.hashAdd(__h, damageRes);
        __h = IceInternal.HashUtil.hashAdd(__h, skills);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(identity);
        type.__write(__os);
        __os.writeInt(templateId);
        __os.writeString(name);
        __os.writeInt(hp);
        __os.writeInt(maxHp);
        __os.writeInt(sp);
        __os.writeInt(maxSp);
        __os.writeInt(lastHp);
        __os.writeInt(power);
        __os.writeInt(star);
        __os.writeInt(colorLevel);
        __os.writeInt(quality);
        __os.writeByte(breakLevel);
        __os.writeInt(level);
        __os.writeInt(brave);
        __os.writeInt(calm);
        __os.writeInt(intel);
        __os.writeInt(dodge);
        __os.writeInt(critRate);
        __os.writeInt(critResRate);
        __os.writeInt(damageRes);
        DuelSkillTemplateViewSeqHelper.write(__os, skills);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        identity = __is.readInt();
        type = DuelTemplateType.__read(__is);
        templateId = __is.readInt();
        name = __is.readString();
        hp = __is.readInt();
        maxHp = __is.readInt();
        sp = __is.readInt();
        maxSp = __is.readInt();
        lastHp = __is.readInt();
        power = __is.readInt();
        star = __is.readInt();
        colorLevel = __is.readInt();
        quality = __is.readInt();
        breakLevel = __is.readByte();
        level = __is.readInt();
        brave = __is.readInt();
        calm = __is.readInt();
        intel = __is.readInt();
        dodge = __is.readInt();
        critRate = __is.readInt();
        critResRate = __is.readInt();
        damageRes = __is.readInt();
        skills = DuelSkillTemplateViewSeqHelper.read(__is);
    }

    public static final long serialVersionUID = -2038731025L;
}
