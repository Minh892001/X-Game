// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Equip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface EquipPrx extends Ice.ObjectPrx
{
    public ItemView levelup(String id)
        throws NotEnoughMoneyException,
               NoteException;

    public ItemView levelup(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_levelup(String id);

    public Ice.AsyncResult begin_levelup(String id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_levelup(String id, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelup(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelup(String id, Callback_Equip_levelup __cb);

    public Ice.AsyncResult begin_levelup(String id, java.util.Map<String, String> __ctx, Callback_Equip_levelup __cb);

    public ItemView end_levelup(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean levelup_async(AMI_Equip_levelup __cb, String id);

    public boolean levelup_async(AMI_Equip_levelup __cb, String id, java.util.Map<String, String> __ctx);

    public ItemView levelupAuto(String id)
        throws NotEnoughMoneyException,
               NoteException;

    public ItemView levelupAuto(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_levelupAuto(String id);

    public Ice.AsyncResult begin_levelupAuto(String id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_levelupAuto(String id, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelupAuto(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelupAuto(String id, Callback_Equip_levelupAuto __cb);

    public Ice.AsyncResult begin_levelupAuto(String id, java.util.Map<String, String> __ctx, Callback_Equip_levelupAuto __cb);

    public ItemView end_levelupAuto(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean levelupAuto_async(AMI_Equip_levelupAuto __cb, String id);

    public boolean levelupAuto_async(AMI_Equip_levelupAuto __cb, String id, java.util.Map<String, String> __ctx);

    public EquipLevelEntity[] levelupAll(String id)
        throws NotEnoughMoneyException,
               NoteException;

    public EquipLevelEntity[] levelupAll(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_levelupAll(String id);

    public Ice.AsyncResult begin_levelupAll(String id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_levelupAll(String id, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelupAll(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelupAll(String id, Callback_Equip_levelupAll __cb);

    public Ice.AsyncResult begin_levelupAll(String id, java.util.Map<String, String> __ctx, Callback_Equip_levelupAll __cb);

    public EquipLevelEntity[] end_levelupAll(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean levelupAll_async(AMI_Equip_levelupAll __cb, String id);

    public boolean levelupAll_async(AMI_Equip_levelupAll __cb, String id, java.util.Map<String, String> __ctx);

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     **/
    public String starUp(String id, String idArray, String items)
        throws NotEnoughMoneyException,
               NoteException;

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __ctx The Context map to send with the invocation.
     **/
    public String starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items);

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx);

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, Ice.Callback __cb);

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, Callback_Equip_starUp __cb);

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx, Callback_Equip_starUp __cb);

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __result The asynchronous result object.
     **/
    public String end_starUp(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     **/
    public boolean starUp_async(AMI_Equip_starUp __cb, String id, String idArray, String items);

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean starUp_async(AMI_Equip_starUp __cb, String id, String idArray, String items, java.util.Map<String, String> __ctx);

    public ItemView rebuild(String id)
        throws NoteException;

    public ItemView rebuild(String id, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_rebuild(String id);

    public Ice.AsyncResult begin_rebuild(String id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_rebuild(String id, Ice.Callback __cb);

    public Ice.AsyncResult begin_rebuild(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_rebuild(String id, Callback_Equip_rebuild __cb);

    public Ice.AsyncResult begin_rebuild(String id, java.util.Map<String, String> __ctx, Callback_Equip_rebuild __cb);

    public ItemView end_rebuild(Ice.AsyncResult __result)
        throws NoteException;

    public boolean rebuild_async(AMI_Equip_rebuild __cb, String id);

    public boolean rebuild_async(AMI_Equip_rebuild __cb, String id, java.util.Map<String, String> __ctx);

    public ItemView[] smelt(String idArrayStr)
        throws NotEnoughMoneyException,
               NoteException;

    public ItemView[] smelt(String idArrayStr, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_smelt(String idArrayStr);

    public Ice.AsyncResult begin_smelt(String idArrayStr, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_smelt(String idArrayStr, Ice.Callback __cb);

    public Ice.AsyncResult begin_smelt(String idArrayStr, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_smelt(String idArrayStr, Callback_Equip_smelt __cb);

    public Ice.AsyncResult begin_smelt(String idArrayStr, java.util.Map<String, String> __ctx, Callback_Equip_smelt __cb);

    public ItemView[] end_smelt(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean smelt_async(AMI_Equip_smelt __cb, String idArrayStr);

    public boolean smelt_async(AMI_Equip_smelt __cb, String idArrayStr, java.util.Map<String, String> __ctx);

    public String hole(String equipId, int position)
        throws NoteException;

    public String hole(String equipId, int position, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_hole(String equipId, int position);

    public Ice.AsyncResult begin_hole(String equipId, int position, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_hole(String equipId, int position, Ice.Callback __cb);

    public Ice.AsyncResult begin_hole(String equipId, int position, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_hole(String equipId, int position, Callback_Equip_hole __cb);

    public Ice.AsyncResult begin_hole(String equipId, int position, java.util.Map<String, String> __ctx, Callback_Equip_hole __cb);

    public String end_hole(Ice.AsyncResult __result)
        throws NoteException;

    public boolean hole_async(AMI_Equip_hole __cb, String equipId, int position);

    public boolean hole_async(AMI_Equip_hole __cb, String equipId, int position, java.util.Map<String, String> __ctx);

    public void setGem(String equipId, int position, String gemId)
        throws NoteException;

    public void setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId);

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, Ice.Callback __cb);

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, Callback_Equip_setGem __cb);

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx, Callback_Equip_setGem __cb);

    public void end_setGem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean setGem_async(AMI_Equip_setGem __cb, String equipId, int position, String gemId);

    public boolean setGem_async(AMI_Equip_setGem __cb, String equipId, int position, String gemId, java.util.Map<String, String> __ctx);

    public void removeGem(String equipId, int position)
        throws NoteException;

    public void removeGem(String equipId, int position, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_removeGem(String equipId, int position);

    public Ice.AsyncResult begin_removeGem(String equipId, int position, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_removeGem(String equipId, int position, Ice.Callback __cb);

    public Ice.AsyncResult begin_removeGem(String equipId, int position, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_removeGem(String equipId, int position, Callback_Equip_removeGem __cb);

    public Ice.AsyncResult begin_removeGem(String equipId, int position, java.util.Map<String, String> __ctx, Callback_Equip_removeGem __cb);

    public void end_removeGem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean removeGem_async(AMI_Equip_removeGem __cb, String equipId, int position);

    public boolean removeGem_async(AMI_Equip_removeGem __cb, String equipId, int position, java.util.Map<String, String> __ctx);

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     **/
    public String getAllArtifact()
        throws NoteException;

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getAllArtifact(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllArtifact();

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllArtifact(java.util.Map<String, String> __ctx);

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllArtifact(Ice.Callback __cb);

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllArtifact(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllArtifact(Callback_Equip_getAllArtifact __cb);

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllArtifact(java.util.Map<String, String> __ctx, Callback_Equip_getAllArtifact __cb);

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __result The asynchronous result object.
     **/
    public String end_getAllArtifact(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getAllArtifact_async(AMI_Equip_getAllArtifact __cb);

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getAllArtifact_async(AMI_Equip_getAllArtifact __cb, java.util.Map<String, String> __ctx);

    /**
     * 升级神器
     **/
    public void upgradeArtifact(String dbId)
        throws NoteException;

    /**
     * 升级神器
     * @param __ctx The Context map to send with the invocation.
     **/
    public void upgradeArtifact(String dbId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 升级神器
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId);

    /**
     * 升级神器
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, java.util.Map<String, String> __ctx);

    /**
     * 升级神器
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, Ice.Callback __cb);

    /**
     * 升级神器
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 升级神器
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, Callback_Equip_upgradeArtifact __cb);

    /**
     * 升级神器
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, java.util.Map<String, String> __ctx, Callback_Equip_upgradeArtifact __cb);

    /**
     * 升级神器
     * @param __result The asynchronous result object.
     **/
    public void end_upgradeArtifact(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     **/
    public boolean upgradeArtifact_async(AMI_Equip_upgradeArtifact __cb, String dbId);

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean upgradeArtifact_async(AMI_Equip_upgradeArtifact __cb, String dbId, java.util.Map<String, String> __ctx);

    /**
     * 使用神器
     **/
    public void useArtifact(String dbId, String heroId)
        throws NoteException;

    /**
     * 使用神器
     * @param __ctx The Context map to send with the invocation.
     **/
    public void useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 使用神器
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId);

    /**
     * 使用神器
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx);

    /**
     * 使用神器
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, Ice.Callback __cb);

    /**
     * 使用神器
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 使用神器
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, Callback_Equip_useArtifact __cb);

    /**
     * 使用神器
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx, Callback_Equip_useArtifact __cb);

    /**
     * 使用神器
     * @param __result The asynchronous result object.
     **/
    public void end_useArtifact(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     **/
    public boolean useArtifact_async(AMI_Equip_useArtifact __cb, String dbId, String heroId);

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean useArtifact_async(AMI_Equip_useArtifact __cb, String dbId, String heroId, java.util.Map<String, String> __ctx);
}
