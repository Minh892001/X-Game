// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Equip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class EquipPrxHelper extends Ice.ObjectPrxHelperBase implements EquipPrx
{
    private static final String __getAllArtifact_name = "getAllArtifact";

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     **/
    public String getAllArtifact()
        throws NoteException
    {
        return getAllArtifact(null, false);
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getAllArtifact(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getAllArtifact(__ctx, true);
    }

    private String getAllArtifact(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllArtifact", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllArtifact");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    return __del.getAllArtifact(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAllArtifact()
    {
        return begin_getAllArtifact(null, false, null);
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAllArtifact(java.util.Map<String, String> __ctx)
    {
        return begin_getAllArtifact(__ctx, true, null);
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAllArtifact(Ice.Callback __cb)
    {
        return begin_getAllArtifact(null, false, __cb);
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAllArtifact(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllArtifact(__ctx, true, __cb);
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAllArtifact(Callback_Equip_getAllArtifact __cb)
    {
        return begin_getAllArtifact(null, false, __cb);
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAllArtifact(java.util.Map<String, String> __ctx, Callback_Equip_getAllArtifact __cb)
    {
        return begin_getAllArtifact(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllArtifact(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllArtifact_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllArtifact_name, __cb);
        try
        {
            __result.__prepare(__getAllArtifact_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getAllArtifact(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getAllArtifact_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getAllArtifact_async(AMI_Equip_getAllArtifact __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAllArtifact_name);
            __r = begin_getAllArtifact(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAllArtifact_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取所有神器return:ArtifactViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getAllArtifact_async(AMI_Equip_getAllArtifact __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAllArtifact_name);
            __r = begin_getAllArtifact(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAllArtifact_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __hole_name = "hole";

    public String hole(String equipId, int position)
        throws NoteException
    {
        return hole(equipId, position, null, false);
    }

    public String hole(String equipId, int position, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return hole(equipId, position, __ctx, true);
    }

    private String hole(String equipId, int position, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hole", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hole");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    return __del.hole(equipId, position, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hole(String equipId, int position)
    {
        return begin_hole(equipId, position, null, false, null);
    }

    public Ice.AsyncResult begin_hole(String equipId, int position, java.util.Map<String, String> __ctx)
    {
        return begin_hole(equipId, position, __ctx, true, null);
    }

    public Ice.AsyncResult begin_hole(String equipId, int position, Ice.Callback __cb)
    {
        return begin_hole(equipId, position, null, false, __cb);
    }

    public Ice.AsyncResult begin_hole(String equipId, int position, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hole(equipId, position, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hole(String equipId, int position, Callback_Equip_hole __cb)
    {
        return begin_hole(equipId, position, null, false, __cb);
    }

    public Ice.AsyncResult begin_hole(String equipId, int position, java.util.Map<String, String> __ctx, Callback_Equip_hole __cb)
    {
        return begin_hole(equipId, position, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hole(String equipId, int position, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hole_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hole_name, __cb);
        try
        {
            __result.__prepare(__hole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(equipId);
            __os.writeInt(position);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_hole(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __hole_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean hole_async(AMI_Equip_hole __cb, String equipId, int position)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__hole_name);
            __r = begin_hole(equipId, position, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __hole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean hole_async(AMI_Equip_hole __cb, String equipId, int position, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__hole_name);
            __r = begin_hole(equipId, position, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __hole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __levelup_name = "levelup";

    public ItemView levelup(String id)
        throws NotEnoughMoneyException,
               NoteException
    {
        return levelup(id, null, false);
    }

    public ItemView levelup(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return levelup(id, __ctx, true);
    }

    private ItemView levelup(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "levelup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("levelup");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    return __del.levelup(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_levelup(String id)
    {
        return begin_levelup(id, null, false, null);
    }

    public Ice.AsyncResult begin_levelup(String id, java.util.Map<String, String> __ctx)
    {
        return begin_levelup(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_levelup(String id, Ice.Callback __cb)
    {
        return begin_levelup(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_levelup(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_levelup(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_levelup(String id, Callback_Equip_levelup __cb)
    {
        return begin_levelup(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_levelup(String id, java.util.Map<String, String> __ctx, Callback_Equip_levelup __cb)
    {
        return begin_levelup(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_levelup(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__levelup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __levelup_name, __cb);
        try
        {
            __result.__prepare(__levelup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView end_levelup(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __levelup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView __ret;
            __ret = new ItemView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean levelup_async(AMI_Equip_levelup __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelup_name);
            __r = begin_levelup(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean levelup_async(AMI_Equip_levelup __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelup_name);
            __r = begin_levelup(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __levelupAll_name = "levelupAll";

    public EquipLevelEntity[] levelupAll(String id)
        throws NotEnoughMoneyException,
               NoteException
    {
        return levelupAll(id, null, false);
    }

    public EquipLevelEntity[] levelupAll(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return levelupAll(id, __ctx, true);
    }

    private EquipLevelEntity[] levelupAll(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "levelupAll", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("levelupAll");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    return __del.levelupAll(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_levelupAll(String id)
    {
        return begin_levelupAll(id, null, false, null);
    }

    public Ice.AsyncResult begin_levelupAll(String id, java.util.Map<String, String> __ctx)
    {
        return begin_levelupAll(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_levelupAll(String id, Ice.Callback __cb)
    {
        return begin_levelupAll(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_levelupAll(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_levelupAll(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_levelupAll(String id, Callback_Equip_levelupAll __cb)
    {
        return begin_levelupAll(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_levelupAll(String id, java.util.Map<String, String> __ctx, Callback_Equip_levelupAll __cb)
    {
        return begin_levelupAll(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_levelupAll(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__levelupAll_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __levelupAll_name, __cb);
        try
        {
            __result.__prepare(__levelupAll_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public EquipLevelEntity[] end_levelupAll(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __levelupAll_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            EquipLevelEntity[] __ret;
            __ret = EquipLevelListHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean levelupAll_async(AMI_Equip_levelupAll __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelupAll_name);
            __r = begin_levelupAll(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelupAll_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean levelupAll_async(AMI_Equip_levelupAll __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelupAll_name);
            __r = begin_levelupAll(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelupAll_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __levelupAuto_name = "levelupAuto";

    public ItemView levelupAuto(String id)
        throws NotEnoughMoneyException,
               NoteException
    {
        return levelupAuto(id, null, false);
    }

    public ItemView levelupAuto(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return levelupAuto(id, __ctx, true);
    }

    private ItemView levelupAuto(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "levelupAuto", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("levelupAuto");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    return __del.levelupAuto(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_levelupAuto(String id)
    {
        return begin_levelupAuto(id, null, false, null);
    }

    public Ice.AsyncResult begin_levelupAuto(String id, java.util.Map<String, String> __ctx)
    {
        return begin_levelupAuto(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_levelupAuto(String id, Ice.Callback __cb)
    {
        return begin_levelupAuto(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_levelupAuto(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_levelupAuto(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_levelupAuto(String id, Callback_Equip_levelupAuto __cb)
    {
        return begin_levelupAuto(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_levelupAuto(String id, java.util.Map<String, String> __ctx, Callback_Equip_levelupAuto __cb)
    {
        return begin_levelupAuto(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_levelupAuto(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__levelupAuto_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __levelupAuto_name, __cb);
        try
        {
            __result.__prepare(__levelupAuto_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView end_levelupAuto(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __levelupAuto_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView __ret;
            __ret = new ItemView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean levelupAuto_async(AMI_Equip_levelupAuto __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelupAuto_name);
            __r = begin_levelupAuto(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelupAuto_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean levelupAuto_async(AMI_Equip_levelupAuto __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelupAuto_name);
            __r = begin_levelupAuto(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelupAuto_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __rebuild_name = "rebuild";

    public ItemView rebuild(String id)
        throws NoteException
    {
        return rebuild(id, null, false);
    }

    public ItemView rebuild(String id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return rebuild(id, __ctx, true);
    }

    private ItemView rebuild(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "rebuild", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("rebuild");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    return __del.rebuild(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_rebuild(String id)
    {
        return begin_rebuild(id, null, false, null);
    }

    public Ice.AsyncResult begin_rebuild(String id, java.util.Map<String, String> __ctx)
    {
        return begin_rebuild(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_rebuild(String id, Ice.Callback __cb)
    {
        return begin_rebuild(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_rebuild(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rebuild(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_rebuild(String id, Callback_Equip_rebuild __cb)
    {
        return begin_rebuild(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_rebuild(String id, java.util.Map<String, String> __ctx, Callback_Equip_rebuild __cb)
    {
        return begin_rebuild(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rebuild(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rebuild_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rebuild_name, __cb);
        try
        {
            __result.__prepare(__rebuild_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView end_rebuild(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __rebuild_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView __ret;
            __ret = new ItemView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean rebuild_async(AMI_Equip_rebuild __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rebuild_name);
            __r = begin_rebuild(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rebuild_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean rebuild_async(AMI_Equip_rebuild __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rebuild_name);
            __r = begin_rebuild(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rebuild_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __removeGem_name = "removeGem";

    public void removeGem(String equipId, int position)
        throws NoteException
    {
        removeGem(equipId, position, null, false);
    }

    public void removeGem(String equipId, int position, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        removeGem(equipId, position, __ctx, true);
    }

    private void removeGem(String equipId, int position, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeGem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("removeGem");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    __del.removeGem(equipId, position, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeGem(String equipId, int position)
    {
        return begin_removeGem(equipId, position, null, false, null);
    }

    public Ice.AsyncResult begin_removeGem(String equipId, int position, java.util.Map<String, String> __ctx)
    {
        return begin_removeGem(equipId, position, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeGem(String equipId, int position, Ice.Callback __cb)
    {
        return begin_removeGem(equipId, position, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeGem(String equipId, int position, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeGem(equipId, position, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeGem(String equipId, int position, Callback_Equip_removeGem __cb)
    {
        return begin_removeGem(equipId, position, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeGem(String equipId, int position, java.util.Map<String, String> __ctx, Callback_Equip_removeGem __cb)
    {
        return begin_removeGem(equipId, position, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeGem(String equipId, int position, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeGem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeGem_name, __cb);
        try
        {
            __result.__prepare(__removeGem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(equipId);
            __os.writeInt(position);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeGem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __removeGem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean removeGem_async(AMI_Equip_removeGem __cb, String equipId, int position)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__removeGem_name);
            __r = begin_removeGem(equipId, position, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __removeGem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean removeGem_async(AMI_Equip_removeGem __cb, String equipId, int position, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__removeGem_name);
            __r = begin_removeGem(equipId, position, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __removeGem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setGem_name = "setGem";

    public void setGem(String equipId, int position, String gemId)
        throws NoteException
    {
        setGem(equipId, position, gemId, null, false);
    }

    public void setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setGem(equipId, position, gemId, __ctx, true);
    }

    private void setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setGem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setGem");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    __del.setGem(equipId, position, gemId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId)
    {
        return begin_setGem(equipId, position, gemId, null, false, null);
    }

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx)
    {
        return begin_setGem(equipId, position, gemId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, Ice.Callback __cb)
    {
        return begin_setGem(equipId, position, gemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setGem(equipId, position, gemId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, Callback_Equip_setGem __cb)
    {
        return begin_setGem(equipId, position, gemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx, Callback_Equip_setGem __cb)
    {
        return begin_setGem(equipId, position, gemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setGem(String equipId, int position, String gemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setGem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setGem_name, __cb);
        try
        {
            __result.__prepare(__setGem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(equipId);
            __os.writeInt(position);
            __os.writeString(gemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setGem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setGem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setGem_async(AMI_Equip_setGem __cb, String equipId, int position, String gemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setGem_name);
            __r = begin_setGem(equipId, position, gemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setGem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setGem_async(AMI_Equip_setGem __cb, String equipId, int position, String gemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setGem_name);
            __r = begin_setGem(equipId, position, gemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setGem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __smelt_name = "smelt";

    public ItemView[] smelt(String idArrayStr)
        throws NotEnoughMoneyException,
               NoteException
    {
        return smelt(idArrayStr, null, false);
    }

    public ItemView[] smelt(String idArrayStr, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return smelt(idArrayStr, __ctx, true);
    }

    private ItemView[] smelt(String idArrayStr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "smelt", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("smelt");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    return __del.smelt(idArrayStr, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_smelt(String idArrayStr)
    {
        return begin_smelt(idArrayStr, null, false, null);
    }

    public Ice.AsyncResult begin_smelt(String idArrayStr, java.util.Map<String, String> __ctx)
    {
        return begin_smelt(idArrayStr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_smelt(String idArrayStr, Ice.Callback __cb)
    {
        return begin_smelt(idArrayStr, null, false, __cb);
    }

    public Ice.AsyncResult begin_smelt(String idArrayStr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_smelt(idArrayStr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_smelt(String idArrayStr, Callback_Equip_smelt __cb)
    {
        return begin_smelt(idArrayStr, null, false, __cb);
    }

    public Ice.AsyncResult begin_smelt(String idArrayStr, java.util.Map<String, String> __ctx, Callback_Equip_smelt __cb)
    {
        return begin_smelt(idArrayStr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_smelt(String idArrayStr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__smelt_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __smelt_name, __cb);
        try
        {
            __result.__prepare(__smelt_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(idArrayStr);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView[] end_smelt(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __smelt_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView[] __ret;
            __ret = ItemViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean smelt_async(AMI_Equip_smelt __cb, String idArrayStr)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__smelt_name);
            __r = begin_smelt(idArrayStr, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __smelt_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean smelt_async(AMI_Equip_smelt __cb, String idArrayStr, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__smelt_name);
            __r = begin_smelt(idArrayStr, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __smelt_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __starUp_name = "starUp";

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     **/
    public String starUp(String id, String idArray, String items)
        throws NotEnoughMoneyException,
               NoteException
    {
        return starUp(id, idArray, items, null, false);
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __ctx The Context map to send with the invocation.
     **/
    public String starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return starUp(id, idArray, items, __ctx, true);
    }

    private String starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "starUp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("starUp");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    return __del.starUp(id, idArray, items, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items)
    {
        return begin_starUp(id, idArray, items, null, false, null);
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx)
    {
        return begin_starUp(id, idArray, items, __ctx, true, null);
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, Ice.Callback __cb)
    {
        return begin_starUp(id, idArray, items, null, false, __cb);
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_starUp(id, idArray, items, __ctx, true, __cb);
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, Callback_Equip_starUp __cb)
    {
        return begin_starUp(id, idArray, items, null, false, __cb);
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx, Callback_Equip_starUp __cb)
    {
        return begin_starUp(id, idArray, items, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_starUp(String id, String idArray, String items, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__starUp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __starUp_name, __cb);
        try
        {
            __result.__prepare(__starUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeString(idArray);
            __os.writeString(items);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_starUp(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __starUp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     **/
    public boolean starUp_async(AMI_Equip_starUp __cb, String id, String idArray, String items)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__starUp_name);
            __r = begin_starUp(id, idArray, items, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __starUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 升星,返回 ItemView的lua，idArray格式：id;id  items格式：id,num;id,num
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean starUp_async(AMI_Equip_starUp __cb, String id, String idArray, String items, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__starUp_name);
            __r = begin_starUp(id, idArray, items, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __starUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __upgradeArtifact_name = "upgradeArtifact";

    /**
     * 升级神器
     **/
    public void upgradeArtifact(String dbId)
        throws NoteException
    {
        upgradeArtifact(dbId, null, false);
    }

    /**
     * 升级神器
     * @param __ctx The Context map to send with the invocation.
     **/
    public void upgradeArtifact(String dbId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        upgradeArtifact(dbId, __ctx, true);
    }

    private void upgradeArtifact(String dbId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "upgradeArtifact", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("upgradeArtifact");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    __del.upgradeArtifact(dbId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId)
    {
        return begin_upgradeArtifact(dbId, null, false, null);
    }

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, java.util.Map<String, String> __ctx)
    {
        return begin_upgradeArtifact(dbId, __ctx, true, null);
    }

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, Ice.Callback __cb)
    {
        return begin_upgradeArtifact(dbId, null, false, __cb);
    }

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_upgradeArtifact(dbId, __ctx, true, __cb);
    }

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, Callback_Equip_upgradeArtifact __cb)
    {
        return begin_upgradeArtifact(dbId, null, false, __cb);
    }

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upgradeArtifact(String dbId, java.util.Map<String, String> __ctx, Callback_Equip_upgradeArtifact __cb)
    {
        return begin_upgradeArtifact(dbId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_upgradeArtifact(String dbId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__upgradeArtifact_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __upgradeArtifact_name, __cb);
        try
        {
            __result.__prepare(__upgradeArtifact_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(dbId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_upgradeArtifact(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __upgradeArtifact_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     **/
    public boolean upgradeArtifact_async(AMI_Equip_upgradeArtifact __cb, String dbId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__upgradeArtifact_name);
            __r = begin_upgradeArtifact(dbId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __upgradeArtifact_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 升级神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean upgradeArtifact_async(AMI_Equip_upgradeArtifact __cb, String dbId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__upgradeArtifact_name);
            __r = begin_upgradeArtifact(dbId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __upgradeArtifact_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __useArtifact_name = "useArtifact";

    /**
     * 使用神器
     **/
    public void useArtifact(String dbId, String heroId)
        throws NoteException
    {
        useArtifact(dbId, heroId, null, false);
    }

    /**
     * 使用神器
     * @param __ctx The Context map to send with the invocation.
     **/
    public void useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        useArtifact(dbId, heroId, __ctx, true);
    }

    private void useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "useArtifact", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("useArtifact");
                    __delBase = __getDelegate(false);
                    _EquipDel __del = (_EquipDel)__delBase;
                    __del.useArtifact(dbId, heroId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId)
    {
        return begin_useArtifact(dbId, heroId, null, false, null);
    }

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_useArtifact(dbId, heroId, __ctx, true, null);
    }

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, Ice.Callback __cb)
    {
        return begin_useArtifact(dbId, heroId, null, false, __cb);
    }

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_useArtifact(dbId, heroId, __ctx, true, __cb);
    }

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, Callback_Equip_useArtifact __cb)
    {
        return begin_useArtifact(dbId, heroId, null, false, __cb);
    }

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx, Callback_Equip_useArtifact __cb)
    {
        return begin_useArtifact(dbId, heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_useArtifact(String dbId, String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__useArtifact_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __useArtifact_name, __cb);
        try
        {
            __result.__prepare(__useArtifact_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(dbId);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_useArtifact(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __useArtifact_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     **/
    public boolean useArtifact_async(AMI_Equip_useArtifact __cb, String dbId, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__useArtifact_name);
            __r = begin_useArtifact(dbId, heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __useArtifact_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 使用神器
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean useArtifact_async(AMI_Equip_useArtifact __cb, String dbId, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__useArtifact_name);
            __r = begin_useArtifact(dbId, heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __useArtifact_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static EquipPrx checkedCast(Ice.ObjectPrx __obj)
    {
        EquipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof EquipPrx)
            {
                __d = (EquipPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    EquipPrxHelper __h = new EquipPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static EquipPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        EquipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof EquipPrx)
            {
                __d = (EquipPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    EquipPrxHelper __h = new EquipPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static EquipPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        EquipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    EquipPrxHelper __h = new EquipPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static EquipPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        EquipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    EquipPrxHelper __h = new EquipPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static EquipPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        EquipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof EquipPrx)
            {
                __d = (EquipPrx)__obj;
            }
            else
            {
                EquipPrxHelper __h = new EquipPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static EquipPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        EquipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            EquipPrxHelper __h = new EquipPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Equip"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _EquipDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _EquipDelD();
    }

    public static void __write(IceInternal.BasicStream __os, EquipPrx v)
    {
        __os.writeProxy(v);
    }

    public static EquipPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            EquipPrxHelper result = new EquipPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
