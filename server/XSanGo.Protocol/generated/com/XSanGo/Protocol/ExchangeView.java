// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Activity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class ExchangeView implements java.lang.Cloneable, java.io.Serializable
{
    public String itemNo;

    public int remainingCounts;

    public int itemType;

    public String itemId;

    public int num;

    public String itemName;

    public int colorType;

    public int annoFlag;

    public int dealCountsLim;

    public int hideFlag;

    public int vipLevel;

    public int roleLevel;

    public ExchangeItems[] itemConfigs;

    public int limitTimeFlag;

    public long leftTime;

    public ExchangeView()
    {
    }

    public ExchangeView(String itemNo, int remainingCounts, int itemType, String itemId, int num, String itemName, int colorType, int annoFlag, int dealCountsLim, int hideFlag, int vipLevel, int roleLevel, ExchangeItems[] itemConfigs, int limitTimeFlag, long leftTime)
    {
        this.itemNo = itemNo;
        this.remainingCounts = remainingCounts;
        this.itemType = itemType;
        this.itemId = itemId;
        this.num = num;
        this.itemName = itemName;
        this.colorType = colorType;
        this.annoFlag = annoFlag;
        this.dealCountsLim = dealCountsLim;
        this.hideFlag = hideFlag;
        this.vipLevel = vipLevel;
        this.roleLevel = roleLevel;
        this.itemConfigs = itemConfigs;
        this.limitTimeFlag = limitTimeFlag;
        this.leftTime = leftTime;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ExchangeView _r = null;
        if(rhs instanceof ExchangeView)
        {
            _r = (ExchangeView)rhs;
        }

        if(_r != null)
        {
            if(itemNo != _r.itemNo)
            {
                if(itemNo == null || _r.itemNo == null || !itemNo.equals(_r.itemNo))
                {
                    return false;
                }
            }
            if(remainingCounts != _r.remainingCounts)
            {
                return false;
            }
            if(itemType != _r.itemType)
            {
                return false;
            }
            if(itemId != _r.itemId)
            {
                if(itemId == null || _r.itemId == null || !itemId.equals(_r.itemId))
                {
                    return false;
                }
            }
            if(num != _r.num)
            {
                return false;
            }
            if(itemName != _r.itemName)
            {
                if(itemName == null || _r.itemName == null || !itemName.equals(_r.itemName))
                {
                    return false;
                }
            }
            if(colorType != _r.colorType)
            {
                return false;
            }
            if(annoFlag != _r.annoFlag)
            {
                return false;
            }
            if(dealCountsLim != _r.dealCountsLim)
            {
                return false;
            }
            if(hideFlag != _r.hideFlag)
            {
                return false;
            }
            if(vipLevel != _r.vipLevel)
            {
                return false;
            }
            if(roleLevel != _r.roleLevel)
            {
                return false;
            }
            if(!java.util.Arrays.equals(itemConfigs, _r.itemConfigs))
            {
                return false;
            }
            if(limitTimeFlag != _r.limitTimeFlag)
            {
                return false;
            }
            if(leftTime != _r.leftTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::ExchangeView");
        __h = IceInternal.HashUtil.hashAdd(__h, itemNo);
        __h = IceInternal.HashUtil.hashAdd(__h, remainingCounts);
        __h = IceInternal.HashUtil.hashAdd(__h, itemType);
        __h = IceInternal.HashUtil.hashAdd(__h, itemId);
        __h = IceInternal.HashUtil.hashAdd(__h, num);
        __h = IceInternal.HashUtil.hashAdd(__h, itemName);
        __h = IceInternal.HashUtil.hashAdd(__h, colorType);
        __h = IceInternal.HashUtil.hashAdd(__h, annoFlag);
        __h = IceInternal.HashUtil.hashAdd(__h, dealCountsLim);
        __h = IceInternal.HashUtil.hashAdd(__h, hideFlag);
        __h = IceInternal.HashUtil.hashAdd(__h, vipLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, roleLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, itemConfigs);
        __h = IceInternal.HashUtil.hashAdd(__h, limitTimeFlag);
        __h = IceInternal.HashUtil.hashAdd(__h, leftTime);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(itemNo);
        __os.writeInt(remainingCounts);
        __os.writeInt(itemType);
        __os.writeString(itemId);
        __os.writeInt(num);
        __os.writeString(itemName);
        __os.writeInt(colorType);
        __os.writeInt(annoFlag);
        __os.writeInt(dealCountsLim);
        __os.writeInt(hideFlag);
        __os.writeInt(vipLevel);
        __os.writeInt(roleLevel);
        ExchangeItemConfigSeqHelper.write(__os, itemConfigs);
        __os.writeInt(limitTimeFlag);
        __os.writeLong(leftTime);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        itemNo = __is.readString();
        remainingCounts = __is.readInt();
        itemType = __is.readInt();
        itemId = __is.readString();
        num = __is.readInt();
        itemName = __is.readString();
        colorType = __is.readInt();
        annoFlag = __is.readInt();
        dealCountsLim = __is.readInt();
        hideFlag = __is.readInt();
        vipLevel = __is.readInt();
        roleLevel = __is.readInt();
        itemConfigs = ExchangeItemConfigSeqHelper.read(__is);
        limitTimeFlag = __is.readInt();
        leftTime = __is.readLong();
    }

    public static final long serialVersionUID = 648442530L;
}
