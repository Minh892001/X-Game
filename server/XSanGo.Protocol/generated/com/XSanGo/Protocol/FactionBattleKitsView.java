// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 公会战锦囊
 **/
public class FactionBattleKitsView implements java.lang.Cloneable, java.io.Serializable
{
    public int kitsId;

    public int kitsNum;

    public int cdTime;

    public FactionBattleKitsView()
    {
    }

    public FactionBattleKitsView(int kitsId, int kitsNum, int cdTime)
    {
        this.kitsId = kitsId;
        this.kitsNum = kitsNum;
        this.cdTime = cdTime;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FactionBattleKitsView _r = null;
        if(rhs instanceof FactionBattleKitsView)
        {
            _r = (FactionBattleKitsView)rhs;
        }

        if(_r != null)
        {
            if(kitsId != _r.kitsId)
            {
                return false;
            }
            if(kitsNum != _r.kitsNum)
            {
                return false;
            }
            if(cdTime != _r.cdTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FactionBattleKitsView");
        __h = IceInternal.HashUtil.hashAdd(__h, kitsId);
        __h = IceInternal.HashUtil.hashAdd(__h, kitsNum);
        __h = IceInternal.HashUtil.hashAdd(__h, cdTime);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(kitsId);
        __os.writeInt(kitsNum);
        __os.writeInt(cdTime);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        kitsId = __is.readInt();
        kitsNum = __is.readInt();
        cdTime = __is.readInt();
    }

    public static final long serialVersionUID = -1385896028L;
}
