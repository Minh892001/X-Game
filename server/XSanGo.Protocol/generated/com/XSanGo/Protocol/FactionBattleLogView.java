// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 公会战日志
 **/
public class FactionBattleLogView implements java.lang.Cloneable, java.io.Serializable
{
    public String time;

    public String content;

    public FactionBattleLogView()
    {
    }

    public FactionBattleLogView(String time, String content)
    {
        this.time = time;
        this.content = content;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FactionBattleLogView _r = null;
        if(rhs instanceof FactionBattleLogView)
        {
            _r = (FactionBattleLogView)rhs;
        }

        if(_r != null)
        {
            if(time != _r.time)
            {
                if(time == null || _r.time == null || !time.equals(_r.time))
                {
                    return false;
                }
            }
            if(content != _r.content)
            {
                if(content == null || _r.content == null || !content.equals(_r.content))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FactionBattleLogView");
        __h = IceInternal.HashUtil.hashAdd(__h, time);
        __h = IceInternal.HashUtil.hashAdd(__h, content);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(time);
        __os.writeString(content);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        time = __is.readString();
        content = __is.readString();
    }

    public static final long serialVersionUID = 1581483063L;
}
