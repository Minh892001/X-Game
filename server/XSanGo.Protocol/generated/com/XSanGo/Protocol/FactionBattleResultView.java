// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 战斗结果数据
 **/
public class FactionBattleResultView implements java.lang.Cloneable, java.io.Serializable
{
    public boolean isWin;

    public String content;

    public int killNum;

    public int cd;

    public int badge;

    public String debuffDesc;

    public int strongholdId;

    public int recoveryTime;

    public FactionBattleResultView()
    {
    }

    public FactionBattleResultView(boolean isWin, String content, int killNum, int cd, int badge, String debuffDesc, int strongholdId, int recoveryTime)
    {
        this.isWin = isWin;
        this.content = content;
        this.killNum = killNum;
        this.cd = cd;
        this.badge = badge;
        this.debuffDesc = debuffDesc;
        this.strongholdId = strongholdId;
        this.recoveryTime = recoveryTime;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FactionBattleResultView _r = null;
        if(rhs instanceof FactionBattleResultView)
        {
            _r = (FactionBattleResultView)rhs;
        }

        if(_r != null)
        {
            if(isWin != _r.isWin)
            {
                return false;
            }
            if(content != _r.content)
            {
                if(content == null || _r.content == null || !content.equals(_r.content))
                {
                    return false;
                }
            }
            if(killNum != _r.killNum)
            {
                return false;
            }
            if(cd != _r.cd)
            {
                return false;
            }
            if(badge != _r.badge)
            {
                return false;
            }
            if(debuffDesc != _r.debuffDesc)
            {
                if(debuffDesc == null || _r.debuffDesc == null || !debuffDesc.equals(_r.debuffDesc))
                {
                    return false;
                }
            }
            if(strongholdId != _r.strongholdId)
            {
                return false;
            }
            if(recoveryTime != _r.recoveryTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FactionBattleResultView");
        __h = IceInternal.HashUtil.hashAdd(__h, isWin);
        __h = IceInternal.HashUtil.hashAdd(__h, content);
        __h = IceInternal.HashUtil.hashAdd(__h, killNum);
        __h = IceInternal.HashUtil.hashAdd(__h, cd);
        __h = IceInternal.HashUtil.hashAdd(__h, badge);
        __h = IceInternal.HashUtil.hashAdd(__h, debuffDesc);
        __h = IceInternal.HashUtil.hashAdd(__h, strongholdId);
        __h = IceInternal.HashUtil.hashAdd(__h, recoveryTime);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeBool(isWin);
        __os.writeString(content);
        __os.writeInt(killNum);
        __os.writeInt(cd);
        __os.writeInt(badge);
        __os.writeString(debuffDesc);
        __os.writeInt(strongholdId);
        __os.writeInt(recoveryTime);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        isWin = __is.readBool();
        content = __is.readString();
        killNum = __is.readInt();
        cd = __is.readInt();
        badge = __is.readInt();
        debuffDesc = __is.readString();
        strongholdId = __is.readInt();
        recoveryTime = __is.readInt();
    }

    public static final long serialVersionUID = 1557589683L;
}
