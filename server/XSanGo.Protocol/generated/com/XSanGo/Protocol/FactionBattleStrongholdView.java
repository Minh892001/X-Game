// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 公会战据点界面数据
 **/
public class FactionBattleStrongholdView implements java.lang.Cloneable, java.io.Serializable
{
    public boolean isBaseCamp;

    public int debuffLvl;

    public int factionRoleNum;

    public int attackTime;

    public boolean isHiddenAttack;

    public int occupyIncomePer;

    public int curRoleNum;

    public int maxRoleNum;

    public String stateName;

    public int incomePer;

    public int attackRoleNum;

    public int defendRoleNum;

    public FactionBattleStrongholdView()
    {
    }

    public FactionBattleStrongholdView(boolean isBaseCamp, int debuffLvl, int factionRoleNum, int attackTime, boolean isHiddenAttack, int occupyIncomePer, int curRoleNum, int maxRoleNum, String stateName, int incomePer, int attackRoleNum, int defendRoleNum)
    {
        this.isBaseCamp = isBaseCamp;
        this.debuffLvl = debuffLvl;
        this.factionRoleNum = factionRoleNum;
        this.attackTime = attackTime;
        this.isHiddenAttack = isHiddenAttack;
        this.occupyIncomePer = occupyIncomePer;
        this.curRoleNum = curRoleNum;
        this.maxRoleNum = maxRoleNum;
        this.stateName = stateName;
        this.incomePer = incomePer;
        this.attackRoleNum = attackRoleNum;
        this.defendRoleNum = defendRoleNum;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FactionBattleStrongholdView _r = null;
        if(rhs instanceof FactionBattleStrongholdView)
        {
            _r = (FactionBattleStrongholdView)rhs;
        }

        if(_r != null)
        {
            if(isBaseCamp != _r.isBaseCamp)
            {
                return false;
            }
            if(debuffLvl != _r.debuffLvl)
            {
                return false;
            }
            if(factionRoleNum != _r.factionRoleNum)
            {
                return false;
            }
            if(attackTime != _r.attackTime)
            {
                return false;
            }
            if(isHiddenAttack != _r.isHiddenAttack)
            {
                return false;
            }
            if(occupyIncomePer != _r.occupyIncomePer)
            {
                return false;
            }
            if(curRoleNum != _r.curRoleNum)
            {
                return false;
            }
            if(maxRoleNum != _r.maxRoleNum)
            {
                return false;
            }
            if(stateName != _r.stateName)
            {
                if(stateName == null || _r.stateName == null || !stateName.equals(_r.stateName))
                {
                    return false;
                }
            }
            if(incomePer != _r.incomePer)
            {
                return false;
            }
            if(attackRoleNum != _r.attackRoleNum)
            {
                return false;
            }
            if(defendRoleNum != _r.defendRoleNum)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FactionBattleStrongholdView");
        __h = IceInternal.HashUtil.hashAdd(__h, isBaseCamp);
        __h = IceInternal.HashUtil.hashAdd(__h, debuffLvl);
        __h = IceInternal.HashUtil.hashAdd(__h, factionRoleNum);
        __h = IceInternal.HashUtil.hashAdd(__h, attackTime);
        __h = IceInternal.HashUtil.hashAdd(__h, isHiddenAttack);
        __h = IceInternal.HashUtil.hashAdd(__h, occupyIncomePer);
        __h = IceInternal.HashUtil.hashAdd(__h, curRoleNum);
        __h = IceInternal.HashUtil.hashAdd(__h, maxRoleNum);
        __h = IceInternal.HashUtil.hashAdd(__h, stateName);
        __h = IceInternal.HashUtil.hashAdd(__h, incomePer);
        __h = IceInternal.HashUtil.hashAdd(__h, attackRoleNum);
        __h = IceInternal.HashUtil.hashAdd(__h, defendRoleNum);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeBool(isBaseCamp);
        __os.writeInt(debuffLvl);
        __os.writeInt(factionRoleNum);
        __os.writeInt(attackTime);
        __os.writeBool(isHiddenAttack);
        __os.writeInt(occupyIncomePer);
        __os.writeInt(curRoleNum);
        __os.writeInt(maxRoleNum);
        __os.writeString(stateName);
        __os.writeInt(incomePer);
        __os.writeInt(attackRoleNum);
        __os.writeInt(defendRoleNum);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        isBaseCamp = __is.readBool();
        debuffLvl = __is.readInt();
        factionRoleNum = __is.readInt();
        attackTime = __is.readInt();
        isHiddenAttack = __is.readBool();
        occupyIncomePer = __is.readInt();
        curRoleNum = __is.readInt();
        maxRoleNum = __is.readInt();
        stateName = __is.readString();
        incomePer = __is.readInt();
        attackRoleNum = __is.readInt();
        defendRoleNum = __is.readInt();
    }

    public static final long serialVersionUID = -1209007121L;
}
