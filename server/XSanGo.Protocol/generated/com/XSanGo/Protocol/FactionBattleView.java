// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 公会战场
 **/
public class FactionBattleView implements java.lang.Cloneable, java.io.Serializable
{
    public int surplusTime;

    public int marchingCoolingTime;

    public int diggingTreasureTime;

    public int marchingNum;

    public int strongholdId;

    public int badge;

    public int forage;

    public boolean isOpenMarching;

    public FactionBattleKitsView[] kitses;

    public StrongHoldState[] states;

    public FactionBattleStrongholdView views;

    public FactionBattleEventView eView;

    public FactionBattleView()
    {
    }

    public FactionBattleView(int surplusTime, int marchingCoolingTime, int diggingTreasureTime, int marchingNum, int strongholdId, int badge, int forage, boolean isOpenMarching, FactionBattleKitsView[] kitses, StrongHoldState[] states, FactionBattleStrongholdView views, FactionBattleEventView eView)
    {
        this.surplusTime = surplusTime;
        this.marchingCoolingTime = marchingCoolingTime;
        this.diggingTreasureTime = diggingTreasureTime;
        this.marchingNum = marchingNum;
        this.strongholdId = strongholdId;
        this.badge = badge;
        this.forage = forage;
        this.isOpenMarching = isOpenMarching;
        this.kitses = kitses;
        this.states = states;
        this.views = views;
        this.eView = eView;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FactionBattleView _r = null;
        if(rhs instanceof FactionBattleView)
        {
            _r = (FactionBattleView)rhs;
        }

        if(_r != null)
        {
            if(surplusTime != _r.surplusTime)
            {
                return false;
            }
            if(marchingCoolingTime != _r.marchingCoolingTime)
            {
                return false;
            }
            if(diggingTreasureTime != _r.diggingTreasureTime)
            {
                return false;
            }
            if(marchingNum != _r.marchingNum)
            {
                return false;
            }
            if(strongholdId != _r.strongholdId)
            {
                return false;
            }
            if(badge != _r.badge)
            {
                return false;
            }
            if(forage != _r.forage)
            {
                return false;
            }
            if(isOpenMarching != _r.isOpenMarching)
            {
                return false;
            }
            if(!java.util.Arrays.equals(kitses, _r.kitses))
            {
                return false;
            }
            if(!java.util.Arrays.equals(states, _r.states))
            {
                return false;
            }
            if(views != _r.views)
            {
                if(views == null || _r.views == null || !views.equals(_r.views))
                {
                    return false;
                }
            }
            if(eView != _r.eView)
            {
                if(eView == null || _r.eView == null || !eView.equals(_r.eView))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FactionBattleView");
        __h = IceInternal.HashUtil.hashAdd(__h, surplusTime);
        __h = IceInternal.HashUtil.hashAdd(__h, marchingCoolingTime);
        __h = IceInternal.HashUtil.hashAdd(__h, diggingTreasureTime);
        __h = IceInternal.HashUtil.hashAdd(__h, marchingNum);
        __h = IceInternal.HashUtil.hashAdd(__h, strongholdId);
        __h = IceInternal.HashUtil.hashAdd(__h, badge);
        __h = IceInternal.HashUtil.hashAdd(__h, forage);
        __h = IceInternal.HashUtil.hashAdd(__h, isOpenMarching);
        __h = IceInternal.HashUtil.hashAdd(__h, kitses);
        __h = IceInternal.HashUtil.hashAdd(__h, states);
        __h = IceInternal.HashUtil.hashAdd(__h, views);
        __h = IceInternal.HashUtil.hashAdd(__h, eView);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(surplusTime);
        __os.writeInt(marchingCoolingTime);
        __os.writeInt(diggingTreasureTime);
        __os.writeInt(marchingNum);
        __os.writeInt(strongholdId);
        __os.writeInt(badge);
        __os.writeInt(forage);
        __os.writeBool(isOpenMarching);
        FactionBattleKitsViewSeqHelper.write(__os, kitses);
        StrongHoldStateSeqHelper.write(__os, states);
        views.__write(__os);
        eView.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        surplusTime = __is.readInt();
        marchingCoolingTime = __is.readInt();
        diggingTreasureTime = __is.readInt();
        marchingNum = __is.readInt();
        strongholdId = __is.readInt();
        badge = __is.readInt();
        forage = __is.readInt();
        isOpenMarching = __is.readBool();
        kitses = FactionBattleKitsViewSeqHelper.read(__is);
        states = StrongHoldStateSeqHelper.read(__is);
        views = new FactionBattleStrongholdView();
        views.__read(__is);
        eView = new FactionBattleEventView();
        eView.__read(__is);
    }

    public static final long serialVersionUID = 19669893L;
}
