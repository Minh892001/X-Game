// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface FactionCallBackPrx extends Ice.ObjectPrx
{
    /**
     * 据点状态通知
     **/
    public void strongholdStateNotify(String stateMsg);

    /**
     * 据点状态通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx);

    /**
     * 据点状态通知
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg);

    /**
     * 据点状态通知
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx);

    /**
     * 据点状态通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, Ice.Callback __cb);

    /**
     * 据点状态通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 据点状态通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, Callback_FactionCallBack_strongholdStateNotify __cb);

    /**
     * 据点状态通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx, Callback_FactionCallBack_strongholdStateNotify __cb);

    /**
     * 据点状态通知
     * @param __result The asynchronous result object.
     **/
    public void end_strongholdStateNotify(Ice.AsyncResult __result);

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     **/
    public boolean strongholdStateNotify_async(AMI_FactionCallBack_strongholdStateNotify __cb, String stateMsg);

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean strongholdStateNotify_async(AMI_FactionCallBack_strongholdStateNotify __cb, String stateMsg, java.util.Map<String, String> __ctx);

    /**
     * 公会战排行结果通知
     **/
    public void factionBattleRankResultNotify(String result);

    /**
     * 公会战排行结果通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx);

    /**
     * 公会战排行结果通知
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result);

    /**
     * 公会战排行结果通知
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx);

    /**
     * 公会战排行结果通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, Ice.Callback __cb);

    /**
     * 公会战排行结果通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 公会战排行结果通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, Callback_FactionCallBack_factionBattleRankResultNotify __cb);

    /**
     * 公会战排行结果通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleRankResultNotify __cb);

    /**
     * 公会战排行结果通知
     * @param __result The asynchronous result object.
     **/
    public void end_factionBattleRankResultNotify(Ice.AsyncResult __result);

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleRankResultNotify_async(AMI_FactionCallBack_factionBattleRankResultNotify __cb, String result);

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleRankResultNotify_async(AMI_FactionCallBack_factionBattleRankResultNotify __cb, String result, java.util.Map<String, String> __ctx);

    /**
     * 据点角色列表动态刷新
     **/
    public void strongholdRoleListChangeNotify(String result);

    /**
     * 据点角色列表动态刷新
     * @param __ctx The Context map to send with the invocation.
     **/
    public void strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx);

    /**
     * 据点角色列表动态刷新
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result);

    /**
     * 据点角色列表动态刷新
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx);

    /**
     * 据点角色列表动态刷新
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, Ice.Callback __cb);

    /**
     * 据点角色列表动态刷新
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 据点角色列表动态刷新
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, Callback_FactionCallBack_strongholdRoleListChangeNotify __cb);

    /**
     * 据点角色列表动态刷新
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx, Callback_FactionCallBack_strongholdRoleListChangeNotify __cb);

    /**
     * 据点角色列表动态刷新
     * @param __result The asynchronous result object.
     **/
    public void end_strongholdRoleListChangeNotify(Ice.AsyncResult __result);

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     **/
    public boolean strongholdRoleListChangeNotify_async(AMI_FactionCallBack_strongholdRoleListChangeNotify __cb, String result);

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean strongholdRoleListChangeNotify_async(AMI_FactionCallBack_strongholdRoleListChangeNotify __cb, String result, java.util.Map<String, String> __ctx);

    /**
     * 行军时间通知
     **/
    public void strongholdMarchingTimeNotify(int time);

    /**
     * 行军时间通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx);

    /**
     * 行军时间通知
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time);

    /**
     * 行军时间通知
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx);

    /**
     * 行军时间通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, Ice.Callback __cb);

    /**
     * 行军时间通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 行军时间通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, Callback_FactionCallBack_strongholdMarchingTimeNotify __cb);

    /**
     * 行军时间通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx, Callback_FactionCallBack_strongholdMarchingTimeNotify __cb);

    /**
     * 行军时间通知
     * @param __result The asynchronous result object.
     **/
    public void end_strongholdMarchingTimeNotify(Ice.AsyncResult __result);

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     **/
    public boolean strongholdMarchingTimeNotify_async(AMI_FactionCallBack_strongholdMarchingTimeNotify __cb, int time);

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean strongholdMarchingTimeNotify_async(AMI_FactionCallBack_strongholdMarchingTimeNotify __cb, int time, java.util.Map<String, String> __ctx);

    /**
     * 挖宝时间通知
     **/
    public void diggingTreasureTimeNotify(int time);

    /**
     * 挖宝时间通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx);

    /**
     * 挖宝时间通知
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time);

    /**
     * 挖宝时间通知
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx);

    /**
     * 挖宝时间通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, Ice.Callback __cb);

    /**
     * 挖宝时间通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 挖宝时间通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, Callback_FactionCallBack_diggingTreasureTimeNotify __cb);

    /**
     * 挖宝时间通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx, Callback_FactionCallBack_diggingTreasureTimeNotify __cb);

    /**
     * 挖宝时间通知
     * @param __result The asynchronous result object.
     **/
    public void end_diggingTreasureTimeNotify(Ice.AsyncResult __result);

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     **/
    public boolean diggingTreasureTimeNotify_async(AMI_FactionCallBack_diggingTreasureTimeNotify __cb, int time);

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean diggingTreasureTimeNotify_async(AMI_FactionCallBack_diggingTreasureTimeNotify __cb, int time, java.util.Map<String, String> __ctx);

    /**
     * 锦囊获取消息通知
     **/
    public void gainKitsMessageNotify(String content, String icon);

    /**
     * 锦囊获取消息通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx);

    /**
     * 锦囊获取消息通知
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon);

    /**
     * 锦囊获取消息通知
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx);

    /**
     * 锦囊获取消息通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, Ice.Callback __cb);

    /**
     * 锦囊获取消息通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 锦囊获取消息通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, Callback_FactionCallBack_gainKitsMessageNotify __cb);

    /**
     * 锦囊获取消息通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx, Callback_FactionCallBack_gainKitsMessageNotify __cb);

    /**
     * 锦囊获取消息通知
     * @param __result The asynchronous result object.
     **/
    public void end_gainKitsMessageNotify(Ice.AsyncResult __result);

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     **/
    public boolean gainKitsMessageNotify_async(AMI_FactionCallBack_gainKitsMessageNotify __cb, String content, String icon);

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean gainKitsMessageNotify_async(AMI_FactionCallBack_gainKitsMessageNotify __cb, String content, String icon, java.util.Map<String, String> __ctx);

    /**
     * 锦囊变更通知包
     **/
    public void kitsChangeNotify(String views);

    /**
     * 锦囊变更通知包
     * @param __ctx The Context map to send with the invocation.
     **/
    public void kitsChangeNotify(String views, java.util.Map<String, String> __ctx);

    /**
     * 锦囊变更通知包
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views);

    /**
     * 锦囊变更通知包
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, java.util.Map<String, String> __ctx);

    /**
     * 锦囊变更通知包
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, Ice.Callback __cb);

    /**
     * 锦囊变更通知包
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 锦囊变更通知包
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, Callback_FactionCallBack_kitsChangeNotify __cb);

    /**
     * 锦囊变更通知包
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, java.util.Map<String, String> __ctx, Callback_FactionCallBack_kitsChangeNotify __cb);

    /**
     * 锦囊变更通知包
     * @param __result The asynchronous result object.
     **/
    public void end_kitsChangeNotify(Ice.AsyncResult __result);

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     **/
    public boolean kitsChangeNotify_async(AMI_FactionCallBack_kitsChangeNotify __cb, String views);

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean kitsChangeNotify_async(AMI_FactionCallBack_kitsChangeNotify __cb, String views, java.util.Map<String, String> __ctx);

    /**
     * 公会战消息通知
     **/
    public void factionBattleMessageNotify(String message);

    /**
     * 公会战消息通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx);

    /**
     * 公会战消息通知
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message);

    /**
     * 公会战消息通知
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx);

    /**
     * 公会战消息通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, Ice.Callback __cb);

    /**
     * 公会战消息通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 公会战消息通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, Callback_FactionCallBack_factionBattleMessageNotify __cb);

    /**
     * 公会战消息通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleMessageNotify __cb);

    /**
     * 公会战消息通知
     * @param __result The asynchronous result object.
     **/
    public void end_factionBattleMessageNotify(Ice.AsyncResult __result);

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleMessageNotify_async(AMI_FactionCallBack_factionBattleMessageNotify __cb, String message);

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleMessageNotify_async(AMI_FactionCallBack_factionBattleMessageNotify __cb, String message, java.util.Map<String, String> __ctx);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     **/
    public void factionBattleResourceNotify(int badge, int forage);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, Ice.Callback __cb);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, Callback_FactionCallBack_factionBattleResourceNotify __cb);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleResourceNotify __cb);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __result The asynchronous result object.
     **/
    public void end_factionBattleResourceNotify(Ice.AsyncResult __result);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleResourceNotify_async(AMI_FactionCallBack_factionBattleResourceNotify __cb, int badge, int forage);

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleResourceNotify_async(AMI_FactionCallBack_factionBattleResourceNotify __cb, int badge, int forage, java.util.Map<String, String> __ctx);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     **/
    public void factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, Ice.Callback __cb);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, Callback_FactionCallBack_factionBattleEventNotify __cb);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleEventNotify __cb);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __result The asynchronous result object.
     **/
    public void end_factionBattleEventNotify(Ice.AsyncResult __result);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleEventNotify_async(AMI_FactionCallBack_factionBattleEventNotify __cb, int strongholdId, int addStrongholdId, String eventIcon);

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleEventNotify_async(AMI_FactionCallBack_factionBattleEventNotify __cb, int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx);

    /**
     * 公会战斗结果通知
     **/
    public void factionBattleResultNotify(String result);

    /**
     * 公会战斗结果通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleResultNotify(String result, java.util.Map<String, String> __ctx);

    /**
     * 公会战斗结果通知
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result);

    /**
     * 公会战斗结果通知
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, java.util.Map<String, String> __ctx);

    /**
     * 公会战斗结果通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, Ice.Callback __cb);

    /**
     * 公会战斗结果通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 公会战斗结果通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, Callback_FactionCallBack_factionBattleResultNotify __cb);

    /**
     * 公会战斗结果通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleResultNotify __cb);

    /**
     * 公会战斗结果通知
     * @param __result The asynchronous result object.
     **/
    public void end_factionBattleResultNotify(Ice.AsyncResult __result);

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleResultNotify_async(AMI_FactionCallBack_factionBattleResultNotify __cb, String result);

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleResultNotify_async(AMI_FactionCallBack_factionBattleResultNotify __cb, String result, java.util.Map<String, String> __ctx);

    /**
     * 公会战连杀通知播放特效
     **/
    public void factionBattleEvenkillNotify();

    /**
     * 公会战连杀通知播放特效
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleEvenkillNotify(java.util.Map<String, String> __ctx);

    /**
     * 公会战连杀通知播放特效
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify();

    /**
     * 公会战连杀通知播放特效
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(java.util.Map<String, String> __ctx);

    /**
     * 公会战连杀通知播放特效
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(Ice.Callback __cb);

    /**
     * 公会战连杀通知播放特效
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 公会战连杀通知播放特效
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(Callback_FactionCallBack_factionBattleEvenkillNotify __cb);

    /**
     * 公会战连杀通知播放特效
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleEvenkillNotify __cb);

    /**
     * 公会战连杀通知播放特效
     * @param __result The asynchronous result object.
     **/
    public void end_factionBattleEvenkillNotify(Ice.AsyncResult __result);

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleEvenkillNotify_async(AMI_FactionCallBack_factionBattleEvenkillNotify __cb);

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleEvenkillNotify_async(AMI_FactionCallBack_factionBattleEvenkillNotify __cb, java.util.Map<String, String> __ctx);

    /**
     * 行军冷却解封通知
     **/
    public void openMarchCoolingNotify();

    /**
     * 行军冷却解封通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void openMarchCoolingNotify(java.util.Map<String, String> __ctx);

    /**
     * 行军冷却解封通知
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify();

    /**
     * 行军冷却解封通知
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(java.util.Map<String, String> __ctx);

    /**
     * 行军冷却解封通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(Ice.Callback __cb);

    /**
     * 行军冷却解封通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 行军冷却解封通知
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(Callback_FactionCallBack_openMarchCoolingNotify __cb);

    /**
     * 行军冷却解封通知
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(java.util.Map<String, String> __ctx, Callback_FactionCallBack_openMarchCoolingNotify __cb);

    /**
     * 行军冷却解封通知
     * @param __result The asynchronous result object.
     **/
    public void end_openMarchCoolingNotify(Ice.AsyncResult __result);

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     **/
    public boolean openMarchCoolingNotify_async(AMI_FactionCallBack_openMarchCoolingNotify __cb);

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openMarchCoolingNotify_async(AMI_FactionCallBack_openMarchCoolingNotify __cb, java.util.Map<String, String> __ctx);
}
