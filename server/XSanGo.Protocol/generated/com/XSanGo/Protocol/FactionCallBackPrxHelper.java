// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class FactionCallBackPrxHelper extends Ice.ObjectPrxHelperBase implements FactionCallBackPrx
{
    private static final String __diggingTreasureTimeNotify_name = "diggingTreasureTimeNotify";

    /**
     * 挖宝时间通知
     **/
    public void diggingTreasureTimeNotify(int time)
    {
        diggingTreasureTimeNotify(time, null, false);
    }

    /**
     * 挖宝时间通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx)
    {
        diggingTreasureTimeNotify(time, __ctx, true);
    }

    private void diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "diggingTreasureTimeNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.diggingTreasureTimeNotify(time, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time)
    {
        return begin_diggingTreasureTimeNotify(time, null, false, null);
    }

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx)
    {
        return begin_diggingTreasureTimeNotify(time, __ctx, true, null);
    }

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, Ice.Callback __cb)
    {
        return begin_diggingTreasureTimeNotify(time, null, false, __cb);
    }

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_diggingTreasureTimeNotify(time, __ctx, true, __cb);
    }

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, Callback_FactionCallBack_diggingTreasureTimeNotify __cb)
    {
        return begin_diggingTreasureTimeNotify(time, null, false, __cb);
    }

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx, Callback_FactionCallBack_diggingTreasureTimeNotify __cb)
    {
        return begin_diggingTreasureTimeNotify(time, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_diggingTreasureTimeNotify(int time, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __diggingTreasureTimeNotify_name, __cb);
        try
        {
            __result.__prepare(__diggingTreasureTimeNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(time);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_diggingTreasureTimeNotify(Ice.AsyncResult __result)
    {
        __end(__result, __diggingTreasureTimeNotify_name);
    }

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     **/
    public boolean diggingTreasureTimeNotify_async(AMI_FactionCallBack_diggingTreasureTimeNotify __cb, int time)
    {
        Ice.AsyncResult __r = begin_diggingTreasureTimeNotify(time, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 挖宝时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean diggingTreasureTimeNotify_async(AMI_FactionCallBack_diggingTreasureTimeNotify __cb, int time, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_diggingTreasureTimeNotify(time, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __factionBattleEvenkillNotify_name = "factionBattleEvenkillNotify";

    /**
     * 公会战连杀通知播放特效
     **/
    public void factionBattleEvenkillNotify()
    {
        factionBattleEvenkillNotify(null, false);
    }

    /**
     * 公会战连杀通知播放特效
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleEvenkillNotify(java.util.Map<String, String> __ctx)
    {
        factionBattleEvenkillNotify(__ctx, true);
    }

    private void factionBattleEvenkillNotify(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionBattleEvenkillNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.factionBattleEvenkillNotify(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify()
    {
        return begin_factionBattleEvenkillNotify(null, false, null);
    }

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(java.util.Map<String, String> __ctx)
    {
        return begin_factionBattleEvenkillNotify(__ctx, true, null);
    }

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(Ice.Callback __cb)
    {
        return begin_factionBattleEvenkillNotify(null, false, __cb);
    }

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionBattleEvenkillNotify(__ctx, true, __cb);
    }

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(Callback_FactionCallBack_factionBattleEvenkillNotify __cb)
    {
        return begin_factionBattleEvenkillNotify(null, false, __cb);
    }

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleEvenkillNotify(java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleEvenkillNotify __cb)
    {
        return begin_factionBattleEvenkillNotify(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionBattleEvenkillNotify(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionBattleEvenkillNotify_name, __cb);
        try
        {
            __result.__prepare(__factionBattleEvenkillNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_factionBattleEvenkillNotify(Ice.AsyncResult __result)
    {
        __end(__result, __factionBattleEvenkillNotify_name);
    }

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleEvenkillNotify_async(AMI_FactionCallBack_factionBattleEvenkillNotify __cb)
    {
        Ice.AsyncResult __r = begin_factionBattleEvenkillNotify(null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 公会战连杀通知播放特效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleEvenkillNotify_async(AMI_FactionCallBack_factionBattleEvenkillNotify __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_factionBattleEvenkillNotify(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __factionBattleEventNotify_name = "factionBattleEventNotify";

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     **/
    public void factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon)
    {
        factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, null, false);
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx)
    {
        factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, __ctx, true);
    }

    private void factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionBattleEventNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon)
    {
        return begin_factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, null, false, null);
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx)
    {
        return begin_factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, __ctx, true, null);
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, Ice.Callback __cb)
    {
        return begin_factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, null, false, __cb);
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, __ctx, true, __cb);
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, Callback_FactionCallBack_factionBattleEventNotify __cb)
    {
        return begin_factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, null, false, __cb);
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleEventNotify __cb)
    {
        return begin_factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionBattleEventNotify_name, __cb);
        try
        {
            __result.__prepare(__factionBattleEventNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(strongholdId);
            __os.writeInt(addStrongholdId);
            __os.writeString(eventIcon);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_factionBattleEventNotify(Ice.AsyncResult __result)
    {
        __end(__result, __factionBattleEventNotify_name);
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleEventNotify_async(AMI_FactionCallBack_factionBattleEventNotify __cb, int strongholdId, int addStrongholdId, String eventIcon)
    {
        Ice.AsyncResult __r = begin_factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleEventNotify_async(AMI_FactionCallBack_factionBattleEventNotify __cb, int strongholdId, int addStrongholdId, String eventIcon, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __factionBattleMessageNotify_name = "factionBattleMessageNotify";

    /**
     * 公会战消息通知
     **/
    public void factionBattleMessageNotify(String message)
    {
        factionBattleMessageNotify(message, null, false);
    }

    /**
     * 公会战消息通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx)
    {
        factionBattleMessageNotify(message, __ctx, true);
    }

    private void factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionBattleMessageNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.factionBattleMessageNotify(message, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message)
    {
        return begin_factionBattleMessageNotify(message, null, false, null);
    }

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx)
    {
        return begin_factionBattleMessageNotify(message, __ctx, true, null);
    }

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, Ice.Callback __cb)
    {
        return begin_factionBattleMessageNotify(message, null, false, __cb);
    }

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionBattleMessageNotify(message, __ctx, true, __cb);
    }

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, Callback_FactionCallBack_factionBattleMessageNotify __cb)
    {
        return begin_factionBattleMessageNotify(message, null, false, __cb);
    }

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleMessageNotify __cb)
    {
        return begin_factionBattleMessageNotify(message, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionBattleMessageNotify(String message, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionBattleMessageNotify_name, __cb);
        try
        {
            __result.__prepare(__factionBattleMessageNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(message);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_factionBattleMessageNotify(Ice.AsyncResult __result)
    {
        __end(__result, __factionBattleMessageNotify_name);
    }

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleMessageNotify_async(AMI_FactionCallBack_factionBattleMessageNotify __cb, String message)
    {
        Ice.AsyncResult __r = begin_factionBattleMessageNotify(message, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 公会战消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleMessageNotify_async(AMI_FactionCallBack_factionBattleMessageNotify __cb, String message, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_factionBattleMessageNotify(message, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __factionBattleRankResultNotify_name = "factionBattleRankResultNotify";

    /**
     * 公会战排行结果通知
     **/
    public void factionBattleRankResultNotify(String result)
    {
        factionBattleRankResultNotify(result, null, false);
    }

    /**
     * 公会战排行结果通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx)
    {
        factionBattleRankResultNotify(result, __ctx, true);
    }

    private void factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionBattleRankResultNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.factionBattleRankResultNotify(result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result)
    {
        return begin_factionBattleRankResultNotify(result, null, false, null);
    }

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx)
    {
        return begin_factionBattleRankResultNotify(result, __ctx, true, null);
    }

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, Ice.Callback __cb)
    {
        return begin_factionBattleRankResultNotify(result, null, false, __cb);
    }

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionBattleRankResultNotify(result, __ctx, true, __cb);
    }

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, Callback_FactionCallBack_factionBattleRankResultNotify __cb)
    {
        return begin_factionBattleRankResultNotify(result, null, false, __cb);
    }

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleRankResultNotify __cb)
    {
        return begin_factionBattleRankResultNotify(result, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionBattleRankResultNotify(String result, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionBattleRankResultNotify_name, __cb);
        try
        {
            __result.__prepare(__factionBattleRankResultNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(result);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_factionBattleRankResultNotify(Ice.AsyncResult __result)
    {
        __end(__result, __factionBattleRankResultNotify_name);
    }

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleRankResultNotify_async(AMI_FactionCallBack_factionBattleRankResultNotify __cb, String result)
    {
        Ice.AsyncResult __r = begin_factionBattleRankResultNotify(result, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 公会战排行结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleRankResultNotify_async(AMI_FactionCallBack_factionBattleRankResultNotify __cb, String result, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_factionBattleRankResultNotify(result, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __factionBattleResourceNotify_name = "factionBattleResourceNotify";

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     **/
    public void factionBattleResourceNotify(int badge, int forage)
    {
        factionBattleResourceNotify(badge, forage, null, false);
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx)
    {
        factionBattleResourceNotify(badge, forage, __ctx, true);
    }

    private void factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionBattleResourceNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.factionBattleResourceNotify(badge, forage, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage)
    {
        return begin_factionBattleResourceNotify(badge, forage, null, false, null);
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx)
    {
        return begin_factionBattleResourceNotify(badge, forage, __ctx, true, null);
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, Ice.Callback __cb)
    {
        return begin_factionBattleResourceNotify(badge, forage, null, false, __cb);
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionBattleResourceNotify(badge, forage, __ctx, true, __cb);
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, Callback_FactionCallBack_factionBattleResourceNotify __cb)
    {
        return begin_factionBattleResourceNotify(badge, forage, null, false, __cb);
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleResourceNotify __cb)
    {
        return begin_factionBattleResourceNotify(badge, forage, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionBattleResourceNotify(int badge, int forage, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionBattleResourceNotify_name, __cb);
        try
        {
            __result.__prepare(__factionBattleResourceNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(badge);
            __os.writeInt(forage);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_factionBattleResourceNotify(Ice.AsyncResult __result)
    {
        __end(__result, __factionBattleResourceNotify_name);
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleResourceNotify_async(AMI_FactionCallBack_factionBattleResourceNotify __cb, int badge, int forage)
    {
        Ice.AsyncResult __r = begin_factionBattleResourceNotify(badge, forage, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleResourceNotify_async(AMI_FactionCallBack_factionBattleResourceNotify __cb, int badge, int forage, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_factionBattleResourceNotify(badge, forage, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __factionBattleResultNotify_name = "factionBattleResultNotify";

    /**
     * 公会战斗结果通知
     **/
    public void factionBattleResultNotify(String result)
    {
        factionBattleResultNotify(result, null, false);
    }

    /**
     * 公会战斗结果通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionBattleResultNotify(String result, java.util.Map<String, String> __ctx)
    {
        factionBattleResultNotify(result, __ctx, true);
    }

    private void factionBattleResultNotify(String result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionBattleResultNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.factionBattleResultNotify(result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result)
    {
        return begin_factionBattleResultNotify(result, null, false, null);
    }

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, java.util.Map<String, String> __ctx)
    {
        return begin_factionBattleResultNotify(result, __ctx, true, null);
    }

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, Ice.Callback __cb)
    {
        return begin_factionBattleResultNotify(result, null, false, __cb);
    }

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionBattleResultNotify(result, __ctx, true, __cb);
    }

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, Callback_FactionCallBack_factionBattleResultNotify __cb)
    {
        return begin_factionBattleResultNotify(result, null, false, __cb);
    }

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionBattleResultNotify(String result, java.util.Map<String, String> __ctx, Callback_FactionCallBack_factionBattleResultNotify __cb)
    {
        return begin_factionBattleResultNotify(result, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionBattleResultNotify(String result, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionBattleResultNotify_name, __cb);
        try
        {
            __result.__prepare(__factionBattleResultNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(result);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_factionBattleResultNotify(Ice.AsyncResult __result)
    {
        __end(__result, __factionBattleResultNotify_name);
    }

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     **/
    public boolean factionBattleResultNotify_async(AMI_FactionCallBack_factionBattleResultNotify __cb, String result)
    {
        Ice.AsyncResult __r = begin_factionBattleResultNotify(result, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 公会战斗结果通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionBattleResultNotify_async(AMI_FactionCallBack_factionBattleResultNotify __cb, String result, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_factionBattleResultNotify(result, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __gainKitsMessageNotify_name = "gainKitsMessageNotify";

    /**
     * 锦囊获取消息通知
     **/
    public void gainKitsMessageNotify(String content, String icon)
    {
        gainKitsMessageNotify(content, icon, null, false);
    }

    /**
     * 锦囊获取消息通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx)
    {
        gainKitsMessageNotify(content, icon, __ctx, true);
    }

    private void gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "gainKitsMessageNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.gainKitsMessageNotify(content, icon, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon)
    {
        return begin_gainKitsMessageNotify(content, icon, null, false, null);
    }

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx)
    {
        return begin_gainKitsMessageNotify(content, icon, __ctx, true, null);
    }

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, Ice.Callback __cb)
    {
        return begin_gainKitsMessageNotify(content, icon, null, false, __cb);
    }

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_gainKitsMessageNotify(content, icon, __ctx, true, __cb);
    }

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, Callback_FactionCallBack_gainKitsMessageNotify __cb)
    {
        return begin_gainKitsMessageNotify(content, icon, null, false, __cb);
    }

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx, Callback_FactionCallBack_gainKitsMessageNotify __cb)
    {
        return begin_gainKitsMessageNotify(content, icon, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_gainKitsMessageNotify(String content, String icon, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __gainKitsMessageNotify_name, __cb);
        try
        {
            __result.__prepare(__gainKitsMessageNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(content);
            __os.writeString(icon);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_gainKitsMessageNotify(Ice.AsyncResult __result)
    {
        __end(__result, __gainKitsMessageNotify_name);
    }

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     **/
    public boolean gainKitsMessageNotify_async(AMI_FactionCallBack_gainKitsMessageNotify __cb, String content, String icon)
    {
        Ice.AsyncResult __r = begin_gainKitsMessageNotify(content, icon, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 锦囊获取消息通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean gainKitsMessageNotify_async(AMI_FactionCallBack_gainKitsMessageNotify __cb, String content, String icon, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_gainKitsMessageNotify(content, icon, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __kitsChangeNotify_name = "kitsChangeNotify";

    /**
     * 锦囊变更通知包
     **/
    public void kitsChangeNotify(String views)
    {
        kitsChangeNotify(views, null, false);
    }

    /**
     * 锦囊变更通知包
     * @param __ctx The Context map to send with the invocation.
     **/
    public void kitsChangeNotify(String views, java.util.Map<String, String> __ctx)
    {
        kitsChangeNotify(views, __ctx, true);
    }

    private void kitsChangeNotify(String views, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "kitsChangeNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.kitsChangeNotify(views, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views)
    {
        return begin_kitsChangeNotify(views, null, false, null);
    }

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, java.util.Map<String, String> __ctx)
    {
        return begin_kitsChangeNotify(views, __ctx, true, null);
    }

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, Ice.Callback __cb)
    {
        return begin_kitsChangeNotify(views, null, false, __cb);
    }

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_kitsChangeNotify(views, __ctx, true, __cb);
    }

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, Callback_FactionCallBack_kitsChangeNotify __cb)
    {
        return begin_kitsChangeNotify(views, null, false, __cb);
    }

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_kitsChangeNotify(String views, java.util.Map<String, String> __ctx, Callback_FactionCallBack_kitsChangeNotify __cb)
    {
        return begin_kitsChangeNotify(views, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_kitsChangeNotify(String views, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __kitsChangeNotify_name, __cb);
        try
        {
            __result.__prepare(__kitsChangeNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(views);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_kitsChangeNotify(Ice.AsyncResult __result)
    {
        __end(__result, __kitsChangeNotify_name);
    }

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     **/
    public boolean kitsChangeNotify_async(AMI_FactionCallBack_kitsChangeNotify __cb, String views)
    {
        Ice.AsyncResult __r = begin_kitsChangeNotify(views, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 锦囊变更通知包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean kitsChangeNotify_async(AMI_FactionCallBack_kitsChangeNotify __cb, String views, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_kitsChangeNotify(views, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __openMarchCoolingNotify_name = "openMarchCoolingNotify";

    /**
     * 行军冷却解封通知
     **/
    public void openMarchCoolingNotify()
    {
        openMarchCoolingNotify(null, false);
    }

    /**
     * 行军冷却解封通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void openMarchCoolingNotify(java.util.Map<String, String> __ctx)
    {
        openMarchCoolingNotify(__ctx, true);
    }

    private void openMarchCoolingNotify(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openMarchCoolingNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.openMarchCoolingNotify(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify()
    {
        return begin_openMarchCoolingNotify(null, false, null);
    }

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(java.util.Map<String, String> __ctx)
    {
        return begin_openMarchCoolingNotify(__ctx, true, null);
    }

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(Ice.Callback __cb)
    {
        return begin_openMarchCoolingNotify(null, false, __cb);
    }

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openMarchCoolingNotify(__ctx, true, __cb);
    }

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(Callback_FactionCallBack_openMarchCoolingNotify __cb)
    {
        return begin_openMarchCoolingNotify(null, false, __cb);
    }

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openMarchCoolingNotify(java.util.Map<String, String> __ctx, Callback_FactionCallBack_openMarchCoolingNotify __cb)
    {
        return begin_openMarchCoolingNotify(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openMarchCoolingNotify(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openMarchCoolingNotify_name, __cb);
        try
        {
            __result.__prepare(__openMarchCoolingNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_openMarchCoolingNotify(Ice.AsyncResult __result)
    {
        __end(__result, __openMarchCoolingNotify_name);
    }

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     **/
    public boolean openMarchCoolingNotify_async(AMI_FactionCallBack_openMarchCoolingNotify __cb)
    {
        Ice.AsyncResult __r = begin_openMarchCoolingNotify(null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 行军冷却解封通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openMarchCoolingNotify_async(AMI_FactionCallBack_openMarchCoolingNotify __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_openMarchCoolingNotify(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __strongholdMarchingTimeNotify_name = "strongholdMarchingTimeNotify";

    /**
     * 行军时间通知
     **/
    public void strongholdMarchingTimeNotify(int time)
    {
        strongholdMarchingTimeNotify(time, null, false);
    }

    /**
     * 行军时间通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx)
    {
        strongholdMarchingTimeNotify(time, __ctx, true);
    }

    private void strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "strongholdMarchingTimeNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.strongholdMarchingTimeNotify(time, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time)
    {
        return begin_strongholdMarchingTimeNotify(time, null, false, null);
    }

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx)
    {
        return begin_strongholdMarchingTimeNotify(time, __ctx, true, null);
    }

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, Ice.Callback __cb)
    {
        return begin_strongholdMarchingTimeNotify(time, null, false, __cb);
    }

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_strongholdMarchingTimeNotify(time, __ctx, true, __cb);
    }

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, Callback_FactionCallBack_strongholdMarchingTimeNotify __cb)
    {
        return begin_strongholdMarchingTimeNotify(time, null, false, __cb);
    }

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx, Callback_FactionCallBack_strongholdMarchingTimeNotify __cb)
    {
        return begin_strongholdMarchingTimeNotify(time, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_strongholdMarchingTimeNotify(int time, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __strongholdMarchingTimeNotify_name, __cb);
        try
        {
            __result.__prepare(__strongholdMarchingTimeNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(time);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_strongholdMarchingTimeNotify(Ice.AsyncResult __result)
    {
        __end(__result, __strongholdMarchingTimeNotify_name);
    }

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     **/
    public boolean strongholdMarchingTimeNotify_async(AMI_FactionCallBack_strongholdMarchingTimeNotify __cb, int time)
    {
        Ice.AsyncResult __r = begin_strongholdMarchingTimeNotify(time, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 行军时间通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean strongholdMarchingTimeNotify_async(AMI_FactionCallBack_strongholdMarchingTimeNotify __cb, int time, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_strongholdMarchingTimeNotify(time, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __strongholdRoleListChangeNotify_name = "strongholdRoleListChangeNotify";

    /**
     * 据点角色列表动态刷新
     **/
    public void strongholdRoleListChangeNotify(String result)
    {
        strongholdRoleListChangeNotify(result, null, false);
    }

    /**
     * 据点角色列表动态刷新
     * @param __ctx The Context map to send with the invocation.
     **/
    public void strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx)
    {
        strongholdRoleListChangeNotify(result, __ctx, true);
    }

    private void strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "strongholdRoleListChangeNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.strongholdRoleListChangeNotify(result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result)
    {
        return begin_strongholdRoleListChangeNotify(result, null, false, null);
    }

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx)
    {
        return begin_strongholdRoleListChangeNotify(result, __ctx, true, null);
    }

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, Ice.Callback __cb)
    {
        return begin_strongholdRoleListChangeNotify(result, null, false, __cb);
    }

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_strongholdRoleListChangeNotify(result, __ctx, true, __cb);
    }

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, Callback_FactionCallBack_strongholdRoleListChangeNotify __cb)
    {
        return begin_strongholdRoleListChangeNotify(result, null, false, __cb);
    }

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx, Callback_FactionCallBack_strongholdRoleListChangeNotify __cb)
    {
        return begin_strongholdRoleListChangeNotify(result, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_strongholdRoleListChangeNotify(String result, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __strongholdRoleListChangeNotify_name, __cb);
        try
        {
            __result.__prepare(__strongholdRoleListChangeNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(result);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_strongholdRoleListChangeNotify(Ice.AsyncResult __result)
    {
        __end(__result, __strongholdRoleListChangeNotify_name);
    }

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     **/
    public boolean strongholdRoleListChangeNotify_async(AMI_FactionCallBack_strongholdRoleListChangeNotify __cb, String result)
    {
        Ice.AsyncResult __r = begin_strongholdRoleListChangeNotify(result, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 据点角色列表动态刷新
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean strongholdRoleListChangeNotify_async(AMI_FactionCallBack_strongholdRoleListChangeNotify __cb, String result, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_strongholdRoleListChangeNotify(result, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __strongholdStateNotify_name = "strongholdStateNotify";

    /**
     * 据点状态通知
     **/
    public void strongholdStateNotify(String stateMsg)
    {
        strongholdStateNotify(stateMsg, null, false);
    }

    /**
     * 据点状态通知
     * @param __ctx The Context map to send with the invocation.
     **/
    public void strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx)
    {
        strongholdStateNotify(stateMsg, __ctx, true);
    }

    private void strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "strongholdStateNotify", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionCallBackDel __del = (_FactionCallBackDel)__delBase;
                    __del.strongholdStateNotify(stateMsg, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg)
    {
        return begin_strongholdStateNotify(stateMsg, null, false, null);
    }

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx)
    {
        return begin_strongholdStateNotify(stateMsg, __ctx, true, null);
    }

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, Ice.Callback __cb)
    {
        return begin_strongholdStateNotify(stateMsg, null, false, __cb);
    }

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_strongholdStateNotify(stateMsg, __ctx, true, __cb);
    }

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, Callback_FactionCallBack_strongholdStateNotify __cb)
    {
        return begin_strongholdStateNotify(stateMsg, null, false, __cb);
    }

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx, Callback_FactionCallBack_strongholdStateNotify __cb)
    {
        return begin_strongholdStateNotify(stateMsg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_strongholdStateNotify(String stateMsg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __strongholdStateNotify_name, __cb);
        try
        {
            __result.__prepare(__strongholdStateNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(stateMsg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_strongholdStateNotify(Ice.AsyncResult __result)
    {
        __end(__result, __strongholdStateNotify_name);
    }

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     **/
    public boolean strongholdStateNotify_async(AMI_FactionCallBack_strongholdStateNotify __cb, String stateMsg)
    {
        Ice.AsyncResult __r = begin_strongholdStateNotify(stateMsg, null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * 据点状态通知
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean strongholdStateNotify_async(AMI_FactionCallBack_strongholdStateNotify __cb, String stateMsg, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_strongholdStateNotify(stateMsg, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static FactionCallBackPrx checkedCast(Ice.ObjectPrx __obj)
    {
        FactionCallBackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FactionCallBackPrx)
            {
                __d = (FactionCallBackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    FactionCallBackPrxHelper __h = new FactionCallBackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static FactionCallBackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        FactionCallBackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FactionCallBackPrx)
            {
                __d = (FactionCallBackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    FactionCallBackPrxHelper __h = new FactionCallBackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static FactionCallBackPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        FactionCallBackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    FactionCallBackPrxHelper __h = new FactionCallBackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static FactionCallBackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        FactionCallBackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    FactionCallBackPrxHelper __h = new FactionCallBackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static FactionCallBackPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        FactionCallBackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FactionCallBackPrx)
            {
                __d = (FactionCallBackPrx)__obj;
            }
            else
            {
                FactionCallBackPrxHelper __h = new FactionCallBackPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static FactionCallBackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        FactionCallBackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            FactionCallBackPrxHelper __h = new FactionCallBackPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::FactionCallBack"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _FactionCallBackDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _FactionCallBackDelD();
    }

    public static void __write(IceInternal.BasicStream __os, FactionCallBackPrx v)
    {
        __os.writeProxy(v);
    }

    public static FactionCallBackPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            FactionCallBackPrxHelper result = new FactionCallBackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
