// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class FactionCopyInfoView implements java.lang.Cloneable, java.io.Serializable
{
    public int stageNum;

    public int progress;

    public IntIntPair challengeNum;

    public String roleName;

    public String icon;

    public int vipLevel;

    public int limitTime;

    public AdditionType addType;

    public int addValue;

    public FactionCopyInfoView()
    {
    }

    public FactionCopyInfoView(int stageNum, int progress, IntIntPair challengeNum, String roleName, String icon, int vipLevel, int limitTime, AdditionType addType, int addValue)
    {
        this.stageNum = stageNum;
        this.progress = progress;
        this.challengeNum = challengeNum;
        this.roleName = roleName;
        this.icon = icon;
        this.vipLevel = vipLevel;
        this.limitTime = limitTime;
        this.addType = addType;
        this.addValue = addValue;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FactionCopyInfoView _r = null;
        if(rhs instanceof FactionCopyInfoView)
        {
            _r = (FactionCopyInfoView)rhs;
        }

        if(_r != null)
        {
            if(stageNum != _r.stageNum)
            {
                return false;
            }
            if(progress != _r.progress)
            {
                return false;
            }
            if(challengeNum != _r.challengeNum)
            {
                if(challengeNum == null || _r.challengeNum == null || !challengeNum.equals(_r.challengeNum))
                {
                    return false;
                }
            }
            if(roleName != _r.roleName)
            {
                if(roleName == null || _r.roleName == null || !roleName.equals(_r.roleName))
                {
                    return false;
                }
            }
            if(icon != _r.icon)
            {
                if(icon == null || _r.icon == null || !icon.equals(_r.icon))
                {
                    return false;
                }
            }
            if(vipLevel != _r.vipLevel)
            {
                return false;
            }
            if(limitTime != _r.limitTime)
            {
                return false;
            }
            if(addType != _r.addType)
            {
                if(addType == null || _r.addType == null || !addType.equals(_r.addType))
                {
                    return false;
                }
            }
            if(addValue != _r.addValue)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FactionCopyInfoView");
        __h = IceInternal.HashUtil.hashAdd(__h, stageNum);
        __h = IceInternal.HashUtil.hashAdd(__h, progress);
        __h = IceInternal.HashUtil.hashAdd(__h, challengeNum);
        __h = IceInternal.HashUtil.hashAdd(__h, roleName);
        __h = IceInternal.HashUtil.hashAdd(__h, icon);
        __h = IceInternal.HashUtil.hashAdd(__h, vipLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, limitTime);
        __h = IceInternal.HashUtil.hashAdd(__h, addType);
        __h = IceInternal.HashUtil.hashAdd(__h, addValue);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(stageNum);
        __os.writeInt(progress);
        challengeNum.__write(__os);
        __os.writeString(roleName);
        __os.writeString(icon);
        __os.writeInt(vipLevel);
        __os.writeInt(limitTime);
        addType.__write(__os);
        __os.writeInt(addValue);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        stageNum = __is.readInt();
        progress = __is.readInt();
        challengeNum = new IntIntPair();
        challengeNum.__read(__is);
        roleName = __is.readString();
        icon = __is.readString();
        vipLevel = __is.readInt();
        limitTime = __is.readInt();
        addType = AdditionType.__read(__is);
        addValue = __is.readInt();
    }

    public static final long serialVersionUID = 176396449L;
}
