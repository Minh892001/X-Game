// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class FactionListView implements java.lang.Cloneable, java.io.Serializable
{
    public String id;

    public String icon;

    public String name;

    public int level;

    public String qq;

    public int memberSize;

    public boolean apply;

    public int maxPeople;

    public int joinLevel;

    public String bossName;

    public int bossVip;

    public int joinVip;

    public String manifesto;

    public FactionListView()
    {
    }

    public FactionListView(String id, String icon, String name, int level, String qq, int memberSize, boolean apply, int maxPeople, int joinLevel, String bossName, int bossVip, int joinVip, String manifesto)
    {
        this.id = id;
        this.icon = icon;
        this.name = name;
        this.level = level;
        this.qq = qq;
        this.memberSize = memberSize;
        this.apply = apply;
        this.maxPeople = maxPeople;
        this.joinLevel = joinLevel;
        this.bossName = bossName;
        this.bossVip = bossVip;
        this.joinVip = joinVip;
        this.manifesto = manifesto;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FactionListView _r = null;
        if(rhs instanceof FactionListView)
        {
            _r = (FactionListView)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(icon != _r.icon)
            {
                if(icon == null || _r.icon == null || !icon.equals(_r.icon))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(level != _r.level)
            {
                return false;
            }
            if(qq != _r.qq)
            {
                if(qq == null || _r.qq == null || !qq.equals(_r.qq))
                {
                    return false;
                }
            }
            if(memberSize != _r.memberSize)
            {
                return false;
            }
            if(apply != _r.apply)
            {
                return false;
            }
            if(maxPeople != _r.maxPeople)
            {
                return false;
            }
            if(joinLevel != _r.joinLevel)
            {
                return false;
            }
            if(bossName != _r.bossName)
            {
                if(bossName == null || _r.bossName == null || !bossName.equals(_r.bossName))
                {
                    return false;
                }
            }
            if(bossVip != _r.bossVip)
            {
                return false;
            }
            if(joinVip != _r.joinVip)
            {
                return false;
            }
            if(manifesto != _r.manifesto)
            {
                if(manifesto == null || _r.manifesto == null || !manifesto.equals(_r.manifesto))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FactionListView");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, icon);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, level);
        __h = IceInternal.HashUtil.hashAdd(__h, qq);
        __h = IceInternal.HashUtil.hashAdd(__h, memberSize);
        __h = IceInternal.HashUtil.hashAdd(__h, apply);
        __h = IceInternal.HashUtil.hashAdd(__h, maxPeople);
        __h = IceInternal.HashUtil.hashAdd(__h, joinLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, bossName);
        __h = IceInternal.HashUtil.hashAdd(__h, bossVip);
        __h = IceInternal.HashUtil.hashAdd(__h, joinVip);
        __h = IceInternal.HashUtil.hashAdd(__h, manifesto);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(id);
        __os.writeString(icon);
        __os.writeString(name);
        __os.writeInt(level);
        __os.writeString(qq);
        __os.writeInt(memberSize);
        __os.writeBool(apply);
        __os.writeInt(maxPeople);
        __os.writeInt(joinLevel);
        __os.writeString(bossName);
        __os.writeInt(bossVip);
        __os.writeInt(joinVip);
        __os.writeString(manifesto);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readString();
        icon = __is.readString();
        name = __is.readString();
        level = __is.readInt();
        qq = __is.readString();
        memberSize = __is.readInt();
        apply = __is.readBool();
        maxPeople = __is.readInt();
        joinLevel = __is.readInt();
        bossName = __is.readString();
        bossVip = __is.readInt();
        joinVip = __is.readInt();
        manifesto = __is.readString();
    }

    public static final long serialVersionUID = -765879792L;
}
