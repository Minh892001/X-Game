// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class FactionPrxHelper extends Ice.ObjectPrxHelperBase implements FactionPrx
{
    private static final String __applyFor_name = "applyFor";

    public void applyFor(String factionId)
        throws NoteException
    {
        applyFor(factionId, null, false);
    }

    public void applyFor(String factionId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        applyFor(factionId, __ctx, true);
    }

    private void applyFor(String factionId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "applyFor", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("applyFor");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.applyFor(factionId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_applyFor(String factionId)
    {
        return begin_applyFor(factionId, null, false, null);
    }

    public Ice.AsyncResult begin_applyFor(String factionId, java.util.Map<String, String> __ctx)
    {
        return begin_applyFor(factionId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_applyFor(String factionId, Ice.Callback __cb)
    {
        return begin_applyFor(factionId, null, false, __cb);
    }

    public Ice.AsyncResult begin_applyFor(String factionId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_applyFor(factionId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_applyFor(String factionId, Callback_Faction_applyFor __cb)
    {
        return begin_applyFor(factionId, null, false, __cb);
    }

    public Ice.AsyncResult begin_applyFor(String factionId, java.util.Map<String, String> __ctx, Callback_Faction_applyFor __cb)
    {
        return begin_applyFor(factionId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_applyFor(String factionId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__applyFor_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __applyFor_name, __cb);
        try
        {
            __result.__prepare(__applyFor_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(factionId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_applyFor(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __applyFor_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean applyFor_async(AMI_Faction_applyFor __cb, String factionId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__applyFor_name);
            __r = begin_applyFor(factionId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __applyFor_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean applyFor_async(AMI_Faction_applyFor __cb, String factionId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__applyFor_name);
            __r = begin_applyFor(factionId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __applyFor_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __applyGvg_name = "applyGvg";

    /**
     * 公会战报名
     **/
    public void applyGvg()
        throws NoteException
    {
        applyGvg(null, false);
    }

    /**
     * 公会战报名
     * @param __ctx The Context map to send with the invocation.
     **/
    public void applyGvg(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        applyGvg(__ctx, true);
    }

    private void applyGvg(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "applyGvg", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("applyGvg");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.applyGvg(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_applyGvg()
    {
        return begin_applyGvg(null, false, null);
    }

    /**
     * 公会战报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_applyGvg(java.util.Map<String, String> __ctx)
    {
        return begin_applyGvg(__ctx, true, null);
    }

    /**
     * 公会战报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_applyGvg(Ice.Callback __cb)
    {
        return begin_applyGvg(null, false, __cb);
    }

    /**
     * 公会战报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_applyGvg(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_applyGvg(__ctx, true, __cb);
    }

    /**
     * 公会战报名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_applyGvg(Callback_Faction_applyGvg __cb)
    {
        return begin_applyGvg(null, false, __cb);
    }

    /**
     * 公会战报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_applyGvg(java.util.Map<String, String> __ctx, Callback_Faction_applyGvg __cb)
    {
        return begin_applyGvg(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_applyGvg(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__applyGvg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __applyGvg_name, __cb);
        try
        {
            __result.__prepare(__applyGvg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_applyGvg(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __applyGvg_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会战报名
     * @param __cb The callback object for the operation.
     **/
    public boolean applyGvg_async(AMI_Faction_applyGvg __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__applyGvg_name);
            __r = begin_applyGvg(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __applyGvg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会战报名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean applyGvg_async(AMI_Faction_applyGvg __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__applyGvg_name);
            __r = begin_applyGvg(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __applyGvg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __applyItem_name = "applyItem";

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     **/
    public void applyItem(int id, int type)
        throws NoteException
    {
        applyItem(id, type, null, false);
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __ctx The Context map to send with the invocation.
     **/
    public void applyItem(int id, int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        applyItem(id, type, __ctx, true);
    }

    private void applyItem(int id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "applyItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("applyItem");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.applyItem(id, type, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_applyItem(int id, int type)
    {
        return begin_applyItem(id, type, null, false, null);
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_applyItem(int id, int type, java.util.Map<String, String> __ctx)
    {
        return begin_applyItem(id, type, __ctx, true, null);
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_applyItem(int id, int type, Ice.Callback __cb)
    {
        return begin_applyItem(id, type, null, false, __cb);
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_applyItem(int id, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_applyItem(id, type, __ctx, true, __cb);
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_applyItem(int id, int type, Callback_Faction_applyItem __cb)
    {
        return begin_applyItem(id, type, null, false, __cb);
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_applyItem(int id, int type, java.util.Map<String, String> __ctx, Callback_Faction_applyItem __cb)
    {
        return begin_applyItem(id, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_applyItem(int id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__applyItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __applyItem_name, __cb);
        try
        {
            __result.__prepare(__applyItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_applyItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __applyItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __cb The callback object for the operation.
     **/
    public boolean applyItem_async(AMI_Faction_applyItem __cb, int id, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__applyItem_name);
            __r = begin_applyItem(id, type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __applyItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean applyItem_async(AMI_Faction_applyItem __cb, int id, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__applyItem_name);
            __r = begin_applyItem(id, type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __applyItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __approveJoin_name = "approveJoin";

    public void approveJoin(String applyId)
        throws NoteException
    {
        approveJoin(applyId, null, false);
    }

    public void approveJoin(String applyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        approveJoin(applyId, __ctx, true);
    }

    private void approveJoin(String applyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "approveJoin", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("approveJoin");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.approveJoin(applyId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_approveJoin(String applyId)
    {
        return begin_approveJoin(applyId, null, false, null);
    }

    public Ice.AsyncResult begin_approveJoin(String applyId, java.util.Map<String, String> __ctx)
    {
        return begin_approveJoin(applyId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_approveJoin(String applyId, Ice.Callback __cb)
    {
        return begin_approveJoin(applyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_approveJoin(String applyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_approveJoin(applyId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_approveJoin(String applyId, Callback_Faction_approveJoin __cb)
    {
        return begin_approveJoin(applyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_approveJoin(String applyId, java.util.Map<String, String> __ctx, Callback_Faction_approveJoin __cb)
    {
        return begin_approveJoin(applyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_approveJoin(String applyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__approveJoin_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __approveJoin_name, __cb);
        try
        {
            __result.__prepare(__approveJoin_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(applyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_approveJoin(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __approveJoin_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean approveJoin_async(AMI_Faction_approveJoin __cb, String applyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__approveJoin_name);
            __r = begin_approveJoin(applyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __approveJoin_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean approveJoin_async(AMI_Faction_approveJoin __cb, String applyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__approveJoin_name);
            __r = begin_approveJoin(applyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __approveJoin_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginChallenge_name = "beginChallenge";

    /**
     * 开始挑战副本 返回FactionCopyResultView
     **/
    public FactionCopyResultView beginChallenge()
        throws NoteException
    {
        return beginChallenge(null, false);
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __ctx The Context map to send with the invocation.
     **/
    public FactionCopyResultView beginChallenge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginChallenge(__ctx, true);
    }

    private FactionCopyResultView beginChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginChallenge");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.beginChallenge(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge()
    {
        return begin_beginChallenge(null, false, null);
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx)
    {
        return begin_beginChallenge(__ctx, true, null);
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge(Ice.Callback __cb)
    {
        return begin_beginChallenge(null, false, __cb);
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginChallenge(__ctx, true, __cb);
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge(Callback_Faction_beginChallenge __cb)
    {
        return begin_beginChallenge(null, false, __cb);
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx, Callback_Faction_beginChallenge __cb)
    {
        return begin_beginChallenge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
        try
        {
            __result.__prepare(__beginChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public FactionCopyResultView end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FactionCopyResultView __ret;
            __ret = new FactionCopyResultView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __cb The callback object for the operation.
     **/
    public boolean beginChallenge_async(AMI_Faction_beginChallenge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginChallenge_async(AMI_Faction_beginChallenge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginGvg_name = "beginGvg";

    /**
     * 公会战开始战斗，返回战报ID
     **/
    public String beginGvg()
        throws NoteException
    {
        return beginGvg(null, false);
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __ctx The Context map to send with the invocation.
     **/
    public String beginGvg(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginGvg(__ctx, true);
    }

    private String beginGvg(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginGvg", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginGvg");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.beginGvg(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginGvg()
    {
        return begin_beginGvg(null, false, null);
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginGvg(java.util.Map<String, String> __ctx)
    {
        return begin_beginGvg(__ctx, true, null);
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginGvg(Ice.Callback __cb)
    {
        return begin_beginGvg(null, false, __cb);
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginGvg(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginGvg(__ctx, true, __cb);
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginGvg(Callback_Faction_beginGvg __cb)
    {
        return begin_beginGvg(null, false, __cb);
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginGvg(java.util.Map<String, String> __ctx, Callback_Faction_beginGvg __cb)
    {
        return begin_beginGvg(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginGvg(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginGvg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginGvg_name, __cb);
        try
        {
            __result.__prepare(__beginGvg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_beginGvg(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginGvg_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __cb The callback object for the operation.
     **/
    public boolean beginGvg_async(AMI_Faction_beginGvg __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginGvg_name);
            __r = begin_beginGvg(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginGvg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会战开始战斗，返回战报ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginGvg_async(AMI_Faction_beginGvg __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginGvg_name);
            __r = begin_beginGvg(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginGvg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyFactionShop_name = "buyFactionShop";

    /**
     * 购买公会商品
     **/
    public void buyFactionShop(int id)
        throws NoteException
    {
        buyFactionShop(id, null, false);
    }

    /**
     * 购买公会商品
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyFactionShop(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        buyFactionShop(id, __ctx, true);
    }

    private void buyFactionShop(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyFactionShop", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyFactionShop");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.buyFactionShop(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 购买公会商品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyFactionShop(int id)
    {
        return begin_buyFactionShop(id, null, false, null);
    }

    /**
     * 购买公会商品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyFactionShop(int id, java.util.Map<String, String> __ctx)
    {
        return begin_buyFactionShop(id, __ctx, true, null);
    }

    /**
     * 购买公会商品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyFactionShop(int id, Ice.Callback __cb)
    {
        return begin_buyFactionShop(id, null, false, __cb);
    }

    /**
     * 购买公会商品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyFactionShop(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyFactionShop(id, __ctx, true, __cb);
    }

    /**
     * 购买公会商品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyFactionShop(int id, Callback_Faction_buyFactionShop __cb)
    {
        return begin_buyFactionShop(id, null, false, __cb);
    }

    /**
     * 购买公会商品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyFactionShop(int id, java.util.Map<String, String> __ctx, Callback_Faction_buyFactionShop __cb)
    {
        return begin_buyFactionShop(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyFactionShop(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyFactionShop_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyFactionShop_name, __cb);
        try
        {
            __result.__prepare(__buyFactionShop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_buyFactionShop(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyFactionShop_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 购买公会商品
     * @param __cb The callback object for the operation.
     **/
    public boolean buyFactionShop_async(AMI_Faction_buyFactionShop __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyFactionShop_name);
            __r = begin_buyFactionShop(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyFactionShop_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 购买公会商品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyFactionShop_async(AMI_Faction_buyFactionShop __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyFactionShop_name);
            __r = begin_buyFactionShop(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyFactionShop_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyMarchingCooling_name = "buyMarchingCooling";

    /**
     * 行军冷却
     **/
    public void buyMarchingCooling()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyMarchingCooling(null, false);
    }

    /**
     * 行军冷却
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyMarchingCooling(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyMarchingCooling(__ctx, true);
    }

    private void buyMarchingCooling(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyMarchingCooling", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyMarchingCooling");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.buyMarchingCooling(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 行军冷却
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyMarchingCooling()
    {
        return begin_buyMarchingCooling(null, false, null);
    }

    /**
     * 行军冷却
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyMarchingCooling(java.util.Map<String, String> __ctx)
    {
        return begin_buyMarchingCooling(__ctx, true, null);
    }

    /**
     * 行军冷却
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyMarchingCooling(Ice.Callback __cb)
    {
        return begin_buyMarchingCooling(null, false, __cb);
    }

    /**
     * 行军冷却
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyMarchingCooling(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyMarchingCooling(__ctx, true, __cb);
    }

    /**
     * 行军冷却
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyMarchingCooling(Callback_Faction_buyMarchingCooling __cb)
    {
        return begin_buyMarchingCooling(null, false, __cb);
    }

    /**
     * 行军冷却
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyMarchingCooling(java.util.Map<String, String> __ctx, Callback_Faction_buyMarchingCooling __cb)
    {
        return begin_buyMarchingCooling(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyMarchingCooling(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyMarchingCooling_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyMarchingCooling_name, __cb);
        try
        {
            __result.__prepare(__buyMarchingCooling_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_buyMarchingCooling(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyMarchingCooling_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 行军冷却
     * @param __cb The callback object for the operation.
     **/
    public boolean buyMarchingCooling_async(AMI_Faction_buyMarchingCooling __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyMarchingCooling_name);
            __r = begin_buyMarchingCooling(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyMarchingCooling_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 行军冷却
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyMarchingCooling_async(AMI_Faction_buyMarchingCooling __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyMarchingCooling_name);
            __r = begin_buyMarchingCooling(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyMarchingCooling_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __cancelApplication_name = "cancelApplication";

    public void cancelApplication(String factionId)
    {
        cancelApplication(factionId, null, false);
    }

    public void cancelApplication(String factionId, java.util.Map<String, String> __ctx)
    {
        cancelApplication(factionId, __ctx, true);
    }

    private void cancelApplication(String factionId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "cancelApplication", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.cancelApplication(factionId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_cancelApplication(String factionId)
    {
        return begin_cancelApplication(factionId, null, false, null);
    }

    public Ice.AsyncResult begin_cancelApplication(String factionId, java.util.Map<String, String> __ctx)
    {
        return begin_cancelApplication(factionId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_cancelApplication(String factionId, Ice.Callback __cb)
    {
        return begin_cancelApplication(factionId, null, false, __cb);
    }

    public Ice.AsyncResult begin_cancelApplication(String factionId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cancelApplication(factionId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_cancelApplication(String factionId, Callback_Faction_cancelApplication __cb)
    {
        return begin_cancelApplication(factionId, null, false, __cb);
    }

    public Ice.AsyncResult begin_cancelApplication(String factionId, java.util.Map<String, String> __ctx, Callback_Faction_cancelApplication __cb)
    {
        return begin_cancelApplication(factionId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_cancelApplication(String factionId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __cancelApplication_name, __cb);
        try
        {
            __result.__prepare(__cancelApplication_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(factionId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_cancelApplication(Ice.AsyncResult __result)
    {
        __end(__result, __cancelApplication_name);
    }

    public boolean cancelApplication_async(AMI_Faction_cancelApplication __cb, String factionId)
    {
        Ice.AsyncResult __r = begin_cancelApplication(factionId, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean cancelApplication_async(AMI_Faction_cancelApplication __cb, String factionId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_cancelApplication(factionId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __changeFactionBattleCamp_name = "changeFactionBattleCamp";

    /**
     * 更换阵营
     **/
    public String changeFactionBattleCamp()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return changeFactionBattleCamp(null, false);
    }

    /**
     * 更换阵营
     * @param __ctx The Context map to send with the invocation.
     **/
    public String changeFactionBattleCamp(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return changeFactionBattleCamp(__ctx, true);
    }

    private String changeFactionBattleCamp(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "changeFactionBattleCamp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("changeFactionBattleCamp");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.changeFactionBattleCamp(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 更换阵营
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_changeFactionBattleCamp()
    {
        return begin_changeFactionBattleCamp(null, false, null);
    }

    /**
     * 更换阵营
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_changeFactionBattleCamp(java.util.Map<String, String> __ctx)
    {
        return begin_changeFactionBattleCamp(__ctx, true, null);
    }

    /**
     * 更换阵营
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_changeFactionBattleCamp(Ice.Callback __cb)
    {
        return begin_changeFactionBattleCamp(null, false, __cb);
    }

    /**
     * 更换阵营
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_changeFactionBattleCamp(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeFactionBattleCamp(__ctx, true, __cb);
    }

    /**
     * 更换阵营
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_changeFactionBattleCamp(Callback_Faction_changeFactionBattleCamp __cb)
    {
        return begin_changeFactionBattleCamp(null, false, __cb);
    }

    /**
     * 更换阵营
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_changeFactionBattleCamp(java.util.Map<String, String> __ctx, Callback_Faction_changeFactionBattleCamp __cb)
    {
        return begin_changeFactionBattleCamp(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeFactionBattleCamp(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeFactionBattleCamp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeFactionBattleCamp_name, __cb);
        try
        {
            __result.__prepare(__changeFactionBattleCamp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_changeFactionBattleCamp(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __changeFactionBattleCamp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 更换阵营
     * @param __cb The callback object for the operation.
     **/
    public boolean changeFactionBattleCamp_async(AMI_Faction_changeFactionBattleCamp __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__changeFactionBattleCamp_name);
            __r = begin_changeFactionBattleCamp(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __changeFactionBattleCamp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 更换阵营
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean changeFactionBattleCamp_async(AMI_Faction_changeFactionBattleCamp __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__changeFactionBattleCamp_name);
            __r = begin_changeFactionBattleCamp(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __changeFactionBattleCamp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clearDonateCD_name = "clearDonateCD";

    /**
     * 清除捐献CD
     **/
    public void clearDonateCD()
        throws NoteException
    {
        clearDonateCD(null, false);
    }

    /**
     * 清除捐献CD
     * @param __ctx The Context map to send with the invocation.
     **/
    public void clearDonateCD(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        clearDonateCD(__ctx, true);
    }

    private void clearDonateCD(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearDonateCD", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clearDonateCD");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.clearDonateCD(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 清除捐献CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearDonateCD()
    {
        return begin_clearDonateCD(null, false, null);
    }

    /**
     * 清除捐献CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearDonateCD(java.util.Map<String, String> __ctx)
    {
        return begin_clearDonateCD(__ctx, true, null);
    }

    /**
     * 清除捐献CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearDonateCD(Ice.Callback __cb)
    {
        return begin_clearDonateCD(null, false, __cb);
    }

    /**
     * 清除捐献CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearDonateCD(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearDonateCD(__ctx, true, __cb);
    }

    /**
     * 清除捐献CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearDonateCD(Callback_Faction_clearDonateCD __cb)
    {
        return begin_clearDonateCD(null, false, __cb);
    }

    /**
     * 清除捐献CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearDonateCD(java.util.Map<String, String> __ctx, Callback_Faction_clearDonateCD __cb)
    {
        return begin_clearDonateCD(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearDonateCD(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearDonateCD_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearDonateCD_name, __cb);
        try
        {
            __result.__prepare(__clearDonateCD_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_clearDonateCD(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clearDonateCD_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 清除捐献CD
     * @param __cb The callback object for the operation.
     **/
    public boolean clearDonateCD_async(AMI_Faction_clearDonateCD __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearDonateCD_name);
            __r = begin_clearDonateCD(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearDonateCD_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 清除捐献CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clearDonateCD_async(AMI_Faction_clearDonateCD __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearDonateCD_name);
            __r = begin_clearDonateCD(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearDonateCD_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __closeFactionCopy_name = "closeFactionCopy";

    /**
     * 关闭开启的副本
     **/
    public void closeFactionCopy()
        throws NoteException
    {
        closeFactionCopy(null, false);
    }

    /**
     * 关闭开启的副本
     * @param __ctx The Context map to send with the invocation.
     **/
    public void closeFactionCopy(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        closeFactionCopy(__ctx, true);
    }

    private void closeFactionCopy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "closeFactionCopy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("closeFactionCopy");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.closeFactionCopy(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 关闭开启的副本
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_closeFactionCopy()
    {
        return begin_closeFactionCopy(null, false, null);
    }

    /**
     * 关闭开启的副本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_closeFactionCopy(java.util.Map<String, String> __ctx)
    {
        return begin_closeFactionCopy(__ctx, true, null);
    }

    /**
     * 关闭开启的副本
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_closeFactionCopy(Ice.Callback __cb)
    {
        return begin_closeFactionCopy(null, false, __cb);
    }

    /**
     * 关闭开启的副本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_closeFactionCopy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_closeFactionCopy(__ctx, true, __cb);
    }

    /**
     * 关闭开启的副本
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_closeFactionCopy(Callback_Faction_closeFactionCopy __cb)
    {
        return begin_closeFactionCopy(null, false, __cb);
    }

    /**
     * 关闭开启的副本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_closeFactionCopy(java.util.Map<String, String> __ctx, Callback_Faction_closeFactionCopy __cb)
    {
        return begin_closeFactionCopy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_closeFactionCopy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__closeFactionCopy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __closeFactionCopy_name, __cb);
        try
        {
            __result.__prepare(__closeFactionCopy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_closeFactionCopy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __closeFactionCopy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 关闭开启的副本
     * @param __cb The callback object for the operation.
     **/
    public boolean closeFactionCopy_async(AMI_Faction_closeFactionCopy __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__closeFactionCopy_name);
            __r = begin_closeFactionCopy(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __closeFactionCopy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 关闭开启的副本
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean closeFactionCopy_async(AMI_Faction_closeFactionCopy __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__closeFactionCopy_name);
            __r = begin_closeFactionCopy(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __closeFactionCopy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __createFaction_name = "createFaction";

    public void createFaction(String name, String icon)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        createFaction(name, icon, null, false);
    }

    public void createFaction(String name, String icon, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        createFaction(name, icon, __ctx, true);
    }

    private void createFaction(String name, String icon, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "createFaction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("createFaction");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.createFaction(name, icon, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_createFaction(String name, String icon)
    {
        return begin_createFaction(name, icon, null, false, null);
    }

    public Ice.AsyncResult begin_createFaction(String name, String icon, java.util.Map<String, String> __ctx)
    {
        return begin_createFaction(name, icon, __ctx, true, null);
    }

    public Ice.AsyncResult begin_createFaction(String name, String icon, Ice.Callback __cb)
    {
        return begin_createFaction(name, icon, null, false, __cb);
    }

    public Ice.AsyncResult begin_createFaction(String name, String icon, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createFaction(name, icon, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_createFaction(String name, String icon, Callback_Faction_createFaction __cb)
    {
        return begin_createFaction(name, icon, null, false, __cb);
    }

    public Ice.AsyncResult begin_createFaction(String name, String icon, java.util.Map<String, String> __ctx, Callback_Faction_createFaction __cb)
    {
        return begin_createFaction(name, icon, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_createFaction(String name, String icon, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createFaction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __createFaction_name, __cb);
        try
        {
            __result.__prepare(__createFaction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeString(icon);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_createFaction(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __createFaction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean createFaction_async(AMI_Faction_createFaction __cb, String name, String icon)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__createFaction_name);
            __r = begin_createFaction(name, icon, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __createFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean createFaction_async(AMI_Faction_createFaction __cb, String name, String icon, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__createFaction_name);
            __r = begin_createFaction(name, icon, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __createFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __deleteMember_name = "deleteMember";

    public void deleteMember(String roleId)
        throws NoteException
    {
        deleteMember(roleId, null, false);
    }

    public void deleteMember(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        deleteMember(roleId, __ctx, true);
    }

    private void deleteMember(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "deleteMember", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("deleteMember");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.deleteMember(roleId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_deleteMember(String roleId)
    {
        return begin_deleteMember(roleId, null, false, null);
    }

    public Ice.AsyncResult begin_deleteMember(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_deleteMember(roleId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteMember(String roleId, Ice.Callback __cb)
    {
        return begin_deleteMember(roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteMember(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteMember(roleId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteMember(String roleId, Callback_Faction_deleteMember __cb)
    {
        return begin_deleteMember(roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteMember(String roleId, java.util.Map<String, String> __ctx, Callback_Faction_deleteMember __cb)
    {
        return begin_deleteMember(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteMember(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteMember_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteMember_name, __cb);
        try
        {
            __result.__prepare(__deleteMember_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_deleteMember(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __deleteMember_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean deleteMember_async(AMI_Faction_deleteMember __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__deleteMember_name);
            __r = begin_deleteMember(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __deleteMember_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean deleteMember_async(AMI_Faction_deleteMember __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__deleteMember_name);
            __r = begin_deleteMember(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __deleteMember_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __demandItem_name = "demandItem";

    /**
     * 索要物品。type=0-索要 1-取消
     **/
    public void demandItem(String itemId, int type)
        throws NoteException
    {
        demandItem(itemId, type, null, false);
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __ctx The Context map to send with the invocation.
     **/
    public void demandItem(String itemId, int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        demandItem(itemId, type, __ctx, true);
    }

    private void demandItem(String itemId, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "demandItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("demandItem");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.demandItem(itemId, type, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_demandItem(String itemId, int type)
    {
        return begin_demandItem(itemId, type, null, false, null);
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_demandItem(String itemId, int type, java.util.Map<String, String> __ctx)
    {
        return begin_demandItem(itemId, type, __ctx, true, null);
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_demandItem(String itemId, int type, Ice.Callback __cb)
    {
        return begin_demandItem(itemId, type, null, false, __cb);
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_demandItem(String itemId, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_demandItem(itemId, type, __ctx, true, __cb);
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_demandItem(String itemId, int type, Callback_Faction_demandItem __cb)
    {
        return begin_demandItem(itemId, type, null, false, __cb);
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_demandItem(String itemId, int type, java.util.Map<String, String> __ctx, Callback_Faction_demandItem __cb)
    {
        return begin_demandItem(itemId, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_demandItem(String itemId, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__demandItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __demandItem_name, __cb);
        try
        {
            __result.__prepare(__demandItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_demandItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __demandItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __cb The callback object for the operation.
     **/
    public boolean demandItem_async(AMI_Faction_demandItem __cb, String itemId, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__demandItem_name);
            __r = begin_demandItem(itemId, type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __demandItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 索要物品。type=0-索要 1-取消
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean demandItem_async(AMI_Faction_demandItem __cb, String itemId, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__demandItem_name);
            __r = begin_demandItem(itemId, type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __demandItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __denyJoin_name = "denyJoin";

    public void denyJoin(String applyId)
    {
        denyJoin(applyId, null, false);
    }

    public void denyJoin(String applyId, java.util.Map<String, String> __ctx)
    {
        denyJoin(applyId, __ctx, true);
    }

    private void denyJoin(String applyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "denyJoin", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.denyJoin(applyId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_denyJoin(String applyId)
    {
        return begin_denyJoin(applyId, null, false, null);
    }

    public Ice.AsyncResult begin_denyJoin(String applyId, java.util.Map<String, String> __ctx)
    {
        return begin_denyJoin(applyId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_denyJoin(String applyId, Ice.Callback __cb)
    {
        return begin_denyJoin(applyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_denyJoin(String applyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_denyJoin(applyId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_denyJoin(String applyId, Callback_Faction_denyJoin __cb)
    {
        return begin_denyJoin(applyId, null, false, __cb);
    }

    public Ice.AsyncResult begin_denyJoin(String applyId, java.util.Map<String, String> __ctx, Callback_Faction_denyJoin __cb)
    {
        return begin_denyJoin(applyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_denyJoin(String applyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __denyJoin_name, __cb);
        try
        {
            __result.__prepare(__denyJoin_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(applyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_denyJoin(Ice.AsyncResult __result)
    {
        __end(__result, __denyJoin_name);
    }

    public boolean denyJoin_async(AMI_Faction_denyJoin __cb, String applyId)
    {
        Ice.AsyncResult __r = begin_denyJoin(applyId, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean denyJoin_async(AMI_Faction_denyJoin __cb, String applyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_denyJoin(applyId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __diggingTreasure_name = "diggingTreasure";

    /**
     * 挖宝
     **/
    public String diggingTreasure()
        throws NoteException
    {
        return diggingTreasure(null, false);
    }

    /**
     * 挖宝
     * @param __ctx The Context map to send with the invocation.
     **/
    public String diggingTreasure(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return diggingTreasure(__ctx, true);
    }

    private String diggingTreasure(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "diggingTreasure", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("diggingTreasure");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.diggingTreasure(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 挖宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_diggingTreasure()
    {
        return begin_diggingTreasure(null, false, null);
    }

    /**
     * 挖宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_diggingTreasure(java.util.Map<String, String> __ctx)
    {
        return begin_diggingTreasure(__ctx, true, null);
    }

    /**
     * 挖宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_diggingTreasure(Ice.Callback __cb)
    {
        return begin_diggingTreasure(null, false, __cb);
    }

    /**
     * 挖宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_diggingTreasure(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_diggingTreasure(__ctx, true, __cb);
    }

    /**
     * 挖宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_diggingTreasure(Callback_Faction_diggingTreasure __cb)
    {
        return begin_diggingTreasure(null, false, __cb);
    }

    /**
     * 挖宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_diggingTreasure(java.util.Map<String, String> __ctx, Callback_Faction_diggingTreasure __cb)
    {
        return begin_diggingTreasure(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_diggingTreasure(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__diggingTreasure_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __diggingTreasure_name, __cb);
        try
        {
            __result.__prepare(__diggingTreasure_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_diggingTreasure(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __diggingTreasure_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 挖宝
     * @param __cb The callback object for the operation.
     **/
    public boolean diggingTreasure_async(AMI_Faction_diggingTreasure __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__diggingTreasure_name);
            __r = begin_diggingTreasure(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __diggingTreasure_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 挖宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean diggingTreasure_async(AMI_Faction_diggingTreasure __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__diggingTreasure_name);
            __r = begin_diggingTreasure(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __diggingTreasure_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __divorce_name = "divorce";

    /**
     * 退出公会
     **/
    public void divorce()
        throws NoteException
    {
        divorce(null, false);
    }

    /**
     * 退出公会
     * @param __ctx The Context map to send with the invocation.
     **/
    public void divorce(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        divorce(__ctx, true);
    }

    private void divorce(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "divorce", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("divorce");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.divorce(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 退出公会
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_divorce()
    {
        return begin_divorce(null, false, null);
    }

    /**
     * 退出公会
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_divorce(java.util.Map<String, String> __ctx)
    {
        return begin_divorce(__ctx, true, null);
    }

    /**
     * 退出公会
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_divorce(Ice.Callback __cb)
    {
        return begin_divorce(null, false, __cb);
    }

    /**
     * 退出公会
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_divorce(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_divorce(__ctx, true, __cb);
    }

    /**
     * 退出公会
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_divorce(Callback_Faction_divorce __cb)
    {
        return begin_divorce(null, false, __cb);
    }

    /**
     * 退出公会
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_divorce(java.util.Map<String, String> __ctx, Callback_Faction_divorce __cb)
    {
        return begin_divorce(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_divorce(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__divorce_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __divorce_name, __cb);
        try
        {
            __result.__prepare(__divorce_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_divorce(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __divorce_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 退出公会
     * @param __cb The callback object for the operation.
     **/
    public boolean divorce_async(AMI_Faction_divorce __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__divorce_name);
            __r = begin_divorce(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __divorce_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 退出公会
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean divorce_async(AMI_Faction_divorce __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__divorce_name);
            __r = begin_divorce(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __divorce_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __donateTechnology_name = "donateTechnology";

    /**
     * 公会科技捐献type=0微章1元宝
     **/
    public void donateTechnology(int id, int type)
        throws NoteException
    {
        donateTechnology(id, type, null, false);
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __ctx The Context map to send with the invocation.
     **/
    public void donateTechnology(int id, int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        donateTechnology(id, type, __ctx, true);
    }

    private void donateTechnology(int id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "donateTechnology", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("donateTechnology");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.donateTechnology(id, type, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_donateTechnology(int id, int type)
    {
        return begin_donateTechnology(id, type, null, false, null);
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_donateTechnology(int id, int type, java.util.Map<String, String> __ctx)
    {
        return begin_donateTechnology(id, type, __ctx, true, null);
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_donateTechnology(int id, int type, Ice.Callback __cb)
    {
        return begin_donateTechnology(id, type, null, false, __cb);
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_donateTechnology(int id, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_donateTechnology(id, type, __ctx, true, __cb);
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_donateTechnology(int id, int type, Callback_Faction_donateTechnology __cb)
    {
        return begin_donateTechnology(id, type, null, false, __cb);
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_donateTechnology(int id, int type, java.util.Map<String, String> __ctx, Callback_Faction_donateTechnology __cb)
    {
        return begin_donateTechnology(id, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_donateTechnology(int id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__donateTechnology_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __donateTechnology_name, __cb);
        try
        {
            __result.__prepare(__donateTechnology_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_donateTechnology(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __donateTechnology_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __cb The callback object for the operation.
     **/
    public boolean donateTechnology_async(AMI_Faction_donateTechnology __cb, int id, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__donateTechnology_name);
            __r = begin_donateTechnology(id, type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __donateTechnology_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会科技捐献type=0微章1元宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean donateTechnology_async(AMI_Faction_donateTechnology __cb, int id, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__donateTechnology_name);
            __r = begin_donateTechnology(id, type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __donateTechnology_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __donation_name = "donation";

    /**
     * 公会捐赠 num-捐赠数量
     **/
    public void donation(int num)
        throws NoteException
    {
        donation(num, null, false);
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __ctx The Context map to send with the invocation.
     **/
    public void donation(int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        donation(num, __ctx, true);
    }

    private void donation(int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "donation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("donation");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.donation(num, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_donation(int num)
    {
        return begin_donation(num, null, false, null);
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_donation(int num, java.util.Map<String, String> __ctx)
    {
        return begin_donation(num, __ctx, true, null);
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_donation(int num, Ice.Callback __cb)
    {
        return begin_donation(num, null, false, __cb);
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_donation(int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_donation(num, __ctx, true, __cb);
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_donation(int num, Callback_Faction_donation __cb)
    {
        return begin_donation(num, null, false, __cb);
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_donation(int num, java.util.Map<String, String> __ctx, Callback_Faction_donation __cb)
    {
        return begin_donation(num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_donation(int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__donation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __donation_name, __cb);
        try
        {
            __result.__prepare(__donation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_donation(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __donation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __cb The callback object for the operation.
     **/
    public boolean donation_async(AMI_Faction_donation __cb, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__donation_name);
            __r = begin_donation(num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __donation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会捐赠 num-捐赠数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean donation_async(AMI_Faction_donation __cb, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__donation_name);
            __r = begin_donation(num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __donation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallenge_name = "endChallenge";

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     **/
    public void endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood)
        throws NoteException
    {
        endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null, false);
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __ctx The Context map to send with the invocation.
     **/
    public void endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, __ctx, true);
    }

    private void endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallenge");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood)
    {
        return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null, false, null);
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, java.util.Map<String, String> __ctx)
    {
        return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, __ctx, true, null);
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, Ice.Callback __cb)
    {
        return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null, false, __cb);
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, __ctx, true, __cb);
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, Callback_Faction_endChallenge __cb)
    {
        return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null, false, __cb);
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, java.util.Map<String, String> __ctx, Callback_Faction_endChallenge __cb)
    {
        return begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
        try
        {
            __result.__prepare(__endChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            MonsterViewSeqHelper.write(__os, monsterViews);
            __os.writeBool(isKill);
            __os.writeBool(isHurtBlood);
            __os.writeInt(dropBlood);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_endChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallenge_async(AMI_Faction_endChallenge __cb, MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge_async(AMI_Faction_endChallenge __cb, MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endGvg_name = "endGvg";

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     **/
    public String endGvg(boolean isWin, int heroNum)
        throws NoteException
    {
        return endGvg(isWin, heroNum, null, false);
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __ctx The Context map to send with the invocation.
     **/
    public String endGvg(boolean isWin, int heroNum, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endGvg(isWin, heroNum, __ctx, true);
    }

    private String endGvg(boolean isWin, int heroNum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endGvg", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endGvg");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.endGvg(isWin, heroNum, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endGvg(boolean isWin, int heroNum)
    {
        return begin_endGvg(isWin, heroNum, null, false, null);
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endGvg(boolean isWin, int heroNum, java.util.Map<String, String> __ctx)
    {
        return begin_endGvg(isWin, heroNum, __ctx, true, null);
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endGvg(boolean isWin, int heroNum, Ice.Callback __cb)
    {
        return begin_endGvg(isWin, heroNum, null, false, __cb);
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endGvg(boolean isWin, int heroNum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endGvg(isWin, heroNum, __ctx, true, __cb);
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endGvg(boolean isWin, int heroNum, Callback_Faction_endGvg __cb)
    {
        return begin_endGvg(isWin, heroNum, null, false, __cb);
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endGvg(boolean isWin, int heroNum, java.util.Map<String, String> __ctx, Callback_Faction_endGvg __cb)
    {
        return begin_endGvg(isWin, heroNum, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endGvg(boolean isWin, int heroNum, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endGvg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endGvg_name, __cb);
        try
        {
            __result.__prepare(__endGvg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(isWin);
            __os.writeInt(heroNum);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_endGvg(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endGvg_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __cb The callback object for the operation.
     **/
    public boolean endGvg_async(AMI_Faction_endGvg __cb, boolean isWin, int heroNum)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endGvg_name);
            __r = begin_endGvg(isWin, heroNum, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endGvg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endGvg_async(AMI_Faction_endGvg __cb, boolean isWin, int heroNum, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endGvg_name);
            __r = begin_endGvg(isWin, heroNum, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endGvg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __enrollFactionBattle_name = "enrollFactionBattle";

    /**
     * 报名公会战
     **/
    public String enrollFactionBattle()
        throws NoteException
    {
        return enrollFactionBattle(null, false);
    }

    /**
     * 报名公会战
     * @param __ctx The Context map to send with the invocation.
     **/
    public String enrollFactionBattle(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return enrollFactionBattle(__ctx, true);
    }

    private String enrollFactionBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "enrollFactionBattle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("enrollFactionBattle");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.enrollFactionBattle(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 报名公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enrollFactionBattle()
    {
        return begin_enrollFactionBattle(null, false, null);
    }

    /**
     * 报名公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enrollFactionBattle(java.util.Map<String, String> __ctx)
    {
        return begin_enrollFactionBattle(__ctx, true, null);
    }

    /**
     * 报名公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enrollFactionBattle(Ice.Callback __cb)
    {
        return begin_enrollFactionBattle(null, false, __cb);
    }

    /**
     * 报名公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enrollFactionBattle(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enrollFactionBattle(__ctx, true, __cb);
    }

    /**
     * 报名公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enrollFactionBattle(Callback_Faction_enrollFactionBattle __cb)
    {
        return begin_enrollFactionBattle(null, false, __cb);
    }

    /**
     * 报名公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enrollFactionBattle(java.util.Map<String, String> __ctx, Callback_Faction_enrollFactionBattle __cb)
    {
        return begin_enrollFactionBattle(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enrollFactionBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enrollFactionBattle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enrollFactionBattle_name, __cb);
        try
        {
            __result.__prepare(__enrollFactionBattle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_enrollFactionBattle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __enrollFactionBattle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 报名公会战
     * @param __cb The callback object for the operation.
     **/
    public boolean enrollFactionBattle_async(AMI_Faction_enrollFactionBattle __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enrollFactionBattle_name);
            __r = begin_enrollFactionBattle(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enrollFactionBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 报名公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean enrollFactionBattle_async(AMI_Faction_enrollFactionBattle __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enrollFactionBattle_name);
            __r = begin_enrollFactionBattle(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enrollFactionBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __enterFactionBattle_name = "enterFactionBattle";

    /**
     * 进入公会战
     **/
    public String enterFactionBattle()
        throws NoteException
    {
        return enterFactionBattle(null, false);
    }

    /**
     * 进入公会战
     * @param __ctx The Context map to send with the invocation.
     **/
    public String enterFactionBattle(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return enterFactionBattle(__ctx, true);
    }

    private String enterFactionBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "enterFactionBattle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("enterFactionBattle");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.enterFactionBattle(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 进入公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enterFactionBattle()
    {
        return begin_enterFactionBattle(null, false, null);
    }

    /**
     * 进入公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enterFactionBattle(java.util.Map<String, String> __ctx)
    {
        return begin_enterFactionBattle(__ctx, true, null);
    }

    /**
     * 进入公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enterFactionBattle(Ice.Callback __cb)
    {
        return begin_enterFactionBattle(null, false, __cb);
    }

    /**
     * 进入公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enterFactionBattle(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enterFactionBattle(__ctx, true, __cb);
    }

    /**
     * 进入公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enterFactionBattle(Callback_Faction_enterFactionBattle __cb)
    {
        return begin_enterFactionBattle(null, false, __cb);
    }

    /**
     * 进入公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enterFactionBattle(java.util.Map<String, String> __ctx, Callback_Faction_enterFactionBattle __cb)
    {
        return begin_enterFactionBattle(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enterFactionBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enterFactionBattle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enterFactionBattle_name, __cb);
        try
        {
            __result.__prepare(__enterFactionBattle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_enterFactionBattle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __enterFactionBattle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 进入公会战
     * @param __cb The callback object for the operation.
     **/
    public boolean enterFactionBattle_async(AMI_Faction_enterFactionBattle __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enterFactionBattle_name);
            __r = begin_enterFactionBattle(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enterFactionBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 进入公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean enterFactionBattle_async(AMI_Faction_enterFactionBattle __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enterFactionBattle_name);
            __r = begin_enterFactionBattle(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enterFactionBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __factionConfig_name = "factionConfig";

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     **/
    public void factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay)
        throws NoteException
    {
        factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, null, false);
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __ctx The Context map to send with the invocation.
     **/
    public void factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, __ctx, true);
    }

    private void factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("factionConfig");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay)
    {
        return begin_factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, null, false, null);
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, java.util.Map<String, String> __ctx)
    {
        return begin_factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, __ctx, true, null);
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, Ice.Callback __cb)
    {
        return begin_factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, null, false, __cb);
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, __ctx, true, __cb);
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, Callback_Faction_factionConfig __cb)
    {
        return begin_factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, null, false, __cb);
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, java.util.Map<String, String> __ctx, Callback_Faction_factionConfig __cb)
    {
        return begin_factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__factionConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionConfig_name, __cb);
        try
        {
            __result.__prepare(__factionConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(icon);
            __os.writeString(qq);
            __os.writeString(notice);
            __os.writeInt(joinType);
            __os.writeInt(joinLevel);
            __os.writeInt(joinVip);
            __os.writeString(manifesto);
            __os.writeInt(deleteDay);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_factionConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __factionConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __cb The callback object for the operation.
     **/
    public boolean factionConfig_async(AMI_Faction_factionConfig __cb, String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__factionConfig_name);
            __r = begin_factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __factionConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionConfig_async(AMI_Faction_factionConfig __cb, String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__factionConfig_name);
            __r = begin_factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __factionConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __factionCopyInfo_name = "factionCopyInfo";

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     **/
    public String factionCopyInfo()
        throws NoteException
    {
        return factionCopyInfo(null, false);
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String factionCopyInfo(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return factionCopyInfo(__ctx, true);
    }

    private String factionCopyInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionCopyInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("factionCopyInfo");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.factionCopyInfo(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionCopyInfo()
    {
        return begin_factionCopyInfo(null, false, null);
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionCopyInfo(java.util.Map<String, String> __ctx)
    {
        return begin_factionCopyInfo(__ctx, true, null);
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionCopyInfo(Ice.Callback __cb)
    {
        return begin_factionCopyInfo(null, false, __cb);
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionCopyInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionCopyInfo(__ctx, true, __cb);
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionCopyInfo(Callback_Faction_factionCopyInfo __cb)
    {
        return begin_factionCopyInfo(null, false, __cb);
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionCopyInfo(java.util.Map<String, String> __ctx, Callback_Faction_factionCopyInfo __cb)
    {
        return begin_factionCopyInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionCopyInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__factionCopyInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionCopyInfo_name, __cb);
        try
        {
            __result.__prepare(__factionCopyInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_factionCopyInfo(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __factionCopyInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean factionCopyInfo_async(AMI_Faction_factionCopyInfo __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__factionCopyInfo_name);
            __r = begin_factionCopyInfo(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __factionCopyInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionCopyInfo_async(AMI_Faction_factionCopyInfo __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__factionCopyInfo_name);
            __r = begin_factionCopyInfo(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __factionCopyInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __factionCopyList_name = "factionCopyList";

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     **/
    public String factionCopyList()
        throws NoteException
    {
        return factionCopyList(null, false);
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __ctx The Context map to send with the invocation.
     **/
    public String factionCopyList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return factionCopyList(__ctx, true);
    }

    private String factionCopyList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionCopyList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("factionCopyList");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.factionCopyList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionCopyList()
    {
        return begin_factionCopyList(null, false, null);
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionCopyList(java.util.Map<String, String> __ctx)
    {
        return begin_factionCopyList(__ctx, true, null);
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionCopyList(Ice.Callback __cb)
    {
        return begin_factionCopyList(null, false, __cb);
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionCopyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionCopyList(__ctx, true, __cb);
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_factionCopyList(Callback_Faction_factionCopyList __cb)
    {
        return begin_factionCopyList(null, false, __cb);
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_factionCopyList(java.util.Map<String, String> __ctx, Callback_Faction_factionCopyList __cb)
    {
        return begin_factionCopyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionCopyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__factionCopyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionCopyList_name, __cb);
        try
        {
            __result.__prepare(__factionCopyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_factionCopyList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __factionCopyList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __cb The callback object for the operation.
     **/
    public boolean factionCopyList_async(AMI_Faction_factionCopyList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__factionCopyList_name);
            __r = begin_factionCopyList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __factionCopyList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean factionCopyList_async(AMI_Faction_factionCopyList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__factionCopyList_name);
            __r = begin_factionCopyList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __factionCopyList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __findFaction_name = "findFaction";

    /**
     * 查找公会 返回FactionListViewSeq的lua
     **/
    public String findFaction(String idOrName)
        throws NoteException
    {
        return findFaction(idOrName, null, false);
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String findFaction(String idOrName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return findFaction(idOrName, __ctx, true);
    }

    private String findFaction(String idOrName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findFaction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findFaction");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.findFaction(idOrName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findFaction(String idOrName)
    {
        return begin_findFaction(idOrName, null, false, null);
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findFaction(String idOrName, java.util.Map<String, String> __ctx)
    {
        return begin_findFaction(idOrName, __ctx, true, null);
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findFaction(String idOrName, Ice.Callback __cb)
    {
        return begin_findFaction(idOrName, null, false, __cb);
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findFaction(String idOrName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findFaction(idOrName, __ctx, true, __cb);
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findFaction(String idOrName, Callback_Faction_findFaction __cb)
    {
        return begin_findFaction(idOrName, null, false, __cb);
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findFaction(String idOrName, java.util.Map<String, String> __ctx, Callback_Faction_findFaction __cb)
    {
        return begin_findFaction(idOrName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findFaction(String idOrName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findFaction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findFaction_name, __cb);
        try
        {
            __result.__prepare(__findFaction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(idOrName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_findFaction(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __findFaction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean findFaction_async(AMI_Faction_findFaction __cb, String idOrName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findFaction_name);
            __r = begin_findFaction(idOrName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean findFaction_async(AMI_Faction_findFaction __cb, String idOrName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__findFaction_name);
            __r = begin_findFaction(idOrName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __findFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getBeforePeople_name = "getBeforePeople";

    /**
     * 获取仓库物品申请在我前面的人数
     **/
    public int getBeforePeople(String itemId)
        throws NoteException
    {
        return getBeforePeople(itemId, null, false);
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __ctx The Context map to send with the invocation.
     **/
    public int getBeforePeople(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getBeforePeople(itemId, __ctx, true);
    }

    private int getBeforePeople(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBeforePeople", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBeforePeople");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getBeforePeople(itemId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBeforePeople(String itemId)
    {
        return begin_getBeforePeople(itemId, null, false, null);
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBeforePeople(String itemId, java.util.Map<String, String> __ctx)
    {
        return begin_getBeforePeople(itemId, __ctx, true, null);
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBeforePeople(String itemId, Ice.Callback __cb)
    {
        return begin_getBeforePeople(itemId, null, false, __cb);
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBeforePeople(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBeforePeople(itemId, __ctx, true, __cb);
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getBeforePeople(String itemId, Callback_Faction_getBeforePeople __cb)
    {
        return begin_getBeforePeople(itemId, null, false, __cb);
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getBeforePeople(String itemId, java.util.Map<String, String> __ctx, Callback_Faction_getBeforePeople __cb)
    {
        return begin_getBeforePeople(itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBeforePeople(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBeforePeople_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBeforePeople_name, __cb);
        try
        {
            __result.__prepare(__getBeforePeople_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_getBeforePeople(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getBeforePeople_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __cb The callback object for the operation.
     **/
    public boolean getBeforePeople_async(AMI_Faction_getBeforePeople __cb, String itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBeforePeople_name);
            __r = begin_getBeforePeople(itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBeforePeople_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取仓库物品申请在我前面的人数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getBeforePeople_async(AMI_Faction_getBeforePeople __cb, String itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBeforePeople_name);
            __r = begin_getBeforePeople(itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBeforePeople_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionAllotLog_name = "getFactionAllotLog";

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     **/
    public String getFactionAllotLog()
        throws NoteException
    {
        return getFactionAllotLog(null, false);
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFactionAllotLog(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFactionAllotLog(__ctx, true);
    }

    private String getFactionAllotLog(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionAllotLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionAllotLog");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getFactionAllotLog(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionAllotLog()
    {
        return begin_getFactionAllotLog(null, false, null);
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionAllotLog(java.util.Map<String, String> __ctx)
    {
        return begin_getFactionAllotLog(__ctx, true, null);
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionAllotLog(Ice.Callback __cb)
    {
        return begin_getFactionAllotLog(null, false, __cb);
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionAllotLog(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionAllotLog(__ctx, true, __cb);
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionAllotLog(Callback_Faction_getFactionAllotLog __cb)
    {
        return begin_getFactionAllotLog(null, false, __cb);
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionAllotLog(java.util.Map<String, String> __ctx, Callback_Faction_getFactionAllotLog __cb)
    {
        return begin_getFactionAllotLog(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionAllotLog(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionAllotLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionAllotLog_name, __cb);
        try
        {
            __result.__prepare(__getFactionAllotLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFactionAllotLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFactionAllotLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionAllotLog_async(AMI_Faction_getFactionAllotLog __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionAllotLog_name);
            __r = begin_getFactionAllotLog(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionAllotLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionAllotLog_async(AMI_Faction_getFactionAllotLog __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionAllotLog_name);
            __r = begin_getFactionAllotLog(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionAllotLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionHistorys_name = "getFactionHistorys";

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     **/
    public String getFactionHistorys()
    {
        return getFactionHistorys(null, false);
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFactionHistorys(java.util.Map<String, String> __ctx)
    {
        return getFactionHistorys(__ctx, true);
    }

    private String getFactionHistorys(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionHistorys", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionHistorys");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getFactionHistorys(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionHistorys()
    {
        return begin_getFactionHistorys(null, false, null);
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionHistorys(java.util.Map<String, String> __ctx)
    {
        return begin_getFactionHistorys(__ctx, true, null);
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionHistorys(Ice.Callback __cb)
    {
        return begin_getFactionHistorys(null, false, __cb);
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionHistorys(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionHistorys(__ctx, true, __cb);
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionHistorys(Callback_Faction_getFactionHistorys __cb)
    {
        return begin_getFactionHistorys(null, false, __cb);
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionHistorys(java.util.Map<String, String> __ctx, Callback_Faction_getFactionHistorys __cb)
    {
        return begin_getFactionHistorys(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionHistorys(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionHistorys_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionHistorys_name, __cb);
        try
        {
            __result.__prepare(__getFactionHistorys_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFactionHistorys(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFactionHistorys_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionHistorys_async(AMI_Faction_getFactionHistorys __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionHistorys_name);
            __r = begin_getFactionHistorys(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionHistorys_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionHistorys_async(AMI_Faction_getFactionHistorys __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionHistorys_name);
            __r = begin_getFactionHistorys(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionHistorys_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionInfo_name = "getFactionInfo";

    /**
     * 获取公会信息，返回FactionView的lua
     **/
    public String getFactionInfo(String id)
    {
        return getFactionInfo(id, null, false);
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFactionInfo(String id, java.util.Map<String, String> __ctx)
    {
        return getFactionInfo(id, __ctx, true);
    }

    private String getFactionInfo(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionInfo");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getFactionInfo(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionInfo(String id)
    {
        return begin_getFactionInfo(id, null, false, null);
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionInfo(String id, java.util.Map<String, String> __ctx)
    {
        return begin_getFactionInfo(id, __ctx, true, null);
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionInfo(String id, Ice.Callback __cb)
    {
        return begin_getFactionInfo(id, null, false, __cb);
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionInfo(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionInfo(id, __ctx, true, __cb);
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionInfo(String id, Callback_Faction_getFactionInfo __cb)
    {
        return begin_getFactionInfo(id, null, false, __cb);
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionInfo(String id, java.util.Map<String, String> __ctx, Callback_Faction_getFactionInfo __cb)
    {
        return begin_getFactionInfo(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionInfo(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionInfo_name, __cb);
        try
        {
            __result.__prepare(__getFactionInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFactionInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFactionInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionInfo_async(AMI_Faction_getFactionInfo __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionInfo_name);
            __r = begin_getFactionInfo(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionInfo_async(AMI_Faction_getFactionInfo __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionInfo_name);
            __r = begin_getFactionInfo(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionList_name = "getFactionList";

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     **/
    public String getFactionList(int orderBy)
    {
        return getFactionList(orderBy, null, false);
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFactionList(int orderBy, java.util.Map<String, String> __ctx)
    {
        return getFactionList(orderBy, __ctx, true);
    }

    private String getFactionList(int orderBy, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionList");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getFactionList(orderBy, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(int orderBy)
    {
        return begin_getFactionList(orderBy, null, false, null);
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(int orderBy, java.util.Map<String, String> __ctx)
    {
        return begin_getFactionList(orderBy, __ctx, true, null);
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(int orderBy, Ice.Callback __cb)
    {
        return begin_getFactionList(orderBy, null, false, __cb);
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(int orderBy, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionList(orderBy, __ctx, true, __cb);
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(int orderBy, Callback_Faction_getFactionList __cb)
    {
        return begin_getFactionList(orderBy, null, false, __cb);
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(int orderBy, java.util.Map<String, String> __ctx, Callback_Faction_getFactionList __cb)
    {
        return begin_getFactionList(orderBy, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionList(int orderBy, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionList_name, __cb);
        try
        {
            __result.__prepare(__getFactionList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(orderBy);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFactionList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFactionList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionList_async(AMI_Faction_getFactionList __cb, int orderBy)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionList_name);
            __r = begin_getFactionList(orderBy, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionList_async(AMI_Faction_getFactionList __cb, int orderBy, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionList_name);
            __r = begin_getFactionList(orderBy, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionMailLog_name = "getFactionMailLog";

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     **/
    public String getFactionMailLog()
        throws NoteException
    {
        return getFactionMailLog(null, false);
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFactionMailLog(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFactionMailLog(__ctx, true);
    }

    private String getFactionMailLog(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionMailLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionMailLog");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getFactionMailLog(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMailLog()
    {
        return begin_getFactionMailLog(null, false, null);
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMailLog(java.util.Map<String, String> __ctx)
    {
        return begin_getFactionMailLog(__ctx, true, null);
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMailLog(Ice.Callback __cb)
    {
        return begin_getFactionMailLog(null, false, __cb);
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMailLog(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionMailLog(__ctx, true, __cb);
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMailLog(Callback_Faction_getFactionMailLog __cb)
    {
        return begin_getFactionMailLog(null, false, __cb);
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMailLog(java.util.Map<String, String> __ctx, Callback_Faction_getFactionMailLog __cb)
    {
        return begin_getFactionMailLog(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionMailLog(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionMailLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionMailLog_name, __cb);
        try
        {
            __result.__prepare(__getFactionMailLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFactionMailLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFactionMailLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionMailLog_async(AMI_Faction_getFactionMailLog __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionMailLog_name);
            __r = begin_getFactionMailLog(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionMailLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionMailLog_async(AMI_Faction_getFactionMailLog __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionMailLog_name);
            __r = begin_getFactionMailLog(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionMailLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionRank_name = "getFactionRank";

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     **/
    public String getFactionRank()
        throws NoteException
    {
        return getFactionRank(null, false);
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFactionRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFactionRank(__ctx, true);
    }

    private String getFactionRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionRank");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getFactionRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionRank()
    {
        return begin_getFactionRank(null, false, null);
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionRank(java.util.Map<String, String> __ctx)
    {
        return begin_getFactionRank(__ctx, true, null);
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionRank(Ice.Callback __cb)
    {
        return begin_getFactionRank(null, false, __cb);
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionRank(__ctx, true, __cb);
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionRank(Callback_Faction_getFactionRank __cb)
    {
        return begin_getFactionRank(null, false, __cb);
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionRank(java.util.Map<String, String> __ctx, Callback_Faction_getFactionRank __cb)
    {
        return begin_getFactionRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionRank_name, __cb);
        try
        {
            __result.__prepare(__getFactionRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFactionRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFactionRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionRank_async(AMI_Faction_getFactionRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionRank_name);
            __r = begin_getFactionRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionRank_async(AMI_Faction_getFactionRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionRank_name);
            __r = begin_getFactionRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionShops_name = "getFactionShops";

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     **/
    public String getFactionShops()
        throws NoteException
    {
        return getFactionShops(null, false);
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getFactionShops(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFactionShops(__ctx, true);
    }

    private String getFactionShops(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionShops", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionShops");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getFactionShops(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionShops()
    {
        return begin_getFactionShops(null, false, null);
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionShops(java.util.Map<String, String> __ctx)
    {
        return begin_getFactionShops(__ctx, true, null);
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionShops(Ice.Callback __cb)
    {
        return begin_getFactionShops(null, false, __cb);
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionShops(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionShops(__ctx, true, __cb);
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionShops(Callback_Faction_getFactionShops __cb)
    {
        return begin_getFactionShops(null, false, __cb);
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionShops(java.util.Map<String, String> __ctx, Callback_Faction_getFactionShops __cb)
    {
        return begin_getFactionShops(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionShops(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionShops_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionShops_name, __cb);
        try
        {
            __result.__prepare(__getFactionShops_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getFactionShops(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFactionShops_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getFactionShops_async(AMI_Faction_getFactionShops __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionShops_name);
            __r = begin_getFactionShops(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionShops_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFactionShops_async(AMI_Faction_getFactionShops __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFactionShops_name);
            __r = begin_getFactionShops(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFactionShops_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getGvgInfo_name = "getGvgInfo";

    /**
     * 获取公会战信息，返回GvgView的lua
     **/
    public String getGvgInfo()
        throws NoteException
    {
        return getGvgInfo(null, false);
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getGvgInfo(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getGvgInfo(__ctx, true);
    }

    private String getGvgInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGvgInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGvgInfo");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getGvgInfo(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getGvgInfo()
    {
        return begin_getGvgInfo(null, false, null);
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getGvgInfo(java.util.Map<String, String> __ctx)
    {
        return begin_getGvgInfo(__ctx, true, null);
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getGvgInfo(Ice.Callback __cb)
    {
        return begin_getGvgInfo(null, false, __cb);
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getGvgInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGvgInfo(__ctx, true, __cb);
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getGvgInfo(Callback_Faction_getGvgInfo __cb)
    {
        return begin_getGvgInfo(null, false, __cb);
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getGvgInfo(java.util.Map<String, String> __ctx, Callback_Faction_getGvgInfo __cb)
    {
        return begin_getGvgInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGvgInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGvgInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGvgInfo_name, __cb);
        try
        {
            __result.__prepare(__getGvgInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getGvgInfo(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getGvgInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getGvgInfo_async(AMI_Faction_getGvgInfo __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getGvgInfo_name);
            __r = begin_getGvgInfo(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getGvgInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getGvgInfo_async(AMI_Faction_getGvgInfo __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getGvgInfo_name);
            __r = begin_getGvgInfo(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getGvgInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getHarmRank_name = "getHarmRank";

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     **/
    public String getHarmRank()
        throws NoteException
    {
        return getHarmRank(null, false);
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getHarmRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getHarmRank(__ctx, true);
    }

    private String getHarmRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getHarmRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getHarmRank");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getHarmRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHarmRank()
    {
        return begin_getHarmRank(null, false, null);
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx)
    {
        return begin_getHarmRank(__ctx, true, null);
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHarmRank(Ice.Callback __cb)
    {
        return begin_getHarmRank(null, false, __cb);
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getHarmRank(__ctx, true, __cb);
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHarmRank(Callback_Faction_getHarmRank __cb)
    {
        return begin_getHarmRank(null, false, __cb);
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx, Callback_Faction_getHarmRank __cb)
    {
        return begin_getHarmRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getHarmRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getHarmRank_name, __cb);
        try
        {
            __result.__prepare(__getHarmRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getHarmRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getHarmRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getHarmRank_async(AMI_Faction_getHarmRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHarmRank_name);
            __r = begin_getHarmRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHarmRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getHarmRank_async(AMI_Faction_getHarmRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHarmRank_name);
            __r = begin_getHarmRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHarmRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getJoinRequestList_name = "getJoinRequestList";

    public String getJoinRequestList()
        throws NoteException
    {
        return getJoinRequestList(null, false);
    }

    public String getJoinRequestList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getJoinRequestList(__ctx, true);
    }

    private String getJoinRequestList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getJoinRequestList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getJoinRequestList");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getJoinRequestList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getJoinRequestList()
    {
        return begin_getJoinRequestList(null, false, null);
    }

    public Ice.AsyncResult begin_getJoinRequestList(java.util.Map<String, String> __ctx)
    {
        return begin_getJoinRequestList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getJoinRequestList(Ice.Callback __cb)
    {
        return begin_getJoinRequestList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getJoinRequestList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getJoinRequestList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getJoinRequestList(Callback_Faction_getJoinRequestList __cb)
    {
        return begin_getJoinRequestList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getJoinRequestList(java.util.Map<String, String> __ctx, Callback_Faction_getJoinRequestList __cb)
    {
        return begin_getJoinRequestList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getJoinRequestList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getJoinRequestList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getJoinRequestList_name, __cb);
        try
        {
            __result.__prepare(__getJoinRequestList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getJoinRequestList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getJoinRequestList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getJoinRequestList_async(AMI_Faction_getJoinRequestList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getJoinRequestList_name);
            __r = begin_getJoinRequestList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getJoinRequestList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getJoinRequestList_async(AMI_Faction_getJoinRequestList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getJoinRequestList_name);
            __r = begin_getJoinRequestList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getJoinRequestList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getMemberRank_name = "getMemberRank";

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     **/
    public String getMemberRank()
        throws NoteException
    {
        return getMemberRank(null, false);
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getMemberRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getMemberRank(__ctx, true);
    }

    private String getMemberRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMemberRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMemberRank");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getMemberRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getMemberRank()
    {
        return begin_getMemberRank(null, false, null);
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getMemberRank(java.util.Map<String, String> __ctx)
    {
        return begin_getMemberRank(__ctx, true, null);
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getMemberRank(Ice.Callback __cb)
    {
        return begin_getMemberRank(null, false, __cb);
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getMemberRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMemberRank(__ctx, true, __cb);
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getMemberRank(Callback_Faction_getMemberRank __cb)
    {
        return begin_getMemberRank(null, false, __cb);
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getMemberRank(java.util.Map<String, String> __ctx, Callback_Faction_getMemberRank __cb)
    {
        return begin_getMemberRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMemberRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMemberRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMemberRank_name, __cb);
        try
        {
            __result.__prepare(__getMemberRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getMemberRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getMemberRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getMemberRank_async(AMI_Faction_getMemberRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMemberRank_name);
            __r = begin_getMemberRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMemberRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getMemberRank_async(AMI_Faction_getMemberRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMemberRank_name);
            __r = begin_getMemberRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMemberRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getMyFaction_name = "getMyFaction";

    public String getMyFaction()
        throws NoteException
    {
        return getMyFaction(null, false);
    }

    public String getMyFaction(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getMyFaction(__ctx, true);
    }

    private String getMyFaction(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMyFaction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMyFaction");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getMyFaction(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMyFaction()
    {
        return begin_getMyFaction(null, false, null);
    }

    public Ice.AsyncResult begin_getMyFaction(java.util.Map<String, String> __ctx)
    {
        return begin_getMyFaction(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getMyFaction(Ice.Callback __cb)
    {
        return begin_getMyFaction(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMyFaction(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMyFaction(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMyFaction(Callback_Faction_getMyFaction __cb)
    {
        return begin_getMyFaction(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMyFaction(java.util.Map<String, String> __ctx, Callback_Faction_getMyFaction __cb)
    {
        return begin_getMyFaction(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMyFaction(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMyFaction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMyFaction_name, __cb);
        try
        {
            __result.__prepare(__getMyFaction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getMyFaction(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getMyFaction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getMyFaction_async(AMI_Faction_getMyFaction __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMyFaction_name);
            __r = begin_getMyFaction(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMyFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getMyFaction_async(AMI_Faction_getMyFaction __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMyFaction_name);
            __r = begin_getMyFaction(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMyFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getPurchaseLog_name = "getPurchaseLog";

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     **/
    public String getPurchaseLog()
        throws NoteException
    {
        return getPurchaseLog(null, false);
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getPurchaseLog(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPurchaseLog(__ctx, true);
    }

    private String getPurchaseLog(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPurchaseLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPurchaseLog");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getPurchaseLog(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPurchaseLog()
    {
        return begin_getPurchaseLog(null, false, null);
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPurchaseLog(java.util.Map<String, String> __ctx)
    {
        return begin_getPurchaseLog(__ctx, true, null);
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPurchaseLog(Ice.Callback __cb)
    {
        return begin_getPurchaseLog(null, false, __cb);
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPurchaseLog(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPurchaseLog(__ctx, true, __cb);
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPurchaseLog(Callback_Faction_getPurchaseLog __cb)
    {
        return begin_getPurchaseLog(null, false, __cb);
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPurchaseLog(java.util.Map<String, String> __ctx, Callback_Faction_getPurchaseLog __cb)
    {
        return begin_getPurchaseLog(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPurchaseLog(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPurchaseLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPurchaseLog_name, __cb);
        try
        {
            __result.__prepare(__getPurchaseLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getPurchaseLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPurchaseLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getPurchaseLog_async(AMI_Faction_getPurchaseLog __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPurchaseLog_name);
            __r = begin_getPurchaseLog(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPurchaseLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getPurchaseLog_async(AMI_Faction_getPurchaseLog __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPurchaseLog_name);
            __r = begin_getPurchaseLog(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPurchaseLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRecruitCount_name = "getRecruitCount";

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     **/
    public String getRecruitCount(int type)
        throws NoteException
    {
        return getRecruitCount(type, null, false);
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getRecruitCount(int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRecruitCount(type, __ctx, true);
    }

    private String getRecruitCount(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRecruitCount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRecruitCount");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getRecruitCount(type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRecruitCount(int type)
    {
        return begin_getRecruitCount(type, null, false, null);
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRecruitCount(int type, java.util.Map<String, String> __ctx)
    {
        return begin_getRecruitCount(type, __ctx, true, null);
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRecruitCount(int type, Ice.Callback __cb)
    {
        return begin_getRecruitCount(type, null, false, __cb);
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRecruitCount(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRecruitCount(type, __ctx, true, __cb);
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRecruitCount(int type, Callback_Faction_getRecruitCount __cb)
    {
        return begin_getRecruitCount(type, null, false, __cb);
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRecruitCount(int type, java.util.Map<String, String> __ctx, Callback_Faction_getRecruitCount __cb)
    {
        return begin_getRecruitCount(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRecruitCount(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRecruitCount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRecruitCount_name, __cb);
        try
        {
            __result.__prepare(__getRecruitCount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getRecruitCount(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRecruitCount_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public boolean getRecruitCount_async(AMI_Faction_getRecruitCount __cb, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRecruitCount_name);
            __r = begin_getRecruitCount(type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRecruitCount_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRecruitCount_async(AMI_Faction_getRecruitCount __cb, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRecruitCount_name);
            __r = begin_getRecruitCount(type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRecruitCount_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRivalFormation_name = "getRivalFormation";

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     **/
    public GvgChallengeView getRivalFormation(String roleId)
        throws NoteException
    {
        return getRivalFormation(roleId, null, false);
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public GvgChallengeView getRivalFormation(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRivalFormation(roleId, __ctx, true);
    }

    private GvgChallengeView getRivalFormation(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRivalFormation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRivalFormation");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getRivalFormation(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRivalFormation(String roleId)
    {
        return begin_getRivalFormation(roleId, null, false, null);
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRivalFormation(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_getRivalFormation(roleId, __ctx, true, null);
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRivalFormation(String roleId, Ice.Callback __cb)
    {
        return begin_getRivalFormation(roleId, null, false, __cb);
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRivalFormation(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRivalFormation(roleId, __ctx, true, __cb);
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRivalFormation(String roleId, Callback_Faction_getRivalFormation __cb)
    {
        return begin_getRivalFormation(roleId, null, false, __cb);
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRivalFormation(String roleId, java.util.Map<String, String> __ctx, Callback_Faction_getRivalFormation __cb)
    {
        return begin_getRivalFormation(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRivalFormation(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRivalFormation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRivalFormation_name, __cb);
        try
        {
            __result.__prepare(__getRivalFormation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GvgChallengeView end_getRivalFormation(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRivalFormation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GvgChallengeView __ret;
            __ret = new GvgChallengeView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getRivalFormation_async(AMI_Faction_getRivalFormation __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRivalFormation_name);
            __r = begin_getRivalFormation(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRivalFormation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRivalFormation_async(AMI_Faction_getRivalFormation __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRivalFormation_name);
            __r = begin_getRivalFormation(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRivalFormation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getTechnologyDonateLog_name = "getTechnologyDonateLog";

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     **/
    public String getTechnologyDonateLog()
        throws NoteException
    {
        return getTechnologyDonateLog(null, false);
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getTechnologyDonateLog(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getTechnologyDonateLog(__ctx, true);
    }

    private String getTechnologyDonateLog(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTechnologyDonateLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTechnologyDonateLog");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getTechnologyDonateLog(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTechnologyDonateLog()
    {
        return begin_getTechnologyDonateLog(null, false, null);
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTechnologyDonateLog(java.util.Map<String, String> __ctx)
    {
        return begin_getTechnologyDonateLog(__ctx, true, null);
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTechnologyDonateLog(Ice.Callback __cb)
    {
        return begin_getTechnologyDonateLog(null, false, __cb);
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTechnologyDonateLog(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTechnologyDonateLog(__ctx, true, __cb);
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTechnologyDonateLog(Callback_Faction_getTechnologyDonateLog __cb)
    {
        return begin_getTechnologyDonateLog(null, false, __cb);
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTechnologyDonateLog(java.util.Map<String, String> __ctx, Callback_Faction_getTechnologyDonateLog __cb)
    {
        return begin_getTechnologyDonateLog(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTechnologyDonateLog(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTechnologyDonateLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTechnologyDonateLog_name, __cb);
        try
        {
            __result.__prepare(__getTechnologyDonateLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getTechnologyDonateLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getTechnologyDonateLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getTechnologyDonateLog_async(AMI_Faction_getTechnologyDonateLog __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTechnologyDonateLog_name);
            __r = begin_getTechnologyDonateLog(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTechnologyDonateLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getTechnologyDonateLog_async(AMI_Faction_getTechnologyDonateLog __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTechnologyDonateLog_name);
            __r = begin_getTechnologyDonateLog(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTechnologyDonateLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getWarehouseItemQueue_name = "getWarehouseItemQueue";

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     **/
    public String getWarehouseItemQueue(int id)
        throws NoteException
    {
        return getWarehouseItemQueue(id, null, false);
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getWarehouseItemQueue(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getWarehouseItemQueue(id, __ctx, true);
    }

    private String getWarehouseItemQueue(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getWarehouseItemQueue", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getWarehouseItemQueue");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.getWarehouseItemQueue(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getWarehouseItemQueue(int id)
    {
        return begin_getWarehouseItemQueue(id, null, false, null);
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getWarehouseItemQueue(int id, java.util.Map<String, String> __ctx)
    {
        return begin_getWarehouseItemQueue(id, __ctx, true, null);
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getWarehouseItemQueue(int id, Ice.Callback __cb)
    {
        return begin_getWarehouseItemQueue(id, null, false, __cb);
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getWarehouseItemQueue(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getWarehouseItemQueue(id, __ctx, true, __cb);
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getWarehouseItemQueue(int id, Callback_Faction_getWarehouseItemQueue __cb)
    {
        return begin_getWarehouseItemQueue(id, null, false, __cb);
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getWarehouseItemQueue(int id, java.util.Map<String, String> __ctx, Callback_Faction_getWarehouseItemQueue __cb)
    {
        return begin_getWarehouseItemQueue(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getWarehouseItemQueue(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getWarehouseItemQueue_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getWarehouseItemQueue_name, __cb);
        try
        {
            __result.__prepare(__getWarehouseItemQueue_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getWarehouseItemQueue(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getWarehouseItemQueue_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getWarehouseItemQueue_async(AMI_Faction_getWarehouseItemQueue __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getWarehouseItemQueue_name);
            __r = begin_getWarehouseItemQueue(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getWarehouseItemQueue_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getWarehouseItemQueue_async(AMI_Faction_getWarehouseItemQueue __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getWarehouseItemQueue_name);
            __r = begin_getWarehouseItemQueue(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getWarehouseItemQueue_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __invite_name = "invite";

    /**
     * 邀请
     **/
    public boolean invite(boolean isFree, String roleId)
        throws NoteException
    {
        return invite(isFree, roleId, null, false);
    }

    /**
     * 邀请
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean invite(boolean isFree, String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return invite(isFree, roleId, __ctx, true);
    }

    private boolean invite(boolean isFree, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "invite", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("invite");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.invite(isFree, roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_invite(boolean isFree, String roleId)
    {
        return begin_invite(isFree, roleId, null, false, null);
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_invite(boolean isFree, String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_invite(isFree, roleId, __ctx, true, null);
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_invite(boolean isFree, String roleId, Ice.Callback __cb)
    {
        return begin_invite(isFree, roleId, null, false, __cb);
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_invite(boolean isFree, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_invite(isFree, roleId, __ctx, true, __cb);
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_invite(boolean isFree, String roleId, Callback_Faction_invite __cb)
    {
        return begin_invite(isFree, roleId, null, false, __cb);
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_invite(boolean isFree, String roleId, java.util.Map<String, String> __ctx, Callback_Faction_invite __cb)
    {
        return begin_invite(isFree, roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_invite(boolean isFree, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__invite_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __invite_name, __cb);
        try
        {
            __result.__prepare(__invite_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(isFree);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public boolean end_invite(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __invite_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     **/
    public boolean invite_async(AMI_Faction_invite __cb, boolean isFree, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__invite_name);
            __r = begin_invite(isFree, roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __invite_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean invite_async(AMI_Faction_invite __cb, boolean isFree, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__invite_name);
            __r = begin_invite(isFree, roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __invite_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __leaveFactionBattle_name = "leaveFactionBattle";

    /**
     * 离开公会战
     **/
    public void leaveFactionBattle()
        throws NoteException
    {
        leaveFactionBattle(null, false);
    }

    /**
     * 离开公会战
     * @param __ctx The Context map to send with the invocation.
     **/
    public void leaveFactionBattle(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        leaveFactionBattle(__ctx, true);
    }

    private void leaveFactionBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "leaveFactionBattle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("leaveFactionBattle");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.leaveFactionBattle(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 离开公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_leaveFactionBattle()
    {
        return begin_leaveFactionBattle(null, false, null);
    }

    /**
     * 离开公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_leaveFactionBattle(java.util.Map<String, String> __ctx)
    {
        return begin_leaveFactionBattle(__ctx, true, null);
    }

    /**
     * 离开公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_leaveFactionBattle(Ice.Callback __cb)
    {
        return begin_leaveFactionBattle(null, false, __cb);
    }

    /**
     * 离开公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_leaveFactionBattle(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_leaveFactionBattle(__ctx, true, __cb);
    }

    /**
     * 离开公会战
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_leaveFactionBattle(Callback_Faction_leaveFactionBattle __cb)
    {
        return begin_leaveFactionBattle(null, false, __cb);
    }

    /**
     * 离开公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_leaveFactionBattle(java.util.Map<String, String> __ctx, Callback_Faction_leaveFactionBattle __cb)
    {
        return begin_leaveFactionBattle(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_leaveFactionBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__leaveFactionBattle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __leaveFactionBattle_name, __cb);
        try
        {
            __result.__prepare(__leaveFactionBattle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_leaveFactionBattle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __leaveFactionBattle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 离开公会战
     * @param __cb The callback object for the operation.
     **/
    public boolean leaveFactionBattle_async(AMI_Faction_leaveFactionBattle __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__leaveFactionBattle_name);
            __r = begin_leaveFactionBattle(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __leaveFactionBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 离开公会战
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean leaveFactionBattle_async(AMI_Faction_leaveFactionBattle __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__leaveFactionBattle_name);
            __r = begin_leaveFactionBattle(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __leaveFactionBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lookFactionBattleLog_name = "lookFactionBattleLog";

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     **/
    public String lookFactionBattleLog(byte logType)
        throws NoteException
    {
        return lookFactionBattleLog(logType, null, false);
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lookFactionBattleLog(byte logType, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lookFactionBattleLog(logType, __ctx, true);
    }

    private String lookFactionBattleLog(byte logType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lookFactionBattleLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lookFactionBattleLog");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.lookFactionBattleLog(logType, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleLog(byte logType)
    {
        return begin_lookFactionBattleLog(logType, null, false, null);
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleLog(byte logType, java.util.Map<String, String> __ctx)
    {
        return begin_lookFactionBattleLog(logType, __ctx, true, null);
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleLog(byte logType, Ice.Callback __cb)
    {
        return begin_lookFactionBattleLog(logType, null, false, __cb);
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleLog(byte logType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lookFactionBattleLog(logType, __ctx, true, __cb);
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleLog(byte logType, Callback_Faction_lookFactionBattleLog __cb)
    {
        return begin_lookFactionBattleLog(logType, null, false, __cb);
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleLog(byte logType, java.util.Map<String, String> __ctx, Callback_Faction_lookFactionBattleLog __cb)
    {
        return begin_lookFactionBattleLog(logType, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lookFactionBattleLog(byte logType, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lookFactionBattleLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lookFactionBattleLog_name, __cb);
        try
        {
            __result.__prepare(__lookFactionBattleLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(logType);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lookFactionBattleLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lookFactionBattleLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __cb The callback object for the operation.
     **/
    public boolean lookFactionBattleLog_async(AMI_Faction_lookFactionBattleLog __cb, byte logType)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookFactionBattleLog_name);
            __r = begin_lookFactionBattleLog(logType, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookFactionBattleLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lookFactionBattleLog_async(AMI_Faction_lookFactionBattleLog __cb, byte logType, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookFactionBattleLog_name);
            __r = begin_lookFactionBattleLog(logType, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookFactionBattleLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lookFactionBattleMovieView_name = "lookFactionBattleMovieView";

    /**
     * 查看战况回放
     **/
    public PvpMovieView lookFactionBattleMovieView()
        throws NoteException
    {
        return lookFactionBattleMovieView(null, false);
    }

    /**
     * 查看战况回放
     * @param __ctx The Context map to send with the invocation.
     **/
    public PvpMovieView lookFactionBattleMovieView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lookFactionBattleMovieView(__ctx, true);
    }

    private PvpMovieView lookFactionBattleMovieView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lookFactionBattleMovieView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lookFactionBattleMovieView");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.lookFactionBattleMovieView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查看战况回放
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleMovieView()
    {
        return begin_lookFactionBattleMovieView(null, false, null);
    }

    /**
     * 查看战况回放
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleMovieView(java.util.Map<String, String> __ctx)
    {
        return begin_lookFactionBattleMovieView(__ctx, true, null);
    }

    /**
     * 查看战况回放
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleMovieView(Ice.Callback __cb)
    {
        return begin_lookFactionBattleMovieView(null, false, __cb);
    }

    /**
     * 查看战况回放
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleMovieView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lookFactionBattleMovieView(__ctx, true, __cb);
    }

    /**
     * 查看战况回放
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleMovieView(Callback_Faction_lookFactionBattleMovieView __cb)
    {
        return begin_lookFactionBattleMovieView(null, false, __cb);
    }

    /**
     * 查看战况回放
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleMovieView(java.util.Map<String, String> __ctx, Callback_Faction_lookFactionBattleMovieView __cb)
    {
        return begin_lookFactionBattleMovieView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lookFactionBattleMovieView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lookFactionBattleMovieView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lookFactionBattleMovieView_name, __cb);
        try
        {
            __result.__prepare(__lookFactionBattleMovieView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public PvpMovieView end_lookFactionBattleMovieView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lookFactionBattleMovieView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PvpMovieView __ret;
            __ret = new PvpMovieView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查看战况回放
     * @param __cb The callback object for the operation.
     **/
    public boolean lookFactionBattleMovieView_async(AMI_Faction_lookFactionBattleMovieView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookFactionBattleMovieView_name);
            __r = begin_lookFactionBattleMovieView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookFactionBattleMovieView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查看战况回放
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lookFactionBattleMovieView_async(AMI_Faction_lookFactionBattleMovieView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookFactionBattleMovieView_name);
            __r = begin_lookFactionBattleMovieView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookFactionBattleMovieView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lookFactionBattlePersonalRank_name = "lookFactionBattlePersonalRank";

    /**
     * 公会战个人排行榜信息
     **/
    public String lookFactionBattlePersonalRank()
        throws NoteException
    {
        return lookFactionBattlePersonalRank(null, false);
    }

    /**
     * 公会战个人排行榜信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lookFactionBattlePersonalRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lookFactionBattlePersonalRank(__ctx, true);
    }

    private String lookFactionBattlePersonalRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lookFactionBattlePersonalRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lookFactionBattlePersonalRank");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.lookFactionBattlePersonalRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战个人排行榜信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattlePersonalRank()
    {
        return begin_lookFactionBattlePersonalRank(null, false, null);
    }

    /**
     * 公会战个人排行榜信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattlePersonalRank(java.util.Map<String, String> __ctx)
    {
        return begin_lookFactionBattlePersonalRank(__ctx, true, null);
    }

    /**
     * 公会战个人排行榜信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattlePersonalRank(Ice.Callback __cb)
    {
        return begin_lookFactionBattlePersonalRank(null, false, __cb);
    }

    /**
     * 公会战个人排行榜信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattlePersonalRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lookFactionBattlePersonalRank(__ctx, true, __cb);
    }

    /**
     * 公会战个人排行榜信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattlePersonalRank(Callback_Faction_lookFactionBattlePersonalRank __cb)
    {
        return begin_lookFactionBattlePersonalRank(null, false, __cb);
    }

    /**
     * 公会战个人排行榜信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattlePersonalRank(java.util.Map<String, String> __ctx, Callback_Faction_lookFactionBattlePersonalRank __cb)
    {
        return begin_lookFactionBattlePersonalRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lookFactionBattlePersonalRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lookFactionBattlePersonalRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lookFactionBattlePersonalRank_name, __cb);
        try
        {
            __result.__prepare(__lookFactionBattlePersonalRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lookFactionBattlePersonalRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lookFactionBattlePersonalRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会战个人排行榜信息
     * @param __cb The callback object for the operation.
     **/
    public boolean lookFactionBattlePersonalRank_async(AMI_Faction_lookFactionBattlePersonalRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookFactionBattlePersonalRank_name);
            __r = begin_lookFactionBattlePersonalRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookFactionBattlePersonalRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会战个人排行榜信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lookFactionBattlePersonalRank_async(AMI_Faction_lookFactionBattlePersonalRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookFactionBattlePersonalRank_name);
            __r = begin_lookFactionBattlePersonalRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookFactionBattlePersonalRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __lookFactionBattleRank_name = "lookFactionBattleRank";

    /**
     * 公会战排行榜信息
     **/
    public String lookFactionBattleRank()
        throws NoteException
    {
        return lookFactionBattleRank(null, false);
    }

    /**
     * 公会战排行榜信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public String lookFactionBattleRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return lookFactionBattleRank(__ctx, true);
    }

    private String lookFactionBattleRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lookFactionBattleRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lookFactionBattleRank");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.lookFactionBattleRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战排行榜信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleRank()
    {
        return begin_lookFactionBattleRank(null, false, null);
    }

    /**
     * 公会战排行榜信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleRank(java.util.Map<String, String> __ctx)
    {
        return begin_lookFactionBattleRank(__ctx, true, null);
    }

    /**
     * 公会战排行榜信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleRank(Ice.Callback __cb)
    {
        return begin_lookFactionBattleRank(null, false, __cb);
    }

    /**
     * 公会战排行榜信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lookFactionBattleRank(__ctx, true, __cb);
    }

    /**
     * 公会战排行榜信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleRank(Callback_Faction_lookFactionBattleRank __cb)
    {
        return begin_lookFactionBattleRank(null, false, __cb);
    }

    /**
     * 公会战排行榜信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_lookFactionBattleRank(java.util.Map<String, String> __ctx, Callback_Faction_lookFactionBattleRank __cb)
    {
        return begin_lookFactionBattleRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lookFactionBattleRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lookFactionBattleRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lookFactionBattleRank_name, __cb);
        try
        {
            __result.__prepare(__lookFactionBattleRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_lookFactionBattleRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __lookFactionBattleRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会战排行榜信息
     * @param __cb The callback object for the operation.
     **/
    public boolean lookFactionBattleRank_async(AMI_Faction_lookFactionBattleRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookFactionBattleRank_name);
            __r = begin_lookFactionBattleRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookFactionBattleRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会战排行榜信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean lookFactionBattleRank_async(AMI_Faction_lookFactionBattleRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__lookFactionBattleRank_name);
            __r = begin_lookFactionBattleRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __lookFactionBattleRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __marching_name = "marching";

    /**
     * 行军
     **/
    public String marching(boolean isUseKits, int strongholdId)
        throws NoteException
    {
        return marching(isUseKits, strongholdId, null, false);
    }

    /**
     * 行军
     * @param __ctx The Context map to send with the invocation.
     **/
    public String marching(boolean isUseKits, int strongholdId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return marching(isUseKits, strongholdId, __ctx, true);
    }

    private String marching(boolean isUseKits, int strongholdId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "marching", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("marching");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.marching(isUseKits, strongholdId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 行军
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_marching(boolean isUseKits, int strongholdId)
    {
        return begin_marching(isUseKits, strongholdId, null, false, null);
    }

    /**
     * 行军
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_marching(boolean isUseKits, int strongholdId, java.util.Map<String, String> __ctx)
    {
        return begin_marching(isUseKits, strongholdId, __ctx, true, null);
    }

    /**
     * 行军
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_marching(boolean isUseKits, int strongholdId, Ice.Callback __cb)
    {
        return begin_marching(isUseKits, strongholdId, null, false, __cb);
    }

    /**
     * 行军
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_marching(boolean isUseKits, int strongholdId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_marching(isUseKits, strongholdId, __ctx, true, __cb);
    }

    /**
     * 行军
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_marching(boolean isUseKits, int strongholdId, Callback_Faction_marching __cb)
    {
        return begin_marching(isUseKits, strongholdId, null, false, __cb);
    }

    /**
     * 行军
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_marching(boolean isUseKits, int strongholdId, java.util.Map<String, String> __ctx, Callback_Faction_marching __cb)
    {
        return begin_marching(isUseKits, strongholdId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_marching(boolean isUseKits, int strongholdId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__marching_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __marching_name, __cb);
        try
        {
            __result.__prepare(__marching_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(isUseKits);
            __os.writeInt(strongholdId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_marching(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __marching_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 行军
     * @param __cb The callback object for the operation.
     **/
    public boolean marching_async(AMI_Faction_marching __cb, boolean isUseKits, int strongholdId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__marching_name);
            __r = begin_marching(isUseKits, strongholdId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __marching_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 行军
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean marching_async(AMI_Faction_marching __cb, boolean isUseKits, int strongholdId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__marching_name);
            __r = begin_marching(isUseKits, strongholdId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __marching_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openFactionBattle_name = "openFactionBattle";

    /**
     * 公会战界面
     **/
    public String openFactionBattle()
        throws NoteException
    {
        return openFactionBattle(null, false);
    }

    /**
     * 公会战界面
     * @param __ctx The Context map to send with the invocation.
     **/
    public String openFactionBattle(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openFactionBattle(__ctx, true);
    }

    private String openFactionBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openFactionBattle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openFactionBattle");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.openFactionBattle(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战界面
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openFactionBattle()
    {
        return begin_openFactionBattle(null, false, null);
    }

    /**
     * 公会战界面
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openFactionBattle(java.util.Map<String, String> __ctx)
    {
        return begin_openFactionBattle(__ctx, true, null);
    }

    /**
     * 公会战界面
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openFactionBattle(Ice.Callback __cb)
    {
        return begin_openFactionBattle(null, false, __cb);
    }

    /**
     * 公会战界面
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openFactionBattle(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openFactionBattle(__ctx, true, __cb);
    }

    /**
     * 公会战界面
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openFactionBattle(Callback_Faction_openFactionBattle __cb)
    {
        return begin_openFactionBattle(null, false, __cb);
    }

    /**
     * 公会战界面
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openFactionBattle(java.util.Map<String, String> __ctx, Callback_Faction_openFactionBattle __cb)
    {
        return begin_openFactionBattle(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openFactionBattle(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openFactionBattle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openFactionBattle_name, __cb);
        try
        {
            __result.__prepare(__openFactionBattle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_openFactionBattle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openFactionBattle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会战界面
     * @param __cb The callback object for the operation.
     **/
    public boolean openFactionBattle_async(AMI_Faction_openFactionBattle __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openFactionBattle_name);
            __r = begin_openFactionBattle(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openFactionBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会战界面
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openFactionBattle_async(AMI_Faction_openFactionBattle __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openFactionBattle_name);
            __r = begin_openFactionBattle(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openFactionBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openFactionCopy_name = "openFactionCopy";

    /**
     * 开启副本 返回还可开启的次数
     **/
    public int openFactionCopy(int copyId)
        throws NoteException
    {
        return openFactionCopy(copyId, null, false);
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __ctx The Context map to send with the invocation.
     **/
    public int openFactionCopy(int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openFactionCopy(copyId, __ctx, true);
    }

    private int openFactionCopy(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openFactionCopy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openFactionCopy");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.openFactionCopy(copyId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openFactionCopy(int copyId)
    {
        return begin_openFactionCopy(copyId, null, false, null);
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openFactionCopy(int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_openFactionCopy(copyId, __ctx, true, null);
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openFactionCopy(int copyId, Ice.Callback __cb)
    {
        return begin_openFactionCopy(copyId, null, false, __cb);
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openFactionCopy(int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openFactionCopy(copyId, __ctx, true, __cb);
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openFactionCopy(int copyId, Callback_Faction_openFactionCopy __cb)
    {
        return begin_openFactionCopy(copyId, null, false, __cb);
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openFactionCopy(int copyId, java.util.Map<String, String> __ctx, Callback_Faction_openFactionCopy __cb)
    {
        return begin_openFactionCopy(copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openFactionCopy(int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openFactionCopy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openFactionCopy_name, __cb);
        try
        {
            __result.__prepare(__openFactionCopy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_openFactionCopy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openFactionCopy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __cb The callback object for the operation.
     **/
    public boolean openFactionCopy_async(AMI_Faction_openFactionCopy __cb, int copyId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openFactionCopy_name);
            __r = begin_openFactionCopy(copyId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openFactionCopy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 开启副本 返回还可开启的次数
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openFactionCopy_async(AMI_Faction_openFactionCopy __cb, int copyId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openFactionCopy_name);
            __r = begin_openFactionCopy(copyId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openFactionCopy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openOviStore_name = "openOviStore";

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     **/
    public String openOviStore()
        throws NoteException
    {
        return openOviStore(null, false);
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String openOviStore(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openOviStore(__ctx, true);
    }

    private String openOviStore(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openOviStore", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openOviStore");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.openOviStore(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openOviStore()
    {
        return begin_openOviStore(null, false, null);
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openOviStore(java.util.Map<String, String> __ctx)
    {
        return begin_openOviStore(__ctx, true, null);
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openOviStore(Ice.Callback __cb)
    {
        return begin_openOviStore(null, false, __cb);
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openOviStore(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openOviStore(__ctx, true, __cb);
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openOviStore(Callback_Faction_openOviStore __cb)
    {
        return begin_openOviStore(null, false, __cb);
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openOviStore(java.util.Map<String, String> __ctx, Callback_Faction_openOviStore __cb)
    {
        return begin_openOviStore(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openOviStore(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openOviStore_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openOviStore_name, __cb);
        try
        {
            __result.__prepare(__openOviStore_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_openOviStore(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openOviStore_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean openOviStore_async(AMI_Faction_openOviStore __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openOviStore_name);
            __r = begin_openOviStore(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openOviStore_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openOviStore_async(AMI_Faction_openOviStore __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openOviStore_name);
            __r = begin_openOviStore(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openOviStore_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openStorehouse_name = "openStorehouse";

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     **/
    public String openStorehouse()
        throws NoteException
    {
        return openStorehouse(null, false);
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String openStorehouse(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openStorehouse(__ctx, true);
    }

    private String openStorehouse(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openStorehouse", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openStorehouse");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.openStorehouse(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openStorehouse()
    {
        return begin_openStorehouse(null, false, null);
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openStorehouse(java.util.Map<String, String> __ctx)
    {
        return begin_openStorehouse(__ctx, true, null);
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openStorehouse(Ice.Callback __cb)
    {
        return begin_openStorehouse(null, false, __cb);
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openStorehouse(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openStorehouse(__ctx, true, __cb);
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openStorehouse(Callback_Faction_openStorehouse __cb)
    {
        return begin_openStorehouse(null, false, __cb);
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openStorehouse(java.util.Map<String, String> __ctx, Callback_Faction_openStorehouse __cb)
    {
        return begin_openStorehouse(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openStorehouse(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openStorehouse_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openStorehouse_name, __cb);
        try
        {
            __result.__prepare(__openStorehouse_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_openStorehouse(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openStorehouse_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean openStorehouse_async(AMI_Faction_openStorehouse __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openStorehouse_name);
            __r = begin_openStorehouse(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openStorehouse_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openStorehouse_async(AMI_Faction_openStorehouse __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openStorehouse_name);
            __r = begin_openStorehouse(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openStorehouse_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openWarehouse_name = "openWarehouse";

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     **/
    public String openWarehouse()
        throws NoteException
    {
        return openWarehouse(null, false);
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String openWarehouse(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openWarehouse(__ctx, true);
    }

    private String openWarehouse(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openWarehouse", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openWarehouse");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.openWarehouse(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openWarehouse()
    {
        return begin_openWarehouse(null, false, null);
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openWarehouse(java.util.Map<String, String> __ctx)
    {
        return begin_openWarehouse(__ctx, true, null);
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openWarehouse(Ice.Callback __cb)
    {
        return begin_openWarehouse(null, false, __cb);
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openWarehouse(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openWarehouse(__ctx, true, __cb);
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openWarehouse(Callback_Faction_openWarehouse __cb)
    {
        return begin_openWarehouse(null, false, __cb);
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openWarehouse(java.util.Map<String, String> __ctx, Callback_Faction_openWarehouse __cb)
    {
        return begin_openWarehouse(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openWarehouse(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openWarehouse_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openWarehouse_name, __cb);
        try
        {
            __result.__prepare(__openWarehouse_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_openWarehouse(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openWarehouse_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean openWarehouse_async(AMI_Faction_openWarehouse __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openWarehouse_name);
            __r = begin_openWarehouse(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openWarehouse_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openWarehouse_async(AMI_Faction_openWarehouse __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openWarehouse_name);
            __r = begin_openWarehouse(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openWarehouse_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __oviStoreBuy_name = "oviStoreBuy";

    /**
     * 商铺购买物品
     **/
    public void oviStoreBuy(String itemId, int num)
        throws NoteException
    {
        oviStoreBuy(itemId, num, null, false);
    }

    /**
     * 商铺购买物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public void oviStoreBuy(String itemId, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        oviStoreBuy(itemId, num, __ctx, true);
    }

    private void oviStoreBuy(String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "oviStoreBuy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("oviStoreBuy");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.oviStoreBuy(itemId, num, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 商铺购买物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_oviStoreBuy(String itemId, int num)
    {
        return begin_oviStoreBuy(itemId, num, null, false, null);
    }

    /**
     * 商铺购买物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_oviStoreBuy(String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_oviStoreBuy(itemId, num, __ctx, true, null);
    }

    /**
     * 商铺购买物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_oviStoreBuy(String itemId, int num, Ice.Callback __cb)
    {
        return begin_oviStoreBuy(itemId, num, null, false, __cb);
    }

    /**
     * 商铺购买物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_oviStoreBuy(String itemId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_oviStoreBuy(itemId, num, __ctx, true, __cb);
    }

    /**
     * 商铺购买物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_oviStoreBuy(String itemId, int num, Callback_Faction_oviStoreBuy __cb)
    {
        return begin_oviStoreBuy(itemId, num, null, false, __cb);
    }

    /**
     * 商铺购买物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_oviStoreBuy(String itemId, int num, java.util.Map<String, String> __ctx, Callback_Faction_oviStoreBuy __cb)
    {
        return begin_oviStoreBuy(itemId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_oviStoreBuy(String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__oviStoreBuy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __oviStoreBuy_name, __cb);
        try
        {
            __result.__prepare(__oviStoreBuy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_oviStoreBuy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __oviStoreBuy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 商铺购买物品
     * @param __cb The callback object for the operation.
     **/
    public boolean oviStoreBuy_async(AMI_Faction_oviStoreBuy __cb, String itemId, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__oviStoreBuy_name);
            __r = begin_oviStoreBuy(itemId, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __oviStoreBuy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 商铺购买物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean oviStoreBuy_async(AMI_Faction_oviStoreBuy __cb, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__oviStoreBuy_name);
            __r = begin_oviStoreBuy(itemId, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __oviStoreBuy_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __recruit_name = "recruit";

    /**
     * 招贤
     **/
    public boolean recruit(boolean isFree)
        throws NoteException
    {
        return recruit(isFree, null, false);
    }

    /**
     * 招贤
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean recruit(boolean isFree, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return recruit(isFree, __ctx, true);
    }

    private boolean recruit(boolean isFree, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "recruit", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("recruit");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.recruit(isFree, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 招贤
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_recruit(boolean isFree)
    {
        return begin_recruit(isFree, null, false, null);
    }

    /**
     * 招贤
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recruit(boolean isFree, java.util.Map<String, String> __ctx)
    {
        return begin_recruit(isFree, __ctx, true, null);
    }

    /**
     * 招贤
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_recruit(boolean isFree, Ice.Callback __cb)
    {
        return begin_recruit(isFree, null, false, __cb);
    }

    /**
     * 招贤
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recruit(boolean isFree, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recruit(isFree, __ctx, true, __cb);
    }

    /**
     * 招贤
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_recruit(boolean isFree, Callback_Faction_recruit __cb)
    {
        return begin_recruit(isFree, null, false, __cb);
    }

    /**
     * 招贤
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recruit(boolean isFree, java.util.Map<String, String> __ctx, Callback_Faction_recruit __cb)
    {
        return begin_recruit(isFree, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recruit(boolean isFree, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recruit_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recruit_name, __cb);
        try
        {
            __result.__prepare(__recruit_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(isFree);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public boolean end_recruit(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __recruit_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 招贤
     * @param __cb The callback object for the operation.
     **/
    public boolean recruit_async(AMI_Faction_recruit __cb, boolean isFree)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__recruit_name);
            __r = begin_recruit(isFree, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __recruit_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 招贤
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean recruit_async(AMI_Faction_recruit __cb, boolean isFree, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__recruit_name);
            __r = begin_recruit(isFree, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __recruit_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __rename_name = "rename";

    /**
     * 公会改名
     **/
    public void rename(String newName)
        throws NoteException
    {
        rename(newName, null, false);
    }

    /**
     * 公会改名
     * @param __ctx The Context map to send with the invocation.
     **/
    public void rename(String newName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        rename(newName, __ctx, true);
    }

    private void rename(String newName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "rename", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("rename");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.rename(newName, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会改名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rename(String newName)
    {
        return begin_rename(newName, null, false, null);
    }

    /**
     * 公会改名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rename(String newName, java.util.Map<String, String> __ctx)
    {
        return begin_rename(newName, __ctx, true, null);
    }

    /**
     * 公会改名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rename(String newName, Ice.Callback __cb)
    {
        return begin_rename(newName, null, false, __cb);
    }

    /**
     * 公会改名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rename(String newName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rename(newName, __ctx, true, __cb);
    }

    /**
     * 公会改名
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rename(String newName, Callback_Faction_rename __cb)
    {
        return begin_rename(newName, null, false, __cb);
    }

    /**
     * 公会改名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rename(String newName, java.util.Map<String, String> __ctx, Callback_Faction_rename __cb)
    {
        return begin_rename(newName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rename(String newName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rename_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rename_name, __cb);
        try
        {
            __result.__prepare(__rename_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(newName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_rename(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __rename_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会改名
     * @param __cb The callback object for the operation.
     **/
    public boolean rename_async(AMI_Faction_rename __cb, String newName)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rename_name);
            __r = begin_rename(newName, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rename_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会改名
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean rename_async(AMI_Faction_rename __cb, String newName, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rename_name);
            __r = begin_rename(newName, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rename_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __resultConfirm_name = "resultConfirm";

    /**
     * 战斗结果确定（复活 假象而已）
     **/
    public void resultConfirm()
        throws NoteException
    {
        resultConfirm(null, false);
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __ctx The Context map to send with the invocation.
     **/
    public void resultConfirm(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        resultConfirm(__ctx, true);
    }

    private void resultConfirm(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "resultConfirm", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("resultConfirm");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.resultConfirm(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resultConfirm()
    {
        return begin_resultConfirm(null, false, null);
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resultConfirm(java.util.Map<String, String> __ctx)
    {
        return begin_resultConfirm(__ctx, true, null);
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resultConfirm(Ice.Callback __cb)
    {
        return begin_resultConfirm(null, false, __cb);
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resultConfirm(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_resultConfirm(__ctx, true, __cb);
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resultConfirm(Callback_Faction_resultConfirm __cb)
    {
        return begin_resultConfirm(null, false, __cb);
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resultConfirm(java.util.Map<String, String> __ctx, Callback_Faction_resultConfirm __cb)
    {
        return begin_resultConfirm(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_resultConfirm(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__resultConfirm_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __resultConfirm_name, __cb);
        try
        {
            __result.__prepare(__resultConfirm_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_resultConfirm(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __resultConfirm_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __cb The callback object for the operation.
     **/
    public boolean resultConfirm_async(AMI_Faction_resultConfirm __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resultConfirm_name);
            __r = begin_resultConfirm(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resultConfirm_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 战斗结果确定（复活 假象而已）
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean resultConfirm_async(AMI_Faction_resultConfirm __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resultConfirm_name);
            __r = begin_resultConfirm(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resultConfirm_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __reviveGvg_name = "reviveGvg";

    /**
     * 公会战死亡复活
     **/
    public void reviveGvg()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        reviveGvg(null, false);
    }

    /**
     * 公会战死亡复活
     * @param __ctx The Context map to send with the invocation.
     **/
    public void reviveGvg(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        reviveGvg(__ctx, true);
    }

    private void reviveGvg(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "reviveGvg", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("reviveGvg");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.reviveGvg(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会战死亡复活
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_reviveGvg()
    {
        return begin_reviveGvg(null, false, null);
    }

    /**
     * 公会战死亡复活
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_reviveGvg(java.util.Map<String, String> __ctx)
    {
        return begin_reviveGvg(__ctx, true, null);
    }

    /**
     * 公会战死亡复活
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_reviveGvg(Ice.Callback __cb)
    {
        return begin_reviveGvg(null, false, __cb);
    }

    /**
     * 公会战死亡复活
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_reviveGvg(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reviveGvg(__ctx, true, __cb);
    }

    /**
     * 公会战死亡复活
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_reviveGvg(Callback_Faction_reviveGvg __cb)
    {
        return begin_reviveGvg(null, false, __cb);
    }

    /**
     * 公会战死亡复活
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_reviveGvg(java.util.Map<String, String> __ctx, Callback_Faction_reviveGvg __cb)
    {
        return begin_reviveGvg(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reviveGvg(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__reviveGvg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reviveGvg_name, __cb);
        try
        {
            __result.__prepare(__reviveGvg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_reviveGvg(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __reviveGvg_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会战死亡复活
     * @param __cb The callback object for the operation.
     **/
    public boolean reviveGvg_async(AMI_Faction_reviveGvg __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__reviveGvg_name);
            __r = begin_reviveGvg(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __reviveGvg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会战死亡复活
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean reviveGvg_async(AMI_Faction_reviveGvg __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__reviveGvg_name);
            __r = begin_reviveGvg(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __reviveGvg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectRival_name = "selectRival";

    /**
     * 选择对手，返回RivalView数组的lua
     **/
    public String selectRival(int index)
        throws NoteException
    {
        return selectRival(index, null, false);
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String selectRival(int index, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selectRival(index, __ctx, true);
    }

    private String selectRival(int index, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectRival", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectRival");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.selectRival(index, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_selectRival(int index)
    {
        return begin_selectRival(index, null, false, null);
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_selectRival(int index, java.util.Map<String, String> __ctx)
    {
        return begin_selectRival(index, __ctx, true, null);
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_selectRival(int index, Ice.Callback __cb)
    {
        return begin_selectRival(index, null, false, __cb);
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_selectRival(int index, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectRival(index, __ctx, true, __cb);
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_selectRival(int index, Callback_Faction_selectRival __cb)
    {
        return begin_selectRival(index, null, false, __cb);
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_selectRival(int index, java.util.Map<String, String> __ctx, Callback_Faction_selectRival __cb)
    {
        return begin_selectRival(index, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectRival(int index, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectRival_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectRival_name, __cb);
        try
        {
            __result.__prepare(__selectRival_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(index);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_selectRival(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectRival_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean selectRival_async(AMI_Faction_selectRival __cb, int index)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectRival_name);
            __r = begin_selectRival(index, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean selectRival_async(AMI_Faction_selectRival __cb, int index, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectRival_name);
            __r = begin_selectRival(index, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectRival_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sendFactionMail_name = "sendFactionMail";

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     **/
    public int sendFactionMail(int type, String title, String content)
        throws NoteException
    {
        return sendFactionMail(type, title, content, null, false);
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __ctx The Context map to send with the invocation.
     **/
    public int sendFactionMail(int type, String title, String content, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return sendFactionMail(type, title, content, __ctx, true);
    }

    private int sendFactionMail(int type, String title, String content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendFactionMail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendFactionMail");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.sendFactionMail(type, title, content, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendFactionMail(int type, String title, String content)
    {
        return begin_sendFactionMail(type, title, content, null, false, null);
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendFactionMail(int type, String title, String content, java.util.Map<String, String> __ctx)
    {
        return begin_sendFactionMail(type, title, content, __ctx, true, null);
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendFactionMail(int type, String title, String content, Ice.Callback __cb)
    {
        return begin_sendFactionMail(type, title, content, null, false, __cb);
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendFactionMail(int type, String title, String content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendFactionMail(type, title, content, __ctx, true, __cb);
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendFactionMail(int type, String title, String content, Callback_Faction_sendFactionMail __cb)
    {
        return begin_sendFactionMail(type, title, content, null, false, __cb);
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendFactionMail(int type, String title, String content, java.util.Map<String, String> __ctx, Callback_Faction_sendFactionMail __cb)
    {
        return begin_sendFactionMail(type, title, content, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendFactionMail(int type, String title, String content, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendFactionMail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendFactionMail_name, __cb);
        try
        {
            __result.__prepare(__sendFactionMail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeString(title);
            __os.writeString(content);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_sendFactionMail(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendFactionMail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __cb The callback object for the operation.
     **/
    public boolean sendFactionMail_async(AMI_Faction_sendFactionMail __cb, int type, String title, String content)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendFactionMail_name);
            __r = begin_sendFactionMail(type, title, content, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendFactionMail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sendFactionMail_async(AMI_Faction_sendFactionMail __cb, int type, String title, String content, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendFactionMail_name);
            __r = begin_sendFactionMail(type, title, content, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendFactionMail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setCommon_name = "setCommon";

    /**
     * 设置成普通会员
     **/
    public void setCommon(String targetId)
        throws NoteException
    {
        setCommon(targetId, null, false);
    }

    /**
     * 设置成普通会员
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setCommon(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setCommon(targetId, __ctx, true);
    }

    private void setCommon(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCommon", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setCommon");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.setCommon(targetId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 设置成普通会员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setCommon(String targetId)
    {
        return begin_setCommon(targetId, null, false, null);
    }

    /**
     * 设置成普通会员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setCommon(String targetId, java.util.Map<String, String> __ctx)
    {
        return begin_setCommon(targetId, __ctx, true, null);
    }

    /**
     * 设置成普通会员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setCommon(String targetId, Ice.Callback __cb)
    {
        return begin_setCommon(targetId, null, false, __cb);
    }

    /**
     * 设置成普通会员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setCommon(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCommon(targetId, __ctx, true, __cb);
    }

    /**
     * 设置成普通会员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setCommon(String targetId, Callback_Faction_setCommon __cb)
    {
        return begin_setCommon(targetId, null, false, __cb);
    }

    /**
     * 设置成普通会员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setCommon(String targetId, java.util.Map<String, String> __ctx, Callback_Faction_setCommon __cb)
    {
        return begin_setCommon(targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCommon(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setCommon_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCommon_name, __cb);
        try
        {
            __result.__prepare(__setCommon_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_setCommon(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setCommon_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 设置成普通会员
     * @param __cb The callback object for the operation.
     **/
    public boolean setCommon_async(AMI_Faction_setCommon __cb, String targetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setCommon_name);
            __r = begin_setCommon(targetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setCommon_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 设置成普通会员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean setCommon_async(AMI_Faction_setCommon __cb, String targetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setCommon_name);
            __r = begin_setCommon(targetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setCommon_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setRecommendTechnology_name = "setRecommendTechnology";

    /**
     * 设置推荐科技
     **/
    public int setRecommendTechnology(int id)
        throws NoteException
    {
        return setRecommendTechnology(id, null, false);
    }

    /**
     * 设置推荐科技
     * @param __ctx The Context map to send with the invocation.
     **/
    public int setRecommendTechnology(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return setRecommendTechnology(id, __ctx, true);
    }

    private int setRecommendTechnology(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setRecommendTechnology", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setRecommendTechnology");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.setRecommendTechnology(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 设置推荐科技
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setRecommendTechnology(int id)
    {
        return begin_setRecommendTechnology(id, null, false, null);
    }

    /**
     * 设置推荐科技
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setRecommendTechnology(int id, java.util.Map<String, String> __ctx)
    {
        return begin_setRecommendTechnology(id, __ctx, true, null);
    }

    /**
     * 设置推荐科技
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setRecommendTechnology(int id, Ice.Callback __cb)
    {
        return begin_setRecommendTechnology(id, null, false, __cb);
    }

    /**
     * 设置推荐科技
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setRecommendTechnology(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setRecommendTechnology(id, __ctx, true, __cb);
    }

    /**
     * 设置推荐科技
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setRecommendTechnology(int id, Callback_Faction_setRecommendTechnology __cb)
    {
        return begin_setRecommendTechnology(id, null, false, __cb);
    }

    /**
     * 设置推荐科技
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setRecommendTechnology(int id, java.util.Map<String, String> __ctx, Callback_Faction_setRecommendTechnology __cb)
    {
        return begin_setRecommendTechnology(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setRecommendTechnology(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setRecommendTechnology_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setRecommendTechnology_name, __cb);
        try
        {
            __result.__prepare(__setRecommendTechnology_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_setRecommendTechnology(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setRecommendTechnology_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 设置推荐科技
     * @param __cb The callback object for the operation.
     **/
    public boolean setRecommendTechnology_async(AMI_Faction_setRecommendTechnology __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setRecommendTechnology_name);
            __r = begin_setRecommendTechnology(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setRecommendTechnology_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 设置推荐科技
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean setRecommendTechnology_async(AMI_Faction_setRecommendTechnology __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setRecommendTechnology_name);
            __r = begin_setRecommendTechnology(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setRecommendTechnology_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __startBattle_name = "startBattle";

    /**
     * 开打  type=0守方 1攻方
     **/
    public String startBattle(byte type)
        throws NoteException
    {
        return startBattle(type, null, false);
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __ctx The Context map to send with the invocation.
     **/
    public String startBattle(byte type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return startBattle(type, __ctx, true);
    }

    private String startBattle(byte type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "startBattle", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("startBattle");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.startBattle(type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_startBattle(byte type)
    {
        return begin_startBattle(type, null, false, null);
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_startBattle(byte type, java.util.Map<String, String> __ctx)
    {
        return begin_startBattle(type, __ctx, true, null);
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_startBattle(byte type, Ice.Callback __cb)
    {
        return begin_startBattle(type, null, false, __cb);
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_startBattle(byte type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startBattle(type, __ctx, true, __cb);
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_startBattle(byte type, Callback_Faction_startBattle __cb)
    {
        return begin_startBattle(type, null, false, __cb);
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_startBattle(byte type, java.util.Map<String, String> __ctx, Callback_Faction_startBattle __cb)
    {
        return begin_startBattle(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_startBattle(byte type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startBattle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __startBattle_name, __cb);
        try
        {
            __result.__prepare(__startBattle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_startBattle(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __startBattle_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     **/
    public boolean startBattle_async(AMI_Faction_startBattle __cb, byte type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__startBattle_name);
            __r = begin_startBattle(type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __startBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean startBattle_async(AMI_Faction_startBattle __cb, byte type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__startBattle_name);
            __r = begin_startBattle(type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __startBattle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __storehousePurchase_name = "storehousePurchase";

    /**
     * 栈房购置物品
     **/
    public void storehousePurchase(String itemId, int num)
        throws NoteException
    {
        storehousePurchase(itemId, num, null, false);
    }

    /**
     * 栈房购置物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public void storehousePurchase(String itemId, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        storehousePurchase(itemId, num, __ctx, true);
    }

    private void storehousePurchase(String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "storehousePurchase", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("storehousePurchase");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.storehousePurchase(itemId, num, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 栈房购置物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_storehousePurchase(String itemId, int num)
    {
        return begin_storehousePurchase(itemId, num, null, false, null);
    }

    /**
     * 栈房购置物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_storehousePurchase(String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_storehousePurchase(itemId, num, __ctx, true, null);
    }

    /**
     * 栈房购置物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_storehousePurchase(String itemId, int num, Ice.Callback __cb)
    {
        return begin_storehousePurchase(itemId, num, null, false, __cb);
    }

    /**
     * 栈房购置物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_storehousePurchase(String itemId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_storehousePurchase(itemId, num, __ctx, true, __cb);
    }

    /**
     * 栈房购置物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_storehousePurchase(String itemId, int num, Callback_Faction_storehousePurchase __cb)
    {
        return begin_storehousePurchase(itemId, num, null, false, __cb);
    }

    /**
     * 栈房购置物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_storehousePurchase(String itemId, int num, java.util.Map<String, String> __ctx, Callback_Faction_storehousePurchase __cb)
    {
        return begin_storehousePurchase(itemId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_storehousePurchase(String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__storehousePurchase_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __storehousePurchase_name, __cb);
        try
        {
            __result.__prepare(__storehousePurchase_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_storehousePurchase(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __storehousePurchase_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 栈房购置物品
     * @param __cb The callback object for the operation.
     **/
    public boolean storehousePurchase_async(AMI_Faction_storehousePurchase __cb, String itemId, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__storehousePurchase_name);
            __r = begin_storehousePurchase(itemId, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __storehousePurchase_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 栈房购置物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean storehousePurchase_async(AMI_Faction_storehousePurchase __cb, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__storehousePurchase_name);
            __r = begin_storehousePurchase(itemId, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __storehousePurchase_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __studyTechnology_name = "studyTechnology";

    /**
     * 研究公会科技
     **/
    public void studyTechnology(int id)
        throws NoteException
    {
        studyTechnology(id, null, false);
    }

    /**
     * 研究公会科技
     * @param __ctx The Context map to send with the invocation.
     **/
    public void studyTechnology(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        studyTechnology(id, __ctx, true);
    }

    private void studyTechnology(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "studyTechnology", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("studyTechnology");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.studyTechnology(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 研究公会科技
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_studyTechnology(int id)
    {
        return begin_studyTechnology(id, null, false, null);
    }

    /**
     * 研究公会科技
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_studyTechnology(int id, java.util.Map<String, String> __ctx)
    {
        return begin_studyTechnology(id, __ctx, true, null);
    }

    /**
     * 研究公会科技
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_studyTechnology(int id, Ice.Callback __cb)
    {
        return begin_studyTechnology(id, null, false, __cb);
    }

    /**
     * 研究公会科技
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_studyTechnology(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_studyTechnology(id, __ctx, true, __cb);
    }

    /**
     * 研究公会科技
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_studyTechnology(int id, Callback_Faction_studyTechnology __cb)
    {
        return begin_studyTechnology(id, null, false, __cb);
    }

    /**
     * 研究公会科技
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_studyTechnology(int id, java.util.Map<String, String> __ctx, Callback_Faction_studyTechnology __cb)
    {
        return begin_studyTechnology(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_studyTechnology(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__studyTechnology_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __studyTechnology_name, __cb);
        try
        {
            __result.__prepare(__studyTechnology_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_studyTechnology(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __studyTechnology_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 研究公会科技
     * @param __cb The callback object for the operation.
     **/
    public boolean studyTechnology_async(AMI_Faction_studyTechnology __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__studyTechnology_name);
            __r = begin_studyTechnology(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __studyTechnology_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 研究公会科技
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean studyTechnology_async(AMI_Faction_studyTechnology __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__studyTechnology_name);
            __r = begin_studyTechnology(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __studyTechnology_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __technologyList_name = "technologyList";

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     **/
    public String technologyList()
        throws NoteException
    {
        return technologyList(null, false);
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String technologyList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return technologyList(__ctx, true);
    }

    private String technologyList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "technologyList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("technologyList");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.technologyList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_technologyList()
    {
        return begin_technologyList(null, false, null);
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_technologyList(java.util.Map<String, String> __ctx)
    {
        return begin_technologyList(__ctx, true, null);
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_technologyList(Ice.Callback __cb)
    {
        return begin_technologyList(null, false, __cb);
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_technologyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_technologyList(__ctx, true, __cb);
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_technologyList(Callback_Faction_technologyList __cb)
    {
        return begin_technologyList(null, false, __cb);
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_technologyList(java.util.Map<String, String> __ctx, Callback_Faction_technologyList __cb)
    {
        return begin_technologyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_technologyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__technologyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __technologyList_name, __cb);
        try
        {
            __result.__prepare(__technologyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_technologyList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __technologyList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean technologyList_async(AMI_Faction_technologyList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__technologyList_name);
            __r = begin_technologyList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __technologyList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean technologyList_async(AMI_Faction_technologyList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__technologyList_name);
            __r = begin_technologyList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __technologyList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __transferFaction_name = "transferFaction";

    /**
     * 转让公会(升为会长)
     **/
    public void transferFaction(String targetId)
        throws NoteException
    {
        transferFaction(targetId, null, false);
    }

    /**
     * 转让公会(升为会长)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void transferFaction(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        transferFaction(targetId, __ctx, true);
    }

    private void transferFaction(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "transferFaction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("transferFaction");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.transferFaction(targetId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 转让公会(升为会长)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_transferFaction(String targetId)
    {
        return begin_transferFaction(targetId, null, false, null);
    }

    /**
     * 转让公会(升为会长)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_transferFaction(String targetId, java.util.Map<String, String> __ctx)
    {
        return begin_transferFaction(targetId, __ctx, true, null);
    }

    /**
     * 转让公会(升为会长)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_transferFaction(String targetId, Ice.Callback __cb)
    {
        return begin_transferFaction(targetId, null, false, __cb);
    }

    /**
     * 转让公会(升为会长)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_transferFaction(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_transferFaction(targetId, __ctx, true, __cb);
    }

    /**
     * 转让公会(升为会长)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_transferFaction(String targetId, Callback_Faction_transferFaction __cb)
    {
        return begin_transferFaction(targetId, null, false, __cb);
    }

    /**
     * 转让公会(升为会长)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_transferFaction(String targetId, java.util.Map<String, String> __ctx, Callback_Faction_transferFaction __cb)
    {
        return begin_transferFaction(targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_transferFaction(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__transferFaction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __transferFaction_name, __cb);
        try
        {
            __result.__prepare(__transferFaction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_transferFaction(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __transferFaction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 转让公会(升为会长)
     * @param __cb The callback object for the operation.
     **/
    public boolean transferFaction_async(AMI_Faction_transferFaction __cb, String targetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__transferFaction_name);
            __r = begin_transferFaction(targetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __transferFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 转让公会(升为会长)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean transferFaction_async(AMI_Faction_transferFaction __cb, String targetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__transferFaction_name);
            __r = begin_transferFaction(targetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __transferFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __upElder_name = "upElder";

    /**
     * 升为长老
     **/
    public void upElder(String targetId)
        throws NoteException
    {
        upElder(targetId, null, false);
    }

    /**
     * 升为长老
     * @param __ctx The Context map to send with the invocation.
     **/
    public void upElder(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        upElder(targetId, __ctx, true);
    }

    private void upElder(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "upElder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("upElder");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.upElder(targetId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 升为长老
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upElder(String targetId)
    {
        return begin_upElder(targetId, null, false, null);
    }

    /**
     * 升为长老
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upElder(String targetId, java.util.Map<String, String> __ctx)
    {
        return begin_upElder(targetId, __ctx, true, null);
    }

    /**
     * 升为长老
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upElder(String targetId, Ice.Callback __cb)
    {
        return begin_upElder(targetId, null, false, __cb);
    }

    /**
     * 升为长老
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upElder(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_upElder(targetId, __ctx, true, __cb);
    }

    /**
     * 升为长老
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_upElder(String targetId, Callback_Faction_upElder __cb)
    {
        return begin_upElder(targetId, null, false, __cb);
    }

    /**
     * 升为长老
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_upElder(String targetId, java.util.Map<String, String> __ctx, Callback_Faction_upElder __cb)
    {
        return begin_upElder(targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_upElder(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__upElder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __upElder_name, __cb);
        try
        {
            __result.__prepare(__upElder_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_upElder(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __upElder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 升为长老
     * @param __cb The callback object for the operation.
     **/
    public boolean upElder_async(AMI_Faction_upElder __cb, String targetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__upElder_name);
            __r = begin_upElder(targetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __upElder_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 升为长老
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean upElder_async(AMI_Faction_upElder __cb, String targetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__upElder_name);
            __r = begin_upElder(targetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __upElder_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __updateNotice_name = "updateNotice";

    /**
     * 修改公会公告
     **/
    public void updateNotice(String newNotice)
        throws NoteException
    {
        updateNotice(newNotice, null, false);
    }

    /**
     * 修改公会公告
     * @param __ctx The Context map to send with the invocation.
     **/
    public void updateNotice(String newNotice, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        updateNotice(newNotice, __ctx, true);
    }

    private void updateNotice(String newNotice, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "updateNotice", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("updateNotice");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.updateNotice(newNotice, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 修改公会公告
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateNotice(String newNotice)
    {
        return begin_updateNotice(newNotice, null, false, null);
    }

    /**
     * 修改公会公告
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateNotice(String newNotice, java.util.Map<String, String> __ctx)
    {
        return begin_updateNotice(newNotice, __ctx, true, null);
    }

    /**
     * 修改公会公告
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateNotice(String newNotice, Ice.Callback __cb)
    {
        return begin_updateNotice(newNotice, null, false, __cb);
    }

    /**
     * 修改公会公告
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateNotice(String newNotice, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateNotice(newNotice, __ctx, true, __cb);
    }

    /**
     * 修改公会公告
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateNotice(String newNotice, Callback_Faction_updateNotice __cb)
    {
        return begin_updateNotice(newNotice, null, false, __cb);
    }

    /**
     * 修改公会公告
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateNotice(String newNotice, java.util.Map<String, String> __ctx, Callback_Faction_updateNotice __cb)
    {
        return begin_updateNotice(newNotice, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateNotice(String newNotice, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateNotice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateNotice_name, __cb);
        try
        {
            __result.__prepare(__updateNotice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(newNotice);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_updateNotice(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __updateNotice_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 修改公会公告
     * @param __cb The callback object for the operation.
     **/
    public boolean updateNotice_async(AMI_Faction_updateNotice __cb, String newNotice)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__updateNotice_name);
            __r = begin_updateNotice(newNotice, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __updateNotice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 修改公会公告
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean updateNotice_async(AMI_Faction_updateNotice __cb, String newNotice, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__updateNotice_name);
            __r = begin_updateNotice(newNotice, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __updateNotice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __useKits_name = "useKits";

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     **/
    public String useKits(int kitsId)
        throws NoteException
    {
        return useKits(kitsId, null, false);
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __ctx The Context map to send with the invocation.
     **/
    public String useKits(int kitsId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return useKits(kitsId, __ctx, true);
    }

    private String useKits(int kitsId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "useKits", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("useKits");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    return __del.useKits(kitsId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_useKits(int kitsId)
    {
        return begin_useKits(kitsId, null, false, null);
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_useKits(int kitsId, java.util.Map<String, String> __ctx)
    {
        return begin_useKits(kitsId, __ctx, true, null);
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_useKits(int kitsId, Ice.Callback __cb)
    {
        return begin_useKits(kitsId, null, false, __cb);
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_useKits(int kitsId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_useKits(kitsId, __ctx, true, __cb);
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_useKits(int kitsId, Callback_Faction_useKits __cb)
    {
        return begin_useKits(kitsId, null, false, __cb);
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_useKits(int kitsId, java.util.Map<String, String> __ctx, Callback_Faction_useKits __cb)
    {
        return begin_useKits(kitsId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_useKits(int kitsId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__useKits_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __useKits_name, __cb);
        try
        {
            __result.__prepare(__useKits_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(kitsId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_useKits(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __useKits_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __cb The callback object for the operation.
     **/
    public boolean useKits_async(AMI_Faction_useKits __cb, int kitsId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__useKits_name);
            __r = begin_useKits(kitsId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __useKits_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean useKits_async(AMI_Faction_useKits __cb, int kitsId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__useKits_name);
            __r = begin_useKits(kitsId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __useKits_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __warehouseAllot_name = "warehouseAllot";

    /**
     * 仓库分配物品
     **/
    public void warehouseAllot(String roleId, String itemId, int num)
        throws NoteException
    {
        warehouseAllot(roleId, itemId, num, null, false);
    }

    /**
     * 仓库分配物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public void warehouseAllot(String roleId, String itemId, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        warehouseAllot(roleId, itemId, num, __ctx, true);
    }

    private void warehouseAllot(String roleId, String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "warehouseAllot", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("warehouseAllot");
                    __delBase = __getDelegate(false);
                    _FactionDel __del = (_FactionDel)__delBase;
                    __del.warehouseAllot(roleId, itemId, num, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_warehouseAllot(String roleId, String itemId, int num)
    {
        return begin_warehouseAllot(roleId, itemId, num, null, false, null);
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_warehouseAllot(String roleId, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_warehouseAllot(roleId, itemId, num, __ctx, true, null);
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_warehouseAllot(String roleId, String itemId, int num, Ice.Callback __cb)
    {
        return begin_warehouseAllot(roleId, itemId, num, null, false, __cb);
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_warehouseAllot(String roleId, String itemId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_warehouseAllot(roleId, itemId, num, __ctx, true, __cb);
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_warehouseAllot(String roleId, String itemId, int num, Callback_Faction_warehouseAllot __cb)
    {
        return begin_warehouseAllot(roleId, itemId, num, null, false, __cb);
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_warehouseAllot(String roleId, String itemId, int num, java.util.Map<String, String> __ctx, Callback_Faction_warehouseAllot __cb)
    {
        return begin_warehouseAllot(roleId, itemId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_warehouseAllot(String roleId, String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__warehouseAllot_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __warehouseAllot_name, __cb);
        try
        {
            __result.__prepare(__warehouseAllot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __os.writeString(itemId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_warehouseAllot(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __warehouseAllot_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     **/
    public boolean warehouseAllot_async(AMI_Faction_warehouseAllot __cb, String roleId, String itemId, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__warehouseAllot_name);
            __r = begin_warehouseAllot(roleId, itemId, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __warehouseAllot_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean warehouseAllot_async(AMI_Faction_warehouseAllot __cb, String roleId, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__warehouseAllot_name);
            __r = begin_warehouseAllot(roleId, itemId, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __warehouseAllot_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static FactionPrx checkedCast(Ice.ObjectPrx __obj)
    {
        FactionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FactionPrx)
            {
                __d = (FactionPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    FactionPrxHelper __h = new FactionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static FactionPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        FactionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FactionPrx)
            {
                __d = (FactionPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    FactionPrxHelper __h = new FactionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static FactionPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        FactionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    FactionPrxHelper __h = new FactionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static FactionPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        FactionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    FactionPrxHelper __h = new FactionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static FactionPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        FactionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FactionPrx)
            {
                __d = (FactionPrx)__obj;
            }
            else
            {
                FactionPrxHelper __h = new FactionPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static FactionPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        FactionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            FactionPrxHelper __h = new FactionPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Faction"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _FactionDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _FactionDelD();
    }

    public static void __write(IceInternal.BasicStream __os, FactionPrx v)
    {
        __os.writeProxy(v);
    }

    public static FactionPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            FactionPrxHelper result = new FactionPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
