// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Activity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 比赛场次
 **/
public class FootballMatch implements java.lang.Cloneable, java.io.Serializable
{
    public int id;

    public int gameStatus;

    public int leftScore;

    public int rightScore;

    public int betCountryId;

    public int betNum;

    public String date;

    public String time;

    public int leftCountryId;

    public int rightCountryId;

    public double leftWinRate;

    public double rightWinRate;

    public double drawRate;

    public int minBet;

    public int maxBet;

    public long startBetDate;

    public long endBetDate;

    public int gameType;

    public FootballMatch()
    {
    }

    public FootballMatch(int id, int gameStatus, int leftScore, int rightScore, int betCountryId, int betNum, String date, String time, int leftCountryId, int rightCountryId, double leftWinRate, double rightWinRate, double drawRate, int minBet, int maxBet, long startBetDate, long endBetDate, int gameType)
    {
        this.id = id;
        this.gameStatus = gameStatus;
        this.leftScore = leftScore;
        this.rightScore = rightScore;
        this.betCountryId = betCountryId;
        this.betNum = betNum;
        this.date = date;
        this.time = time;
        this.leftCountryId = leftCountryId;
        this.rightCountryId = rightCountryId;
        this.leftWinRate = leftWinRate;
        this.rightWinRate = rightWinRate;
        this.drawRate = drawRate;
        this.minBet = minBet;
        this.maxBet = maxBet;
        this.startBetDate = startBetDate;
        this.endBetDate = endBetDate;
        this.gameType = gameType;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FootballMatch _r = null;
        if(rhs instanceof FootballMatch)
        {
            _r = (FootballMatch)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(gameStatus != _r.gameStatus)
            {
                return false;
            }
            if(leftScore != _r.leftScore)
            {
                return false;
            }
            if(rightScore != _r.rightScore)
            {
                return false;
            }
            if(betCountryId != _r.betCountryId)
            {
                return false;
            }
            if(betNum != _r.betNum)
            {
                return false;
            }
            if(date != _r.date)
            {
                if(date == null || _r.date == null || !date.equals(_r.date))
                {
                    return false;
                }
            }
            if(time != _r.time)
            {
                if(time == null || _r.time == null || !time.equals(_r.time))
                {
                    return false;
                }
            }
            if(leftCountryId != _r.leftCountryId)
            {
                return false;
            }
            if(rightCountryId != _r.rightCountryId)
            {
                return false;
            }
            if(leftWinRate != _r.leftWinRate)
            {
                return false;
            }
            if(rightWinRate != _r.rightWinRate)
            {
                return false;
            }
            if(drawRate != _r.drawRate)
            {
                return false;
            }
            if(minBet != _r.minBet)
            {
                return false;
            }
            if(maxBet != _r.maxBet)
            {
                return false;
            }
            if(startBetDate != _r.startBetDate)
            {
                return false;
            }
            if(endBetDate != _r.endBetDate)
            {
                return false;
            }
            if(gameType != _r.gameType)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FootballMatch");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, gameStatus);
        __h = IceInternal.HashUtil.hashAdd(__h, leftScore);
        __h = IceInternal.HashUtil.hashAdd(__h, rightScore);
        __h = IceInternal.HashUtil.hashAdd(__h, betCountryId);
        __h = IceInternal.HashUtil.hashAdd(__h, betNum);
        __h = IceInternal.HashUtil.hashAdd(__h, date);
        __h = IceInternal.HashUtil.hashAdd(__h, time);
        __h = IceInternal.HashUtil.hashAdd(__h, leftCountryId);
        __h = IceInternal.HashUtil.hashAdd(__h, rightCountryId);
        __h = IceInternal.HashUtil.hashAdd(__h, leftWinRate);
        __h = IceInternal.HashUtil.hashAdd(__h, rightWinRate);
        __h = IceInternal.HashUtil.hashAdd(__h, drawRate);
        __h = IceInternal.HashUtil.hashAdd(__h, minBet);
        __h = IceInternal.HashUtil.hashAdd(__h, maxBet);
        __h = IceInternal.HashUtil.hashAdd(__h, startBetDate);
        __h = IceInternal.HashUtil.hashAdd(__h, endBetDate);
        __h = IceInternal.HashUtil.hashAdd(__h, gameType);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(id);
        __os.writeInt(gameStatus);
        __os.writeInt(leftScore);
        __os.writeInt(rightScore);
        __os.writeInt(betCountryId);
        __os.writeInt(betNum);
        __os.writeString(date);
        __os.writeString(time);
        __os.writeInt(leftCountryId);
        __os.writeInt(rightCountryId);
        __os.writeDouble(leftWinRate);
        __os.writeDouble(rightWinRate);
        __os.writeDouble(drawRate);
        __os.writeInt(minBet);
        __os.writeInt(maxBet);
        __os.writeLong(startBetDate);
        __os.writeLong(endBetDate);
        __os.writeInt(gameType);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readInt();
        gameStatus = __is.readInt();
        leftScore = __is.readInt();
        rightScore = __is.readInt();
        betCountryId = __is.readInt();
        betNum = __is.readInt();
        date = __is.readString();
        time = __is.readString();
        leftCountryId = __is.readInt();
        rightCountryId = __is.readInt();
        leftWinRate = __is.readDouble();
        rightWinRate = __is.readDouble();
        drawRate = __is.readDouble();
        minBet = __is.readInt();
        maxBet = __is.readInt();
        startBetDate = __is.readLong();
        endBetDate = __is.readLong();
        gameType = __is.readInt();
    }

    public static final long serialVersionUID = 1641507177L;
}
