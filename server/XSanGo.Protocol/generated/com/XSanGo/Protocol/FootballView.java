// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Activity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 竞猜界面VIEW
 **/
public class FootballView implements java.lang.Cloneable, java.io.Serializable
{
    public long serverTime;

    public String beginDate;

    public String endDate;

    public boolean isFirst;

    public boolean isOverFirst;

    public int trophyNum;

    public int buyNum;

    public FootballMatch[] matchs;

    public FootballView()
    {
    }

    public FootballView(long serverTime, String beginDate, String endDate, boolean isFirst, boolean isOverFirst, int trophyNum, int buyNum, FootballMatch[] matchs)
    {
        this.serverTime = serverTime;
        this.beginDate = beginDate;
        this.endDate = endDate;
        this.isFirst = isFirst;
        this.isOverFirst = isOverFirst;
        this.trophyNum = trophyNum;
        this.buyNum = buyNum;
        this.matchs = matchs;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FootballView _r = null;
        if(rhs instanceof FootballView)
        {
            _r = (FootballView)rhs;
        }

        if(_r != null)
        {
            if(serverTime != _r.serverTime)
            {
                return false;
            }
            if(beginDate != _r.beginDate)
            {
                if(beginDate == null || _r.beginDate == null || !beginDate.equals(_r.beginDate))
                {
                    return false;
                }
            }
            if(endDate != _r.endDate)
            {
                if(endDate == null || _r.endDate == null || !endDate.equals(_r.endDate))
                {
                    return false;
                }
            }
            if(isFirst != _r.isFirst)
            {
                return false;
            }
            if(isOverFirst != _r.isOverFirst)
            {
                return false;
            }
            if(trophyNum != _r.trophyNum)
            {
                return false;
            }
            if(buyNum != _r.buyNum)
            {
                return false;
            }
            if(!java.util.Arrays.equals(matchs, _r.matchs))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::FootballView");
        __h = IceInternal.HashUtil.hashAdd(__h, serverTime);
        __h = IceInternal.HashUtil.hashAdd(__h, beginDate);
        __h = IceInternal.HashUtil.hashAdd(__h, endDate);
        __h = IceInternal.HashUtil.hashAdd(__h, isFirst);
        __h = IceInternal.HashUtil.hashAdd(__h, isOverFirst);
        __h = IceInternal.HashUtil.hashAdd(__h, trophyNum);
        __h = IceInternal.HashUtil.hashAdd(__h, buyNum);
        __h = IceInternal.HashUtil.hashAdd(__h, matchs);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(serverTime);
        __os.writeString(beginDate);
        __os.writeString(endDate);
        __os.writeBool(isFirst);
        __os.writeBool(isOverFirst);
        __os.writeInt(trophyNum);
        __os.writeInt(buyNum);
        FootballMatchSeqHelper.write(__os, matchs);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        serverTime = __is.readLong();
        beginDate = __is.readString();
        endDate = __is.readString();
        isFirst = __is.readBool();
        isOverFirst = __is.readBool();
        trophyNum = __is.readInt();
        buyNum = __is.readInt();
        matchs = FootballMatchSeqHelper.read(__is);
    }

    public static final long serialVersionUID = -1810692132L;
}
