// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Formation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class FormationPrxHelper extends Ice.ObjectPrxHelperBase implements FormationPrx
{
    private static final String __clearFormation_name = "clearFormation";

    public void clearFormation(String formationId)
        throws NoteException
    {
        clearFormation(formationId, null, false);
    }

    public void clearFormation(String formationId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        clearFormation(formationId, __ctx, true);
    }

    private void clearFormation(String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearFormation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clearFormation");
                    __delBase = __getDelegate(false);
                    _FormationDel __del = (_FormationDel)__delBase;
                    __del.clearFormation(formationId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_clearFormation(String formationId)
    {
        return begin_clearFormation(formationId, null, false, null);
    }

    public Ice.AsyncResult begin_clearFormation(String formationId, java.util.Map<String, String> __ctx)
    {
        return begin_clearFormation(formationId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_clearFormation(String formationId, Ice.Callback __cb)
    {
        return begin_clearFormation(formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_clearFormation(String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearFormation(formationId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_clearFormation(String formationId, Callback_Formation_clearFormation __cb)
    {
        return begin_clearFormation(formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_clearFormation(String formationId, java.util.Map<String, String> __ctx, Callback_Formation_clearFormation __cb)
    {
        return begin_clearFormation(formationId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearFormation(String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearFormation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearFormation_name, __cb);
        try
        {
            __result.__prepare(__clearFormation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(formationId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_clearFormation(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clearFormation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean clearFormation_async(AMI_Formation_clearFormation __cb, String formationId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearFormation_name);
            __r = begin_clearFormation(formationId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearFormation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean clearFormation_async(AMI_Formation_clearFormation __cb, String formationId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearFormation_name);
            __r = begin_clearFormation(formationId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearFormation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFormationList_name = "getFormationList";

    public FormationView[] getFormationList()
    {
        return getFormationList(null, false);
    }

    public FormationView[] getFormationList(java.util.Map<String, String> __ctx)
    {
        return getFormationList(__ctx, true);
    }

    private FormationView[] getFormationList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFormationList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFormationList");
                    __delBase = __getDelegate(false);
                    _FormationDel __del = (_FormationDel)__delBase;
                    return __del.getFormationList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFormationList()
    {
        return begin_getFormationList(null, false, null);
    }

    public Ice.AsyncResult begin_getFormationList(java.util.Map<String, String> __ctx)
    {
        return begin_getFormationList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFormationList(Ice.Callback __cb)
    {
        return begin_getFormationList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFormationList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFormationList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFormationList(Callback_Formation_getFormationList __cb)
    {
        return begin_getFormationList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFormationList(java.util.Map<String, String> __ctx, Callback_Formation_getFormationList __cb)
    {
        return begin_getFormationList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFormationList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFormationList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFormationList_name, __cb);
        try
        {
            __result.__prepare(__getFormationList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public FormationView[] end_getFormationList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFormationList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FormationView[] __ret;
            __ret = FormationViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFormationList_async(AMI_Formation_getFormationList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFormationList_name);
            __r = begin_getFormationList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFormationList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFormationList_async(AMI_Formation_getFormationList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFormationList_name);
            __r = begin_getFormationList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFormationList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setFormationBuff_name = "setFormationBuff";

    public void setFormationBuff(String formationId, String bookId)
    {
        setFormationBuff(formationId, bookId, null, false);
    }

    public void setFormationBuff(String formationId, String bookId, java.util.Map<String, String> __ctx)
    {
        setFormationBuff(formationId, bookId, __ctx, true);
    }

    private void setFormationBuff(String formationId, String bookId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setFormationBuff", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FormationDel __del = (_FormationDel)__delBase;
                    __del.setFormationBuff(formationId, bookId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setFormationBuff(String formationId, String bookId)
    {
        return begin_setFormationBuff(formationId, bookId, null, false, null);
    }

    public Ice.AsyncResult begin_setFormationBuff(String formationId, String bookId, java.util.Map<String, String> __ctx)
    {
        return begin_setFormationBuff(formationId, bookId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setFormationBuff(String formationId, String bookId, Ice.Callback __cb)
    {
        return begin_setFormationBuff(formationId, bookId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFormationBuff(String formationId, String bookId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setFormationBuff(formationId, bookId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setFormationBuff(String formationId, String bookId, Callback_Formation_setFormationBuff __cb)
    {
        return begin_setFormationBuff(formationId, bookId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFormationBuff(String formationId, String bookId, java.util.Map<String, String> __ctx, Callback_Formation_setFormationBuff __cb)
    {
        return begin_setFormationBuff(formationId, bookId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setFormationBuff(String formationId, String bookId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setFormationBuff_name, __cb);
        try
        {
            __result.__prepare(__setFormationBuff_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(formationId);
            __os.writeString(bookId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setFormationBuff(Ice.AsyncResult __result)
    {
        __end(__result, __setFormationBuff_name);
    }

    public boolean setFormationBuff_async(AMI_Formation_setFormationBuff __cb, String formationId, String bookId)
    {
        Ice.AsyncResult __r = begin_setFormationBuff(formationId, bookId, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean setFormationBuff_async(AMI_Formation_setFormationBuff __cb, String formationId, String bookId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_setFormationBuff(formationId, bookId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __setFormationPosition_name = "setFormationPosition";

    public void setFormationPosition(String formationId, byte postion, String heroId)
        throws NoteException
    {
        setFormationPosition(formationId, postion, heroId, null, false);
    }

    public void setFormationPosition(String formationId, byte postion, String heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setFormationPosition(formationId, postion, heroId, __ctx, true);
    }

    private void setFormationPosition(String formationId, byte postion, String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setFormationPosition", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setFormationPosition");
                    __delBase = __getDelegate(false);
                    _FormationDel __del = (_FormationDel)__delBase;
                    __del.setFormationPosition(formationId, postion, heroId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setFormationPosition(String formationId, byte postion, String heroId)
    {
        return begin_setFormationPosition(formationId, postion, heroId, null, false, null);
    }

    public Ice.AsyncResult begin_setFormationPosition(String formationId, byte postion, String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_setFormationPosition(formationId, postion, heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setFormationPosition(String formationId, byte postion, String heroId, Ice.Callback __cb)
    {
        return begin_setFormationPosition(formationId, postion, heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFormationPosition(String formationId, byte postion, String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setFormationPosition(formationId, postion, heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setFormationPosition(String formationId, byte postion, String heroId, Callback_Formation_setFormationPosition __cb)
    {
        return begin_setFormationPosition(formationId, postion, heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFormationPosition(String formationId, byte postion, String heroId, java.util.Map<String, String> __ctx, Callback_Formation_setFormationPosition __cb)
    {
        return begin_setFormationPosition(formationId, postion, heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setFormationPosition(String formationId, byte postion, String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setFormationPosition_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setFormationPosition_name, __cb);
        try
        {
            __result.__prepare(__setFormationPosition_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(formationId);
            __os.writeByte(postion);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setFormationPosition(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setFormationPosition_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setFormationPosition_async(AMI_Formation_setFormationPosition __cb, String formationId, byte postion, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setFormationPosition_name);
            __r = begin_setFormationPosition(formationId, postion, heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setFormationPosition_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setFormationPosition_async(AMI_Formation_setFormationPosition __cb, String formationId, byte postion, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setFormationPosition_name);
            __r = begin_setFormationPosition(formationId, postion, heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setFormationPosition_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setFormationSkill_name = "setFormationSkill";

    public void setFormationSkill(String formationId, byte pos, int skillId)
    {
        setFormationSkill(formationId, pos, skillId, null, false);
    }

    public void setFormationSkill(String formationId, byte pos, int skillId, java.util.Map<String, String> __ctx)
    {
        setFormationSkill(formationId, pos, skillId, __ctx, true);
    }

    private void setFormationSkill(String formationId, byte pos, int skillId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setFormationSkill", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FormationDel __del = (_FormationDel)__delBase;
                    __del.setFormationSkill(formationId, pos, skillId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setFormationSkill(String formationId, byte pos, int skillId)
    {
        return begin_setFormationSkill(formationId, pos, skillId, null, false, null);
    }

    public Ice.AsyncResult begin_setFormationSkill(String formationId, byte pos, int skillId, java.util.Map<String, String> __ctx)
    {
        return begin_setFormationSkill(formationId, pos, skillId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setFormationSkill(String formationId, byte pos, int skillId, Ice.Callback __cb)
    {
        return begin_setFormationSkill(formationId, pos, skillId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFormationSkill(String formationId, byte pos, int skillId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setFormationSkill(formationId, pos, skillId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setFormationSkill(String formationId, byte pos, int skillId, Callback_Formation_setFormationSkill __cb)
    {
        return begin_setFormationSkill(formationId, pos, skillId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFormationSkill(String formationId, byte pos, int skillId, java.util.Map<String, String> __ctx, Callback_Formation_setFormationSkill __cb)
    {
        return begin_setFormationSkill(formationId, pos, skillId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setFormationSkill(String formationId, byte pos, int skillId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setFormationSkill_name, __cb);
        try
        {
            __result.__prepare(__setFormationSkill_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(formationId);
            __os.writeByte(pos);
            __os.writeInt(skillId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setFormationSkill(Ice.AsyncResult __result)
    {
        __end(__result, __setFormationSkill_name);
    }

    public boolean setFormationSkill_async(AMI_Formation_setFormationSkill __cb, String formationId, byte pos, int skillId)
    {
        Ice.AsyncResult __r = begin_setFormationSkill(formationId, pos, skillId, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean setFormationSkill_async(AMI_Formation_setFormationSkill __cb, String formationId, byte pos, int skillId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_setFormationSkill(formationId, pos, skillId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static FormationPrx checkedCast(Ice.ObjectPrx __obj)
    {
        FormationPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FormationPrx)
            {
                __d = (FormationPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    FormationPrxHelper __h = new FormationPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static FormationPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        FormationPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FormationPrx)
            {
                __d = (FormationPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    FormationPrxHelper __h = new FormationPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static FormationPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        FormationPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    FormationPrxHelper __h = new FormationPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static FormationPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        FormationPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    FormationPrxHelper __h = new FormationPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static FormationPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        FormationPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FormationPrx)
            {
                __d = (FormationPrx)__obj;
            }
            else
            {
                FormationPrxHelper __h = new FormationPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static FormationPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        FormationPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            FormationPrxHelper __h = new FormationPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Formation"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _FormationDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _FormationDelD();
    }

    public static void __write(IceInternal.BasicStream __os, FormationPrx v)
    {
        __os.writeProxy(v);
    }

    public static FormationPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            FormationPrxHelper result = new FormationPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
