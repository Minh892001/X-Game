// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FriendsRecall.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface FriendsRecallPrx extends Ice.ObjectPrx
{
    public String openRecall()
        throws NoteException;

    public String openRecall(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_openRecall();

    public Ice.AsyncResult begin_openRecall(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openRecall(Ice.Callback __cb);

    public Ice.AsyncResult begin_openRecall(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_openRecall(Callback_FriendsRecall_openRecall __cb);

    public Ice.AsyncResult begin_openRecall(java.util.Map<String, String> __ctx, Callback_FriendsRecall_openRecall __cb);

    public String end_openRecall(Ice.AsyncResult __result)
        throws NoteException;

    public boolean openRecall_async(AMI_FriendsRecall_openRecall __cb);

    public boolean openRecall_async(AMI_FriendsRecall_openRecall __cb, java.util.Map<String, String> __ctx);

    public String openInvitation()
        throws NoteException;

    public String openInvitation(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_openInvitation();

    public Ice.AsyncResult begin_openInvitation(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openInvitation(Ice.Callback __cb);

    public Ice.AsyncResult begin_openInvitation(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_openInvitation(Callback_FriendsRecall_openInvitation __cb);

    public Ice.AsyncResult begin_openInvitation(java.util.Map<String, String> __ctx, Callback_FriendsRecall_openInvitation __cb);

    public String end_openInvitation(Ice.AsyncResult __result)
        throws NoteException;

    public boolean openInvitation_async(AMI_FriendsRecall_openInvitation __cb);

    public boolean openInvitation_async(AMI_FriendsRecall_openInvitation __cb, java.util.Map<String, String> __ctx);

    public String activeInvitationCode(String code)
        throws NoteException;

    public String activeInvitationCode(String code, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_activeInvitationCode(String code);

    public Ice.AsyncResult begin_activeInvitationCode(String code, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_activeInvitationCode(String code, Ice.Callback __cb);

    public Ice.AsyncResult begin_activeInvitationCode(String code, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_activeInvitationCode(String code, Callback_FriendsRecall_activeInvitationCode __cb);

    public Ice.AsyncResult begin_activeInvitationCode(String code, java.util.Map<String, String> __ctx, Callback_FriendsRecall_activeInvitationCode __cb);

    public String end_activeInvitationCode(Ice.AsyncResult __result)
        throws NoteException;

    public boolean activeInvitationCode_async(AMI_FriendsRecall_activeInvitationCode __cb, String code);

    public boolean activeInvitationCode_async(AMI_FriendsRecall_activeInvitationCode __cb, String code, java.util.Map<String, String> __ctx);

    public String receiveTaskReward(int taskId)
        throws NotEnoughMoneyException,
               NoteException;

    public String receiveTaskReward(int taskId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_receiveTaskReward(int taskId);

    public Ice.AsyncResult begin_receiveTaskReward(int taskId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_receiveTaskReward(int taskId, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveTaskReward(int taskId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveTaskReward(int taskId, Callback_FriendsRecall_receiveTaskReward __cb);

    public Ice.AsyncResult begin_receiveTaskReward(int taskId, java.util.Map<String, String> __ctx, Callback_FriendsRecall_receiveTaskReward __cb);

    public String end_receiveTaskReward(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean receiveTaskReward_async(AMI_FriendsRecall_receiveTaskReward __cb, int taskId);

    public boolean receiveTaskReward_async(AMI_FriendsRecall_receiveTaskReward __cb, int taskId, java.util.Map<String, String> __ctx);

    public String showFriendsRecallIcon()
        throws NoteException;

    public String showFriendsRecallIcon(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_showFriendsRecallIcon();

    public Ice.AsyncResult begin_showFriendsRecallIcon(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_showFriendsRecallIcon(Ice.Callback __cb);

    public Ice.AsyncResult begin_showFriendsRecallIcon(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_showFriendsRecallIcon(Callback_FriendsRecall_showFriendsRecallIcon __cb);

    public Ice.AsyncResult begin_showFriendsRecallIcon(java.util.Map<String, String> __ctx, Callback_FriendsRecall_showFriendsRecallIcon __cb);

    public String end_showFriendsRecallIcon(Ice.AsyncResult __result)
        throws NoteException;

    public boolean showFriendsRecallIcon_async(AMI_FriendsRecall_showFriendsRecallIcon __cb);

    public boolean showFriendsRecallIcon_async(AMI_FriendsRecall_showFriendsRecallIcon __cb, java.util.Map<String, String> __ctx);

    public String randomOfflineRole(String currOfflineRoleId)
        throws NoteException;

    public String randomOfflineRole(String currOfflineRoleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_randomOfflineRole(String currOfflineRoleId);

    public Ice.AsyncResult begin_randomOfflineRole(String currOfflineRoleId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_randomOfflineRole(String currOfflineRoleId, Ice.Callback __cb);

    public Ice.AsyncResult begin_randomOfflineRole(String currOfflineRoleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_randomOfflineRole(String currOfflineRoleId, Callback_FriendsRecall_randomOfflineRole __cb);

    public Ice.AsyncResult begin_randomOfflineRole(String currOfflineRoleId, java.util.Map<String, String> __ctx, Callback_FriendsRecall_randomOfflineRole __cb);

    public String end_randomOfflineRole(Ice.AsyncResult __result)
        throws NoteException;

    public boolean randomOfflineRole_async(AMI_FriendsRecall_randomOfflineRole __cb, String currOfflineRoleId);

    public boolean randomOfflineRole_async(AMI_FriendsRecall_randomOfflineRole __cb, String currOfflineRoleId, java.util.Map<String, String> __ctx);
}
