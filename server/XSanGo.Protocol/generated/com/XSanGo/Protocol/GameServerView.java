// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Center.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class GameServerView implements java.lang.Cloneable, java.io.Serializable
{
    public int id;

    public String name;

    public int state;

    public int roleCount;

    public int showId;

    public String netgateAddress;

    public boolean isNew;

    public boolean isCpShowOnly;

    public boolean isCpEnterOnly;

    public int onlineLimit;

    public int targetId;

    public GameServerView()
    {
    }

    public GameServerView(int id, String name, int state, int roleCount, int showId, String netgateAddress, boolean isNew, boolean isCpShowOnly, boolean isCpEnterOnly, int onlineLimit, int targetId)
    {
        this.id = id;
        this.name = name;
        this.state = state;
        this.roleCount = roleCount;
        this.showId = showId;
        this.netgateAddress = netgateAddress;
        this.isNew = isNew;
        this.isCpShowOnly = isCpShowOnly;
        this.isCpEnterOnly = isCpEnterOnly;
        this.onlineLimit = onlineLimit;
        this.targetId = targetId;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        GameServerView _r = null;
        if(rhs instanceof GameServerView)
        {
            _r = (GameServerView)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(state != _r.state)
            {
                return false;
            }
            if(roleCount != _r.roleCount)
            {
                return false;
            }
            if(showId != _r.showId)
            {
                return false;
            }
            if(netgateAddress != _r.netgateAddress)
            {
                if(netgateAddress == null || _r.netgateAddress == null || !netgateAddress.equals(_r.netgateAddress))
                {
                    return false;
                }
            }
            if(isNew != _r.isNew)
            {
                return false;
            }
            if(isCpShowOnly != _r.isCpShowOnly)
            {
                return false;
            }
            if(isCpEnterOnly != _r.isCpEnterOnly)
            {
                return false;
            }
            if(onlineLimit != _r.onlineLimit)
            {
                return false;
            }
            if(targetId != _r.targetId)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::GameServerView");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, state);
        __h = IceInternal.HashUtil.hashAdd(__h, roleCount);
        __h = IceInternal.HashUtil.hashAdd(__h, showId);
        __h = IceInternal.HashUtil.hashAdd(__h, netgateAddress);
        __h = IceInternal.HashUtil.hashAdd(__h, isNew);
        __h = IceInternal.HashUtil.hashAdd(__h, isCpShowOnly);
        __h = IceInternal.HashUtil.hashAdd(__h, isCpEnterOnly);
        __h = IceInternal.HashUtil.hashAdd(__h, onlineLimit);
        __h = IceInternal.HashUtil.hashAdd(__h, targetId);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(id);
        __os.writeString(name);
        __os.writeInt(state);
        __os.writeInt(roleCount);
        __os.writeInt(showId);
        __os.writeString(netgateAddress);
        __os.writeBool(isNew);
        __os.writeBool(isCpShowOnly);
        __os.writeBool(isCpEnterOnly);
        __os.writeInt(onlineLimit);
        __os.writeInt(targetId);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readInt();
        name = __is.readString();
        state = __is.readInt();
        roleCount = __is.readInt();
        showId = __is.readInt();
        netgateAddress = __is.readString();
        isNew = __is.readBool();
        isCpShowOnly = __is.readBool();
        isCpEnterOnly = __is.readBool();
        onlineLimit = __is.readInt();
        targetId = __is.readInt();
    }

    public static final long serialVersionUID = 367664224L;
}
