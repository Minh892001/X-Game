// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `GameSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class GameSessionPrxHelper extends Ice.ObjectPrxHelperBase implements GameSessionPrx
{
    private static final String __destroy_name = "destroy";

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     **/
    public void destroy()
    {
        destroy(null, false);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "destroy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GameSessionDel __del = (_GameSessionDel)__delBase;
                    __del.destroy(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, null);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, null);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __destroy_name, __cb);
        try
        {
            __result.__prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_destroy(Ice.AsyncResult __result)
    {
        __end(__result, __destroy_name);
    }

    private static final String __destroyWarp_name = "destroyWarp";

    public void destroyWarp(boolean reconnectable)
    {
        destroyWarp(reconnectable, null, false);
    }

    public void destroyWarp(boolean reconnectable, java.util.Map<String, String> __ctx)
    {
        destroyWarp(reconnectable, __ctx, true);
    }

    private void destroyWarp(boolean reconnectable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "destroyWarp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GameSessionDel __del = (_GameSessionDel)__delBase;
                    __del.destroyWarp(reconnectable, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_destroyWarp(boolean reconnectable)
    {
        return begin_destroyWarp(reconnectable, null, false, null);
    }

    public Ice.AsyncResult begin_destroyWarp(boolean reconnectable, java.util.Map<String, String> __ctx)
    {
        return begin_destroyWarp(reconnectable, __ctx, true, null);
    }

    public Ice.AsyncResult begin_destroyWarp(boolean reconnectable, Ice.Callback __cb)
    {
        return begin_destroyWarp(reconnectable, null, false, __cb);
    }

    public Ice.AsyncResult begin_destroyWarp(boolean reconnectable, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroyWarp(reconnectable, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_destroyWarp(boolean reconnectable, Callback_GameSession_destroyWarp __cb)
    {
        return begin_destroyWarp(reconnectable, null, false, __cb);
    }

    public Ice.AsyncResult begin_destroyWarp(boolean reconnectable, java.util.Map<String, String> __ctx, Callback_GameSession_destroyWarp __cb)
    {
        return begin_destroyWarp(reconnectable, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_destroyWarp(boolean reconnectable, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __destroyWarp_name, __cb);
        try
        {
            __result.__prepare(__destroyWarp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(reconnectable);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_destroyWarp(Ice.AsyncResult __result)
    {
        __end(__result, __destroyWarp_name);
    }

    public boolean destroyWarp_async(AMI_GameSession_destroyWarp __cb, boolean reconnectable)
    {
        Ice.AsyncResult __r = begin_destroyWarp(reconnectable, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean destroyWarp_async(AMI_GameSession_destroyWarp __cb, boolean reconnectable, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_destroyWarp(reconnectable, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __getRole_name = "getRole";

    public RolePrx getRole()
    {
        return getRole(null, false);
    }

    public RolePrx getRole(java.util.Map<String, String> __ctx)
    {
        return getRole(__ctx, true);
    }

    private RolePrx getRole(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRole", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRole");
                    __delBase = __getDelegate(false);
                    _GameSessionDel __del = (_GameSessionDel)__delBase;
                    return __del.getRole(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRole()
    {
        return begin_getRole(null, false, null);
    }

    public Ice.AsyncResult begin_getRole(java.util.Map<String, String> __ctx)
    {
        return begin_getRole(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getRole(Ice.Callback __cb)
    {
        return begin_getRole(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRole(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRole(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRole(Callback_GameSession_getRole __cb)
    {
        return begin_getRole(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRole(java.util.Map<String, String> __ctx, Callback_GameSession_getRole __cb)
    {
        return begin_getRole(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRole(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRole_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRole_name, __cb);
        try
        {
            __result.__prepare(__getRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public RolePrx end_getRole(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRole_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RolePrx __ret;
            __ret = RolePrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getRole_async(AMI_GameSession_getRole __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRole_name);
            __r = begin_getRole(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getRole_async(AMI_GameSession_getRole __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRole_name);
            __r = begin_getRole(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setCallback_name = "setCallback";

    public void setCallback(GameSessionCallbackPrx cb)
    {
        setCallback(cb, null, false);
    }

    public void setCallback(GameSessionCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        setCallback(cb, __ctx, true);
    }

    private void setCallback(GameSessionCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCallback", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GameSessionDel __del = (_GameSessionDel)__delBase;
                    __del.setCallback(cb, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCallback(GameSessionCallbackPrx cb)
    {
        return begin_setCallback(cb, null, false, null);
    }

    public Ice.AsyncResult begin_setCallback(GameSessionCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        return begin_setCallback(cb, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCallback(GameSessionCallbackPrx cb, Ice.Callback __cb)
    {
        return begin_setCallback(cb, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(GameSessionCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCallback(cb, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCallback(GameSessionCallbackPrx cb, Callback_GameSession_setCallback __cb)
    {
        return begin_setCallback(cb, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(GameSessionCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_GameSession_setCallback __cb)
    {
        return begin_setCallback(cb, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCallback(GameSessionCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCallback_name, __cb);
        try
        {
            __result.__prepare(__setCallback_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            GameSessionCallbackPrxHelper.__write(__os, cb);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCallback(Ice.AsyncResult __result)
    {
        __end(__result, __setCallback_name);
    }

    public boolean setCallback_async(AMI_GameSession_setCallback __cb, GameSessionCallbackPrx cb)
    {
        Ice.AsyncResult __r = begin_setCallback(cb, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean setCallback_async(AMI_GameSession_setCallback __cb, GameSessionCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_setCallback(cb, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __syncTime_name = "syncTime";

    public void syncTime()
    {
        syncTime(null, false);
    }

    public void syncTime(java.util.Map<String, String> __ctx)
    {
        syncTime(__ctx, true);
    }

    private void syncTime(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "syncTime", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GameSessionDel __del = (_GameSessionDel)__delBase;
                    __del.syncTime(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_syncTime()
    {
        return begin_syncTime(null, false, null);
    }

    public Ice.AsyncResult begin_syncTime(java.util.Map<String, String> __ctx)
    {
        return begin_syncTime(__ctx, true, null);
    }

    public Ice.AsyncResult begin_syncTime(Ice.Callback __cb)
    {
        return begin_syncTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_syncTime(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_syncTime(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_syncTime(Callback_GameSession_syncTime __cb)
    {
        return begin_syncTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_syncTime(java.util.Map<String, String> __ctx, Callback_GameSession_syncTime __cb)
    {
        return begin_syncTime(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_syncTime(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __syncTime_name, __cb);
        try
        {
            __result.__prepare(__syncTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_syncTime(Ice.AsyncResult __result)
    {
        __end(__result, __syncTime_name);
    }

    public boolean syncTime_async(AMI_GameSession_syncTime __cb)
    {
        Ice.AsyncResult __r = begin_syncTime(null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean syncTime_async(AMI_GameSession_syncTime __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_syncTime(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static GameSessionPrx checkedCast(Ice.ObjectPrx __obj)
    {
        GameSessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GameSessionPrx)
            {
                __d = (GameSessionPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    GameSessionPrxHelper __h = new GameSessionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static GameSessionPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        GameSessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GameSessionPrx)
            {
                __d = (GameSessionPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    GameSessionPrxHelper __h = new GameSessionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static GameSessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        GameSessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    GameSessionPrxHelper __h = new GameSessionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static GameSessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        GameSessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    GameSessionPrxHelper __h = new GameSessionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static GameSessionPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        GameSessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GameSessionPrx)
            {
                __d = (GameSessionPrx)__obj;
            }
            else
            {
                GameSessionPrxHelper __h = new GameSessionPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static GameSessionPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        GameSessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            GameSessionPrxHelper __h = new GameSessionPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::com::XSanGo::Protocol::GameSession"
    };

    public static String ice_staticId()
    {
        return __ids[2];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _GameSessionDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _GameSessionDelD();
    }

    public static void __write(IceInternal.BasicStream __os, GameSessionPrx v)
    {
        __os.writeProxy(v);
    }

    public static GameSessionPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            GameSessionPrxHelper result = new GameSessionPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
