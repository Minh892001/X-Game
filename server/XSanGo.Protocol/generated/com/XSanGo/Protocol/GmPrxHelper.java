// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Center.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class GmPrxHelper extends Ice.ObjectPrxHelperBase implements GmPrx
{
    private static final String __addSycee_name = "addSycee";

    public void addSycee(int serverId, String roleName, int sycee)
        throws NoteException
    {
        addSycee(serverId, roleName, sycee, null, false);
    }

    public void addSycee(int serverId, String roleName, int sycee, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        addSycee(serverId, roleName, sycee, __ctx, true);
    }

    private void addSycee(int serverId, String roleName, int sycee, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addSycee", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addSycee");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.addSycee(serverId, roleName, sycee, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addSycee(int serverId, String roleName, int sycee)
    {
        return begin_addSycee(serverId, roleName, sycee, null, false, null);
    }

    public Ice.AsyncResult begin_addSycee(int serverId, String roleName, int sycee, java.util.Map<String, String> __ctx)
    {
        return begin_addSycee(serverId, roleName, sycee, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addSycee(int serverId, String roleName, int sycee, Ice.Callback __cb)
    {
        return begin_addSycee(serverId, roleName, sycee, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSycee(int serverId, String roleName, int sycee, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSycee(serverId, roleName, sycee, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addSycee(int serverId, String roleName, int sycee, Callback_Gm_addSycee __cb)
    {
        return begin_addSycee(serverId, roleName, sycee, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSycee(int serverId, String roleName, int sycee, java.util.Map<String, String> __ctx, Callback_Gm_addSycee __cb)
    {
        return begin_addSycee(serverId, roleName, sycee, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addSycee(int serverId, String roleName, int sycee, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addSycee_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addSycee_name, __cb);
        try
        {
            __result.__prepare(__addSycee_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleName);
            __os.writeInt(sycee);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addSycee(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __addSycee_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __addVipExp_name = "addVipExp";

    /**
     * 添加vip经验
     **/
    public void addVipExp(int serverId, String roleName, int exp)
        throws NoteException
    {
        addVipExp(serverId, roleName, exp, null, false);
    }

    /**
     * 添加vip经验
     * @param __ctx The Context map to send with the invocation.
     **/
    public void addVipExp(int serverId, String roleName, int exp, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        addVipExp(serverId, roleName, exp, __ctx, true);
    }

    private void addVipExp(int serverId, String roleName, int exp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addVipExp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addVipExp");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.addVipExp(serverId, roleName, exp, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 添加vip经验
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_addVipExp(int serverId, String roleName, int exp)
    {
        return begin_addVipExp(serverId, roleName, exp, null, false, null);
    }

    /**
     * 添加vip经验
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addVipExp(int serverId, String roleName, int exp, java.util.Map<String, String> __ctx)
    {
        return begin_addVipExp(serverId, roleName, exp, __ctx, true, null);
    }

    /**
     * 添加vip经验
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_addVipExp(int serverId, String roleName, int exp, Ice.Callback __cb)
    {
        return begin_addVipExp(serverId, roleName, exp, null, false, __cb);
    }

    /**
     * 添加vip经验
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addVipExp(int serverId, String roleName, int exp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addVipExp(serverId, roleName, exp, __ctx, true, __cb);
    }

    /**
     * 添加vip经验
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_addVipExp(int serverId, String roleName, int exp, Callback_Gm_addVipExp __cb)
    {
        return begin_addVipExp(serverId, roleName, exp, null, false, __cb);
    }

    /**
     * 添加vip经验
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addVipExp(int serverId, String roleName, int exp, java.util.Map<String, String> __ctx, Callback_Gm_addVipExp __cb)
    {
        return begin_addVipExp(serverId, roleName, exp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addVipExp(int serverId, String roleName, int exp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addVipExp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addVipExp_name, __cb);
        try
        {
            __result.__prepare(__addVipExp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleName);
            __os.writeInt(exp);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_addVipExp(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __addVipExp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __addWheelCount_name = "addWheelCount";

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     **/
    public void addWheelCount(int serverId, String roleId, int count, int wheelType)
        throws NoteException
    {
        addWheelCount(serverId, roleId, count, wheelType, null, false);
    }

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     * @param __ctx The Context map to send with the invocation.
     **/
    public void addWheelCount(int serverId, String roleId, int count, int wheelType, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        addWheelCount(serverId, roleId, count, wheelType, __ctx, true);
    }

    private void addWheelCount(int serverId, String roleId, int count, int wheelType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addWheelCount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addWheelCount");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.addWheelCount(serverId, roleId, count, wheelType, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_addWheelCount(int serverId, String roleId, int count, int wheelType)
    {
        return begin_addWheelCount(serverId, roleId, count, wheelType, null, false, null);
    }

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addWheelCount(int serverId, String roleId, int count, int wheelType, java.util.Map<String, String> __ctx)
    {
        return begin_addWheelCount(serverId, roleId, count, wheelType, __ctx, true, null);
    }

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_addWheelCount(int serverId, String roleId, int count, int wheelType, Ice.Callback __cb)
    {
        return begin_addWheelCount(serverId, roleId, count, wheelType, null, false, __cb);
    }

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addWheelCount(int serverId, String roleId, int count, int wheelType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addWheelCount(serverId, roleId, count, wheelType, __ctx, true, __cb);
    }

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_addWheelCount(int serverId, String roleId, int count, int wheelType, Callback_Gm_addWheelCount __cb)
    {
        return begin_addWheelCount(serverId, roleId, count, wheelType, null, false, __cb);
    }

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addWheelCount(int serverId, String roleId, int count, int wheelType, java.util.Map<String, String> __ctx, Callback_Gm_addWheelCount __cb)
    {
        return begin_addWheelCount(serverId, roleId, count, wheelType, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addWheelCount(int serverId, String roleId, int count, int wheelType, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addWheelCount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addWheelCount_name, __cb);
        try
        {
            __result.__prepare(__addWheelCount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleId);
            __os.writeInt(count);
            __os.writeInt(wheelType);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_addWheelCount(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __addWheelCount_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __deleteCDK_name = "deleteCDK";

    public void deleteCDK(String category)
        throws NoteException
    {
        deleteCDK(category, null, false);
    }

    public void deleteCDK(String category, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        deleteCDK(category, __ctx, true);
    }

    private void deleteCDK(String category, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "deleteCDK", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("deleteCDK");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.deleteCDK(category, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_deleteCDK(String category)
    {
        return begin_deleteCDK(category, null, false, null);
    }

    public Ice.AsyncResult begin_deleteCDK(String category, java.util.Map<String, String> __ctx)
    {
        return begin_deleteCDK(category, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteCDK(String category, Ice.Callback __cb)
    {
        return begin_deleteCDK(category, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteCDK(String category, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteCDK(category, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteCDK(String category, Callback_Gm_deleteCDK __cb)
    {
        return begin_deleteCDK(category, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteCDK(String category, java.util.Map<String, String> __ctx, Callback_Gm_deleteCDK __cb)
    {
        return begin_deleteCDK(category, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteCDK(String category, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteCDK_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteCDK_name, __cb);
        try
        {
            __result.__prepare(__deleteCDK_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(category);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_deleteCDK(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __deleteCDK_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __deleteItem_name = "deleteItem";

    /**
     * 删除物品
     **/
    public String deleteItem(int serverId, String roleId, String itemId, int num)
    {
        return deleteItem(serverId, roleId, itemId, num, null, false);
    }

    /**
     * 删除物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public String deleteItem(int serverId, String roleId, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return deleteItem(serverId, roleId, itemId, num, __ctx, true);
    }

    private String deleteItem(int serverId, String roleId, String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "deleteItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("deleteItem");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.deleteItem(serverId, roleId, itemId, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteItem(int serverId, String roleId, String itemId, int num)
    {
        return begin_deleteItem(serverId, roleId, itemId, num, null, false, null);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteItem(int serverId, String roleId, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_deleteItem(serverId, roleId, itemId, num, __ctx, true, null);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteItem(int serverId, String roleId, String itemId, int num, Ice.Callback __cb)
    {
        return begin_deleteItem(serverId, roleId, itemId, num, null, false, __cb);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteItem(int serverId, String roleId, String itemId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteItem(serverId, roleId, itemId, num, __ctx, true, __cb);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteItem(int serverId, String roleId, String itemId, int num, Callback_Gm_deleteItem __cb)
    {
        return begin_deleteItem(serverId, roleId, itemId, num, null, false, __cb);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteItem(int serverId, String roleId, String itemId, int num, java.util.Map<String, String> __ctx, Callback_Gm_deleteItem __cb)
    {
        return begin_deleteItem(serverId, roleId, itemId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteItem(int serverId, String roleId, String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteItem_name, __cb);
        try
        {
            __result.__prepare(__deleteItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleId);
            __os.writeString(itemId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_deleteItem(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __download_name = "download";

    /**
     * 下载角色二进制数据存档
     **/
    public byte[] download(int serverId, String roleId)
        throws NoteException
    {
        return download(serverId, roleId, null, false);
    }

    /**
     * 下载角色二进制数据存档
     * @param __ctx The Context map to send with the invocation.
     **/
    public byte[] download(int serverId, String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return download(serverId, roleId, __ctx, true);
    }

    private byte[] download(int serverId, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "download", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("download");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.download(serverId, roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 下载角色二进制数据存档
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_download(int serverId, String roleId)
    {
        return begin_download(serverId, roleId, null, false, null);
    }

    /**
     * 下载角色二进制数据存档
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_download(int serverId, String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_download(serverId, roleId, __ctx, true, null);
    }

    /**
     * 下载角色二进制数据存档
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_download(int serverId, String roleId, Ice.Callback __cb)
    {
        return begin_download(serverId, roleId, null, false, __cb);
    }

    /**
     * 下载角色二进制数据存档
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_download(int serverId, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_download(serverId, roleId, __ctx, true, __cb);
    }

    /**
     * 下载角色二进制数据存档
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_download(int serverId, String roleId, Callback_Gm_download __cb)
    {
        return begin_download(serverId, roleId, null, false, __cb);
    }

    /**
     * 下载角色二进制数据存档
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_download(int serverId, String roleId, java.util.Map<String, String> __ctx, Callback_Gm_download __cb)
    {
        return begin_download(serverId, roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_download(int serverId, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__download_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __download_name, __cb);
        try
        {
            __result.__prepare(__download_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public byte[] end_download(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __download_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = ByteSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __editChannel_name = "editChannel";

    public void editChannel(int id, String name, String orderUrl)
        throws NoteException
    {
        editChannel(id, name, orderUrl, null, false);
    }

    public void editChannel(int id, String name, String orderUrl, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        editChannel(id, name, orderUrl, __ctx, true);
    }

    private void editChannel(int id, String name, String orderUrl, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "editChannel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("editChannel");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.editChannel(id, name, orderUrl, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_editChannel(int id, String name, String orderUrl)
    {
        return begin_editChannel(id, name, orderUrl, null, false, null);
    }

    public Ice.AsyncResult begin_editChannel(int id, String name, String orderUrl, java.util.Map<String, String> __ctx)
    {
        return begin_editChannel(id, name, orderUrl, __ctx, true, null);
    }

    public Ice.AsyncResult begin_editChannel(int id, String name, String orderUrl, Ice.Callback __cb)
    {
        return begin_editChannel(id, name, orderUrl, null, false, __cb);
    }

    public Ice.AsyncResult begin_editChannel(int id, String name, String orderUrl, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_editChannel(id, name, orderUrl, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_editChannel(int id, String name, String orderUrl, Callback_Gm_editChannel __cb)
    {
        return begin_editChannel(id, name, orderUrl, null, false, __cb);
    }

    public Ice.AsyncResult begin_editChannel(int id, String name, String orderUrl, java.util.Map<String, String> __ctx, Callback_Gm_editChannel __cb)
    {
        return begin_editChannel(id, name, orderUrl, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_editChannel(int id, String name, String orderUrl, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__editChannel_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __editChannel_name, __cb);
        try
        {
            __result.__prepare(__editChannel_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(name);
            __os.writeString(orderUrl);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_editChannel(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __editChannel_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __editGameServer_name = "editGameServer";

    public void editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId)
        throws NoteException
    {
        editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, null, false);
    }

    public void editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, __ctx, true);
    }

    private void editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "editGameServer", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("editGameServer");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId)
    {
        return begin_editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, null, false, null);
    }

    public Ice.AsyncResult begin_editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId, java.util.Map<String, String> __ctx)
    {
        return begin_editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId, Ice.Callback __cb)
    {
        return begin_editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId, Callback_Gm_editGameServer __cb)
    {
        return begin_editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId, java.util.Map<String, String> __ctx, Callback_Gm_editGameServer __cb)
    {
        return begin_editGameServer(id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_editGameServer(int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__editGameServer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __editGameServer_name, __cb);
        try
        {
            __result.__prepare(__editGameServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(name);
            __os.writeInt(showId);
            __os.writeString(gateIp);
            __os.writeBool(isNew);
            __os.writeBool(cpShowOnly);
            __os.writeBool(cpEnterOnly);
            __os.writeInt(onlineLimit);
            __os.writeInt(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_editGameServer(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __editGameServer_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __executeGroovyCombineScript_name = "executeGroovyCombineScript";

    public void executeGroovyCombineScript(int serverId)
        throws NoteException
    {
        executeGroovyCombineScript(serverId, null, false);
    }

    public void executeGroovyCombineScript(int serverId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        executeGroovyCombineScript(serverId, __ctx, true);
    }

    private void executeGroovyCombineScript(int serverId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "executeGroovyCombineScript", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("executeGroovyCombineScript");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.executeGroovyCombineScript(serverId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_executeGroovyCombineScript(int serverId)
    {
        return begin_executeGroovyCombineScript(serverId, null, false, null);
    }

    public Ice.AsyncResult begin_executeGroovyCombineScript(int serverId, java.util.Map<String, String> __ctx)
    {
        return begin_executeGroovyCombineScript(serverId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_executeGroovyCombineScript(int serverId, Ice.Callback __cb)
    {
        return begin_executeGroovyCombineScript(serverId, null, false, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyCombineScript(int serverId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_executeGroovyCombineScript(serverId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyCombineScript(int serverId, Callback_Gm_executeGroovyCombineScript __cb)
    {
        return begin_executeGroovyCombineScript(serverId, null, false, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyCombineScript(int serverId, java.util.Map<String, String> __ctx, Callback_Gm_executeGroovyCombineScript __cb)
    {
        return begin_executeGroovyCombineScript(serverId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_executeGroovyCombineScript(int serverId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__executeGroovyCombineScript_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __executeGroovyCombineScript_name, __cb);
        try
        {
            __result.__prepare(__executeGroovyCombineScript_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_executeGroovyCombineScript(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __executeGroovyCombineScript_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __executeGroovyScript_name = "executeGroovyScript";

    public void executeGroovyScript(int serverId, String script)
        throws NoteException
    {
        executeGroovyScript(serverId, script, null, false);
    }

    public void executeGroovyScript(int serverId, String script, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        executeGroovyScript(serverId, script, __ctx, true);
    }

    private void executeGroovyScript(int serverId, String script, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "executeGroovyScript", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("executeGroovyScript");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.executeGroovyScript(serverId, script, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_executeGroovyScript(int serverId, String script)
    {
        return begin_executeGroovyScript(serverId, script, null, false, null);
    }

    public Ice.AsyncResult begin_executeGroovyScript(int serverId, String script, java.util.Map<String, String> __ctx)
    {
        return begin_executeGroovyScript(serverId, script, __ctx, true, null);
    }

    public Ice.AsyncResult begin_executeGroovyScript(int serverId, String script, Ice.Callback __cb)
    {
        return begin_executeGroovyScript(serverId, script, null, false, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyScript(int serverId, String script, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_executeGroovyScript(serverId, script, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyScript(int serverId, String script, Callback_Gm_executeGroovyScript __cb)
    {
        return begin_executeGroovyScript(serverId, script, null, false, __cb);
    }

    public Ice.AsyncResult begin_executeGroovyScript(int serverId, String script, java.util.Map<String, String> __ctx, Callback_Gm_executeGroovyScript __cb)
    {
        return begin_executeGroovyScript(serverId, script, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_executeGroovyScript(int serverId, String script, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__executeGroovyScript_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __executeGroovyScript_name, __cb);
        try
        {
            __result.__prepare(__executeGroovyScript_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(script);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_executeGroovyScript(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __executeGroovyScript_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __findFuzzyRoleViewList_name = "findFuzzyRoleViewList";

    /**
     * 根据roleName模糊查询
     **/
    public String findFuzzyRoleViewList(int serverId, String accountName, String roleName)
        throws NoteException
    {
        return findFuzzyRoleViewList(serverId, accountName, roleName, null, false);
    }

    /**
     * 根据roleName模糊查询
     * @param __ctx The Context map to send with the invocation.
     **/
    public String findFuzzyRoleViewList(int serverId, String accountName, String roleName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return findFuzzyRoleViewList(serverId, accountName, roleName, __ctx, true);
    }

    private String findFuzzyRoleViewList(int serverId, String accountName, String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findFuzzyRoleViewList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findFuzzyRoleViewList");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.findFuzzyRoleViewList(serverId, accountName, roleName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findFuzzyRoleViewList(int serverId, String accountName, String roleName)
    {
        return begin_findFuzzyRoleViewList(serverId, accountName, roleName, null, false, null);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findFuzzyRoleViewList(int serverId, String accountName, String roleName, java.util.Map<String, String> __ctx)
    {
        return begin_findFuzzyRoleViewList(serverId, accountName, roleName, __ctx, true, null);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findFuzzyRoleViewList(int serverId, String accountName, String roleName, Ice.Callback __cb)
    {
        return begin_findFuzzyRoleViewList(serverId, accountName, roleName, null, false, __cb);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findFuzzyRoleViewList(int serverId, String accountName, String roleName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findFuzzyRoleViewList(serverId, accountName, roleName, __ctx, true, __cb);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_findFuzzyRoleViewList(int serverId, String accountName, String roleName, Callback_Gm_findFuzzyRoleViewList __cb)
    {
        return begin_findFuzzyRoleViewList(serverId, accountName, roleName, null, false, __cb);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_findFuzzyRoleViewList(int serverId, String accountName, String roleName, java.util.Map<String, String> __ctx, Callback_Gm_findFuzzyRoleViewList __cb)
    {
        return begin_findFuzzyRoleViewList(serverId, accountName, roleName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findFuzzyRoleViewList(int serverId, String accountName, String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findFuzzyRoleViewList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findFuzzyRoleViewList_name, __cb);
        try
        {
            __result.__prepare(__findFuzzyRoleViewList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(accountName);
            __os.writeString(roleName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_findFuzzyRoleViewList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __findFuzzyRoleViewList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __findRoleViewList_name = "findRoleViewList";

    public String findRoleViewList(int serverId, String accountName, String roleName, String roleId)
        throws NoteException
    {
        return findRoleViewList(serverId, accountName, roleName, roleId, null, false);
    }

    public String findRoleViewList(int serverId, String accountName, String roleName, String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return findRoleViewList(serverId, accountName, roleName, roleId, __ctx, true);
    }

    private String findRoleViewList(int serverId, String accountName, String roleName, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findRoleViewList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findRoleViewList");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.findRoleViewList(serverId, accountName, roleName, roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findRoleViewList(int serverId, String accountName, String roleName, String roleId)
    {
        return begin_findRoleViewList(serverId, accountName, roleName, roleId, null, false, null);
    }

    public Ice.AsyncResult begin_findRoleViewList(int serverId, String accountName, String roleName, String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_findRoleViewList(serverId, accountName, roleName, roleId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findRoleViewList(int serverId, String accountName, String roleName, String roleId, Ice.Callback __cb)
    {
        return begin_findRoleViewList(serverId, accountName, roleName, roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewList(int serverId, String accountName, String roleName, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findRoleViewList(serverId, accountName, roleName, roleId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewList(int serverId, String accountName, String roleName, String roleId, Callback_Gm_findRoleViewList __cb)
    {
        return begin_findRoleViewList(serverId, accountName, roleName, roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_findRoleViewList(int serverId, String accountName, String roleName, String roleId, java.util.Map<String, String> __ctx, Callback_Gm_findRoleViewList __cb)
    {
        return begin_findRoleViewList(serverId, accountName, roleName, roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findRoleViewList(int serverId, String accountName, String roleName, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findRoleViewList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findRoleViewList_name, __cb);
        try
        {
            __result.__prepare(__findRoleViewList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(accountName);
            __os.writeString(roleName);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_findRoleViewList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __findRoleViewList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __fobidenChat_name = "fobidenChat";

    public void fobidenChat(int serverId, String roleId, String releaseTime)
        throws NoteException
    {
        fobidenChat(serverId, roleId, releaseTime, null, false);
    }

    public void fobidenChat(int serverId, String roleId, String releaseTime, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        fobidenChat(serverId, roleId, releaseTime, __ctx, true);
    }

    private void fobidenChat(int serverId, String roleId, String releaseTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "fobidenChat", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("fobidenChat");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.fobidenChat(serverId, roleId, releaseTime, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_fobidenChat(int serverId, String roleId, String releaseTime)
    {
        return begin_fobidenChat(serverId, roleId, releaseTime, null, false, null);
    }

    public Ice.AsyncResult begin_fobidenChat(int serverId, String roleId, String releaseTime, java.util.Map<String, String> __ctx)
    {
        return begin_fobidenChat(serverId, roleId, releaseTime, __ctx, true, null);
    }

    public Ice.AsyncResult begin_fobidenChat(int serverId, String roleId, String releaseTime, Ice.Callback __cb)
    {
        return begin_fobidenChat(serverId, roleId, releaseTime, null, false, __cb);
    }

    public Ice.AsyncResult begin_fobidenChat(int serverId, String roleId, String releaseTime, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_fobidenChat(serverId, roleId, releaseTime, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_fobidenChat(int serverId, String roleId, String releaseTime, Callback_Gm_fobidenChat __cb)
    {
        return begin_fobidenChat(serverId, roleId, releaseTime, null, false, __cb);
    }

    public Ice.AsyncResult begin_fobidenChat(int serverId, String roleId, String releaseTime, java.util.Map<String, String> __ctx, Callback_Gm_fobidenChat __cb)
    {
        return begin_fobidenChat(serverId, roleId, releaseTime, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_fobidenChat(int serverId, String roleId, String releaseTime, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__fobidenChat_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __fobidenChat_name, __cb);
        try
        {
            __result.__prepare(__fobidenChat_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleId);
            __os.writeString(releaseTime);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_fobidenChat(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __fobidenChat_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __forzenAccount_name = "forzenAccount";

    public void forzenAccount(String account, String releaseTime)
        throws NoteException
    {
        forzenAccount(account, releaseTime, null, false);
    }

    public void forzenAccount(String account, String releaseTime, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        forzenAccount(account, releaseTime, __ctx, true);
    }

    private void forzenAccount(String account, String releaseTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "forzenAccount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("forzenAccount");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.forzenAccount(account, releaseTime, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_forzenAccount(String account, String releaseTime)
    {
        return begin_forzenAccount(account, releaseTime, null, false, null);
    }

    public Ice.AsyncResult begin_forzenAccount(String account, String releaseTime, java.util.Map<String, String> __ctx)
    {
        return begin_forzenAccount(account, releaseTime, __ctx, true, null);
    }

    public Ice.AsyncResult begin_forzenAccount(String account, String releaseTime, Ice.Callback __cb)
    {
        return begin_forzenAccount(account, releaseTime, null, false, __cb);
    }

    public Ice.AsyncResult begin_forzenAccount(String account, String releaseTime, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_forzenAccount(account, releaseTime, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_forzenAccount(String account, String releaseTime, Callback_Gm_forzenAccount __cb)
    {
        return begin_forzenAccount(account, releaseTime, null, false, __cb);
    }

    public Ice.AsyncResult begin_forzenAccount(String account, String releaseTime, java.util.Map<String, String> __ctx, Callback_Gm_forzenAccount __cb)
    {
        return begin_forzenAccount(account, releaseTime, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_forzenAccount(String account, String releaseTime, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__forzenAccount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __forzenAccount_name, __cb);
        try
        {
            __result.__prepare(__forzenAccount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(releaseTime);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_forzenAccount(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __forzenAccount_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __generateCDK_name = "generateCDK";

    public String generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content)
        throws NoteException
    {
        return generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, null, false);
    }

    public String generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, __ctx, true);
    }

    private String generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "generateCDK", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("generateCDK");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content)
    {
        return begin_generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, null, false, null);
    }

    public Ice.AsyncResult begin_generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content, java.util.Map<String, String> __ctx)
    {
        return begin_generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, __ctx, true, null);
    }

    public Ice.AsyncResult begin_generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content, Ice.Callback __cb)
    {
        return begin_generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content, Callback_Gm_generateCDK __cb)
    {
        return begin_generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content, java.util.Map<String, String> __ctx, Callback_Gm_generateCDK __cb)
    {
        return begin_generateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_generateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__generateCDK_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __generateCDK_name, __cb);
        try
        {
            __result.__prepare(__generateCDK_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeString(category);
            __os.writeInt(number);
            IntSeqHelper.write(__os, channels);
            IntSeqHelper.write(__os, servers);
            __os.writeInt(minLevel);
            __os.writeInt(maxLevel);
            __os.writeString(factionName);
            __os.writeInt(chargeMoney);
            __os.writeString(beginTime);
            __os.writeString(endTime);
            __os.writeString(remark);
            PropertySeqHelper.write(__os, content);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_generateCDK(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __generateCDK_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getChannelConfig_name = "getChannelConfig";

    public String getChannelConfig()
        throws NoteException
    {
        return getChannelConfig(null, false);
    }

    public String getChannelConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getChannelConfig(__ctx, true);
    }

    private String getChannelConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getChannelConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getChannelConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getChannelConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getChannelConfig()
    {
        return begin_getChannelConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getChannelConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getChannelConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getChannelConfig(Ice.Callback __cb)
    {
        return begin_getChannelConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChannelConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getChannelConfig(Callback_Gm_getChannelConfig __cb)
    {
        return begin_getChannelConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelConfig(java.util.Map<String, String> __ctx, Callback_Gm_getChannelConfig __cb)
    {
        return begin_getChannelConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChannelConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChannelConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChannelConfig_name, __cb);
        try
        {
            __result.__prepare(__getChannelConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getChannelConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getChannelConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getChannelConfig_async(AMI_Gm_getChannelConfig __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChannelConfig_name);
            __r = begin_getChannelConfig(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChannelConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getChannelConfig_async(AMI_Gm_getChannelConfig __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChannelConfig_name);
            __r = begin_getChannelConfig(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChannelConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCurrentWhiteList_name = "getCurrentWhiteList";

    public WhiteList[] getCurrentWhiteList()
        throws NoteException
    {
        return getCurrentWhiteList(null, false);
    }

    public WhiteList[] getCurrentWhiteList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCurrentWhiteList(__ctx, true);
    }

    private WhiteList[] getCurrentWhiteList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCurrentWhiteList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCurrentWhiteList");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getCurrentWhiteList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCurrentWhiteList()
    {
        return begin_getCurrentWhiteList(null, false, null);
    }

    public Ice.AsyncResult begin_getCurrentWhiteList(java.util.Map<String, String> __ctx)
    {
        return begin_getCurrentWhiteList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCurrentWhiteList(Ice.Callback __cb)
    {
        return begin_getCurrentWhiteList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCurrentWhiteList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCurrentWhiteList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCurrentWhiteList(Callback_Gm_getCurrentWhiteList __cb)
    {
        return begin_getCurrentWhiteList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCurrentWhiteList(java.util.Map<String, String> __ctx, Callback_Gm_getCurrentWhiteList __cb)
    {
        return begin_getCurrentWhiteList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCurrentWhiteList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCurrentWhiteList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCurrentWhiteList_name, __cb);
        try
        {
            __result.__prepare(__getCurrentWhiteList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public WhiteList[] end_getCurrentWhiteList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCurrentWhiteList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            WhiteList[] __ret;
            __ret = WhiteListSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getCurrentWhiteList_async(AMI_Gm_getCurrentWhiteList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCurrentWhiteList_name);
            __r = begin_getCurrentWhiteList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCurrentWhiteList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getCurrentWhiteList_async(AMI_Gm_getCurrentWhiteList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCurrentWhiteList_name);
            __r = begin_getCurrentWhiteList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCurrentWhiteList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFactionList_name = "getFactionList";

    /**
     * 查找公会列表，通过factionName模糊查找
     **/
    public GmFactionView[] getFactionList(int serverId, String factionName)
        throws NoteException
    {
        return getFactionList(serverId, factionName, null, false);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __ctx The Context map to send with the invocation.
     **/
    public GmFactionView[] getFactionList(int serverId, String factionName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFactionList(serverId, factionName, __ctx, true);
    }

    private GmFactionView[] getFactionList(int serverId, String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionList");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getFactionList(serverId, factionName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(int serverId, String factionName)
    {
        return begin_getFactionList(serverId, factionName, null, false, null);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(int serverId, String factionName, java.util.Map<String, String> __ctx)
    {
        return begin_getFactionList(serverId, factionName, __ctx, true, null);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(int serverId, String factionName, Ice.Callback __cb)
    {
        return begin_getFactionList(serverId, factionName, null, false, __cb);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(int serverId, String factionName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionList(serverId, factionName, __ctx, true, __cb);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionList(int serverId, String factionName, Callback_Gm_getFactionList __cb)
    {
        return begin_getFactionList(serverId, factionName, null, false, __cb);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionList(int serverId, String factionName, java.util.Map<String, String> __ctx, Callback_Gm_getFactionList __cb)
    {
        return begin_getFactionList(serverId, factionName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionList(int serverId, String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionList_name, __cb);
        try
        {
            __result.__prepare(__getFactionList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(factionName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GmFactionView[] end_getFactionList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFactionList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GmFactionView[] __ret;
            __ret = GmFactionViewSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getFactionMemberList_name = "getFactionMemberList";

    /**
     * 获取公会所有成员
     **/
    public GmFactionMemberView[] getFactionMemberList(int serverId, String factionName)
        throws NoteException
    {
        return getFactionMemberList(serverId, factionName, null, false);
    }

    /**
     * 获取公会所有成员
     * @param __ctx The Context map to send with the invocation.
     **/
    public GmFactionMemberView[] getFactionMemberList(int serverId, String factionName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFactionMemberList(serverId, factionName, __ctx, true);
    }

    private GmFactionMemberView[] getFactionMemberList(int serverId, String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFactionMemberList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFactionMemberList");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getFactionMemberList(serverId, factionName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(int serverId, String factionName)
    {
        return begin_getFactionMemberList(serverId, factionName, null, false, null);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(int serverId, String factionName, java.util.Map<String, String> __ctx)
    {
        return begin_getFactionMemberList(serverId, factionName, __ctx, true, null);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(int serverId, String factionName, Ice.Callback __cb)
    {
        return begin_getFactionMemberList(serverId, factionName, null, false, __cb);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(int serverId, String factionName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFactionMemberList(serverId, factionName, __ctx, true, __cb);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(int serverId, String factionName, Callback_Gm_getFactionMemberList __cb)
    {
        return begin_getFactionMemberList(serverId, factionName, null, false, __cb);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFactionMemberList(int serverId, String factionName, java.util.Map<String, String> __ctx, Callback_Gm_getFactionMemberList __cb)
    {
        return begin_getFactionMemberList(serverId, factionName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFactionMemberList(int serverId, String factionName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFactionMemberList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFactionMemberList_name, __cb);
        try
        {
            __result.__prepare(__getFactionMemberList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(factionName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GmFactionMemberView[] end_getFactionMemberList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFactionMemberList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GmFactionMemberView[] __ret;
            __ret = GmFactionMemberViewSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getGuideConfig_name = "getGuideConfig";

    public GuideConfig getGuideConfig()
        throws NoteException
    {
        return getGuideConfig(null, false);
    }

    public GuideConfig getGuideConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getGuideConfig(__ctx, true);
    }

    private GuideConfig getGuideConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGuideConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGuideConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getGuideConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getGuideConfig()
    {
        return begin_getGuideConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getGuideConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getGuideConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getGuideConfig(Ice.Callback __cb)
    {
        return begin_getGuideConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGuideConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGuideConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGuideConfig(Callback_Gm_getGuideConfig __cb)
    {
        return begin_getGuideConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGuideConfig(java.util.Map<String, String> __ctx, Callback_Gm_getGuideConfig __cb)
    {
        return begin_getGuideConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGuideConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGuideConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGuideConfig_name, __cb);
        try
        {
            __result.__prepare(__getGuideConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public GuideConfig end_getGuideConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getGuideConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GuideConfig __ret;
            __ret = new GuideConfig();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getGuideConfig_async(AMI_Gm_getGuideConfig __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getGuideConfig_name);
            __r = begin_getGuideConfig(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getGuideConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getGuideConfig_async(AMI_Gm_getGuideConfig __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getGuideConfig_name);
            __r = begin_getGuideConfig(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getGuideConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getHeroSkillConfig_name = "getHeroSkillConfig";

    public IntString[] getHeroSkillConfig()
        throws NoteException
    {
        return getHeroSkillConfig(null, false);
    }

    public IntString[] getHeroSkillConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getHeroSkillConfig(__ctx, true);
    }

    private IntString[] getHeroSkillConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getHeroSkillConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getHeroSkillConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getHeroSkillConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getHeroSkillConfig()
    {
        return begin_getHeroSkillConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getHeroSkillConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(Ice.Callback __cb)
    {
        return begin_getHeroSkillConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getHeroSkillConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(Callback_Gm_getHeroSkillConfig __cb)
    {
        return begin_getHeroSkillConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillConfig(java.util.Map<String, String> __ctx, Callback_Gm_getHeroSkillConfig __cb)
    {
        return begin_getHeroSkillConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getHeroSkillConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getHeroSkillConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getHeroSkillConfig_name, __cb);
        try
        {
            __result.__prepare(__getHeroSkillConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public IntString[] end_getHeroSkillConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getHeroSkillConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntString[] __ret;
            __ret = IntStringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getItemConfig_name = "getItemConfig";

    public String[] getItemConfig()
        throws NoteException
    {
        return getItemConfig(null, false);
    }

    public String[] getItemConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getItemConfig(__ctx, true);
    }

    private String[] getItemConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getItemConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getItemConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getItemConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getItemConfig()
    {
        return begin_getItemConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getItemConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getItemConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getItemConfig(Ice.Callback __cb)
    {
        return begin_getItemConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getItemConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getItemConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getItemConfig(Callback_Gm_getItemConfig __cb)
    {
        return begin_getItemConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getItemConfig(java.util.Map<String, String> __ctx, Callback_Gm_getItemConfig __cb)
    {
        return begin_getItemConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getItemConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getItemConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getItemConfig_name, __cb);
        try
        {
            __result.__prepare(__getItemConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getItemConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getItemConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = StringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPayLog_name = "getPayLog";

    /**
     * 充值记录查询
     **/
    public GmPayView getPayLog(int serverId, String roleName)
        throws NoteException
    {
        return getPayLog(serverId, roleName, null, false);
    }

    /**
     * 充值记录查询
     * @param __ctx The Context map to send with the invocation.
     **/
    public GmPayView getPayLog(int serverId, String roleName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPayLog(serverId, roleName, __ctx, true);
    }

    private GmPayView getPayLog(int serverId, String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPayLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPayLog");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getPayLog(serverId, roleName, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPayLog(int serverId, String roleName)
    {
        return begin_getPayLog(serverId, roleName, null, false, null);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPayLog(int serverId, String roleName, java.util.Map<String, String> __ctx)
    {
        return begin_getPayLog(serverId, roleName, __ctx, true, null);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPayLog(int serverId, String roleName, Ice.Callback __cb)
    {
        return begin_getPayLog(serverId, roleName, null, false, __cb);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPayLog(int serverId, String roleName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPayLog(serverId, roleName, __ctx, true, __cb);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPayLog(int serverId, String roleName, Callback_Gm_getPayLog __cb)
    {
        return begin_getPayLog(serverId, roleName, null, false, __cb);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPayLog(int serverId, String roleName, java.util.Map<String, String> __ctx, Callback_Gm_getPayLog __cb)
    {
        return begin_getPayLog(serverId, roleName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPayLog(int serverId, String roleName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPayLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPayLog_name, __cb);
        try
        {
            __result.__prepare(__getPayLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GmPayView end_getPayLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPayLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GmPayViewHolder __ret = new GmPayViewHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPlayerSkillConfig_name = "getPlayerSkillConfig";

    public IntString[] getPlayerSkillConfig()
        throws NoteException
    {
        return getPlayerSkillConfig(null, false);
    }

    public IntString[] getPlayerSkillConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPlayerSkillConfig(__ctx, true);
    }

    private IntString[] getPlayerSkillConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPlayerSkillConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPlayerSkillConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getPlayerSkillConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig()
    {
        return begin_getPlayerSkillConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getPlayerSkillConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(Ice.Callback __cb)
    {
        return begin_getPlayerSkillConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPlayerSkillConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(Callback_Gm_getPlayerSkillConfig __cb)
    {
        return begin_getPlayerSkillConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlayerSkillConfig(java.util.Map<String, String> __ctx, Callback_Gm_getPlayerSkillConfig __cb)
    {
        return begin_getPlayerSkillConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPlayerSkillConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPlayerSkillConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPlayerSkillConfig_name, __cb);
        try
        {
            __result.__prepare(__getPlayerSkillConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public IntString[] end_getPlayerSkillConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPlayerSkillConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntString[] __ret;
            __ret = IntStringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPropertyConfig_name = "getPropertyConfig";

    public String[] getPropertyConfig()
        throws NoteException
    {
        return getPropertyConfig(null, false);
    }

    public String[] getPropertyConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPropertyConfig(__ctx, true);
    }

    private String[] getPropertyConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPropertyConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPropertyConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getPropertyConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPropertyConfig()
    {
        return begin_getPropertyConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getPropertyConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getPropertyConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPropertyConfig(Ice.Callback __cb)
    {
        return begin_getPropertyConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPropertyConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPropertyConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPropertyConfig(Callback_Gm_getPropertyConfig __cb)
    {
        return begin_getPropertyConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPropertyConfig(java.util.Map<String, String> __ctx, Callback_Gm_getPropertyConfig __cb)
    {
        return begin_getPropertyConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPropertyConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPropertyConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPropertyConfig_name, __cb);
        try
        {
            __result.__prepare(__getPropertyConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getPropertyConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPropertyConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = StringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getRankList_name = "getRankList";

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     **/
    public GmRankView[] getRankList(int serverId, int type)
        throws NoteException
    {
        return getRankList(serverId, type, null, false);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __ctx The Context map to send with the invocation.
     **/
    public GmRankView[] getRankList(int serverId, int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRankList(serverId, type, __ctx, true);
    }

    private GmRankView[] getRankList(int serverId, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRankList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRankList");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getRankList(serverId, type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRankList(int serverId, int type)
    {
        return begin_getRankList(serverId, type, null, false, null);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRankList(int serverId, int type, java.util.Map<String, String> __ctx)
    {
        return begin_getRankList(serverId, type, __ctx, true, null);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRankList(int serverId, int type, Ice.Callback __cb)
    {
        return begin_getRankList(serverId, type, null, false, __cb);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRankList(int serverId, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRankList(serverId, type, __ctx, true, __cb);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRankList(int serverId, int type, Callback_Gm_getRankList __cb)
    {
        return begin_getRankList(serverId, type, null, false, __cb);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRankList(int serverId, int type, java.util.Map<String, String> __ctx, Callback_Gm_getRankList __cb)
    {
        return begin_getRankList(serverId, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRankList(int serverId, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRankList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRankList_name, __cb);
        try
        {
            __result.__prepare(__getRankList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public GmRankView[] end_getRankList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRankList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GmRankView[] __ret;
            __ret = GmRankViewSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getRelationConfig_name = "getRelationConfig";

    public IntString[] getRelationConfig()
        throws NoteException
    {
        return getRelationConfig(null, false);
    }

    public IntString[] getRelationConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRelationConfig(__ctx, true);
    }

    private IntString[] getRelationConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRelationConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRelationConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getRelationConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRelationConfig()
    {
        return begin_getRelationConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getRelationConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getRelationConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getRelationConfig(Ice.Callback __cb)
    {
        return begin_getRelationConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRelationConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRelationConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRelationConfig(Callback_Gm_getRelationConfig __cb)
    {
        return begin_getRelationConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRelationConfig(java.util.Map<String, String> __ctx, Callback_Gm_getRelationConfig __cb)
    {
        return begin_getRelationConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRelationConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRelationConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRelationConfig_name, __cb);
        try
        {
            __result.__prepare(__getRelationConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public IntString[] end_getRelationConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRelationConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IntString[] __ret;
            __ret = IntStringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getServerItemConfig_name = "getServerItemConfig";

    public String[] getServerItemConfig(int serverId)
        throws NoteException
    {
        return getServerItemConfig(serverId, null, false);
    }

    public String[] getServerItemConfig(int serverId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getServerItemConfig(serverId, __ctx, true);
    }

    private String[] getServerItemConfig(int serverId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getServerItemConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getServerItemConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.getServerItemConfig(serverId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getServerItemConfig(int serverId)
    {
        return begin_getServerItemConfig(serverId, null, false, null);
    }

    public Ice.AsyncResult begin_getServerItemConfig(int serverId, java.util.Map<String, String> __ctx)
    {
        return begin_getServerItemConfig(serverId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getServerItemConfig(int serverId, Ice.Callback __cb)
    {
        return begin_getServerItemConfig(serverId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getServerItemConfig(int serverId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getServerItemConfig(serverId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getServerItemConfig(int serverId, Callback_Gm_getServerItemConfig __cb)
    {
        return begin_getServerItemConfig(serverId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getServerItemConfig(int serverId, java.util.Map<String, String> __ctx, Callback_Gm_getServerItemConfig __cb)
    {
        return begin_getServerItemConfig(serverId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getServerItemConfig(int serverId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getServerItemConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getServerItemConfig_name, __cb);
        try
        {
            __result.__prepare(__getServerItemConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getServerItemConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getServerItemConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = StringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __importRole_name = "importRole";

    /**
     * 导入role数据
     **/
    public void importRole(int serverId, byte[] data, String roleId)
        throws NoteException
    {
        importRole(serverId, data, roleId, null, false);
    }

    /**
     * 导入role数据
     * @param __ctx The Context map to send with the invocation.
     **/
    public void importRole(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        importRole(serverId, data, roleId, __ctx, true);
    }

    private void importRole(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "importRole", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("importRole");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.importRole(serverId, data, roleId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_importRole(int serverId, byte[] data, String roleId)
    {
        return begin_importRole(serverId, data, roleId, null, false, null);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_importRole(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_importRole(serverId, data, roleId, __ctx, true, null);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_importRole(int serverId, byte[] data, String roleId, Ice.Callback __cb)
    {
        return begin_importRole(serverId, data, roleId, null, false, __cb);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_importRole(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_importRole(serverId, data, roleId, __ctx, true, __cb);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_importRole(int serverId, byte[] data, String roleId, Callback_Gm_importRole __cb)
    {
        return begin_importRole(serverId, data, roleId, null, false, __cb);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_importRole(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx, Callback_Gm_importRole __cb)
    {
        return begin_importRole(serverId, data, roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_importRole(int serverId, byte[] data, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__importRole_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __importRole_name, __cb);
        try
        {
            __result.__prepare(__importRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            ByteSeqHelper.write(__os, data);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_importRole(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __importRole_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __kickRole_name = "kickRole";

    public void kickRole(int serverId, String account, String roleId)
        throws NoteException
    {
        kickRole(serverId, account, roleId, null, false);
    }

    public void kickRole(int serverId, String account, String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        kickRole(serverId, account, roleId, __ctx, true);
    }

    private void kickRole(int serverId, String account, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "kickRole", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("kickRole");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.kickRole(serverId, account, roleId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_kickRole(int serverId, String account, String roleId)
    {
        return begin_kickRole(serverId, account, roleId, null, false, null);
    }

    public Ice.AsyncResult begin_kickRole(int serverId, String account, String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_kickRole(serverId, account, roleId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_kickRole(int serverId, String account, String roleId, Ice.Callback __cb)
    {
        return begin_kickRole(serverId, account, roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_kickRole(int serverId, String account, String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_kickRole(serverId, account, roleId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_kickRole(int serverId, String account, String roleId, Callback_Gm_kickRole __cb)
    {
        return begin_kickRole(serverId, account, roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_kickRole(int serverId, String account, String roleId, java.util.Map<String, String> __ctx, Callback_Gm_kickRole __cb)
    {
        return begin_kickRole(serverId, account, roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_kickRole(int serverId, String account, String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__kickRole_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __kickRole_name, __cb);
        try
        {
            __result.__prepare(__kickRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(account);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_kickRole(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __kickRole_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __loadCDK_name = "loadCDK";

    public String loadCDK(String category)
        throws NoteException
    {
        return loadCDK(category, null, false);
    }

    public String loadCDK(String category, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return loadCDK(category, __ctx, true);
    }

    private String loadCDK(String category, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "loadCDK", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("loadCDK");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.loadCDK(category, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_loadCDK(String category)
    {
        return begin_loadCDK(category, null, false, null);
    }

    public Ice.AsyncResult begin_loadCDK(String category, java.util.Map<String, String> __ctx)
    {
        return begin_loadCDK(category, __ctx, true, null);
    }

    public Ice.AsyncResult begin_loadCDK(String category, Ice.Callback __cb)
    {
        return begin_loadCDK(category, null, false, __cb);
    }

    public Ice.AsyncResult begin_loadCDK(String category, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_loadCDK(category, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_loadCDK(String category, Callback_Gm_loadCDK __cb)
    {
        return begin_loadCDK(category, null, false, __cb);
    }

    public Ice.AsyncResult begin_loadCDK(String category, java.util.Map<String, String> __ctx, Callback_Gm_loadCDK __cb)
    {
        return begin_loadCDK(category, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_loadCDK(String category, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__loadCDK_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __loadCDK_name, __cb);
        try
        {
            __result.__prepare(__loadCDK_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(category);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_loadCDK(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __loadCDK_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __mockCharge_name = "mockCharge";

    public void mockCharge(String account, String roleId, int channelId, int serverId, int cent)
        throws NoteException
    {
        mockCharge(account, roleId, channelId, serverId, cent, null, false);
    }

    public void mockCharge(String account, String roleId, int channelId, int serverId, int cent, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        mockCharge(account, roleId, channelId, serverId, cent, __ctx, true);
    }

    private void mockCharge(String account, String roleId, int channelId, int serverId, int cent, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "mockCharge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("mockCharge");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.mockCharge(account, roleId, channelId, serverId, cent, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_mockCharge(String account, String roleId, int channelId, int serverId, int cent)
    {
        return begin_mockCharge(account, roleId, channelId, serverId, cent, null, false, null);
    }

    public Ice.AsyncResult begin_mockCharge(String account, String roleId, int channelId, int serverId, int cent, java.util.Map<String, String> __ctx)
    {
        return begin_mockCharge(account, roleId, channelId, serverId, cent, __ctx, true, null);
    }

    public Ice.AsyncResult begin_mockCharge(String account, String roleId, int channelId, int serverId, int cent, Ice.Callback __cb)
    {
        return begin_mockCharge(account, roleId, channelId, serverId, cent, null, false, __cb);
    }

    public Ice.AsyncResult begin_mockCharge(String account, String roleId, int channelId, int serverId, int cent, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_mockCharge(account, roleId, channelId, serverId, cent, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_mockCharge(String account, String roleId, int channelId, int serverId, int cent, Callback_Gm_mockCharge __cb)
    {
        return begin_mockCharge(account, roleId, channelId, serverId, cent, null, false, __cb);
    }

    public Ice.AsyncResult begin_mockCharge(String account, String roleId, int channelId, int serverId, int cent, java.util.Map<String, String> __ctx, Callback_Gm_mockCharge __cb)
    {
        return begin_mockCharge(account, roleId, channelId, serverId, cent, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_mockCharge(String account, String roleId, int channelId, int serverId, int cent, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__mockCharge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __mockCharge_name, __cb);
        try
        {
            __result.__prepare(__mockCharge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(roleId);
            __os.writeInt(channelId);
            __os.writeInt(serverId);
            __os.writeInt(cent);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_mockCharge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __mockCharge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __ping_name = "ping";

    public GameServerView[] ping()
    {
        return ping(null, false);
    }

    public GameServerView[] ping(java.util.Map<String, String> __ctx)
    {
        return ping(__ctx, true);
    }

    private GameServerView[] ping(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "ping", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("ping");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.ping(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_ping()
    {
        return begin_ping(null, false, null);
    }

    public Ice.AsyncResult begin_ping(java.util.Map<String, String> __ctx)
    {
        return begin_ping(__ctx, true, null);
    }

    public Ice.AsyncResult begin_ping(Ice.Callback __cb)
    {
        return begin_ping(null, false, __cb);
    }

    public Ice.AsyncResult begin_ping(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ping(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ping(Callback_Gm_ping __cb)
    {
        return begin_ping(null, false, __cb);
    }

    public Ice.AsyncResult begin_ping(java.util.Map<String, String> __ctx, Callback_Gm_ping __cb)
    {
        return begin_ping(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ping(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ping_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
        try
        {
            __result.__prepare(__ping_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public GameServerView[] end_ping(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ping_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            GameServerView[] __ret;
            __ret = GameServerViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean ping_async(AMI_Gm_ping __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ping_name);
            __r = begin_ping(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean ping_async(AMI_Gm_ping __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ping_name);
            __r = begin_ping(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ping_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __queryCdkByCDK_name = "queryCdkByCDK";

    /**
     * 根据CDK查询具体信息
     **/
    public String queryCdkByCDK(int serverId, String cdk)
        throws NoteException
    {
        return queryCdkByCDK(serverId, cdk, null, false);
    }

    /**
     * 根据CDK查询具体信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public String queryCdkByCDK(int serverId, String cdk, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return queryCdkByCDK(serverId, cdk, __ctx, true);
    }

    private String queryCdkByCDK(int serverId, String cdk, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryCdkByCDK", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryCdkByCDK");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.queryCdkByCDK(serverId, cdk, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 根据CDK查询具体信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryCdkByCDK(int serverId, String cdk)
    {
        return begin_queryCdkByCDK(serverId, cdk, null, false, null);
    }

    /**
     * 根据CDK查询具体信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryCdkByCDK(int serverId, String cdk, java.util.Map<String, String> __ctx)
    {
        return begin_queryCdkByCDK(serverId, cdk, __ctx, true, null);
    }

    /**
     * 根据CDK查询具体信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryCdkByCDK(int serverId, String cdk, Ice.Callback __cb)
    {
        return begin_queryCdkByCDK(serverId, cdk, null, false, __cb);
    }

    /**
     * 根据CDK查询具体信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryCdkByCDK(int serverId, String cdk, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryCdkByCDK(serverId, cdk, __ctx, true, __cb);
    }

    /**
     * 根据CDK查询具体信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_queryCdkByCDK(int serverId, String cdk, Callback_Gm_queryCdkByCDK __cb)
    {
        return begin_queryCdkByCDK(serverId, cdk, null, false, __cb);
    }

    /**
     * 根据CDK查询具体信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryCdkByCDK(int serverId, String cdk, java.util.Map<String, String> __ctx, Callback_Gm_queryCdkByCDK __cb)
    {
        return begin_queryCdkByCDK(serverId, cdk, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryCdkByCDK(int serverId, String cdk, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryCdkByCDK_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryCdkByCDK_name, __cb);
        try
        {
            __result.__prepare(__queryCdkByCDK_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(cdk);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_queryCdkByCDK(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __queryCdkByCDK_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __reloadScript_name = "reloadScript";

    public void reloadScript(int serverId, ScriptReloadConfig config)
        throws NoteException
    {
        reloadScript(serverId, config, null, false);
    }

    public void reloadScript(int serverId, ScriptReloadConfig config, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        reloadScript(serverId, config, __ctx, true);
    }

    private void reloadScript(int serverId, ScriptReloadConfig config, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "reloadScript", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("reloadScript");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.reloadScript(serverId, config, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_reloadScript(int serverId, ScriptReloadConfig config)
    {
        return begin_reloadScript(serverId, config, null, false, null);
    }

    public Ice.AsyncResult begin_reloadScript(int serverId, ScriptReloadConfig config, java.util.Map<String, String> __ctx)
    {
        return begin_reloadScript(serverId, config, __ctx, true, null);
    }

    public Ice.AsyncResult begin_reloadScript(int serverId, ScriptReloadConfig config, Ice.Callback __cb)
    {
        return begin_reloadScript(serverId, config, null, false, __cb);
    }

    public Ice.AsyncResult begin_reloadScript(int serverId, ScriptReloadConfig config, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reloadScript(serverId, config, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_reloadScript(int serverId, ScriptReloadConfig config, Callback_Gm_reloadScript __cb)
    {
        return begin_reloadScript(serverId, config, null, false, __cb);
    }

    public Ice.AsyncResult begin_reloadScript(int serverId, ScriptReloadConfig config, java.util.Map<String, String> __ctx, Callback_Gm_reloadScript __cb)
    {
        return begin_reloadScript(serverId, config, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reloadScript(int serverId, ScriptReloadConfig config, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__reloadScript_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reloadScript_name, __cb);
        try
        {
            __result.__prepare(__reloadScript_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            config.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_reloadScript(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __reloadScript_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __sendAnnounce_name = "sendAnnounce";

    public void sendAnnounce(int serverId, String content)
        throws NoteException
    {
        sendAnnounce(serverId, content, null, false);
    }

    public void sendAnnounce(int serverId, String content, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sendAnnounce(serverId, content, __ctx, true);
    }

    private void sendAnnounce(int serverId, String content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendAnnounce", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendAnnounce");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.sendAnnounce(serverId, content, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendAnnounce(int serverId, String content)
    {
        return begin_sendAnnounce(serverId, content, null, false, null);
    }

    public Ice.AsyncResult begin_sendAnnounce(int serverId, String content, java.util.Map<String, String> __ctx)
    {
        return begin_sendAnnounce(serverId, content, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendAnnounce(int serverId, String content, Ice.Callback __cb)
    {
        return begin_sendAnnounce(serverId, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendAnnounce(int serverId, String content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendAnnounce(serverId, content, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendAnnounce(int serverId, String content, Callback_Gm_sendAnnounce __cb)
    {
        return begin_sendAnnounce(serverId, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendAnnounce(int serverId, String content, java.util.Map<String, String> __ctx, Callback_Gm_sendAnnounce __cb)
    {
        return begin_sendAnnounce(serverId, content, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendAnnounce(int serverId, String content, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendAnnounce_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendAnnounce_name, __cb);
        try
        {
            __result.__prepare(__sendAnnounce_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(content);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendAnnounce(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendAnnounce_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __sendSystemMail_name = "sendSystemMail";

    public void sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName)
        throws NoteException
    {
        sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, null, false);
    }

    public void sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, __ctx, true);
    }

    private void sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendSystemMail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendSystemMail");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName)
    {
        return begin_sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, null, false, null);
    }

    public Ice.AsyncResult begin_sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName, java.util.Map<String, String> __ctx)
    {
        return begin_sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName, Ice.Callback __cb)
    {
        return begin_sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName, Callback_Gm_sendSystemMail __cb)
    {
        return begin_sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName, java.util.Map<String, String> __ctx, Callback_Gm_sendSystemMail __cb)
    {
        return begin_sendSystemMail(serverId, roleId, roleName, title, content, attach, sendName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendSystemMail(int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendSystemMail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendSystemMail_name, __cb);
        try
        {
            __result.__prepare(__sendSystemMail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleId);
            __os.writeString(roleName);
            __os.writeString(title);
            __os.writeString(content);
            PropertySeqHelper.write(__os, attach);
            __os.writeString(sendName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendSystemMail(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendSystemMail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __sendSystemServerMail_name = "sendSystemServerMail";

    public void sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName)
        throws NoteException
    {
        sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, null, false);
    }

    public void sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, __ctx, true);
    }

    private void sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendSystemServerMail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendSystemServerMail");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName)
    {
        return begin_sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, null, false, null);
    }

    public Ice.AsyncResult begin_sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx)
    {
        return begin_sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName, Ice.Callback __cb)
    {
        return begin_sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName, Callback_Gm_sendSystemServerMail __cb)
    {
        return begin_sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx, Callback_Gm_sendSystemServerMail __cb)
    {
        return begin_sendSystemServerMail(serverId, title, content, attach, conditionParams, senderName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendSystemServerMail(int serverId, String title, String content, Property[] attach, String conditionParams, String senderName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendSystemServerMail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendSystemServerMail_name, __cb);
        try
        {
            __result.__prepare(__sendSystemServerMail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(title);
            __os.writeString(content);
            PropertySeqHelper.write(__os, attach);
            __os.writeString(conditionParams);
            __os.writeString(senderName);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendSystemServerMail(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendSystemServerMail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setGuideConfig_name = "setGuideConfig";

    public void setGuideConfig(GuideConfig config)
        throws NoteException
    {
        setGuideConfig(config, null, false);
    }

    public void setGuideConfig(GuideConfig config, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setGuideConfig(config, __ctx, true);
    }

    private void setGuideConfig(GuideConfig config, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setGuideConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setGuideConfig");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.setGuideConfig(config, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setGuideConfig(GuideConfig config)
    {
        return begin_setGuideConfig(config, null, false, null);
    }

    public Ice.AsyncResult begin_setGuideConfig(GuideConfig config, java.util.Map<String, String> __ctx)
    {
        return begin_setGuideConfig(config, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setGuideConfig(GuideConfig config, Ice.Callback __cb)
    {
        return begin_setGuideConfig(config, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGuideConfig(GuideConfig config, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setGuideConfig(config, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setGuideConfig(GuideConfig config, Callback_Gm_setGuideConfig __cb)
    {
        return begin_setGuideConfig(config, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGuideConfig(GuideConfig config, java.util.Map<String, String> __ctx, Callback_Gm_setGuideConfig __cb)
    {
        return begin_setGuideConfig(config, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setGuideConfig(GuideConfig config, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setGuideConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setGuideConfig_name, __cb);
        try
        {
            __result.__prepare(__setGuideConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            config.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setGuideConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setGuideConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setGuideConfig_async(AMI_Gm_setGuideConfig __cb, GuideConfig config)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setGuideConfig_name);
            __r = begin_setGuideConfig(config, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setGuideConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setGuideConfig_async(AMI_Gm_setGuideConfig __cb, GuideConfig config, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setGuideConfig_name);
            __r = begin_setGuideConfig(config, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setGuideConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setRecommendServer_name = "setRecommendServer";

    public void setRecommendServer(int serverId)
        throws NoteException
    {
        setRecommendServer(serverId, null, false);
    }

    public void setRecommendServer(int serverId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setRecommendServer(serverId, __ctx, true);
    }

    private void setRecommendServer(int serverId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setRecommendServer", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setRecommendServer");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.setRecommendServer(serverId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setRecommendServer(int serverId)
    {
        return begin_setRecommendServer(serverId, null, false, null);
    }

    public Ice.AsyncResult begin_setRecommendServer(int serverId, java.util.Map<String, String> __ctx)
    {
        return begin_setRecommendServer(serverId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setRecommendServer(int serverId, Ice.Callback __cb)
    {
        return begin_setRecommendServer(serverId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setRecommendServer(int serverId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setRecommendServer(serverId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setRecommendServer(int serverId, Callback_Gm_setRecommendServer __cb)
    {
        return begin_setRecommendServer(serverId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setRecommendServer(int serverId, java.util.Map<String, String> __ctx, Callback_Gm_setRecommendServer __cb)
    {
        return begin_setRecommendServer(serverId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setRecommendServer(int serverId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setRecommendServer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setRecommendServer_name, __cb);
        try
        {
            __result.__prepare(__setRecommendServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setRecommendServer(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setRecommendServer_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setVipLevel_name = "setVipLevel";

    public void setVipLevel(int serverId, String roleName, int vip)
        throws NoteException
    {
        setVipLevel(serverId, roleName, vip, null, false);
    }

    public void setVipLevel(int serverId, String roleName, int vip, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setVipLevel(serverId, roleName, vip, __ctx, true);
    }

    private void setVipLevel(int serverId, String roleName, int vip, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setVipLevel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setVipLevel");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.setVipLevel(serverId, roleName, vip, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setVipLevel(int serverId, String roleName, int vip)
    {
        return begin_setVipLevel(serverId, roleName, vip, null, false, null);
    }

    public Ice.AsyncResult begin_setVipLevel(int serverId, String roleName, int vip, java.util.Map<String, String> __ctx)
    {
        return begin_setVipLevel(serverId, roleName, vip, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setVipLevel(int serverId, String roleName, int vip, Ice.Callback __cb)
    {
        return begin_setVipLevel(serverId, roleName, vip, null, false, __cb);
    }

    public Ice.AsyncResult begin_setVipLevel(int serverId, String roleName, int vip, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setVipLevel(serverId, roleName, vip, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setVipLevel(int serverId, String roleName, int vip, Callback_Gm_setVipLevel __cb)
    {
        return begin_setVipLevel(serverId, roleName, vip, null, false, __cb);
    }

    public Ice.AsyncResult begin_setVipLevel(int serverId, String roleName, int vip, java.util.Map<String, String> __ctx, Callback_Gm_setVipLevel __cb)
    {
        return begin_setVipLevel(serverId, roleName, vip, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setVipLevel(int serverId, String roleName, int vip, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setVipLevel_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setVipLevel_name, __cb);
        try
        {
            __result.__prepare(__setVipLevel_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleName);
            __os.writeInt(vip);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setVipLevel(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setVipLevel_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setWhiteList_name = "setWhiteList";

    public void setWhiteList(WhiteList param)
        throws NoteException
    {
        setWhiteList(param, null, false);
    }

    public void setWhiteList(WhiteList param, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setWhiteList(param, __ctx, true);
    }

    private void setWhiteList(WhiteList param, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setWhiteList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setWhiteList");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.setWhiteList(param, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setWhiteList(WhiteList param)
    {
        return begin_setWhiteList(param, null, false, null);
    }

    public Ice.AsyncResult begin_setWhiteList(WhiteList param, java.util.Map<String, String> __ctx)
    {
        return begin_setWhiteList(param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setWhiteList(WhiteList param, Ice.Callback __cb)
    {
        return begin_setWhiteList(param, null, false, __cb);
    }

    public Ice.AsyncResult begin_setWhiteList(WhiteList param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setWhiteList(param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setWhiteList(WhiteList param, Callback_Gm_setWhiteList __cb)
    {
        return begin_setWhiteList(param, null, false, __cb);
    }

    public Ice.AsyncResult begin_setWhiteList(WhiteList param, java.util.Map<String, String> __ctx, Callback_Gm_setWhiteList __cb)
    {
        return begin_setWhiteList(param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setWhiteList(WhiteList param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setWhiteList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setWhiteList_name, __cb);
        try
        {
            __result.__prepare(__setWhiteList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            param.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setWhiteList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setWhiteList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __skipCopy_name = "skipCopy";

    /**
     * 调整指定难度副本到指定关卡
     **/
    public void skipCopy(int serverId, String roleId, int diff, int copyId)
        throws NoteException
    {
        skipCopy(serverId, roleId, diff, copyId, null, false);
    }

    /**
     * 调整指定难度副本到指定关卡
     * @param __ctx The Context map to send with the invocation.
     **/
    public void skipCopy(int serverId, String roleId, int diff, int copyId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        skipCopy(serverId, roleId, diff, copyId, __ctx, true);
    }

    private void skipCopy(int serverId, String roleId, int diff, int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "skipCopy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("skipCopy");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.skipCopy(serverId, roleId, diff, copyId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 调整指定难度副本到指定关卡
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_skipCopy(int serverId, String roleId, int diff, int copyId)
    {
        return begin_skipCopy(serverId, roleId, diff, copyId, null, false, null);
    }

    /**
     * 调整指定难度副本到指定关卡
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_skipCopy(int serverId, String roleId, int diff, int copyId, java.util.Map<String, String> __ctx)
    {
        return begin_skipCopy(serverId, roleId, diff, copyId, __ctx, true, null);
    }

    /**
     * 调整指定难度副本到指定关卡
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_skipCopy(int serverId, String roleId, int diff, int copyId, Ice.Callback __cb)
    {
        return begin_skipCopy(serverId, roleId, diff, copyId, null, false, __cb);
    }

    /**
     * 调整指定难度副本到指定关卡
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_skipCopy(int serverId, String roleId, int diff, int copyId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_skipCopy(serverId, roleId, diff, copyId, __ctx, true, __cb);
    }

    /**
     * 调整指定难度副本到指定关卡
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_skipCopy(int serverId, String roleId, int diff, int copyId, Callback_Gm_skipCopy __cb)
    {
        return begin_skipCopy(serverId, roleId, diff, copyId, null, false, __cb);
    }

    /**
     * 调整指定难度副本到指定关卡
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_skipCopy(int serverId, String roleId, int diff, int copyId, java.util.Map<String, String> __ctx, Callback_Gm_skipCopy __cb)
    {
        return begin_skipCopy(serverId, roleId, diff, copyId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_skipCopy(int serverId, String roleId, int diff, int copyId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__skipCopy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __skipCopy_name, __cb);
        try
        {
            __result.__prepare(__skipCopy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __os.writeString(roleId);
            __os.writeInt(diff);
            __os.writeInt(copyId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_skipCopy(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __skipCopy_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __unforzenAccount_name = "unforzenAccount";

    public void unforzenAccount(String account)
        throws NoteException
    {
        unforzenAccount(account, null, false);
    }

    public void unforzenAccount(String account, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        unforzenAccount(account, __ctx, true);
    }

    private void unforzenAccount(String account, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "unforzenAccount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("unforzenAccount");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.unforzenAccount(account, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_unforzenAccount(String account)
    {
        return begin_unforzenAccount(account, null, false, null);
    }

    public Ice.AsyncResult begin_unforzenAccount(String account, java.util.Map<String, String> __ctx)
    {
        return begin_unforzenAccount(account, __ctx, true, null);
    }

    public Ice.AsyncResult begin_unforzenAccount(String account, Ice.Callback __cb)
    {
        return begin_unforzenAccount(account, null, false, __cb);
    }

    public Ice.AsyncResult begin_unforzenAccount(String account, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unforzenAccount(account, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_unforzenAccount(String account, Callback_Gm_unforzenAccount __cb)
    {
        return begin_unforzenAccount(account, null, false, __cb);
    }

    public Ice.AsyncResult begin_unforzenAccount(String account, java.util.Map<String, String> __ctx, Callback_Gm_unforzenAccount __cb)
    {
        return begin_unforzenAccount(account, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unforzenAccount(String account, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unforzenAccount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unforzenAccount_name, __cb);
        try
        {
            __result.__prepare(__unforzenAccount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_unforzenAccount(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __unforzenAccount_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __updateCDK_name = "updateCDK";

    public String updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark)
        throws NoteException
    {
        return updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, null, false);
    }

    public String updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, __ctx, true);
    }

    private String updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "updateCDK", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("updateCDK");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    return __del.updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark)
    {
        return begin_updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, null, false, null);
    }

    public Ice.AsyncResult begin_updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, java.util.Map<String, String> __ctx)
    {
        return begin_updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, __ctx, true, null);
    }

    public Ice.AsyncResult begin_updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Ice.Callback __cb)
    {
        return begin_updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Callback_Gm_updateCDK __cb)
    {
        return begin_updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, java.util.Map<String, String> __ctx, Callback_Gm_updateCDK __cb)
    {
        return begin_updateCDK(name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateCDK(String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateCDK_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateCDK_name, __cb);
        try
        {
            __result.__prepare(__updateCDK_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeString(category);
            __os.writeInt(number);
            IntSeqHelper.write(__os, channels);
            IntSeqHelper.write(__os, servers);
            __os.writeInt(minLevel);
            __os.writeInt(maxLevel);
            __os.writeString(factionName);
            __os.writeInt(chargeMoney);
            __os.writeString(beginTime);
            __os.writeString(endTime);
            __os.writeString(remark);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_updateCDK(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __updateCDK_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __uploadLoginAnnounce_name = "uploadLoginAnnounce";

    public void uploadLoginAnnounce(byte[] file)
        throws NoteException
    {
        uploadLoginAnnounce(file, null, false);
    }

    public void uploadLoginAnnounce(byte[] file, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        uploadLoginAnnounce(file, __ctx, true);
    }

    private void uploadLoginAnnounce(byte[] file, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "uploadLoginAnnounce", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("uploadLoginAnnounce");
                    __delBase = __getDelegate(false);
                    _GmDel __del = (_GmDel)__delBase;
                    __del.uploadLoginAnnounce(file, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_uploadLoginAnnounce(byte[] file)
    {
        return begin_uploadLoginAnnounce(file, null, false, null);
    }

    public Ice.AsyncResult begin_uploadLoginAnnounce(byte[] file, java.util.Map<String, String> __ctx)
    {
        return begin_uploadLoginAnnounce(file, __ctx, true, null);
    }

    public Ice.AsyncResult begin_uploadLoginAnnounce(byte[] file, Ice.Callback __cb)
    {
        return begin_uploadLoginAnnounce(file, null, false, __cb);
    }

    public Ice.AsyncResult begin_uploadLoginAnnounce(byte[] file, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_uploadLoginAnnounce(file, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_uploadLoginAnnounce(byte[] file, Callback_Gm_uploadLoginAnnounce __cb)
    {
        return begin_uploadLoginAnnounce(file, null, false, __cb);
    }

    public Ice.AsyncResult begin_uploadLoginAnnounce(byte[] file, java.util.Map<String, String> __ctx, Callback_Gm_uploadLoginAnnounce __cb)
    {
        return begin_uploadLoginAnnounce(file, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_uploadLoginAnnounce(byte[] file, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__uploadLoginAnnounce_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __uploadLoginAnnounce_name, __cb);
        try
        {
            __result.__prepare(__uploadLoginAnnounce_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSeqHelper.write(__os, file);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_uploadLoginAnnounce(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __uploadLoginAnnounce_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static GmPrx checkedCast(Ice.ObjectPrx __obj)
    {
        GmPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GmPrx)
            {
                __d = (GmPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    GmPrxHelper __h = new GmPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static GmPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        GmPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GmPrx)
            {
                __d = (GmPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    GmPrxHelper __h = new GmPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static GmPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        GmPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    GmPrxHelper __h = new GmPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static GmPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        GmPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    GmPrxHelper __h = new GmPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static GmPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        GmPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GmPrx)
            {
                __d = (GmPrx)__obj;
            }
            else
            {
                GmPrxHelper __h = new GmPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static GmPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        GmPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            GmPrxHelper __h = new GmPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Gm"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _GmDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _GmDelD();
    }

    public static void __write(IceInternal.BasicStream __os, GmPrx v)
    {
        __os.writeProxy(v);
    }

    public static GmPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            GmPrxHelper result = new GmPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
