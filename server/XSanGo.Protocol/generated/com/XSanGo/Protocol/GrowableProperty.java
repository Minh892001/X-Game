// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class GrowableProperty implements java.lang.Cloneable, java.io.Serializable
{
    public String code;

    public int value;

    public float grow;

    public GrowableProperty()
    {
    }

    public GrowableProperty(String code, int value, float grow)
    {
        this.code = code;
        this.value = value;
        this.grow = grow;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        GrowableProperty _r = null;
        if(rhs instanceof GrowableProperty)
        {
            _r = (GrowableProperty)rhs;
        }

        if(_r != null)
        {
            if(code != _r.code)
            {
                if(code == null || _r.code == null || !code.equals(_r.code))
                {
                    return false;
                }
            }
            if(value != _r.value)
            {
                return false;
            }
            if(grow != _r.grow)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::GrowableProperty");
        __h = IceInternal.HashUtil.hashAdd(__h, code);
        __h = IceInternal.HashUtil.hashAdd(__h, value);
        __h = IceInternal.HashUtil.hashAdd(__h, grow);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(code);
        __os.writeInt(value);
        __os.writeFloat(grow);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        code = __is.readString();
        value = __is.readInt();
        grow = __is.readFloat();
    }

    public static final long serialVersionUID = 108240604L;
}
