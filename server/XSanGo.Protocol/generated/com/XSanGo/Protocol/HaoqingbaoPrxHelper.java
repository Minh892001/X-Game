// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Haoqingbao.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class HaoqingbaoPrxHelper extends Ice.ObjectPrxHelperBase implements HaoqingbaoPrx
{
    private static final String __charge_name = "charge";

    public void charge()
        throws NoteException
    {
        charge(null, false);
    }

    public void charge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        charge(__ctx, true);
    }

    private void charge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "charge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("charge");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    __del.charge(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_charge()
    {
        return begin_charge(null, false, null);
    }

    public Ice.AsyncResult begin_charge(java.util.Map<String, String> __ctx)
    {
        return begin_charge(__ctx, true, null);
    }

    public Ice.AsyncResult begin_charge(Ice.Callback __cb)
    {
        return begin_charge(null, false, __cb);
    }

    public Ice.AsyncResult begin_charge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_charge(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_charge(Callback_Haoqingbao_charge __cb)
    {
        return begin_charge(null, false, __cb);
    }

    public Ice.AsyncResult begin_charge(java.util.Map<String, String> __ctx, Callback_Haoqingbao_charge __cb)
    {
        return begin_charge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_charge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__charge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __charge_name, __cb);
        try
        {
            __result.__prepare(__charge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_charge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __charge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean charge_async(AMI_Haoqingbao_charge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__charge_name);
            __r = begin_charge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __charge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean charge_async(AMI_Haoqingbao_charge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__charge_name);
            __r = begin_charge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __charge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __checkout_name = "checkout";

    public String checkout(int num)
        throws NoteException
    {
        return checkout(num, null, false);
    }

    public String checkout(int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return checkout(num, __ctx, true);
    }

    private String checkout(int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "checkout", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("checkout");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    return __del.checkout(num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_checkout(int num)
    {
        return begin_checkout(num, null, false, null);
    }

    public Ice.AsyncResult begin_checkout(int num, java.util.Map<String, String> __ctx)
    {
        return begin_checkout(num, __ctx, true, null);
    }

    public Ice.AsyncResult begin_checkout(int num, Ice.Callback __cb)
    {
        return begin_checkout(num, null, false, __cb);
    }

    public Ice.AsyncResult begin_checkout(int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_checkout(num, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_checkout(int num, Callback_Haoqingbao_checkout __cb)
    {
        return begin_checkout(num, null, false, __cb);
    }

    public Ice.AsyncResult begin_checkout(int num, java.util.Map<String, String> __ctx, Callback_Haoqingbao_checkout __cb)
    {
        return begin_checkout(num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_checkout(int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__checkout_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __checkout_name, __cb);
        try
        {
            __result.__prepare(__checkout_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_checkout(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __checkout_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean checkout_async(AMI_Haoqingbao_checkout __cb, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__checkout_name);
            __r = begin_checkout(num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __checkout_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean checkout_async(AMI_Haoqingbao_checkout __cb, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__checkout_name);
            __r = begin_checkout(num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __checkout_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __claimRedPacket_name = "claimRedPacket";

    public void claimRedPacket(String roleId, String packetId)
        throws NoteException
    {
        claimRedPacket(roleId, packetId, null, false);
    }

    public void claimRedPacket(String roleId, String packetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        claimRedPacket(roleId, packetId, __ctx, true);
    }

    private void claimRedPacket(String roleId, String packetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "claimRedPacket", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("claimRedPacket");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    __del.claimRedPacket(roleId, packetId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_claimRedPacket(String roleId, String packetId)
    {
        return begin_claimRedPacket(roleId, packetId, null, false, null);
    }

    public Ice.AsyncResult begin_claimRedPacket(String roleId, String packetId, java.util.Map<String, String> __ctx)
    {
        return begin_claimRedPacket(roleId, packetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_claimRedPacket(String roleId, String packetId, Ice.Callback __cb)
    {
        return begin_claimRedPacket(roleId, packetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_claimRedPacket(String roleId, String packetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_claimRedPacket(roleId, packetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_claimRedPacket(String roleId, String packetId, Callback_Haoqingbao_claimRedPacket __cb)
    {
        return begin_claimRedPacket(roleId, packetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_claimRedPacket(String roleId, String packetId, java.util.Map<String, String> __ctx, Callback_Haoqingbao_claimRedPacket __cb)
    {
        return begin_claimRedPacket(roleId, packetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_claimRedPacket(String roleId, String packetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__claimRedPacket_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __claimRedPacket_name, __cb);
        try
        {
            __result.__prepare(__claimRedPacket_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __os.writeString(packetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_claimRedPacket(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __claimRedPacket_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean claimRedPacket_async(AMI_Haoqingbao_claimRedPacket __cb, String roleId, String packetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__claimRedPacket_name);
            __r = begin_claimRedPacket(roleId, packetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __claimRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean claimRedPacket_async(AMI_Haoqingbao_claimRedPacket __cb, String roleId, String packetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__claimRedPacket_name);
            __r = begin_claimRedPacket(roleId, packetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __claimRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRedPacketDetail_name = "getRedPacketDetail";

    public String getRedPacketDetail(String packetId)
        throws NoteException
    {
        return getRedPacketDetail(packetId, null, false);
    }

    public String getRedPacketDetail(String packetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRedPacketDetail(packetId, __ctx, true);
    }

    private String getRedPacketDetail(String packetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRedPacketDetail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRedPacketDetail");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    return __del.getRedPacketDetail(packetId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRedPacketDetail(String packetId)
    {
        return begin_getRedPacketDetail(packetId, null, false, null);
    }

    public Ice.AsyncResult begin_getRedPacketDetail(String packetId, java.util.Map<String, String> __ctx)
    {
        return begin_getRedPacketDetail(packetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getRedPacketDetail(String packetId, Ice.Callback __cb)
    {
        return begin_getRedPacketDetail(packetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRedPacketDetail(String packetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRedPacketDetail(packetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRedPacketDetail(String packetId, Callback_Haoqingbao_getRedPacketDetail __cb)
    {
        return begin_getRedPacketDetail(packetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRedPacketDetail(String packetId, java.util.Map<String, String> __ctx, Callback_Haoqingbao_getRedPacketDetail __cb)
    {
        return begin_getRedPacketDetail(packetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRedPacketDetail(String packetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRedPacketDetail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRedPacketDetail_name, __cb);
        try
        {
            __result.__prepare(__getRedPacketDetail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(packetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getRedPacketDetail(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRedPacketDetail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getRedPacketDetail_async(AMI_Haoqingbao_getRedPacketDetail __cb, String packetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRedPacketDetail_name);
            __r = begin_getRedPacketDetail(packetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRedPacketDetail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getRedPacketDetail_async(AMI_Haoqingbao_getRedPacketDetail __cb, String packetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRedPacketDetail_name);
            __r = begin_getRedPacketDetail(packetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRedPacketDetail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __myRedPacket_name = "myRedPacket";

    public String myRedPacket()
        throws NoteException
    {
        return myRedPacket(null, false);
    }

    public String myRedPacket(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return myRedPacket(__ctx, true);
    }

    private String myRedPacket(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "myRedPacket", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("myRedPacket");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    return __del.myRedPacket(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_myRedPacket()
    {
        return begin_myRedPacket(null, false, null);
    }

    public Ice.AsyncResult begin_myRedPacket(java.util.Map<String, String> __ctx)
    {
        return begin_myRedPacket(__ctx, true, null);
    }

    public Ice.AsyncResult begin_myRedPacket(Ice.Callback __cb)
    {
        return begin_myRedPacket(null, false, __cb);
    }

    public Ice.AsyncResult begin_myRedPacket(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_myRedPacket(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_myRedPacket(Callback_Haoqingbao_myRedPacket __cb)
    {
        return begin_myRedPacket(null, false, __cb);
    }

    public Ice.AsyncResult begin_myRedPacket(java.util.Map<String, String> __ctx, Callback_Haoqingbao_myRedPacket __cb)
    {
        return begin_myRedPacket(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_myRedPacket(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__myRedPacket_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __myRedPacket_name, __cb);
        try
        {
            __result.__prepare(__myRedPacket_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_myRedPacket(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __myRedPacket_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean myRedPacket_async(AMI_Haoqingbao_myRedPacket __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__myRedPacket_name);
            __r = begin_myRedPacket(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __myRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean myRedPacket_async(AMI_Haoqingbao_myRedPacket __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__myRedPacket_name);
            __r = begin_myRedPacket(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __myRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openHaoqingbao_name = "openHaoqingbao";

    public String openHaoqingbao()
        throws NoteException
    {
        return openHaoqingbao(null, false);
    }

    public String openHaoqingbao(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openHaoqingbao(__ctx, true);
    }

    private String openHaoqingbao(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openHaoqingbao", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openHaoqingbao");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    return __del.openHaoqingbao(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_openHaoqingbao()
    {
        return begin_openHaoqingbao(null, false, null);
    }

    public Ice.AsyncResult begin_openHaoqingbao(java.util.Map<String, String> __ctx)
    {
        return begin_openHaoqingbao(__ctx, true, null);
    }

    public Ice.AsyncResult begin_openHaoqingbao(Ice.Callback __cb)
    {
        return begin_openHaoqingbao(null, false, __cb);
    }

    public Ice.AsyncResult begin_openHaoqingbao(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openHaoqingbao(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_openHaoqingbao(Callback_Haoqingbao_openHaoqingbao __cb)
    {
        return begin_openHaoqingbao(null, false, __cb);
    }

    public Ice.AsyncResult begin_openHaoqingbao(java.util.Map<String, String> __ctx, Callback_Haoqingbao_openHaoqingbao __cb)
    {
        return begin_openHaoqingbao(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openHaoqingbao(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openHaoqingbao_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openHaoqingbao_name, __cb);
        try
        {
            __result.__prepare(__openHaoqingbao_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_openHaoqingbao(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openHaoqingbao_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean openHaoqingbao_async(AMI_Haoqingbao_openHaoqingbao __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openHaoqingbao_name);
            __r = begin_openHaoqingbao(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openHaoqingbao_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean openHaoqingbao_async(AMI_Haoqingbao_openHaoqingbao __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openHaoqingbao_name);
            __r = begin_openHaoqingbao(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openHaoqingbao_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __preRecvRedPacket_name = "preRecvRedPacket";

    public String preRecvRedPacket(String packetId)
        throws NoteException
    {
        return preRecvRedPacket(packetId, null, false);
    }

    public String preRecvRedPacket(String packetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return preRecvRedPacket(packetId, __ctx, true);
    }

    private String preRecvRedPacket(String packetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "preRecvRedPacket", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("preRecvRedPacket");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    return __del.preRecvRedPacket(packetId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_preRecvRedPacket(String packetId)
    {
        return begin_preRecvRedPacket(packetId, null, false, null);
    }

    public Ice.AsyncResult begin_preRecvRedPacket(String packetId, java.util.Map<String, String> __ctx)
    {
        return begin_preRecvRedPacket(packetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_preRecvRedPacket(String packetId, Ice.Callback __cb)
    {
        return begin_preRecvRedPacket(packetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_preRecvRedPacket(String packetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_preRecvRedPacket(packetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_preRecvRedPacket(String packetId, Callback_Haoqingbao_preRecvRedPacket __cb)
    {
        return begin_preRecvRedPacket(packetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_preRecvRedPacket(String packetId, java.util.Map<String, String> __ctx, Callback_Haoqingbao_preRecvRedPacket __cb)
    {
        return begin_preRecvRedPacket(packetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_preRecvRedPacket(String packetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__preRecvRedPacket_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __preRecvRedPacket_name, __cb);
        try
        {
            __result.__prepare(__preRecvRedPacket_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(packetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_preRecvRedPacket(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __preRecvRedPacket_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean preRecvRedPacket_async(AMI_Haoqingbao_preRecvRedPacket __cb, String packetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__preRecvRedPacket_name);
            __r = begin_preRecvRedPacket(packetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __preRecvRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean preRecvRedPacket_async(AMI_Haoqingbao_preRecvRedPacket __cb, String packetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__preRecvRedPacket_name);
            __r = begin_preRecvRedPacket(packetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __preRecvRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __rankList_name = "rankList";

    public String rankList(int type)
        throws NoteException
    {
        return rankList(type, null, false);
    }

    public String rankList(int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return rankList(type, __ctx, true);
    }

    private String rankList(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "rankList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("rankList");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    return __del.rankList(type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_rankList(int type)
    {
        return begin_rankList(type, null, false, null);
    }

    public Ice.AsyncResult begin_rankList(int type, java.util.Map<String, String> __ctx)
    {
        return begin_rankList(type, __ctx, true, null);
    }

    public Ice.AsyncResult begin_rankList(int type, Ice.Callback __cb)
    {
        return begin_rankList(type, null, false, __cb);
    }

    public Ice.AsyncResult begin_rankList(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rankList(type, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_rankList(int type, Callback_Haoqingbao_rankList __cb)
    {
        return begin_rankList(type, null, false, __cb);
    }

    public Ice.AsyncResult begin_rankList(int type, java.util.Map<String, String> __ctx, Callback_Haoqingbao_rankList __cb)
    {
        return begin_rankList(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rankList(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rankList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rankList_name, __cb);
        try
        {
            __result.__prepare(__rankList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_rankList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __rankList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean rankList_async(AMI_Haoqingbao_rankList __cb, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rankList_name);
            __r = begin_rankList(type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rankList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean rankList_async(AMI_Haoqingbao_rankList __cb, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rankList_name);
            __r = begin_rankList(type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rankList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __recvRedPacket_name = "recvRedPacket";

    public String recvRedPacket(String packetId)
        throws NoteException
    {
        return recvRedPacket(packetId, null, false);
    }

    public String recvRedPacket(String packetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return recvRedPacket(packetId, __ctx, true);
    }

    private String recvRedPacket(String packetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "recvRedPacket", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("recvRedPacket");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    return __del.recvRedPacket(packetId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_recvRedPacket(String packetId)
    {
        return begin_recvRedPacket(packetId, null, false, null);
    }

    public Ice.AsyncResult begin_recvRedPacket(String packetId, java.util.Map<String, String> __ctx)
    {
        return begin_recvRedPacket(packetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_recvRedPacket(String packetId, Ice.Callback __cb)
    {
        return begin_recvRedPacket(packetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_recvRedPacket(String packetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recvRedPacket(packetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_recvRedPacket(String packetId, Callback_Haoqingbao_recvRedPacket __cb)
    {
        return begin_recvRedPacket(packetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_recvRedPacket(String packetId, java.util.Map<String, String> __ctx, Callback_Haoqingbao_recvRedPacket __cb)
    {
        return begin_recvRedPacket(packetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recvRedPacket(String packetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recvRedPacket_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recvRedPacket_name, __cb);
        try
        {
            __result.__prepare(__recvRedPacket_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(packetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_recvRedPacket(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __recvRedPacket_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean recvRedPacket_async(AMI_Haoqingbao_recvRedPacket __cb, String packetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__recvRedPacket_name);
            __r = begin_recvRedPacket(packetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __recvRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean recvRedPacket_async(AMI_Haoqingbao_recvRedPacket __cb, String packetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__recvRedPacket_name);
            __r = begin_recvRedPacket(packetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __recvRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sendRedPacket_name = "sendRedPacket";

    public String sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg)
        throws NoteException
    {
        return sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, null, false);
    }

    public String sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, __ctx, true);
    }

    private String sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendRedPacket", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendRedPacket");
                    __delBase = __getDelegate(false);
                    _HaoqingbaoDel __del = (_HaoqingbaoDel)__delBase;
                    return __del.sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg)
    {
        return begin_sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, null, false, null);
    }

    public Ice.AsyncResult begin_sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, java.util.Map<String, String> __ctx)
    {
        return begin_sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, Ice.Callback __cb)
    {
        return begin_sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, Callback_Haoqingbao_sendRedPacket __cb)
    {
        return begin_sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, java.util.Map<String, String> __ctx, Callback_Haoqingbao_sendRedPacket __cb)
    {
        return begin_sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendRedPacket(int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendRedPacket_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendRedPacket_name, __cb);
        try
        {
            __result.__prepare(__sendRedPacket_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeInt(minLevel);
            __os.writeInt(minVipLevel);
            __os.writeInt(range);
            __os.writeInt(minFriendPoint);
            __os.writeInt(totalYuanbaoNum);
            __os.writeInt(packetNum);
            __os.writeString(msg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_sendRedPacket(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendRedPacket_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean sendRedPacket_async(AMI_Haoqingbao_sendRedPacket __cb, int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendRedPacket_name);
            __r = begin_sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean sendRedPacket_async(AMI_Haoqingbao_sendRedPacket __cb, int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendRedPacket_name);
            __r = begin_sendRedPacket(type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendRedPacket_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static HaoqingbaoPrx checkedCast(Ice.ObjectPrx __obj)
    {
        HaoqingbaoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HaoqingbaoPrx)
            {
                __d = (HaoqingbaoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    HaoqingbaoPrxHelper __h = new HaoqingbaoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static HaoqingbaoPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        HaoqingbaoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HaoqingbaoPrx)
            {
                __d = (HaoqingbaoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    HaoqingbaoPrxHelper __h = new HaoqingbaoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static HaoqingbaoPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        HaoqingbaoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    HaoqingbaoPrxHelper __h = new HaoqingbaoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static HaoqingbaoPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        HaoqingbaoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    HaoqingbaoPrxHelper __h = new HaoqingbaoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static HaoqingbaoPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        HaoqingbaoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HaoqingbaoPrx)
            {
                __d = (HaoqingbaoPrx)__obj;
            }
            else
            {
                HaoqingbaoPrxHelper __h = new HaoqingbaoPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static HaoqingbaoPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        HaoqingbaoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            HaoqingbaoPrxHelper __h = new HaoqingbaoPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Haoqingbao"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _HaoqingbaoDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _HaoqingbaoDelD();
    }

    public static void __write(IceInternal.BasicStream __os, HaoqingbaoPrx v)
    {
        __os.writeProxy(v);
    }

    public static HaoqingbaoPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            HaoqingbaoPrxHelper result = new HaoqingbaoPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
