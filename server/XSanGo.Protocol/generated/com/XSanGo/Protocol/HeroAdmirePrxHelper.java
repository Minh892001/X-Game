// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `HeroAdmire.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class HeroAdmirePrxHelper extends Ice.ObjectPrxHelperBase implements HeroAdmirePrx
{
    private static final String __chooseHero_name = "chooseHero";

    public void chooseHero(int heroId)
        throws NoteException
    {
        chooseHero(heroId, null, false);
    }

    public void chooseHero(int heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        chooseHero(heroId, __ctx, true);
    }

    private void chooseHero(int heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "chooseHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("chooseHero");
                    __delBase = __getDelegate(false);
                    _HeroAdmireDel __del = (_HeroAdmireDel)__delBase;
                    __del.chooseHero(heroId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_chooseHero(int heroId)
    {
        return begin_chooseHero(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_chooseHero(int heroId, java.util.Map<String, String> __ctx)
    {
        return begin_chooseHero(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_chooseHero(int heroId, Ice.Callback __cb)
    {
        return begin_chooseHero(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_chooseHero(int heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_chooseHero(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_chooseHero(int heroId, Callback_HeroAdmire_chooseHero __cb)
    {
        return begin_chooseHero(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_chooseHero(int heroId, java.util.Map<String, String> __ctx, Callback_HeroAdmire_chooseHero __cb)
    {
        return begin_chooseHero(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_chooseHero(int heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__chooseHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __chooseHero_name, __cb);
        try
        {
            __result.__prepare(__chooseHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_chooseHero(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __chooseHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean chooseHero_async(AMI_HeroAdmire_chooseHero __cb, int heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__chooseHero_name);
            __r = begin_chooseHero(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __chooseHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean chooseHero_async(AMI_HeroAdmire_chooseHero __cb, int heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__chooseHero_name);
            __r = begin_chooseHero(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __chooseHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clearHero_name = "clearHero";

    public void clearHero()
        throws NoteException
    {
        clearHero(null, false);
    }

    public void clearHero(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        clearHero(__ctx, true);
    }

    private void clearHero(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clearHero");
                    __delBase = __getDelegate(false);
                    _HeroAdmireDel __del = (_HeroAdmireDel)__delBase;
                    __del.clearHero(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_clearHero()
    {
        return begin_clearHero(null, false, null);
    }

    public Ice.AsyncResult begin_clearHero(java.util.Map<String, String> __ctx)
    {
        return begin_clearHero(__ctx, true, null);
    }

    public Ice.AsyncResult begin_clearHero(Ice.Callback __cb)
    {
        return begin_clearHero(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearHero(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearHero(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_clearHero(Callback_HeroAdmire_clearHero __cb)
    {
        return begin_clearHero(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearHero(java.util.Map<String, String> __ctx, Callback_HeroAdmire_clearHero __cb)
    {
        return begin_clearHero(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearHero(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearHero_name, __cb);
        try
        {
            __result.__prepare(__clearHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_clearHero(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clearHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean clearHero_async(AMI_HeroAdmire_clearHero __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearHero_name);
            __r = begin_clearHero(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean clearHero_async(AMI_HeroAdmire_clearHero __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearHero_name);
            __r = begin_clearHero(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __exchangeHero_name = "exchangeHero";

    public void exchangeHero(int heroId)
        throws NoteException
    {
        exchangeHero(heroId, null, false);
    }

    public void exchangeHero(int heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        exchangeHero(heroId, __ctx, true);
    }

    private void exchangeHero(int heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exchangeHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exchangeHero");
                    __delBase = __getDelegate(false);
                    _HeroAdmireDel __del = (_HeroAdmireDel)__delBase;
                    __del.exchangeHero(heroId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_exchangeHero(int heroId)
    {
        return begin_exchangeHero(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_exchangeHero(int heroId, java.util.Map<String, String> __ctx)
    {
        return begin_exchangeHero(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_exchangeHero(int heroId, Ice.Callback __cb)
    {
        return begin_exchangeHero(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeHero(int heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exchangeHero(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_exchangeHero(int heroId, Callback_HeroAdmire_exchangeHero __cb)
    {
        return begin_exchangeHero(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeHero(int heroId, java.util.Map<String, String> __ctx, Callback_HeroAdmire_exchangeHero __cb)
    {
        return begin_exchangeHero(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exchangeHero(int heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exchangeHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exchangeHero_name, __cb);
        try
        {
            __result.__prepare(__exchangeHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_exchangeHero(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exchangeHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean exchangeHero_async(AMI_HeroAdmire_exchangeHero __cb, int heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeHero_name);
            __r = begin_exchangeHero(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean exchangeHero_async(AMI_HeroAdmire_exchangeHero __cb, int heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeHero_name);
            __r = begin_exchangeHero(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __presentHero_name = "presentHero";

    public int presentHero(int id)
        throws NoteException
    {
        return presentHero(id, null, false);
    }

    public int presentHero(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return presentHero(id, __ctx, true);
    }

    private int presentHero(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "presentHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("presentHero");
                    __delBase = __getDelegate(false);
                    _HeroAdmireDel __del = (_HeroAdmireDel)__delBase;
                    return __del.presentHero(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_presentHero(int id)
    {
        return begin_presentHero(id, null, false, null);
    }

    public Ice.AsyncResult begin_presentHero(int id, java.util.Map<String, String> __ctx)
    {
        return begin_presentHero(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_presentHero(int id, Ice.Callback __cb)
    {
        return begin_presentHero(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_presentHero(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_presentHero(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_presentHero(int id, Callback_HeroAdmire_presentHero __cb)
    {
        return begin_presentHero(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_presentHero(int id, java.util.Map<String, String> __ctx, Callback_HeroAdmire_presentHero __cb)
    {
        return begin_presentHero(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_presentHero(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__presentHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __presentHero_name, __cb);
        try
        {
            __result.__prepare(__presentHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_presentHero(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __presentHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean presentHero_async(AMI_HeroAdmire_presentHero __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__presentHero_name);
            __r = begin_presentHero(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __presentHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean presentHero_async(AMI_HeroAdmire_presentHero __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__presentHero_name);
            __r = begin_presentHero(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __presentHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectAdmireShow_name = "selectAdmireShow";

    public String selectAdmireShow()
        throws NoteException
    {
        return selectAdmireShow(null, false);
    }

    public String selectAdmireShow(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selectAdmireShow(__ctx, true);
    }

    private String selectAdmireShow(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectAdmireShow", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectAdmireShow");
                    __delBase = __getDelegate(false);
                    _HeroAdmireDel __del = (_HeroAdmireDel)__delBase;
                    return __del.selectAdmireShow(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectAdmireShow()
    {
        return begin_selectAdmireShow(null, false, null);
    }

    public Ice.AsyncResult begin_selectAdmireShow(java.util.Map<String, String> __ctx)
    {
        return begin_selectAdmireShow(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selectAdmireShow(Ice.Callback __cb)
    {
        return begin_selectAdmireShow(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectAdmireShow(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectAdmireShow(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectAdmireShow(Callback_HeroAdmire_selectAdmireShow __cb)
    {
        return begin_selectAdmireShow(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectAdmireShow(java.util.Map<String, String> __ctx, Callback_HeroAdmire_selectAdmireShow __cb)
    {
        return begin_selectAdmireShow(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectAdmireShow(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectAdmireShow_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectAdmireShow_name, __cb);
        try
        {
            __result.__prepare(__selectAdmireShow_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selectAdmireShow(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectAdmireShow_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectAdmireShow_async(AMI_HeroAdmire_selectAdmireShow __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectAdmireShow_name);
            __r = begin_selectAdmireShow(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectAdmireShow_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectAdmireShow_async(AMI_HeroAdmire_selectAdmireShow __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectAdmireShow_name);
            __r = begin_selectAdmireShow(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectAdmireShow_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __summonHero_name = "summonHero";

    public int summonHero()
        throws NoteException
    {
        return summonHero(null, false);
    }

    public int summonHero(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return summonHero(__ctx, true);
    }

    private int summonHero(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "summonHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("summonHero");
                    __delBase = __getDelegate(false);
                    _HeroAdmireDel __del = (_HeroAdmireDel)__delBase;
                    return __del.summonHero(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_summonHero()
    {
        return begin_summonHero(null, false, null);
    }

    public Ice.AsyncResult begin_summonHero(java.util.Map<String, String> __ctx)
    {
        return begin_summonHero(__ctx, true, null);
    }

    public Ice.AsyncResult begin_summonHero(Ice.Callback __cb)
    {
        return begin_summonHero(null, false, __cb);
    }

    public Ice.AsyncResult begin_summonHero(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_summonHero(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_summonHero(Callback_HeroAdmire_summonHero __cb)
    {
        return begin_summonHero(null, false, __cb);
    }

    public Ice.AsyncResult begin_summonHero(java.util.Map<String, String> __ctx, Callback_HeroAdmire_summonHero __cb)
    {
        return begin_summonHero(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_summonHero(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__summonHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __summonHero_name, __cb);
        try
        {
            __result.__prepare(__summonHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_summonHero(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __summonHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean summonHero_async(AMI_HeroAdmire_summonHero __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__summonHero_name);
            __r = begin_summonHero(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __summonHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean summonHero_async(AMI_HeroAdmire_summonHero __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__summonHero_name);
            __r = begin_summonHero(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __summonHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static HeroAdmirePrx checkedCast(Ice.ObjectPrx __obj)
    {
        HeroAdmirePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroAdmirePrx)
            {
                __d = (HeroAdmirePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    HeroAdmirePrxHelper __h = new HeroAdmirePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static HeroAdmirePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        HeroAdmirePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroAdmirePrx)
            {
                __d = (HeroAdmirePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    HeroAdmirePrxHelper __h = new HeroAdmirePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static HeroAdmirePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        HeroAdmirePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    HeroAdmirePrxHelper __h = new HeroAdmirePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static HeroAdmirePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        HeroAdmirePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    HeroAdmirePrxHelper __h = new HeroAdmirePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static HeroAdmirePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        HeroAdmirePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroAdmirePrx)
            {
                __d = (HeroAdmirePrx)__obj;
            }
            else
            {
                HeroAdmirePrxHelper __h = new HeroAdmirePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static HeroAdmirePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        HeroAdmirePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            HeroAdmirePrxHelper __h = new HeroAdmirePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::HeroAdmire"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _HeroAdmireDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _HeroAdmireDelD();
    }

    public static void __write(IceInternal.BasicStream __os, HeroAdmirePrx v)
    {
        __os.writeProxy(v);
    }

    public static HeroAdmirePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            HeroAdmirePrxHelper result = new HeroAdmirePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
