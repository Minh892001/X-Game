// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `HeroAwaken.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface HeroAwakenPrx extends Ice.ObjectPrx
{
    public int awakenHero(String heroId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public int awakenHero(String heroId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_awakenHero(String heroId);

    public Ice.AsyncResult begin_awakenHero(String heroId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_awakenHero(String heroId, Ice.Callback __cb);

    public Ice.AsyncResult begin_awakenHero(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_awakenHero(String heroId, Callback_HeroAwaken_awakenHero __cb);

    public Ice.AsyncResult begin_awakenHero(String heroId, java.util.Map<String, String> __ctx, Callback_HeroAwaken_awakenHero __cb);

    public int end_awakenHero(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean awakenHero_async(AMI_HeroAwaken_awakenHero __cb, String heroId);

    public boolean awakenHero_async(AMI_HeroAwaken_awakenHero __cb, String heroId, java.util.Map<String, String> __ctx);

    public String heroBaptizeShow(String heroId)
        throws NoteException;

    public String heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId);

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, Ice.Callback __cb);

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, Callback_HeroAwaken_heroBaptizeShow __cb);

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx, Callback_HeroAwaken_heroBaptizeShow __cb);

    public String end_heroBaptizeShow(Ice.AsyncResult __result)
        throws NoteException;

    public boolean heroBaptizeShow_async(AMI_HeroAwaken_heroBaptizeShow __cb, String heroId);

    public boolean heroBaptizeShow_async(AMI_HeroAwaken_heroBaptizeShow __cb, String heroId, java.util.Map<String, String> __ctx);

    public String heroBaptize(String heroId, boolean isTenTimes)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public String heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes);

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, Ice.Callback __cb);

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, Callback_HeroAwaken_heroBaptize __cb);

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx, Callback_HeroAwaken_heroBaptize __cb);

    public String end_heroBaptize(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean heroBaptize_async(AMI_HeroAwaken_heroBaptize __cb, String heroId, boolean isTenTimes);

    public boolean heroBaptize_async(AMI_HeroAwaken_heroBaptize __cb, String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx);

    public String baptizeUpgrade(String heroId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public String baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId);

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, Ice.Callback __cb);

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, Callback_HeroAwaken_baptizeUpgrade __cb);

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx, Callback_HeroAwaken_baptizeUpgrade __cb);

    public String end_baptizeUpgrade(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean baptizeUpgrade_async(AMI_HeroAwaken_baptizeUpgrade __cb, String heroId);

    public boolean baptizeUpgrade_async(AMI_HeroAwaken_baptizeUpgrade __cb, String heroId, java.util.Map<String, String> __ctx);

    public String baptizeReset(String heroId)
        throws NoteException;

    public String baptizeReset(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_baptizeReset(String heroId);

    public Ice.AsyncResult begin_baptizeReset(String heroId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_baptizeReset(String heroId, Ice.Callback __cb);

    public Ice.AsyncResult begin_baptizeReset(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_baptizeReset(String heroId, Callback_HeroAwaken_baptizeReset __cb);

    public Ice.AsyncResult begin_baptizeReset(String heroId, java.util.Map<String, String> __ctx, Callback_HeroAwaken_baptizeReset __cb);

    public String end_baptizeReset(Ice.AsyncResult __result)
        throws NoteException;

    public boolean baptizeReset_async(AMI_HeroAwaken_baptizeReset __cb, String heroId);

    public boolean baptizeReset_async(AMI_HeroAwaken_baptizeReset __cb, String heroId, java.util.Map<String, String> __ctx);
}
