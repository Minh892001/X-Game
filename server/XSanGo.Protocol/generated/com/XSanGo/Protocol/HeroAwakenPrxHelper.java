// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `HeroAwaken.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class HeroAwakenPrxHelper extends Ice.ObjectPrxHelperBase implements HeroAwakenPrx
{
    private static final String __awakenHero_name = "awakenHero";

    public int awakenHero(String heroId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return awakenHero(heroId, null, false);
    }

    public int awakenHero(String heroId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return awakenHero(heroId, __ctx, true);
    }

    private int awakenHero(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "awakenHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("awakenHero");
                    __delBase = __getDelegate(false);
                    _HeroAwakenDel __del = (_HeroAwakenDel)__delBase;
                    return __del.awakenHero(heroId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_awakenHero(String heroId)
    {
        return begin_awakenHero(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_awakenHero(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_awakenHero(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_awakenHero(String heroId, Ice.Callback __cb)
    {
        return begin_awakenHero(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_awakenHero(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_awakenHero(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_awakenHero(String heroId, Callback_HeroAwaken_awakenHero __cb)
    {
        return begin_awakenHero(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_awakenHero(String heroId, java.util.Map<String, String> __ctx, Callback_HeroAwaken_awakenHero __cb)
    {
        return begin_awakenHero(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_awakenHero(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__awakenHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __awakenHero_name, __cb);
        try
        {
            __result.__prepare(__awakenHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_awakenHero(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __awakenHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean awakenHero_async(AMI_HeroAwaken_awakenHero __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__awakenHero_name);
            __r = begin_awakenHero(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __awakenHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean awakenHero_async(AMI_HeroAwaken_awakenHero __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__awakenHero_name);
            __r = begin_awakenHero(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __awakenHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __baptizeReset_name = "baptizeReset";

    public String baptizeReset(String heroId)
        throws NoteException
    {
        return baptizeReset(heroId, null, false);
    }

    public String baptizeReset(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return baptizeReset(heroId, __ctx, true);
    }

    private String baptizeReset(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "baptizeReset", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("baptizeReset");
                    __delBase = __getDelegate(false);
                    _HeroAwakenDel __del = (_HeroAwakenDel)__delBase;
                    return __del.baptizeReset(heroId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_baptizeReset(String heroId)
    {
        return begin_baptizeReset(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_baptizeReset(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_baptizeReset(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_baptizeReset(String heroId, Ice.Callback __cb)
    {
        return begin_baptizeReset(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_baptizeReset(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_baptizeReset(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_baptizeReset(String heroId, Callback_HeroAwaken_baptizeReset __cb)
    {
        return begin_baptizeReset(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_baptizeReset(String heroId, java.util.Map<String, String> __ctx, Callback_HeroAwaken_baptizeReset __cb)
    {
        return begin_baptizeReset(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_baptizeReset(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__baptizeReset_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __baptizeReset_name, __cb);
        try
        {
            __result.__prepare(__baptizeReset_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_baptizeReset(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __baptizeReset_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean baptizeReset_async(AMI_HeroAwaken_baptizeReset __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__baptizeReset_name);
            __r = begin_baptizeReset(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __baptizeReset_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean baptizeReset_async(AMI_HeroAwaken_baptizeReset __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__baptizeReset_name);
            __r = begin_baptizeReset(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __baptizeReset_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __baptizeUpgrade_name = "baptizeUpgrade";

    public String baptizeUpgrade(String heroId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return baptizeUpgrade(heroId, null, false);
    }

    public String baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return baptizeUpgrade(heroId, __ctx, true);
    }

    private String baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "baptizeUpgrade", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("baptizeUpgrade");
                    __delBase = __getDelegate(false);
                    _HeroAwakenDel __del = (_HeroAwakenDel)__delBase;
                    return __del.baptizeUpgrade(heroId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId)
    {
        return begin_baptizeUpgrade(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_baptizeUpgrade(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, Ice.Callback __cb)
    {
        return begin_baptizeUpgrade(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_baptizeUpgrade(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, Callback_HeroAwaken_baptizeUpgrade __cb)
    {
        return begin_baptizeUpgrade(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx, Callback_HeroAwaken_baptizeUpgrade __cb)
    {
        return begin_baptizeUpgrade(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_baptizeUpgrade(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__baptizeUpgrade_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __baptizeUpgrade_name, __cb);
        try
        {
            __result.__prepare(__baptizeUpgrade_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_baptizeUpgrade(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __baptizeUpgrade_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean baptizeUpgrade_async(AMI_HeroAwaken_baptizeUpgrade __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__baptizeUpgrade_name);
            __r = begin_baptizeUpgrade(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __baptizeUpgrade_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean baptizeUpgrade_async(AMI_HeroAwaken_baptizeUpgrade __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__baptizeUpgrade_name);
            __r = begin_baptizeUpgrade(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __baptizeUpgrade_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __heroBaptize_name = "heroBaptize";

    public String heroBaptize(String heroId, boolean isTenTimes)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return heroBaptize(heroId, isTenTimes, null, false);
    }

    public String heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return heroBaptize(heroId, isTenTimes, __ctx, true);
    }

    private String heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "heroBaptize", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("heroBaptize");
                    __delBase = __getDelegate(false);
                    _HeroAwakenDel __del = (_HeroAwakenDel)__delBase;
                    return __del.heroBaptize(heroId, isTenTimes, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes)
    {
        return begin_heroBaptize(heroId, isTenTimes, null, false, null);
    }

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx)
    {
        return begin_heroBaptize(heroId, isTenTimes, __ctx, true, null);
    }

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, Ice.Callback __cb)
    {
        return begin_heroBaptize(heroId, isTenTimes, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_heroBaptize(heroId, isTenTimes, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, Callback_HeroAwaken_heroBaptize __cb)
    {
        return begin_heroBaptize(heroId, isTenTimes, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx, Callback_HeroAwaken_heroBaptize __cb)
    {
        return begin_heroBaptize(heroId, isTenTimes, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_heroBaptize(String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__heroBaptize_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __heroBaptize_name, __cb);
        try
        {
            __result.__prepare(__heroBaptize_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeBool(isTenTimes);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_heroBaptize(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __heroBaptize_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean heroBaptize_async(AMI_HeroAwaken_heroBaptize __cb, String heroId, boolean isTenTimes)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroBaptize_name);
            __r = begin_heroBaptize(heroId, isTenTimes, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroBaptize_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean heroBaptize_async(AMI_HeroAwaken_heroBaptize __cb, String heroId, boolean isTenTimes, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroBaptize_name);
            __r = begin_heroBaptize(heroId, isTenTimes, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroBaptize_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __heroBaptizeShow_name = "heroBaptizeShow";

    public String heroBaptizeShow(String heroId)
        throws NoteException
    {
        return heroBaptizeShow(heroId, null, false);
    }

    public String heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return heroBaptizeShow(heroId, __ctx, true);
    }

    private String heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "heroBaptizeShow", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("heroBaptizeShow");
                    __delBase = __getDelegate(false);
                    _HeroAwakenDel __del = (_HeroAwakenDel)__delBase;
                    return __del.heroBaptizeShow(heroId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId)
    {
        return begin_heroBaptizeShow(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_heroBaptizeShow(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, Ice.Callback __cb)
    {
        return begin_heroBaptizeShow(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_heroBaptizeShow(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, Callback_HeroAwaken_heroBaptizeShow __cb)
    {
        return begin_heroBaptizeShow(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx, Callback_HeroAwaken_heroBaptizeShow __cb)
    {
        return begin_heroBaptizeShow(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_heroBaptizeShow(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__heroBaptizeShow_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __heroBaptizeShow_name, __cb);
        try
        {
            __result.__prepare(__heroBaptizeShow_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_heroBaptizeShow(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __heroBaptizeShow_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean heroBaptizeShow_async(AMI_HeroAwaken_heroBaptizeShow __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroBaptizeShow_name);
            __r = begin_heroBaptizeShow(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroBaptizeShow_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean heroBaptizeShow_async(AMI_HeroAwaken_heroBaptizeShow __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroBaptizeShow_name);
            __r = begin_heroBaptizeShow(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroBaptizeShow_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static HeroAwakenPrx checkedCast(Ice.ObjectPrx __obj)
    {
        HeroAwakenPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroAwakenPrx)
            {
                __d = (HeroAwakenPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    HeroAwakenPrxHelper __h = new HeroAwakenPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static HeroAwakenPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        HeroAwakenPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroAwakenPrx)
            {
                __d = (HeroAwakenPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    HeroAwakenPrxHelper __h = new HeroAwakenPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static HeroAwakenPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        HeroAwakenPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    HeroAwakenPrxHelper __h = new HeroAwakenPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static HeroAwakenPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        HeroAwakenPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    HeroAwakenPrxHelper __h = new HeroAwakenPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static HeroAwakenPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        HeroAwakenPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroAwakenPrx)
            {
                __d = (HeroAwakenPrx)__obj;
            }
            else
            {
                HeroAwakenPrxHelper __h = new HeroAwakenPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static HeroAwakenPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        HeroAwakenPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            HeroAwakenPrxHelper __h = new HeroAwakenPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::HeroAwaken"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _HeroAwakenDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _HeroAwakenDelD();
    }

    public static void __write(IceInternal.BasicStream __os, HeroAwakenPrx v)
    {
        __os.writeProxy(v);
    }

    public static HeroAwakenPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            HeroAwakenPrxHelper result = new HeroAwakenPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
