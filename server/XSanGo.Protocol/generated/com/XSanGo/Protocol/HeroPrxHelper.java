// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Hero.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class HeroPrxHelper extends Ice.ObjectPrxHelperBase implements HeroPrx
{
    private static final String __activeHeroRelation_name = "activeHeroRelation";

    public void activeHeroRelation(String heroId, int orignalRelationId, int level)
        throws NotEnoughMoneyException,
               NoteException
    {
        activeHeroRelation(heroId, orignalRelationId, level, null, false);
    }

    public void activeHeroRelation(String heroId, int orignalRelationId, int level, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        activeHeroRelation(heroId, orignalRelationId, level, __ctx, true);
    }

    private void activeHeroRelation(String heroId, int orignalRelationId, int level, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "activeHeroRelation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("activeHeroRelation");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    __del.activeHeroRelation(heroId, orignalRelationId, level, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_activeHeroRelation(String heroId, int orignalRelationId, int level)
    {
        return begin_activeHeroRelation(heroId, orignalRelationId, level, null, false, null);
    }

    public Ice.AsyncResult begin_activeHeroRelation(String heroId, int orignalRelationId, int level, java.util.Map<String, String> __ctx)
    {
        return begin_activeHeroRelation(heroId, orignalRelationId, level, __ctx, true, null);
    }

    public Ice.AsyncResult begin_activeHeroRelation(String heroId, int orignalRelationId, int level, Ice.Callback __cb)
    {
        return begin_activeHeroRelation(heroId, orignalRelationId, level, null, false, __cb);
    }

    public Ice.AsyncResult begin_activeHeroRelation(String heroId, int orignalRelationId, int level, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_activeHeroRelation(heroId, orignalRelationId, level, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_activeHeroRelation(String heroId, int orignalRelationId, int level, Callback_Hero_activeHeroRelation __cb)
    {
        return begin_activeHeroRelation(heroId, orignalRelationId, level, null, false, __cb);
    }

    public Ice.AsyncResult begin_activeHeroRelation(String heroId, int orignalRelationId, int level, java.util.Map<String, String> __ctx, Callback_Hero_activeHeroRelation __cb)
    {
        return begin_activeHeroRelation(heroId, orignalRelationId, level, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_activeHeroRelation(String heroId, int orignalRelationId, int level, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__activeHeroRelation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __activeHeroRelation_name, __cb);
        try
        {
            __result.__prepare(__activeHeroRelation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeInt(orignalRelationId);
            __os.writeInt(level);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_activeHeroRelation(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __activeHeroRelation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean activeHeroRelation_async(AMI_Hero_activeHeroRelation __cb, String heroId, int orignalRelationId, int level)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__activeHeroRelation_name);
            __r = begin_activeHeroRelation(heroId, orignalRelationId, level, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __activeHeroRelation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean activeHeroRelation_async(AMI_Hero_activeHeroRelation __cb, String heroId, int orignalRelationId, int level, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__activeHeroRelation_name);
            __r = begin_activeHeroRelation(heroId, orignalRelationId, level, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __activeHeroRelation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyHeroSkillPoint_name = "buyHeroSkillPoint";

    public void buyHeroSkillPoint()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyHeroSkillPoint(null, false);
    }

    public void buyHeroSkillPoint(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyHeroSkillPoint(__ctx, true);
    }

    private void buyHeroSkillPoint(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyHeroSkillPoint", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyHeroSkillPoint");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    __del.buyHeroSkillPoint(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyHeroSkillPoint()
    {
        return begin_buyHeroSkillPoint(null, false, null);
    }

    public Ice.AsyncResult begin_buyHeroSkillPoint(java.util.Map<String, String> __ctx)
    {
        return begin_buyHeroSkillPoint(__ctx, true, null);
    }

    public Ice.AsyncResult begin_buyHeroSkillPoint(Ice.Callback __cb)
    {
        return begin_buyHeroSkillPoint(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyHeroSkillPoint(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyHeroSkillPoint(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyHeroSkillPoint(Callback_Hero_buyHeroSkillPoint __cb)
    {
        return begin_buyHeroSkillPoint(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyHeroSkillPoint(java.util.Map<String, String> __ctx, Callback_Hero_buyHeroSkillPoint __cb)
    {
        return begin_buyHeroSkillPoint(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyHeroSkillPoint(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyHeroSkillPoint_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyHeroSkillPoint_name, __cb);
        try
        {
            __result.__prepare(__buyHeroSkillPoint_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyHeroSkillPoint(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyHeroSkillPoint_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyHeroSkillPoint_async(AMI_Hero_buyHeroSkillPoint __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyHeroSkillPoint_name);
            __r = begin_buyHeroSkillPoint(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyHeroSkillPoint_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyHeroSkillPoint_async(AMI_Hero_buyHeroSkillPoint __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyHeroSkillPoint_name);
            __r = begin_buyHeroSkillPoint(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyHeroSkillPoint_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getHeroPracticeList_name = "getHeroPracticeList";

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     **/
    public String getHeroPracticeList(String heroId)
        throws NoteException
    {
        return getHeroPracticeList(heroId, null, false);
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getHeroPracticeList(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getHeroPracticeList(heroId, __ctx, true);
    }

    private String getHeroPracticeList(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getHeroPracticeList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getHeroPracticeList");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    return __del.getHeroPracticeList(heroId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHeroPracticeList(String heroId)
    {
        return begin_getHeroPracticeList(heroId, null, false, null);
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHeroPracticeList(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_getHeroPracticeList(heroId, __ctx, true, null);
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHeroPracticeList(String heroId, Ice.Callback __cb)
    {
        return begin_getHeroPracticeList(heroId, null, false, __cb);
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHeroPracticeList(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getHeroPracticeList(heroId, __ctx, true, __cb);
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHeroPracticeList(String heroId, Callback_Hero_getHeroPracticeList __cb)
    {
        return begin_getHeroPracticeList(heroId, null, false, __cb);
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHeroPracticeList(String heroId, java.util.Map<String, String> __ctx, Callback_Hero_getHeroPracticeList __cb)
    {
        return begin_getHeroPracticeList(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getHeroPracticeList(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getHeroPracticeList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getHeroPracticeList_name, __cb);
        try
        {
            __result.__prepare(__getHeroPracticeList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getHeroPracticeList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getHeroPracticeList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getHeroPracticeList_async(AMI_Hero_getHeroPracticeList __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHeroPracticeList_name);
            __r = begin_getHeroPracticeList(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHeroPracticeList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getHeroPracticeList_async(AMI_Hero_getHeroPracticeList __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHeroPracticeList_name);
            __r = begin_getHeroPracticeList(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHeroPracticeList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getHeroSkillView_name = "getHeroSkillView";

    public HeroSkillPointView getHeroSkillView()
    {
        return getHeroSkillView(null, false);
    }

    public HeroSkillPointView getHeroSkillView(java.util.Map<String, String> __ctx)
    {
        return getHeroSkillView(__ctx, true);
    }

    private HeroSkillPointView getHeroSkillView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getHeroSkillView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getHeroSkillView");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    return __del.getHeroSkillView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getHeroSkillView()
    {
        return begin_getHeroSkillView(null, false, null);
    }

    public Ice.AsyncResult begin_getHeroSkillView(java.util.Map<String, String> __ctx)
    {
        return begin_getHeroSkillView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getHeroSkillView(Ice.Callback __cb)
    {
        return begin_getHeroSkillView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getHeroSkillView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillView(Callback_Hero_getHeroSkillView __cb)
    {
        return begin_getHeroSkillView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getHeroSkillView(java.util.Map<String, String> __ctx, Callback_Hero_getHeroSkillView __cb)
    {
        return begin_getHeroSkillView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getHeroSkillView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getHeroSkillView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getHeroSkillView_name, __cb);
        try
        {
            __result.__prepare(__getHeroSkillView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public HeroSkillPointView end_getHeroSkillView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getHeroSkillView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            HeroSkillPointView __ret;
            __ret = new HeroSkillPointView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getHeroSkillView_async(AMI_Hero_getHeroSkillView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHeroSkillView_name);
            __r = begin_getHeroSkillView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHeroSkillView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getHeroSkillView_async(AMI_Hero_getHeroSkillView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHeroSkillView_name);
            __r = begin_getHeroSkillView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHeroSkillView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSkillPointInterval_name = "getSkillPointInterval";

    public int getSkillPointInterval()
    {
        return getSkillPointInterval(null, false);
    }

    public int getSkillPointInterval(java.util.Map<String, String> __ctx)
    {
        return getSkillPointInterval(__ctx, true);
    }

    private int getSkillPointInterval(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSkillPointInterval", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSkillPointInterval");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    return __del.getSkillPointInterval(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSkillPointInterval()
    {
        return begin_getSkillPointInterval(null, false, null);
    }

    public Ice.AsyncResult begin_getSkillPointInterval(java.util.Map<String, String> __ctx)
    {
        return begin_getSkillPointInterval(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSkillPointInterval(Ice.Callback __cb)
    {
        return begin_getSkillPointInterval(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSkillPointInterval(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSkillPointInterval(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSkillPointInterval(Callback_Hero_getSkillPointInterval __cb)
    {
        return begin_getSkillPointInterval(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSkillPointInterval(java.util.Map<String, String> __ctx, Callback_Hero_getSkillPointInterval __cb)
    {
        return begin_getSkillPointInterval(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSkillPointInterval(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSkillPointInterval_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSkillPointInterval_name, __cb);
        try
        {
            __result.__prepare(__getSkillPointInterval_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getSkillPointInterval(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSkillPointInterval_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getSkillPointInterval_async(AMI_Hero_getSkillPointInterval __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSkillPointInterval_name);
            __r = begin_getSkillPointInterval(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSkillPointInterval_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getSkillPointInterval_async(AMI_Hero_getSkillPointInterval __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSkillPointInterval_name);
            __r = begin_getSkillPointInterval(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSkillPointInterval_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __heroColorUp_name = "heroColorUp";

    public ItemView[] heroColorUp(String heroId)
        throws NotEnoughMoneyException,
               NoteException
    {
        return heroColorUp(heroId, null, false);
    }

    public ItemView[] heroColorUp(String heroId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return heroColorUp(heroId, __ctx, true);
    }

    private ItemView[] heroColorUp(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "heroColorUp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("heroColorUp");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    return __del.heroColorUp(heroId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_heroColorUp(String heroId)
    {
        return begin_heroColorUp(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_heroColorUp(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_heroColorUp(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_heroColorUp(String heroId, Ice.Callback __cb)
    {
        return begin_heroColorUp(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroColorUp(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_heroColorUp(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_heroColorUp(String heroId, Callback_Hero_heroColorUp __cb)
    {
        return begin_heroColorUp(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroColorUp(String heroId, java.util.Map<String, String> __ctx, Callback_Hero_heroColorUp __cb)
    {
        return begin_heroColorUp(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_heroColorUp(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__heroColorUp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __heroColorUp_name, __cb);
        try
        {
            __result.__prepare(__heroColorUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView[] end_heroColorUp(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __heroColorUp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView[] __ret;
            __ret = ItemViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean heroColorUp_async(AMI_Hero_heroColorUp __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroColorUp_name);
            __r = begin_heroColorUp(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroColorUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean heroColorUp_async(AMI_Hero_heroColorUp __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroColorUp_name);
            __r = begin_heroColorUp(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroColorUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __heroSkillLevelUp_name = "heroSkillLevelUp";

    public void heroSkillLevelUp(String heroId, int skillId, int upLevel)
        throws NotEnoughMoneyException,
               NoteException
    {
        heroSkillLevelUp(heroId, skillId, upLevel, null, false);
    }

    public void heroSkillLevelUp(String heroId, int skillId, int upLevel, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        heroSkillLevelUp(heroId, skillId, upLevel, __ctx, true);
    }

    private void heroSkillLevelUp(String heroId, int skillId, int upLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "heroSkillLevelUp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("heroSkillLevelUp");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    __del.heroSkillLevelUp(heroId, skillId, upLevel, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_heroSkillLevelUp(String heroId, int skillId, int upLevel)
    {
        return begin_heroSkillLevelUp(heroId, skillId, upLevel, null, false, null);
    }

    public Ice.AsyncResult begin_heroSkillLevelUp(String heroId, int skillId, int upLevel, java.util.Map<String, String> __ctx)
    {
        return begin_heroSkillLevelUp(heroId, skillId, upLevel, __ctx, true, null);
    }

    public Ice.AsyncResult begin_heroSkillLevelUp(String heroId, int skillId, int upLevel, Ice.Callback __cb)
    {
        return begin_heroSkillLevelUp(heroId, skillId, upLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroSkillLevelUp(String heroId, int skillId, int upLevel, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_heroSkillLevelUp(heroId, skillId, upLevel, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_heroSkillLevelUp(String heroId, int skillId, int upLevel, Callback_Hero_heroSkillLevelUp __cb)
    {
        return begin_heroSkillLevelUp(heroId, skillId, upLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroSkillLevelUp(String heroId, int skillId, int upLevel, java.util.Map<String, String> __ctx, Callback_Hero_heroSkillLevelUp __cb)
    {
        return begin_heroSkillLevelUp(heroId, skillId, upLevel, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_heroSkillLevelUp(String heroId, int skillId, int upLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__heroSkillLevelUp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __heroSkillLevelUp_name, __cb);
        try
        {
            __result.__prepare(__heroSkillLevelUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeInt(skillId);
            __os.writeInt(upLevel);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_heroSkillLevelUp(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __heroSkillLevelUp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean heroSkillLevelUp_async(AMI_Hero_heroSkillLevelUp __cb, String heroId, int skillId, int upLevel)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroSkillLevelUp_name);
            __r = begin_heroSkillLevelUp(heroId, skillId, upLevel, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroSkillLevelUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean heroSkillLevelUp_async(AMI_Hero_heroSkillLevelUp __cb, String heroId, int skillId, int upLevel, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroSkillLevelUp_name);
            __r = begin_heroSkillLevelUp(heroId, skillId, upLevel, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroSkillLevelUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __heroStarUp_name = "heroStarUp";

    public void heroStarUp(String heroId)
        throws NotEnoughMoneyException,
               NoteException
    {
        heroStarUp(heroId, null, false);
    }

    public void heroStarUp(String heroId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        heroStarUp(heroId, __ctx, true);
    }

    private void heroStarUp(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "heroStarUp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("heroStarUp");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    __del.heroStarUp(heroId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_heroStarUp(String heroId)
    {
        return begin_heroStarUp(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_heroStarUp(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_heroStarUp(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_heroStarUp(String heroId, Ice.Callback __cb)
    {
        return begin_heroStarUp(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroStarUp(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_heroStarUp(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_heroStarUp(String heroId, Callback_Hero_heroStarUp __cb)
    {
        return begin_heroStarUp(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroStarUp(String heroId, java.util.Map<String, String> __ctx, Callback_Hero_heroStarUp __cb)
    {
        return begin_heroStarUp(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_heroStarUp(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__heroStarUp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __heroStarUp_name, __cb);
        try
        {
            __result.__prepare(__heroStarUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_heroStarUp(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __heroStarUp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean heroStarUp_async(AMI_Hero_heroStarUp __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroStarUp_name);
            __r = begin_heroStarUp(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroStarUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean heroStarUp_async(AMI_Hero_heroStarUp __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroStarUp_name);
            __r = begin_heroStarUp(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroStarUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __practice_name = "practice";

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     **/
    public void practice(String heroId, int id, String itemIds)
        throws NoteException
    {
        practice(heroId, id, itemIds, null, false);
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __ctx The Context map to send with the invocation.
     **/
    public void practice(String heroId, int id, String itemIds, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        practice(heroId, id, itemIds, __ctx, true);
    }

    private void practice(String heroId, int id, String itemIds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "practice", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("practice");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    __del.practice(heroId, id, itemIds, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_practice(String heroId, int id, String itemIds)
    {
        return begin_practice(heroId, id, itemIds, null, false, null);
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_practice(String heroId, int id, String itemIds, java.util.Map<String, String> __ctx)
    {
        return begin_practice(heroId, id, itemIds, __ctx, true, null);
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_practice(String heroId, int id, String itemIds, Ice.Callback __cb)
    {
        return begin_practice(heroId, id, itemIds, null, false, __cb);
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_practice(String heroId, int id, String itemIds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_practice(heroId, id, itemIds, __ctx, true, __cb);
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_practice(String heroId, int id, String itemIds, Callback_Hero_practice __cb)
    {
        return begin_practice(heroId, id, itemIds, null, false, __cb);
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_practice(String heroId, int id, String itemIds, java.util.Map<String, String> __ctx, Callback_Hero_practice __cb)
    {
        return begin_practice(heroId, id, itemIds, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_practice(String heroId, int id, String itemIds, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__practice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __practice_name, __cb);
        try
        {
            __result.__prepare(__practice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeInt(id);
            __os.writeString(itemIds);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_practice(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __practice_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __cb The callback object for the operation.
     **/
    public boolean practice_async(AMI_Hero_practice __cb, String heroId, int id, String itemIds)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__practice_name);
            __r = begin_practice(heroId, id, itemIds, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __practice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean practice_async(AMI_Hero_practice __cb, String heroId, int id, String itemIds, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__practice_name);
            __r = begin_practice(heroId, id, itemIds, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __practice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __removeHeroEquip_name = "removeHeroEquip";

    public void removeHeroEquip(String heroId, String equipId)
        throws NoteException
    {
        removeHeroEquip(heroId, equipId, null, false);
    }

    public void removeHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        removeHeroEquip(heroId, equipId, __ctx, true);
    }

    private void removeHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeHeroEquip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("removeHeroEquip");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    __del.removeHeroEquip(heroId, equipId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeHeroEquip(String heroId, String equipId)
    {
        return begin_removeHeroEquip(heroId, equipId, null, false, null);
    }

    public Ice.AsyncResult begin_removeHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx)
    {
        return begin_removeHeroEquip(heroId, equipId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeHeroEquip(String heroId, String equipId, Ice.Callback __cb)
    {
        return begin_removeHeroEquip(heroId, equipId, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeHeroEquip(heroId, equipId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeHeroEquip(String heroId, String equipId, Callback_Hero_removeHeroEquip __cb)
    {
        return begin_removeHeroEquip(heroId, equipId, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx, Callback_Hero_removeHeroEquip __cb)
    {
        return begin_removeHeroEquip(heroId, equipId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeHeroEquip_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeHeroEquip_name, __cb);
        try
        {
            __result.__prepare(__removeHeroEquip_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeString(equipId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeHeroEquip(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __removeHeroEquip_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean removeHeroEquip_async(AMI_Hero_removeHeroEquip __cb, String heroId, String equipId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__removeHeroEquip_name);
            __r = begin_removeHeroEquip(heroId, equipId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __removeHeroEquip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean removeHeroEquip_async(AMI_Hero_removeHeroEquip __cb, String heroId, String equipId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__removeHeroEquip_name);
            __r = begin_removeHeroEquip(heroId, equipId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __removeHeroEquip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __resetAttendant_name = "resetAttendant";

    /**
     * 重置随从  当前武将id、随从位置
     **/
    public AttendantView resetAttendant(String heroId, byte pos)
        throws NoteException
    {
        return resetAttendant(heroId, pos, null, false);
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __ctx The Context map to send with the invocation.
     **/
    public AttendantView resetAttendant(String heroId, byte pos, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return resetAttendant(heroId, pos, __ctx, true);
    }

    private AttendantView resetAttendant(String heroId, byte pos, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "resetAttendant", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("resetAttendant");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    return __del.resetAttendant(heroId, pos, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetAttendant(String heroId, byte pos)
    {
        return begin_resetAttendant(heroId, pos, null, false, null);
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetAttendant(String heroId, byte pos, java.util.Map<String, String> __ctx)
    {
        return begin_resetAttendant(heroId, pos, __ctx, true, null);
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetAttendant(String heroId, byte pos, Ice.Callback __cb)
    {
        return begin_resetAttendant(heroId, pos, null, false, __cb);
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetAttendant(String heroId, byte pos, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_resetAttendant(heroId, pos, __ctx, true, __cb);
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetAttendant(String heroId, byte pos, Callback_Hero_resetAttendant __cb)
    {
        return begin_resetAttendant(heroId, pos, null, false, __cb);
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetAttendant(String heroId, byte pos, java.util.Map<String, String> __ctx, Callback_Hero_resetAttendant __cb)
    {
        return begin_resetAttendant(heroId, pos, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_resetAttendant(String heroId, byte pos, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__resetAttendant_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __resetAttendant_name, __cb);
        try
        {
            __result.__prepare(__resetAttendant_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeByte(pos);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public AttendantView end_resetAttendant(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __resetAttendant_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            AttendantView __ret;
            __ret = new AttendantView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __cb The callback object for the operation.
     **/
    public boolean resetAttendant_async(AMI_Hero_resetAttendant __cb, String heroId, byte pos)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetAttendant_name);
            __r = begin_resetAttendant(heroId, pos, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetAttendant_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 重置随从  当前武将id、随从位置
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean resetAttendant_async(AMI_Hero_resetAttendant __cb, String heroId, byte pos, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetAttendant_name);
            __r = begin_resetAttendant(heroId, pos, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetAttendant_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __resetPractice_name = "resetPractice";

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     **/
    public String resetPractice(String heroId, int id)
        throws NoteException
    {
        return resetPractice(heroId, id, null, false);
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String resetPractice(String heroId, int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return resetPractice(heroId, id, __ctx, true);
    }

    private String resetPractice(String heroId, int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "resetPractice", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("resetPractice");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    return __del.resetPractice(heroId, id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetPractice(String heroId, int id)
    {
        return begin_resetPractice(heroId, id, null, false, null);
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetPractice(String heroId, int id, java.util.Map<String, String> __ctx)
    {
        return begin_resetPractice(heroId, id, __ctx, true, null);
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetPractice(String heroId, int id, Ice.Callback __cb)
    {
        return begin_resetPractice(heroId, id, null, false, __cb);
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetPractice(String heroId, int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_resetPractice(heroId, id, __ctx, true, __cb);
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetPractice(String heroId, int id, Callback_Hero_resetPractice __cb)
    {
        return begin_resetPractice(heroId, id, null, false, __cb);
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetPractice(String heroId, int id, java.util.Map<String, String> __ctx, Callback_Hero_resetPractice __cb)
    {
        return begin_resetPractice(heroId, id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_resetPractice(String heroId, int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__resetPractice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __resetPractice_name, __cb);
        try
        {
            __result.__prepare(__resetPractice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_resetPractice(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __resetPractice_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean resetPractice_async(AMI_Hero_resetPractice __cb, String heroId, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetPractice_name);
            __r = begin_resetPractice(heroId, id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetPractice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean resetPractice_async(AMI_Hero_resetPractice __cb, String heroId, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetPractice_name);
            __r = begin_resetPractice(heroId, id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetPractice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setHeroAttendant_name = "setHeroAttendant";

    public void setHeroAttendant(String heroId, byte pos, String attendantId)
        throws NoteException
    {
        setHeroAttendant(heroId, pos, attendantId, null, false);
    }

    public void setHeroAttendant(String heroId, byte pos, String attendantId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setHeroAttendant(heroId, pos, attendantId, __ctx, true);
    }

    private void setHeroAttendant(String heroId, byte pos, String attendantId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setHeroAttendant", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setHeroAttendant");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    __del.setHeroAttendant(heroId, pos, attendantId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setHeroAttendant(String heroId, byte pos, String attendantId)
    {
        return begin_setHeroAttendant(heroId, pos, attendantId, null, false, null);
    }

    public Ice.AsyncResult begin_setHeroAttendant(String heroId, byte pos, String attendantId, java.util.Map<String, String> __ctx)
    {
        return begin_setHeroAttendant(heroId, pos, attendantId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setHeroAttendant(String heroId, byte pos, String attendantId, Ice.Callback __cb)
    {
        return begin_setHeroAttendant(heroId, pos, attendantId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setHeroAttendant(String heroId, byte pos, String attendantId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setHeroAttendant(heroId, pos, attendantId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setHeroAttendant(String heroId, byte pos, String attendantId, Callback_Hero_setHeroAttendant __cb)
    {
        return begin_setHeroAttendant(heroId, pos, attendantId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setHeroAttendant(String heroId, byte pos, String attendantId, java.util.Map<String, String> __ctx, Callback_Hero_setHeroAttendant __cb)
    {
        return begin_setHeroAttendant(heroId, pos, attendantId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setHeroAttendant(String heroId, byte pos, String attendantId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setHeroAttendant_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setHeroAttendant_name, __cb);
        try
        {
            __result.__prepare(__setHeroAttendant_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeByte(pos);
            __os.writeString(attendantId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setHeroAttendant(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setHeroAttendant_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setHeroAttendant_async(AMI_Hero_setHeroAttendant __cb, String heroId, byte pos, String attendantId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeroAttendant_name);
            __r = begin_setHeroAttendant(heroId, pos, attendantId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeroAttendant_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setHeroAttendant_async(AMI_Hero_setHeroAttendant __cb, String heroId, byte pos, String attendantId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeroAttendant_name);
            __r = begin_setHeroAttendant(heroId, pos, attendantId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeroAttendant_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setHeroEquip_name = "setHeroEquip";

    public void setHeroEquip(String heroId, String equipId)
        throws NoteException
    {
        setHeroEquip(heroId, equipId, null, false);
    }

    public void setHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setHeroEquip(heroId, equipId, __ctx, true);
    }

    private void setHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setHeroEquip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setHeroEquip");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    __del.setHeroEquip(heroId, equipId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setHeroEquip(String heroId, String equipId)
    {
        return begin_setHeroEquip(heroId, equipId, null, false, null);
    }

    public Ice.AsyncResult begin_setHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx)
    {
        return begin_setHeroEquip(heroId, equipId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setHeroEquip(String heroId, String equipId, Ice.Callback __cb)
    {
        return begin_setHeroEquip(heroId, equipId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setHeroEquip(heroId, equipId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setHeroEquip(String heroId, String equipId, Callback_Hero_setHeroEquip __cb)
    {
        return begin_setHeroEquip(heroId, equipId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx, Callback_Hero_setHeroEquip __cb)
    {
        return begin_setHeroEquip(heroId, equipId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setHeroEquip(String heroId, String equipId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setHeroEquip_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setHeroEquip_name, __cb);
        try
        {
            __result.__prepare(__setHeroEquip_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeString(equipId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setHeroEquip(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setHeroEquip_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setHeroEquip_async(AMI_Hero_setHeroEquip __cb, String heroId, String equipId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeroEquip_name);
            __r = begin_setHeroEquip(heroId, equipId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeroEquip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setHeroEquip_async(AMI_Hero_setHeroEquip __cb, String heroId, String equipId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeroEquip_name);
            __r = begin_setHeroEquip(heroId, equipId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeroEquip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __summonHero_name = "summonHero";

    public HeroView summonHero(int templateId)
        throws NotEnoughMoneyException,
               NoteException
    {
        return summonHero(templateId, null, false);
    }

    public HeroView summonHero(int templateId, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return summonHero(templateId, __ctx, true);
    }

    private HeroView summonHero(int templateId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "summonHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("summonHero");
                    __delBase = __getDelegate(false);
                    _HeroDel __del = (_HeroDel)__delBase;
                    return __del.summonHero(templateId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_summonHero(int templateId)
    {
        return begin_summonHero(templateId, null, false, null);
    }

    public Ice.AsyncResult begin_summonHero(int templateId, java.util.Map<String, String> __ctx)
    {
        return begin_summonHero(templateId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_summonHero(int templateId, Ice.Callback __cb)
    {
        return begin_summonHero(templateId, null, false, __cb);
    }

    public Ice.AsyncResult begin_summonHero(int templateId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_summonHero(templateId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_summonHero(int templateId, Callback_Hero_summonHero __cb)
    {
        return begin_summonHero(templateId, null, false, __cb);
    }

    public Ice.AsyncResult begin_summonHero(int templateId, java.util.Map<String, String> __ctx, Callback_Hero_summonHero __cb)
    {
        return begin_summonHero(templateId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_summonHero(int templateId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__summonHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __summonHero_name, __cb);
        try
        {
            __result.__prepare(__summonHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(templateId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public HeroView end_summonHero(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __summonHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            HeroView __ret;
            __ret = new HeroView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean summonHero_async(AMI_Hero_summonHero __cb, int templateId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__summonHero_name);
            __r = begin_summonHero(templateId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __summonHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean summonHero_async(AMI_Hero_summonHero __cb, int templateId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__summonHero_name);
            __r = begin_summonHero(templateId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __summonHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static HeroPrx checkedCast(Ice.ObjectPrx __obj)
    {
        HeroPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroPrx)
            {
                __d = (HeroPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    HeroPrxHelper __h = new HeroPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static HeroPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        HeroPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroPrx)
            {
                __d = (HeroPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    HeroPrxHelper __h = new HeroPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static HeroPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        HeroPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    HeroPrxHelper __h = new HeroPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static HeroPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        HeroPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    HeroPrxHelper __h = new HeroPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static HeroPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        HeroPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof HeroPrx)
            {
                __d = (HeroPrx)__obj;
            }
            else
            {
                HeroPrxHelper __h = new HeroPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static HeroPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        HeroPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            HeroPrxHelper __h = new HeroPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Hero"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _HeroDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _HeroDelD();
    }

    public static void __write(IceInternal.BasicStream __os, HeroPrx v)
    {
        __os.writeProxy(v);
    }

    public static HeroPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            HeroPrxHelper result = new HeroPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
