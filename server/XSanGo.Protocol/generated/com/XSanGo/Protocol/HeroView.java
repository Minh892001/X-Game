// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class HeroView implements java.lang.Cloneable, java.io.Serializable
{
    public String id;

    public int templateId;

    public String name;

    public int compositeCombat;

    public short level;

    public byte star;

    public int qualityLevel;

    public int color;

    public byte breakLevel;

    public int exp;

    public int levelupExp;

    public float hpGrow;

    public float powerGrow;

    public float intelGrow;

    public byte qualityAddPercents;

    public GrowableProperty[] properties;

    public String[] equips;

    public IntIntPair[] levelupRelations;

    public IntIntPair[] activeRelations;

    public AttendantView[] attendants;

    public HeroState state;

    public IntIntPair[] skills;

    public boolean isTreasure;

    public byte awakenState;

    public int awakenStar;

    public HeroView()
    {
    }

    public HeroView(String id, int templateId, String name, int compositeCombat, short level, byte star, int qualityLevel, int color, byte breakLevel, int exp, int levelupExp, float hpGrow, float powerGrow, float intelGrow, byte qualityAddPercents, GrowableProperty[] properties, String[] equips, IntIntPair[] levelupRelations, IntIntPair[] activeRelations, AttendantView[] attendants, HeroState state, IntIntPair[] skills, boolean isTreasure, byte awakenState, int awakenStar)
    {
        this.id = id;
        this.templateId = templateId;
        this.name = name;
        this.compositeCombat = compositeCombat;
        this.level = level;
        this.star = star;
        this.qualityLevel = qualityLevel;
        this.color = color;
        this.breakLevel = breakLevel;
        this.exp = exp;
        this.levelupExp = levelupExp;
        this.hpGrow = hpGrow;
        this.powerGrow = powerGrow;
        this.intelGrow = intelGrow;
        this.qualityAddPercents = qualityAddPercents;
        this.properties = properties;
        this.equips = equips;
        this.levelupRelations = levelupRelations;
        this.activeRelations = activeRelations;
        this.attendants = attendants;
        this.state = state;
        this.skills = skills;
        this.isTreasure = isTreasure;
        this.awakenState = awakenState;
        this.awakenStar = awakenStar;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        HeroView _r = null;
        if(rhs instanceof HeroView)
        {
            _r = (HeroView)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(templateId != _r.templateId)
            {
                return false;
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(compositeCombat != _r.compositeCombat)
            {
                return false;
            }
            if(level != _r.level)
            {
                return false;
            }
            if(star != _r.star)
            {
                return false;
            }
            if(qualityLevel != _r.qualityLevel)
            {
                return false;
            }
            if(color != _r.color)
            {
                return false;
            }
            if(breakLevel != _r.breakLevel)
            {
                return false;
            }
            if(exp != _r.exp)
            {
                return false;
            }
            if(levelupExp != _r.levelupExp)
            {
                return false;
            }
            if(hpGrow != _r.hpGrow)
            {
                return false;
            }
            if(powerGrow != _r.powerGrow)
            {
                return false;
            }
            if(intelGrow != _r.intelGrow)
            {
                return false;
            }
            if(qualityAddPercents != _r.qualityAddPercents)
            {
                return false;
            }
            if(!java.util.Arrays.equals(properties, _r.properties))
            {
                return false;
            }
            if(!java.util.Arrays.equals(equips, _r.equips))
            {
                return false;
            }
            if(!java.util.Arrays.equals(levelupRelations, _r.levelupRelations))
            {
                return false;
            }
            if(!java.util.Arrays.equals(activeRelations, _r.activeRelations))
            {
                return false;
            }
            if(!java.util.Arrays.equals(attendants, _r.attendants))
            {
                return false;
            }
            if(state != _r.state)
            {
                if(state == null || _r.state == null || !state.equals(_r.state))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(skills, _r.skills))
            {
                return false;
            }
            if(isTreasure != _r.isTreasure)
            {
                return false;
            }
            if(awakenState != _r.awakenState)
            {
                return false;
            }
            if(awakenStar != _r.awakenStar)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::HeroView");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, templateId);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, compositeCombat);
        __h = IceInternal.HashUtil.hashAdd(__h, level);
        __h = IceInternal.HashUtil.hashAdd(__h, star);
        __h = IceInternal.HashUtil.hashAdd(__h, qualityLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, color);
        __h = IceInternal.HashUtil.hashAdd(__h, breakLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, exp);
        __h = IceInternal.HashUtil.hashAdd(__h, levelupExp);
        __h = IceInternal.HashUtil.hashAdd(__h, hpGrow);
        __h = IceInternal.HashUtil.hashAdd(__h, powerGrow);
        __h = IceInternal.HashUtil.hashAdd(__h, intelGrow);
        __h = IceInternal.HashUtil.hashAdd(__h, qualityAddPercents);
        __h = IceInternal.HashUtil.hashAdd(__h, properties);
        __h = IceInternal.HashUtil.hashAdd(__h, equips);
        __h = IceInternal.HashUtil.hashAdd(__h, levelupRelations);
        __h = IceInternal.HashUtil.hashAdd(__h, activeRelations);
        __h = IceInternal.HashUtil.hashAdd(__h, attendants);
        __h = IceInternal.HashUtil.hashAdd(__h, state);
        __h = IceInternal.HashUtil.hashAdd(__h, skills);
        __h = IceInternal.HashUtil.hashAdd(__h, isTreasure);
        __h = IceInternal.HashUtil.hashAdd(__h, awakenState);
        __h = IceInternal.HashUtil.hashAdd(__h, awakenStar);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(id);
        __os.writeInt(templateId);
        __os.writeString(name);
        __os.writeInt(compositeCombat);
        __os.writeShort(level);
        __os.writeByte(star);
        __os.writeInt(qualityLevel);
        __os.writeInt(color);
        __os.writeByte(breakLevel);
        __os.writeInt(exp);
        __os.writeInt(levelupExp);
        __os.writeFloat(hpGrow);
        __os.writeFloat(powerGrow);
        __os.writeFloat(intelGrow);
        __os.writeByte(qualityAddPercents);
        GrowablePropertySeqHelper.write(__os, properties);
        StringSeqHelper.write(__os, equips);
        IntIntPairSeqHelper.write(__os, levelupRelations);
        IntIntPairSeqHelper.write(__os, activeRelations);
        AttendantViewSeqHelper.write(__os, attendants);
        state.__write(__os);
        IntIntPairSeqHelper.write(__os, skills);
        __os.writeBool(isTreasure);
        __os.writeByte(awakenState);
        __os.writeInt(awakenStar);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readString();
        templateId = __is.readInt();
        name = __is.readString();
        compositeCombat = __is.readInt();
        level = __is.readShort();
        star = __is.readByte();
        qualityLevel = __is.readInt();
        color = __is.readInt();
        breakLevel = __is.readByte();
        exp = __is.readInt();
        levelupExp = __is.readInt();
        hpGrow = __is.readFloat();
        powerGrow = __is.readFloat();
        intelGrow = __is.readFloat();
        qualityAddPercents = __is.readByte();
        properties = GrowablePropertySeqHelper.read(__is);
        equips = StringSeqHelper.read(__is);
        levelupRelations = IntIntPairSeqHelper.read(__is);
        activeRelations = IntIntPairSeqHelper.read(__is);
        attendants = AttendantViewSeqHelper.read(__is);
        state = HeroState.__read(__is);
        skills = IntIntPairSeqHelper.read(__is);
        isTreasure = __is.readBool();
        awakenState = __is.readByte();
        awakenStar = __is.readInt();
    }

    public static final long serialVersionUID = 1530577592L;
}
