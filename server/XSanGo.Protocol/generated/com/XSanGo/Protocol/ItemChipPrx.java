// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ItemChip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface ItemChipPrx extends Ice.ObjectPrx
{
    public String compoundChipWithExtraId(String itemId, String extraId)
        throws NoteException;

    public String compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId);

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, Ice.Callback __cb);

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, Callback_ItemChip_compoundChipWithExtraId __cb);

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx, Callback_ItemChip_compoundChipWithExtraId __cb);

    public String end_compoundChipWithExtraId(Ice.AsyncResult __result)
        throws NoteException;

    public boolean compoundChipWithExtraId_async(AMI_ItemChip_compoundChipWithExtraId __cb, String itemId, String extraId);

    public boolean compoundChipWithExtraId_async(AMI_ItemChip_compoundChipWithExtraId __cb, String itemId, String extraId, java.util.Map<String, String> __ctx);

    public String compoundChip(String itemId)
        throws NoteException;

    public String compoundChip(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_compoundChip(String itemId);

    public Ice.AsyncResult begin_compoundChip(String itemId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_compoundChip(String itemId, Ice.Callback __cb);

    public Ice.AsyncResult begin_compoundChip(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_compoundChip(String itemId, Callback_ItemChip_compoundChip __cb);

    public Ice.AsyncResult begin_compoundChip(String itemId, java.util.Map<String, String> __ctx, Callback_ItemChip_compoundChip __cb);

    public String end_compoundChip(Ice.AsyncResult __result)
        throws NoteException;

    public boolean compoundChip_async(AMI_ItemChip_compoundChip __cb, String itemId);

    public boolean compoundChip_async(AMI_ItemChip_compoundChip __cb, String itemId, java.util.Map<String, String> __ctx);

    public String compoundGem(String itemId, int num)
        throws NoteException;

    public String compoundGem(String itemId, int num, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_compoundGem(String itemId, int num);

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, Ice.Callback __cb);

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, Callback_ItemChip_compoundGem __cb);

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, java.util.Map<String, String> __ctx, Callback_ItemChip_compoundGem __cb);

    public String end_compoundGem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean compoundGem_async(AMI_ItemChip_compoundGem __cb, String itemId, int num);

    public boolean compoundGem_async(AMI_ItemChip_compoundGem __cb, String itemId, int num, java.util.Map<String, String> __ctx);

    public void strutItem(String itemId)
        throws NoteException;

    public void strutItem(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_strutItem(String itemId);

    public Ice.AsyncResult begin_strutItem(String itemId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_strutItem(String itemId, Ice.Callback __cb);

    public Ice.AsyncResult begin_strutItem(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_strutItem(String itemId, Callback_ItemChip_strutItem __cb);

    public Ice.AsyncResult begin_strutItem(String itemId, java.util.Map<String, String> __ctx, Callback_ItemChip_strutItem __cb);

    public void end_strutItem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean strutItem_async(AMI_ItemChip_strutItem __cb, String itemId);

    public boolean strutItem_async(AMI_ItemChip_strutItem __cb, String itemId, java.util.Map<String, String> __ctx);

    public String requestHeroReset()
        throws NoteException;

    public String requestHeroReset(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_requestHeroReset();

    public Ice.AsyncResult begin_requestHeroReset(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_requestHeroReset(Ice.Callback __cb);

    public Ice.AsyncResult begin_requestHeroReset(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_requestHeroReset(Callback_ItemChip_requestHeroReset __cb);

    public Ice.AsyncResult begin_requestHeroReset(java.util.Map<String, String> __ctx, Callback_ItemChip_requestHeroReset __cb);

    public String end_requestHeroReset(Ice.AsyncResult __result)
        throws NoteException;

    public boolean requestHeroReset_async(AMI_ItemChip_requestHeroReset __cb);

    public boolean requestHeroReset_async(AMI_ItemChip_requestHeroReset __cb, java.util.Map<String, String> __ctx);

    public String heroReset(String heroId, int isPay)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public String heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay);

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, Ice.Callback __cb);

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, Callback_ItemChip_heroReset __cb);

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx, Callback_ItemChip_heroReset __cb);

    public String end_heroReset(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean heroReset_async(AMI_ItemChip_heroReset __cb, String heroId, int isPay);

    public boolean heroReset_async(AMI_ItemChip_heroReset __cb, String heroId, int isPay, java.util.Map<String, String> __ctx);

    public String requestHeroInherit()
        throws NoteException;

    public String requestHeroInherit(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_requestHeroInherit();

    public Ice.AsyncResult begin_requestHeroInherit(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_requestHeroInherit(Ice.Callback __cb);

    public Ice.AsyncResult begin_requestHeroInherit(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_requestHeroInherit(Callback_ItemChip_requestHeroInherit __cb);

    public Ice.AsyncResult begin_requestHeroInherit(java.util.Map<String, String> __ctx, Callback_ItemChip_requestHeroInherit __cb);

    public String end_requestHeroInherit(Ice.AsyncResult __result)
        throws NoteException;

    public boolean requestHeroInherit_async(AMI_ItemChip_requestHeroInherit __cb);

    public boolean requestHeroInherit_async(AMI_ItemChip_requestHeroInherit __cb, java.util.Map<String, String> __ctx);

    public void heroInherit(String inheritHeroId, String baseHeroId)
        throws NoteException;

    public void heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId);

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, Ice.Callback __cb);

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, Callback_ItemChip_heroInherit __cb);

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx, Callback_ItemChip_heroInherit __cb);

    public void end_heroInherit(Ice.AsyncResult __result)
        throws NoteException;

    public boolean heroInherit_async(AMI_ItemChip_heroInherit __cb, String inheritHeroId, String baseHeroId);

    public boolean heroInherit_async(AMI_ItemChip_heroInherit __cb, String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx);
}
