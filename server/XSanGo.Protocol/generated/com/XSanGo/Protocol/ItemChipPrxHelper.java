// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ItemChip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class ItemChipPrxHelper extends Ice.ObjectPrxHelperBase implements ItemChipPrx
{
    private static final String __compoundChip_name = "compoundChip";

    public String compoundChip(String itemId)
        throws NoteException
    {
        return compoundChip(itemId, null, false);
    }

    public String compoundChip(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return compoundChip(itemId, __ctx, true);
    }

    private String compoundChip(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "compoundChip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("compoundChip");
                    __delBase = __getDelegate(false);
                    _ItemChipDel __del = (_ItemChipDel)__delBase;
                    return __del.compoundChip(itemId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_compoundChip(String itemId)
    {
        return begin_compoundChip(itemId, null, false, null);
    }

    public Ice.AsyncResult begin_compoundChip(String itemId, java.util.Map<String, String> __ctx)
    {
        return begin_compoundChip(itemId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_compoundChip(String itemId, Ice.Callback __cb)
    {
        return begin_compoundChip(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_compoundChip(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_compoundChip(itemId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_compoundChip(String itemId, Callback_ItemChip_compoundChip __cb)
    {
        return begin_compoundChip(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_compoundChip(String itemId, java.util.Map<String, String> __ctx, Callback_ItemChip_compoundChip __cb)
    {
        return begin_compoundChip(itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_compoundChip(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__compoundChip_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __compoundChip_name, __cb);
        try
        {
            __result.__prepare(__compoundChip_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_compoundChip(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __compoundChip_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean compoundChip_async(AMI_ItemChip_compoundChip __cb, String itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__compoundChip_name);
            __r = begin_compoundChip(itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __compoundChip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean compoundChip_async(AMI_ItemChip_compoundChip __cb, String itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__compoundChip_name);
            __r = begin_compoundChip(itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __compoundChip_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __compoundChipWithExtraId_name = "compoundChipWithExtraId";

    public String compoundChipWithExtraId(String itemId, String extraId)
        throws NoteException
    {
        return compoundChipWithExtraId(itemId, extraId, null, false);
    }

    public String compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return compoundChipWithExtraId(itemId, extraId, __ctx, true);
    }

    private String compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "compoundChipWithExtraId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("compoundChipWithExtraId");
                    __delBase = __getDelegate(false);
                    _ItemChipDel __del = (_ItemChipDel)__delBase;
                    return __del.compoundChipWithExtraId(itemId, extraId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId)
    {
        return begin_compoundChipWithExtraId(itemId, extraId, null, false, null);
    }

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx)
    {
        return begin_compoundChipWithExtraId(itemId, extraId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, Ice.Callback __cb)
    {
        return begin_compoundChipWithExtraId(itemId, extraId, null, false, __cb);
    }

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_compoundChipWithExtraId(itemId, extraId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, Callback_ItemChip_compoundChipWithExtraId __cb)
    {
        return begin_compoundChipWithExtraId(itemId, extraId, null, false, __cb);
    }

    public Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx, Callback_ItemChip_compoundChipWithExtraId __cb)
    {
        return begin_compoundChipWithExtraId(itemId, extraId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_compoundChipWithExtraId(String itemId, String extraId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__compoundChipWithExtraId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __compoundChipWithExtraId_name, __cb);
        try
        {
            __result.__prepare(__compoundChipWithExtraId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __os.writeString(extraId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_compoundChipWithExtraId(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __compoundChipWithExtraId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean compoundChipWithExtraId_async(AMI_ItemChip_compoundChipWithExtraId __cb, String itemId, String extraId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__compoundChipWithExtraId_name);
            __r = begin_compoundChipWithExtraId(itemId, extraId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __compoundChipWithExtraId_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean compoundChipWithExtraId_async(AMI_ItemChip_compoundChipWithExtraId __cb, String itemId, String extraId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__compoundChipWithExtraId_name);
            __r = begin_compoundChipWithExtraId(itemId, extraId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __compoundChipWithExtraId_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __compoundGem_name = "compoundGem";

    public String compoundGem(String itemId, int num)
        throws NoteException
    {
        return compoundGem(itemId, num, null, false);
    }

    public String compoundGem(String itemId, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return compoundGem(itemId, num, __ctx, true);
    }

    private String compoundGem(String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "compoundGem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("compoundGem");
                    __delBase = __getDelegate(false);
                    _ItemChipDel __del = (_ItemChipDel)__delBase;
                    return __del.compoundGem(itemId, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_compoundGem(String itemId, int num)
    {
        return begin_compoundGem(itemId, num, null, false, null);
    }

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_compoundGem(itemId, num, __ctx, true, null);
    }

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, Ice.Callback __cb)
    {
        return begin_compoundGem(itemId, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_compoundGem(itemId, num, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, Callback_ItemChip_compoundGem __cb)
    {
        return begin_compoundGem(itemId, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_compoundGem(String itemId, int num, java.util.Map<String, String> __ctx, Callback_ItemChip_compoundGem __cb)
    {
        return begin_compoundGem(itemId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_compoundGem(String itemId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__compoundGem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __compoundGem_name, __cb);
        try
        {
            __result.__prepare(__compoundGem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_compoundGem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __compoundGem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean compoundGem_async(AMI_ItemChip_compoundGem __cb, String itemId, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__compoundGem_name);
            __r = begin_compoundGem(itemId, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __compoundGem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean compoundGem_async(AMI_ItemChip_compoundGem __cb, String itemId, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__compoundGem_name);
            __r = begin_compoundGem(itemId, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __compoundGem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __heroInherit_name = "heroInherit";

    public void heroInherit(String inheritHeroId, String baseHeroId)
        throws NoteException
    {
        heroInherit(inheritHeroId, baseHeroId, null, false);
    }

    public void heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        heroInherit(inheritHeroId, baseHeroId, __ctx, true);
    }

    private void heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "heroInherit", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("heroInherit");
                    __delBase = __getDelegate(false);
                    _ItemChipDel __del = (_ItemChipDel)__delBase;
                    __del.heroInherit(inheritHeroId, baseHeroId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId)
    {
        return begin_heroInherit(inheritHeroId, baseHeroId, null, false, null);
    }

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx)
    {
        return begin_heroInherit(inheritHeroId, baseHeroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, Ice.Callback __cb)
    {
        return begin_heroInherit(inheritHeroId, baseHeroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_heroInherit(inheritHeroId, baseHeroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, Callback_ItemChip_heroInherit __cb)
    {
        return begin_heroInherit(inheritHeroId, baseHeroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx, Callback_ItemChip_heroInherit __cb)
    {
        return begin_heroInherit(inheritHeroId, baseHeroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_heroInherit(String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__heroInherit_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __heroInherit_name, __cb);
        try
        {
            __result.__prepare(__heroInherit_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(inheritHeroId);
            __os.writeString(baseHeroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_heroInherit(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __heroInherit_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean heroInherit_async(AMI_ItemChip_heroInherit __cb, String inheritHeroId, String baseHeroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroInherit_name);
            __r = begin_heroInherit(inheritHeroId, baseHeroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroInherit_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean heroInherit_async(AMI_ItemChip_heroInherit __cb, String inheritHeroId, String baseHeroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroInherit_name);
            __r = begin_heroInherit(inheritHeroId, baseHeroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroInherit_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __heroReset_name = "heroReset";

    public String heroReset(String heroId, int isPay)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return heroReset(heroId, isPay, null, false);
    }

    public String heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return heroReset(heroId, isPay, __ctx, true);
    }

    private String heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "heroReset", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("heroReset");
                    __delBase = __getDelegate(false);
                    _ItemChipDel __del = (_ItemChipDel)__delBase;
                    return __del.heroReset(heroId, isPay, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay)
    {
        return begin_heroReset(heroId, isPay, null, false, null);
    }

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx)
    {
        return begin_heroReset(heroId, isPay, __ctx, true, null);
    }

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, Ice.Callback __cb)
    {
        return begin_heroReset(heroId, isPay, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_heroReset(heroId, isPay, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, Callback_ItemChip_heroReset __cb)
    {
        return begin_heroReset(heroId, isPay, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx, Callback_ItemChip_heroReset __cb)
    {
        return begin_heroReset(heroId, isPay, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_heroReset(String heroId, int isPay, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__heroReset_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __heroReset_name, __cb);
        try
        {
            __result.__prepare(__heroReset_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __os.writeInt(isPay);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_heroReset(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __heroReset_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean heroReset_async(AMI_ItemChip_heroReset __cb, String heroId, int isPay)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroReset_name);
            __r = begin_heroReset(heroId, isPay, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroReset_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean heroReset_async(AMI_ItemChip_heroReset __cb, String heroId, int isPay, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__heroReset_name);
            __r = begin_heroReset(heroId, isPay, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __heroReset_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __requestHeroInherit_name = "requestHeroInherit";

    public String requestHeroInherit()
        throws NoteException
    {
        return requestHeroInherit(null, false);
    }

    public String requestHeroInherit(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return requestHeroInherit(__ctx, true);
    }

    private String requestHeroInherit(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "requestHeroInherit", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("requestHeroInherit");
                    __delBase = __getDelegate(false);
                    _ItemChipDel __del = (_ItemChipDel)__delBase;
                    return __del.requestHeroInherit(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_requestHeroInherit()
    {
        return begin_requestHeroInherit(null, false, null);
    }

    public Ice.AsyncResult begin_requestHeroInherit(java.util.Map<String, String> __ctx)
    {
        return begin_requestHeroInherit(__ctx, true, null);
    }

    public Ice.AsyncResult begin_requestHeroInherit(Ice.Callback __cb)
    {
        return begin_requestHeroInherit(null, false, __cb);
    }

    public Ice.AsyncResult begin_requestHeroInherit(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_requestHeroInherit(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_requestHeroInherit(Callback_ItemChip_requestHeroInherit __cb)
    {
        return begin_requestHeroInherit(null, false, __cb);
    }

    public Ice.AsyncResult begin_requestHeroInherit(java.util.Map<String, String> __ctx, Callback_ItemChip_requestHeroInherit __cb)
    {
        return begin_requestHeroInherit(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_requestHeroInherit(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__requestHeroInherit_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __requestHeroInherit_name, __cb);
        try
        {
            __result.__prepare(__requestHeroInherit_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_requestHeroInherit(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __requestHeroInherit_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean requestHeroInherit_async(AMI_ItemChip_requestHeroInherit __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__requestHeroInherit_name);
            __r = begin_requestHeroInherit(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __requestHeroInherit_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean requestHeroInherit_async(AMI_ItemChip_requestHeroInherit __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__requestHeroInherit_name);
            __r = begin_requestHeroInherit(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __requestHeroInherit_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __requestHeroReset_name = "requestHeroReset";

    public String requestHeroReset()
        throws NoteException
    {
        return requestHeroReset(null, false);
    }

    public String requestHeroReset(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return requestHeroReset(__ctx, true);
    }

    private String requestHeroReset(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "requestHeroReset", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("requestHeroReset");
                    __delBase = __getDelegate(false);
                    _ItemChipDel __del = (_ItemChipDel)__delBase;
                    return __del.requestHeroReset(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_requestHeroReset()
    {
        return begin_requestHeroReset(null, false, null);
    }

    public Ice.AsyncResult begin_requestHeroReset(java.util.Map<String, String> __ctx)
    {
        return begin_requestHeroReset(__ctx, true, null);
    }

    public Ice.AsyncResult begin_requestHeroReset(Ice.Callback __cb)
    {
        return begin_requestHeroReset(null, false, __cb);
    }

    public Ice.AsyncResult begin_requestHeroReset(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_requestHeroReset(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_requestHeroReset(Callback_ItemChip_requestHeroReset __cb)
    {
        return begin_requestHeroReset(null, false, __cb);
    }

    public Ice.AsyncResult begin_requestHeroReset(java.util.Map<String, String> __ctx, Callback_ItemChip_requestHeroReset __cb)
    {
        return begin_requestHeroReset(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_requestHeroReset(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__requestHeroReset_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __requestHeroReset_name, __cb);
        try
        {
            __result.__prepare(__requestHeroReset_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_requestHeroReset(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __requestHeroReset_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean requestHeroReset_async(AMI_ItemChip_requestHeroReset __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__requestHeroReset_name);
            __r = begin_requestHeroReset(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __requestHeroReset_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean requestHeroReset_async(AMI_ItemChip_requestHeroReset __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__requestHeroReset_name);
            __r = begin_requestHeroReset(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __requestHeroReset_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __strutItem_name = "strutItem";

    public void strutItem(String itemId)
        throws NoteException
    {
        strutItem(itemId, null, false);
    }

    public void strutItem(String itemId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        strutItem(itemId, __ctx, true);
    }

    private void strutItem(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "strutItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("strutItem");
                    __delBase = __getDelegate(false);
                    _ItemChipDel __del = (_ItemChipDel)__delBase;
                    __del.strutItem(itemId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_strutItem(String itemId)
    {
        return begin_strutItem(itemId, null, false, null);
    }

    public Ice.AsyncResult begin_strutItem(String itemId, java.util.Map<String, String> __ctx)
    {
        return begin_strutItem(itemId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_strutItem(String itemId, Ice.Callback __cb)
    {
        return begin_strutItem(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_strutItem(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_strutItem(itemId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_strutItem(String itemId, Callback_ItemChip_strutItem __cb)
    {
        return begin_strutItem(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_strutItem(String itemId, java.util.Map<String, String> __ctx, Callback_ItemChip_strutItem __cb)
    {
        return begin_strutItem(itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_strutItem(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__strutItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __strutItem_name, __cb);
        try
        {
            __result.__prepare(__strutItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_strutItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __strutItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean strutItem_async(AMI_ItemChip_strutItem __cb, String itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__strutItem_name);
            __r = begin_strutItem(itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __strutItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean strutItem_async(AMI_ItemChip_strutItem __cb, String itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__strutItem_name);
            __r = begin_strutItem(itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __strutItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static ItemChipPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ItemChipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemChipPrx)
            {
                __d = (ItemChipPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ItemChipPrxHelper __h = new ItemChipPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ItemChipPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ItemChipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemChipPrx)
            {
                __d = (ItemChipPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ItemChipPrxHelper __h = new ItemChipPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ItemChipPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ItemChipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ItemChipPrxHelper __h = new ItemChipPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ItemChipPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ItemChipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ItemChipPrxHelper __h = new ItemChipPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ItemChipPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ItemChipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemChipPrx)
            {
                __d = (ItemChipPrx)__obj;
            }
            else
            {
                ItemChipPrxHelper __h = new ItemChipPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ItemChipPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ItemChipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ItemChipPrxHelper __h = new ItemChipPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::ItemChip"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ItemChipDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ItemChipDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ItemChipPrx v)
    {
        __os.writeProxy(v);
    }

    public static ItemChipPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ItemChipPrxHelper result = new ItemChipPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
