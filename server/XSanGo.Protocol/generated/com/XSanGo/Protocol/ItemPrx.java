// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Item.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface ItemPrx extends Ice.ObjectPrx
{
    public ItemView levelUpFormationBuff(String id, String[] idArray)
        throws NoteException;

    public ItemView levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray);

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, Callback_Item_levelUpFormationBuff __cb);

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx, Callback_Item_levelUpFormationBuff __cb);

    public ItemView end_levelUpFormationBuff(Ice.AsyncResult __result)
        throws NoteException;

    public boolean levelUpFormationBuff_async(AMI_Item_levelUpFormationBuff __cb, String id, String[] idArray);

    public boolean levelUpFormationBuff_async(AMI_Item_levelUpFormationBuff __cb, String id, String[] idArray, java.util.Map<String, String> __ctx);

    public void sale(String id, int count)
        throws NoteException;

    public void sale(String id, int count, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_sale(String id, int count);

    public Ice.AsyncResult begin_sale(String id, int count, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sale(String id, int count, Ice.Callback __cb);

    public Ice.AsyncResult begin_sale(String id, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_sale(String id, int count, Callback_Item_sale __cb);

    public Ice.AsyncResult begin_sale(String id, int count, java.util.Map<String, String> __ctx, Callback_Item_sale __cb);

    public void end_sale(Ice.AsyncResult __result)
        throws NoteException;

    public boolean sale_async(AMI_Item_sale __cb, String id, int count);

    public boolean sale_async(AMI_Item_sale __cb, String id, int count, java.util.Map<String, String> __ctx);

    public void useItem(String id, int count, String params)
        throws NoteException;

    public void useItem(String id, int count, String params, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_useItem(String id, int count, String params);

    public Ice.AsyncResult begin_useItem(String id, int count, String params, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_useItem(String id, int count, String params, Ice.Callback __cb);

    public Ice.AsyncResult begin_useItem(String id, int count, String params, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_useItem(String id, int count, String params, Callback_Item_useItem __cb);

    public Ice.AsyncResult begin_useItem(String id, int count, String params, java.util.Map<String, String> __ctx, Callback_Item_useItem __cb);

    public void end_useItem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean useItem_async(AMI_Item_useItem __cb, String id, int count, String params);

    public boolean useItem_async(AMI_Item_useItem __cb, String id, int count, String params, java.util.Map<String, String> __ctx);

    public ItemView[] useChestItem(String id, int count)
        throws NotEnoughMoneyException,
               NoteException;

    public ItemView[] useChestItem(String id, int count, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_useChestItem(String id, int count);

    public Ice.AsyncResult begin_useChestItem(String id, int count, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_useChestItem(String id, int count, Ice.Callback __cb);

    public Ice.AsyncResult begin_useChestItem(String id, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_useChestItem(String id, int count, Callback_Item_useChestItem __cb);

    public Ice.AsyncResult begin_useChestItem(String id, int count, java.util.Map<String, String> __ctx, Callback_Item_useChestItem __cb);

    public ItemView[] end_useChestItem(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean useChestItem_async(AMI_Item_useChestItem __cb, String id, int count);

    public boolean useChestItem_async(AMI_Item_useChestItem __cb, String id, int count, java.util.Map<String, String> __ctx);

    public void drawCompositeChestItem(int itemIndex, String itemId)
        throws NoteException;

    public void drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId);

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, Ice.Callback __cb);

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, Callback_Item_drawCompositeChestItem __cb);

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx, Callback_Item_drawCompositeChestItem __cb);

    public void end_drawCompositeChestItem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean drawCompositeChestItem_async(AMI_Item_drawCompositeChestItem __cb, int itemIndex, String itemId);

    public boolean drawCompositeChestItem_async(AMI_Item_drawCompositeChestItem __cb, int itemIndex, String itemId, java.util.Map<String, String> __ctx);

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     **/
    public void selectAdvancedType(int type)
        throws NoteException;

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __ctx The Context map to send with the invocation.
     **/
    public void selectAdvancedType(int type, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type);

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, java.util.Map<String, String> __ctx);

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, Ice.Callback __cb);

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, Callback_Item_selectAdvancedType __cb);

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, java.util.Map<String, String> __ctx, Callback_Item_selectAdvancedType __cb);

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __result The asynchronous result object.
     **/
    public void end_selectAdvancedType(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     **/
    public boolean selectAdvancedType_async(AMI_Item_selectAdvancedType __cb, int type);

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean selectAdvancedType_async(AMI_Item_selectAdvancedType __cb, int type, java.util.Map<String, String> __ctx);

    /**
     * 阵法进阶,id用英文逗号分隔
     **/
    public void advancedFormationBuff(String ids)
        throws NoteException;

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __ctx The Context map to send with the invocation.
     **/
    public void advancedFormationBuff(String ids, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 阵法进阶,id用英文逗号分隔
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids);

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, java.util.Map<String, String> __ctx);

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, Ice.Callback __cb);

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, Callback_Item_advancedFormationBuff __cb);

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, java.util.Map<String, String> __ctx, Callback_Item_advancedFormationBuff __cb);

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __result The asynchronous result object.
     **/
    public void end_advancedFormationBuff(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     **/
    public boolean advancedFormationBuff_async(AMI_Item_advancedFormationBuff __cb, String ids);

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean advancedFormationBuff_async(AMI_Item_advancedFormationBuff __cb, String ids, java.util.Map<String, String> __ctx);
}
