// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Item.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class ItemPrxHelper extends Ice.ObjectPrxHelperBase implements ItemPrx
{
    private static final String __advancedFormationBuff_name = "advancedFormationBuff";

    /**
     * 阵法进阶,id用英文逗号分隔
     **/
    public void advancedFormationBuff(String ids)
        throws NoteException
    {
        advancedFormationBuff(ids, null, false);
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __ctx The Context map to send with the invocation.
     **/
    public void advancedFormationBuff(String ids, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        advancedFormationBuff(ids, __ctx, true);
    }

    private void advancedFormationBuff(String ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "advancedFormationBuff", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("advancedFormationBuff");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    __del.advancedFormationBuff(ids, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids)
    {
        return begin_advancedFormationBuff(ids, null, false, null);
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, java.util.Map<String, String> __ctx)
    {
        return begin_advancedFormationBuff(ids, __ctx, true, null);
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, Ice.Callback __cb)
    {
        return begin_advancedFormationBuff(ids, null, false, __cb);
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_advancedFormationBuff(ids, __ctx, true, __cb);
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, Callback_Item_advancedFormationBuff __cb)
    {
        return begin_advancedFormationBuff(ids, null, false, __cb);
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_advancedFormationBuff(String ids, java.util.Map<String, String> __ctx, Callback_Item_advancedFormationBuff __cb)
    {
        return begin_advancedFormationBuff(ids, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_advancedFormationBuff(String ids, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__advancedFormationBuff_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __advancedFormationBuff_name, __cb);
        try
        {
            __result.__prepare(__advancedFormationBuff_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(ids);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_advancedFormationBuff(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __advancedFormationBuff_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     **/
    public boolean advancedFormationBuff_async(AMI_Item_advancedFormationBuff __cb, String ids)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__advancedFormationBuff_name);
            __r = begin_advancedFormationBuff(ids, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __advancedFormationBuff_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean advancedFormationBuff_async(AMI_Item_advancedFormationBuff __cb, String ids, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__advancedFormationBuff_name);
            __r = begin_advancedFormationBuff(ids, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __advancedFormationBuff_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __drawCompositeChestItem_name = "drawCompositeChestItem";

    public void drawCompositeChestItem(int itemIndex, String itemId)
        throws NoteException
    {
        drawCompositeChestItem(itemIndex, itemId, null, false);
    }

    public void drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        drawCompositeChestItem(itemIndex, itemId, __ctx, true);
    }

    private void drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "drawCompositeChestItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("drawCompositeChestItem");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    __del.drawCompositeChestItem(itemIndex, itemId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId)
    {
        return begin_drawCompositeChestItem(itemIndex, itemId, null, false, null);
    }

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx)
    {
        return begin_drawCompositeChestItem(itemIndex, itemId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, Ice.Callback __cb)
    {
        return begin_drawCompositeChestItem(itemIndex, itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_drawCompositeChestItem(itemIndex, itemId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, Callback_Item_drawCompositeChestItem __cb)
    {
        return begin_drawCompositeChestItem(itemIndex, itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx, Callback_Item_drawCompositeChestItem __cb)
    {
        return begin_drawCompositeChestItem(itemIndex, itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_drawCompositeChestItem(int itemIndex, String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__drawCompositeChestItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __drawCompositeChestItem_name, __cb);
        try
        {
            __result.__prepare(__drawCompositeChestItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(itemIndex);
            __os.writeString(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_drawCompositeChestItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __drawCompositeChestItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean drawCompositeChestItem_async(AMI_Item_drawCompositeChestItem __cb, int itemIndex, String itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__drawCompositeChestItem_name);
            __r = begin_drawCompositeChestItem(itemIndex, itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __drawCompositeChestItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean drawCompositeChestItem_async(AMI_Item_drawCompositeChestItem __cb, int itemIndex, String itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__drawCompositeChestItem_name);
            __r = begin_drawCompositeChestItem(itemIndex, itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __drawCompositeChestItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __levelUpFormationBuff_name = "levelUpFormationBuff";

    public ItemView levelUpFormationBuff(String id, String[] idArray)
        throws NoteException
    {
        return levelUpFormationBuff(id, idArray, null, false);
    }

    public ItemView levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return levelUpFormationBuff(id, idArray, __ctx, true);
    }

    private ItemView levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "levelUpFormationBuff", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("levelUpFormationBuff");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    return __del.levelUpFormationBuff(id, idArray, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray)
    {
        return begin_levelUpFormationBuff(id, idArray, null, false, null);
    }

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx)
    {
        return begin_levelUpFormationBuff(id, idArray, __ctx, true, null);
    }

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, Ice.Callback __cb)
    {
        return begin_levelUpFormationBuff(id, idArray, null, false, __cb);
    }

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_levelUpFormationBuff(id, idArray, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, Callback_Item_levelUpFormationBuff __cb)
    {
        return begin_levelUpFormationBuff(id, idArray, null, false, __cb);
    }

    public Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx, Callback_Item_levelUpFormationBuff __cb)
    {
        return begin_levelUpFormationBuff(id, idArray, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_levelUpFormationBuff(String id, String[] idArray, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__levelUpFormationBuff_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __levelUpFormationBuff_name, __cb);
        try
        {
            __result.__prepare(__levelUpFormationBuff_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            StringSeqHelper.write(__os, idArray);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView end_levelUpFormationBuff(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __levelUpFormationBuff_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView __ret;
            __ret = new ItemView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean levelUpFormationBuff_async(AMI_Item_levelUpFormationBuff __cb, String id, String[] idArray)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelUpFormationBuff_name);
            __r = begin_levelUpFormationBuff(id, idArray, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelUpFormationBuff_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean levelUpFormationBuff_async(AMI_Item_levelUpFormationBuff __cb, String id, String[] idArray, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelUpFormationBuff_name);
            __r = begin_levelUpFormationBuff(id, idArray, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelUpFormationBuff_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sale_name = "sale";

    public void sale(String id, int count)
        throws NoteException
    {
        sale(id, count, null, false);
    }

    public void sale(String id, int count, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sale(id, count, __ctx, true);
    }

    private void sale(String id, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sale", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sale");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    __del.sale(id, count, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sale(String id, int count)
    {
        return begin_sale(id, count, null, false, null);
    }

    public Ice.AsyncResult begin_sale(String id, int count, java.util.Map<String, String> __ctx)
    {
        return begin_sale(id, count, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sale(String id, int count, Ice.Callback __cb)
    {
        return begin_sale(id, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_sale(String id, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sale(id, count, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sale(String id, int count, Callback_Item_sale __cb)
    {
        return begin_sale(id, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_sale(String id, int count, java.util.Map<String, String> __ctx, Callback_Item_sale __cb)
    {
        return begin_sale(id, count, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sale(String id, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sale_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sale_name, __cb);
        try
        {
            __result.__prepare(__sale_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeInt(count);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sale(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sale_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean sale_async(AMI_Item_sale __cb, String id, int count)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sale_name);
            __r = begin_sale(id, count, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sale_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean sale_async(AMI_Item_sale __cb, String id, int count, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sale_name);
            __r = begin_sale(id, count, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sale_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectAdvancedType_name = "selectAdvancedType";

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     **/
    public void selectAdvancedType(int type)
        throws NoteException
    {
        selectAdvancedType(type, null, false);
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __ctx The Context map to send with the invocation.
     **/
    public void selectAdvancedType(int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        selectAdvancedType(type, __ctx, true);
    }

    private void selectAdvancedType(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectAdvancedType", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectAdvancedType");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    __del.selectAdvancedType(type, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type)
    {
        return begin_selectAdvancedType(type, null, false, null);
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, java.util.Map<String, String> __ctx)
    {
        return begin_selectAdvancedType(type, __ctx, true, null);
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, Ice.Callback __cb)
    {
        return begin_selectAdvancedType(type, null, false, __cb);
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectAdvancedType(type, __ctx, true, __cb);
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, Callback_Item_selectAdvancedType __cb)
    {
        return begin_selectAdvancedType(type, null, false, __cb);
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_selectAdvancedType(int type, java.util.Map<String, String> __ctx, Callback_Item_selectAdvancedType __cb)
    {
        return begin_selectAdvancedType(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectAdvancedType(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectAdvancedType_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectAdvancedType_name, __cb);
        try
        {
            __result.__prepare(__selectAdvancedType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_selectAdvancedType(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectAdvancedType_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     **/
    public boolean selectAdvancedType_async(AMI_Item_selectAdvancedType __cb, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectAdvancedType_name);
            __r = begin_selectAdvancedType(type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectAdvancedType_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean selectAdvancedType_async(AMI_Item_selectAdvancedType __cb, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectAdvancedType_name);
            __r = begin_selectAdvancedType(type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectAdvancedType_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __useChestItem_name = "useChestItem";

    public ItemView[] useChestItem(String id, int count)
        throws NotEnoughMoneyException,
               NoteException
    {
        return useChestItem(id, count, null, false);
    }

    public ItemView[] useChestItem(String id, int count, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return useChestItem(id, count, __ctx, true);
    }

    private ItemView[] useChestItem(String id, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "useChestItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("useChestItem");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    return __del.useChestItem(id, count, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_useChestItem(String id, int count)
    {
        return begin_useChestItem(id, count, null, false, null);
    }

    public Ice.AsyncResult begin_useChestItem(String id, int count, java.util.Map<String, String> __ctx)
    {
        return begin_useChestItem(id, count, __ctx, true, null);
    }

    public Ice.AsyncResult begin_useChestItem(String id, int count, Ice.Callback __cb)
    {
        return begin_useChestItem(id, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_useChestItem(String id, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_useChestItem(id, count, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_useChestItem(String id, int count, Callback_Item_useChestItem __cb)
    {
        return begin_useChestItem(id, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_useChestItem(String id, int count, java.util.Map<String, String> __ctx, Callback_Item_useChestItem __cb)
    {
        return begin_useChestItem(id, count, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_useChestItem(String id, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__useChestItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __useChestItem_name, __cb);
        try
        {
            __result.__prepare(__useChestItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeInt(count);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ItemView[] end_useChestItem(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __useChestItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ItemView[] __ret;
            __ret = ItemViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean useChestItem_async(AMI_Item_useChestItem __cb, String id, int count)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__useChestItem_name);
            __r = begin_useChestItem(id, count, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __useChestItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean useChestItem_async(AMI_Item_useChestItem __cb, String id, int count, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__useChestItem_name);
            __r = begin_useChestItem(id, count, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __useChestItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __useItem_name = "useItem";

    public void useItem(String id, int count, String params)
        throws NoteException
    {
        useItem(id, count, params, null, false);
    }

    public void useItem(String id, int count, String params, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        useItem(id, count, params, __ctx, true);
    }

    private void useItem(String id, int count, String params, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "useItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("useItem");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    __del.useItem(id, count, params, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_useItem(String id, int count, String params)
    {
        return begin_useItem(id, count, params, null, false, null);
    }

    public Ice.AsyncResult begin_useItem(String id, int count, String params, java.util.Map<String, String> __ctx)
    {
        return begin_useItem(id, count, params, __ctx, true, null);
    }

    public Ice.AsyncResult begin_useItem(String id, int count, String params, Ice.Callback __cb)
    {
        return begin_useItem(id, count, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_useItem(String id, int count, String params, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_useItem(id, count, params, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_useItem(String id, int count, String params, Callback_Item_useItem __cb)
    {
        return begin_useItem(id, count, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_useItem(String id, int count, String params, java.util.Map<String, String> __ctx, Callback_Item_useItem __cb)
    {
        return begin_useItem(id, count, params, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_useItem(String id, int count, String params, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__useItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __useItem_name, __cb);
        try
        {
            __result.__prepare(__useItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeInt(count);
            __os.writeString(params);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_useItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __useItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean useItem_async(AMI_Item_useItem __cb, String id, int count, String params)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__useItem_name);
            __r = begin_useItem(id, count, params, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __useItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean useItem_async(AMI_Item_useItem __cb, String id, int count, String params, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__useItem_name);
            __r = begin_useItem(id, count, params, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __useItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static ItemPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemPrx)
            {
                __d = (ItemPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ItemPrxHelper __h = new ItemPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ItemPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemPrx)
            {
                __d = (ItemPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ItemPrxHelper __h = new ItemPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ItemPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ItemPrxHelper __h = new ItemPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ItemPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ItemPrxHelper __h = new ItemPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ItemPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemPrx)
            {
                __d = (ItemPrx)__obj;
            }
            else
            {
                ItemPrxHelper __h = new ItemPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ItemPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ItemPrxHelper __h = new ItemPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Item"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ItemDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ItemDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ItemPrx v)
    {
        __os.writeProxy(v);
    }

    public static ItemPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ItemPrxHelper result = new ItemPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
