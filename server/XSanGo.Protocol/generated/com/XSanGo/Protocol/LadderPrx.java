// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Ladder.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface LadderPrx extends Ice.ObjectPrx
{
    public String selectLadder()
        throws NoteException;

    public String selectLadder(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selectLadder();

    public Ice.AsyncResult begin_selectLadder(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectLadder(Ice.Callback __cb);

    public Ice.AsyncResult begin_selectLadder(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectLadder(Callback_Ladder_selectLadder __cb);

    public Ice.AsyncResult begin_selectLadder(java.util.Map<String, String> __ctx, Callback_Ladder_selectLadder __cb);

    public String end_selectLadder(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selectLadder_async(AMI_Ladder_selectLadder __cb);

    public boolean selectLadder_async(AMI_Ladder_selectLadder __cb, java.util.Map<String, String> __ctx);

    public String showRankList()
        throws NoteException;

    public String showRankList(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_showRankList();

    public Ice.AsyncResult begin_showRankList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_showRankList(Ice.Callback __cb);

    public Ice.AsyncResult begin_showRankList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_showRankList(Callback_Ladder_showRankList __cb);

    public Ice.AsyncResult begin_showRankList(java.util.Map<String, String> __ctx, Callback_Ladder_showRankList __cb);

    public String end_showRankList(Ice.AsyncResult __result)
        throws NoteException;

    public boolean showRankList_async(AMI_Ladder_showRankList __cb);

    public boolean showRankList_async(AMI_Ladder_showRankList __cb, java.util.Map<String, String> __ctx);

    public void saveGurard(String guardId)
        throws NoteException;

    public void saveGurard(String guardId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_saveGurard(String guardId);

    public Ice.AsyncResult begin_saveGurard(String guardId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_saveGurard(String guardId, Ice.Callback __cb);

    public Ice.AsyncResult begin_saveGurard(String guardId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_saveGurard(String guardId, Callback_Ladder_saveGurard __cb);

    public Ice.AsyncResult begin_saveGurard(String guardId, java.util.Map<String, String> __ctx, Callback_Ladder_saveGurard __cb);

    public void end_saveGurard(Ice.AsyncResult __result)
        throws NoteException;

    public boolean saveGurard_async(AMI_Ladder_saveGurard __cb, String guardId);

    public boolean saveGurard_async(AMI_Ladder_saveGurard __cb, String guardId, java.util.Map<String, String> __ctx);

    public void buyChallenge()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public void buyChallenge(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyChallenge();

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyChallenge(Ice.Callback __cb);

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyChallenge(Callback_Ladder_buyChallenge __cb);

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, Callback_Ladder_buyChallenge __cb);

    public void end_buyChallenge(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean buyChallenge_async(AMI_Ladder_buyChallenge __cb);

    public boolean buyChallenge_async(AMI_Ladder_buyChallenge __cb, java.util.Map<String, String> __ctx);

    public LadderPvpView beginFight(String formationId)
        throws NoteException;

    public LadderPvpView beginFight(String formationId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_beginFight(String formationId);

    public Ice.AsyncResult begin_beginFight(String formationId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginFight(String formationId, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginFight(String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginFight(String formationId, Callback_Ladder_beginFight __cb);

    public Ice.AsyncResult begin_beginFight(String formationId, java.util.Map<String, String> __ctx, Callback_Ladder_beginFight __cb);

    public LadderPvpView end_beginFight(Ice.AsyncResult __result)
        throws NoteException;

    public boolean beginFight_async(AMI_Ladder_beginFight __cb, String formationId);

    public boolean beginFight_async(AMI_Ladder_beginFight __cb, String formationId, java.util.Map<String, String> __ctx);

    public String endFight(String rivalId, int resFlag, byte remainHero)
        throws NoteException;

    public String endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero);

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, Ice.Callback __cb);

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, Callback_Ladder_endFight __cb);

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Callback_Ladder_endFight __cb);

    public String end_endFight(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endFight_async(AMI_Ladder_endFight __cb, String rivalId, int resFlag, byte remainHero);

    public boolean endFight_async(AMI_Ladder_endFight __cb, String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx);

    public void reward(int rewardId)
        throws NoteException;

    public void reward(int rewardId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_reward(int rewardId);

    public Ice.AsyncResult begin_reward(int rewardId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_reward(int rewardId, Ice.Callback __cb);

    public Ice.AsyncResult begin_reward(int rewardId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_reward(int rewardId, Callback_Ladder_reward __cb);

    public Ice.AsyncResult begin_reward(int rewardId, java.util.Map<String, String> __ctx, Callback_Ladder_reward __cb);

    public void end_reward(Ice.AsyncResult __result)
        throws NoteException;

    public boolean reward_async(AMI_Ladder_reward __cb, int rewardId);

    public boolean reward_async(AMI_Ladder_reward __cb, int rewardId, java.util.Map<String, String> __ctx);

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     **/
    public LadderAutoFightResult autoFight()
        throws NoteException;

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public LadderAutoFightResult autoFight(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoFight();

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoFight(java.util.Map<String, String> __ctx);

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoFight(Ice.Callback __cb);

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoFight(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoFight(Callback_Ladder_autoFight __cb);

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_autoFight(java.util.Map<String, String> __ctx, Callback_Ladder_autoFight __cb);

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __result The asynchronous result object.
     **/
    public LadderAutoFightResult end_autoFight(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean autoFight_async(AMI_Ladder_autoFight __cb);

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean autoFight_async(AMI_Ladder_autoFight __cb, java.util.Map<String, String> __ctx);
}
