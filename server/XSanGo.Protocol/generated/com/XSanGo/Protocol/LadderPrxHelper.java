// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Ladder.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class LadderPrxHelper extends Ice.ObjectPrxHelperBase implements LadderPrx
{
    private static final String __autoFight_name = "autoFight";

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     **/
    public LadderAutoFightResult autoFight()
        throws NoteException
    {
        return autoFight(null, false);
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public LadderAutoFightResult autoFight(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return autoFight(__ctx, true);
    }

    private LadderAutoFightResult autoFight(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "autoFight", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("autoFight");
                    __delBase = __getDelegate(false);
                    _LadderDel __del = (_LadderDel)__delBase;
                    return __del.autoFight(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_autoFight()
    {
        return begin_autoFight(null, false, null);
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_autoFight(java.util.Map<String, String> __ctx)
    {
        return begin_autoFight(__ctx, true, null);
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_autoFight(Ice.Callback __cb)
    {
        return begin_autoFight(null, false, __cb);
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_autoFight(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_autoFight(__ctx, true, __cb);
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_autoFight(Callback_Ladder_autoFight __cb)
    {
        return begin_autoFight(null, false, __cb);
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_autoFight(java.util.Map<String, String> __ctx, Callback_Ladder_autoFight __cb)
    {
        return begin_autoFight(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_autoFight(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__autoFight_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __autoFight_name, __cb);
        try
        {
            __result.__prepare(__autoFight_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public LadderAutoFightResult end_autoFight(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __autoFight_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            LadderAutoFightResult __ret;
            __ret = new LadderAutoFightResult();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean autoFight_async(AMI_Ladder_autoFight __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__autoFight_name);
            __r = begin_autoFight(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __autoFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean autoFight_async(AMI_Ladder_autoFight __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__autoFight_name);
            __r = begin_autoFight(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __autoFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginFight_name = "beginFight";

    public LadderPvpView beginFight(String formationId)
        throws NoteException
    {
        return beginFight(formationId, null, false);
    }

    public LadderPvpView beginFight(String formationId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginFight(formationId, __ctx, true);
    }

    private LadderPvpView beginFight(String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginFight", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginFight");
                    __delBase = __getDelegate(false);
                    _LadderDel __del = (_LadderDel)__delBase;
                    return __del.beginFight(formationId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginFight(String formationId)
    {
        return begin_beginFight(formationId, null, false, null);
    }

    public Ice.AsyncResult begin_beginFight(String formationId, java.util.Map<String, String> __ctx)
    {
        return begin_beginFight(formationId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginFight(String formationId, Ice.Callback __cb)
    {
        return begin_beginFight(formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginFight(String formationId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginFight(formationId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginFight(String formationId, Callback_Ladder_beginFight __cb)
    {
        return begin_beginFight(formationId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginFight(String formationId, java.util.Map<String, String> __ctx, Callback_Ladder_beginFight __cb)
    {
        return begin_beginFight(formationId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginFight(String formationId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginFight_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginFight_name, __cb);
        try
        {
            __result.__prepare(__beginFight_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(formationId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public LadderPvpView end_beginFight(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginFight_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            LadderPvpView __ret;
            __ret = new LadderPvpView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginFight_async(AMI_Ladder_beginFight __cb, String formationId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginFight_name);
            __r = begin_beginFight(formationId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginFight_async(AMI_Ladder_beginFight __cb, String formationId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginFight_name);
            __r = begin_beginFight(formationId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyChallenge_name = "buyChallenge";

    public void buyChallenge()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyChallenge(null, false);
    }

    public void buyChallenge(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyChallenge(__ctx, true);
    }

    private void buyChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyChallenge");
                    __delBase = __getDelegate(false);
                    _LadderDel __del = (_LadderDel)__delBase;
                    __del.buyChallenge(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyChallenge()
    {
        return begin_buyChallenge(null, false, null);
    }

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx)
    {
        return begin_buyChallenge(__ctx, true, null);
    }

    public Ice.AsyncResult begin_buyChallenge(Ice.Callback __cb)
    {
        return begin_buyChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyChallenge(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyChallenge(Callback_Ladder_buyChallenge __cb)
    {
        return begin_buyChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, Callback_Ladder_buyChallenge __cb)
    {
        return begin_buyChallenge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyChallenge_name, __cb);
        try
        {
            __result.__prepare(__buyChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyChallenge(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyChallenge_async(AMI_Ladder_buyChallenge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChallenge_name);
            __r = begin_buyChallenge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyChallenge_async(AMI_Ladder_buyChallenge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyChallenge_name);
            __r = begin_buyChallenge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endFight_name = "endFight";

    public String endFight(String rivalId, int resFlag, byte remainHero)
        throws NoteException
    {
        return endFight(rivalId, resFlag, remainHero, null, false);
    }

    public String endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endFight(rivalId, resFlag, remainHero, __ctx, true);
    }

    private String endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endFight", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endFight");
                    __delBase = __getDelegate(false);
                    _LadderDel __del = (_LadderDel)__delBase;
                    return __del.endFight(rivalId, resFlag, remainHero, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero)
    {
        return begin_endFight(rivalId, resFlag, remainHero, null, false, null);
    }

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
    {
        return begin_endFight(rivalId, resFlag, remainHero, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, Ice.Callback __cb)
    {
        return begin_endFight(rivalId, resFlag, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endFight(rivalId, resFlag, remainHero, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, Callback_Ladder_endFight __cb)
    {
        return begin_endFight(rivalId, resFlag, remainHero, null, false, __cb);
    }

    public Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, Callback_Ladder_endFight __cb)
    {
        return begin_endFight(rivalId, resFlag, remainHero, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endFight(String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endFight_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endFight_name, __cb);
        try
        {
            __result.__prepare(__endFight_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(rivalId);
            __os.writeInt(resFlag);
            __os.writeByte(remainHero);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_endFight(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endFight_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endFight_async(AMI_Ladder_endFight __cb, String rivalId, int resFlag, byte remainHero)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endFight_name);
            __r = begin_endFight(rivalId, resFlag, remainHero, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endFight_async(AMI_Ladder_endFight __cb, String rivalId, int resFlag, byte remainHero, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endFight_name);
            __r = begin_endFight(rivalId, resFlag, remainHero, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endFight_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __reward_name = "reward";

    public void reward(int rewardId)
        throws NoteException
    {
        reward(rewardId, null, false);
    }

    public void reward(int rewardId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        reward(rewardId, __ctx, true);
    }

    private void reward(int rewardId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "reward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("reward");
                    __delBase = __getDelegate(false);
                    _LadderDel __del = (_LadderDel)__delBase;
                    __del.reward(rewardId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_reward(int rewardId)
    {
        return begin_reward(rewardId, null, false, null);
    }

    public Ice.AsyncResult begin_reward(int rewardId, java.util.Map<String, String> __ctx)
    {
        return begin_reward(rewardId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_reward(int rewardId, Ice.Callback __cb)
    {
        return begin_reward(rewardId, null, false, __cb);
    }

    public Ice.AsyncResult begin_reward(int rewardId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reward(rewardId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_reward(int rewardId, Callback_Ladder_reward __cb)
    {
        return begin_reward(rewardId, null, false, __cb);
    }

    public Ice.AsyncResult begin_reward(int rewardId, java.util.Map<String, String> __ctx, Callback_Ladder_reward __cb)
    {
        return begin_reward(rewardId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reward(int rewardId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__reward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reward_name, __cb);
        try
        {
            __result.__prepare(__reward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(rewardId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_reward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __reward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean reward_async(AMI_Ladder_reward __cb, int rewardId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__reward_name);
            __r = begin_reward(rewardId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __reward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean reward_async(AMI_Ladder_reward __cb, int rewardId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__reward_name);
            __r = begin_reward(rewardId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __reward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __saveGurard_name = "saveGurard";

    public void saveGurard(String guardId)
        throws NoteException
    {
        saveGurard(guardId, null, false);
    }

    public void saveGurard(String guardId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        saveGurard(guardId, __ctx, true);
    }

    private void saveGurard(String guardId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveGurard", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("saveGurard");
                    __delBase = __getDelegate(false);
                    _LadderDel __del = (_LadderDel)__delBase;
                    __del.saveGurard(guardId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_saveGurard(String guardId)
    {
        return begin_saveGurard(guardId, null, false, null);
    }

    public Ice.AsyncResult begin_saveGurard(String guardId, java.util.Map<String, String> __ctx)
    {
        return begin_saveGurard(guardId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_saveGurard(String guardId, Ice.Callback __cb)
    {
        return begin_saveGurard(guardId, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveGurard(String guardId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveGurard(guardId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_saveGurard(String guardId, Callback_Ladder_saveGurard __cb)
    {
        return begin_saveGurard(guardId, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveGurard(String guardId, java.util.Map<String, String> __ctx, Callback_Ladder_saveGurard __cb)
    {
        return begin_saveGurard(guardId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveGurard(String guardId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveGurard_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveGurard_name, __cb);
        try
        {
            __result.__prepare(__saveGurard_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(guardId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_saveGurard(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __saveGurard_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean saveGurard_async(AMI_Ladder_saveGurard __cb, String guardId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveGurard_name);
            __r = begin_saveGurard(guardId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveGurard_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean saveGurard_async(AMI_Ladder_saveGurard __cb, String guardId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveGurard_name);
            __r = begin_saveGurard(guardId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveGurard_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectLadder_name = "selectLadder";

    public String selectLadder()
        throws NoteException
    {
        return selectLadder(null, false);
    }

    public String selectLadder(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selectLadder(__ctx, true);
    }

    private String selectLadder(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectLadder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectLadder");
                    __delBase = __getDelegate(false);
                    _LadderDel __del = (_LadderDel)__delBase;
                    return __del.selectLadder(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectLadder()
    {
        return begin_selectLadder(null, false, null);
    }

    public Ice.AsyncResult begin_selectLadder(java.util.Map<String, String> __ctx)
    {
        return begin_selectLadder(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selectLadder(Ice.Callback __cb)
    {
        return begin_selectLadder(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectLadder(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectLadder(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectLadder(Callback_Ladder_selectLadder __cb)
    {
        return begin_selectLadder(null, false, __cb);
    }

    public Ice.AsyncResult begin_selectLadder(java.util.Map<String, String> __ctx, Callback_Ladder_selectLadder __cb)
    {
        return begin_selectLadder(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectLadder(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectLadder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectLadder_name, __cb);
        try
        {
            __result.__prepare(__selectLadder_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selectLadder(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectLadder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectLadder_async(AMI_Ladder_selectLadder __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectLadder_name);
            __r = begin_selectLadder(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectLadder_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectLadder_async(AMI_Ladder_selectLadder __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectLadder_name);
            __r = begin_selectLadder(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectLadder_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __showRankList_name = "showRankList";

    public String showRankList()
        throws NoteException
    {
        return showRankList(null, false);
    }

    public String showRankList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return showRankList(__ctx, true);
    }

    private String showRankList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "showRankList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("showRankList");
                    __delBase = __getDelegate(false);
                    _LadderDel __del = (_LadderDel)__delBase;
                    return __del.showRankList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_showRankList()
    {
        return begin_showRankList(null, false, null);
    }

    public Ice.AsyncResult begin_showRankList(java.util.Map<String, String> __ctx)
    {
        return begin_showRankList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_showRankList(Ice.Callback __cb)
    {
        return begin_showRankList(null, false, __cb);
    }

    public Ice.AsyncResult begin_showRankList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showRankList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_showRankList(Callback_Ladder_showRankList __cb)
    {
        return begin_showRankList(null, false, __cb);
    }

    public Ice.AsyncResult begin_showRankList(java.util.Map<String, String> __ctx, Callback_Ladder_showRankList __cb)
    {
        return begin_showRankList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showRankList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__showRankList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showRankList_name, __cb);
        try
        {
            __result.__prepare(__showRankList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_showRankList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __showRankList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean showRankList_async(AMI_Ladder_showRankList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__showRankList_name);
            __r = begin_showRankList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __showRankList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean showRankList_async(AMI_Ladder_showRankList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__showRankList_name);
            __r = begin_showRankList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __showRankList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static LadderPrx checkedCast(Ice.ObjectPrx __obj)
    {
        LadderPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LadderPrx)
            {
                __d = (LadderPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    LadderPrxHelper __h = new LadderPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LadderPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        LadderPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LadderPrx)
            {
                __d = (LadderPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    LadderPrxHelper __h = new LadderPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LadderPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LadderPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    LadderPrxHelper __h = new LadderPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LadderPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        LadderPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    LadderPrxHelper __h = new LadderPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LadderPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        LadderPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LadderPrx)
            {
                __d = (LadderPrx)__obj;
            }
            else
            {
                LadderPrxHelper __h = new LadderPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static LadderPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LadderPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            LadderPrxHelper __h = new LadderPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Ladder"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _LadderDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _LadderDelD();
    }

    public static void __write(IceInternal.BasicStream __os, LadderPrx v)
    {
        __os.writeProxy(v);
    }

    public static LadderPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LadderPrxHelper result = new LadderPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
