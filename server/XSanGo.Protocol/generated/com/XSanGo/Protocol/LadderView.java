// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Ladder.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class LadderView implements java.lang.Cloneable, java.io.Serializable
{
    public int ladderLevel;

    public int ladderStar;

    public int ladderScore;

    public int challengeRemain;

    public int challengeBuyNum;

    public String guardId;

    public String rewardStr;

    public int remainDate;

    public int rankNum;

    public LadderReport[] reportList;

    public LadderView()
    {
    }

    public LadderView(int ladderLevel, int ladderStar, int ladderScore, int challengeRemain, int challengeBuyNum, String guardId, String rewardStr, int remainDate, int rankNum, LadderReport[] reportList)
    {
        this.ladderLevel = ladderLevel;
        this.ladderStar = ladderStar;
        this.ladderScore = ladderScore;
        this.challengeRemain = challengeRemain;
        this.challengeBuyNum = challengeBuyNum;
        this.guardId = guardId;
        this.rewardStr = rewardStr;
        this.remainDate = remainDate;
        this.rankNum = rankNum;
        this.reportList = reportList;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LadderView _r = null;
        if(rhs instanceof LadderView)
        {
            _r = (LadderView)rhs;
        }

        if(_r != null)
        {
            if(ladderLevel != _r.ladderLevel)
            {
                return false;
            }
            if(ladderStar != _r.ladderStar)
            {
                return false;
            }
            if(ladderScore != _r.ladderScore)
            {
                return false;
            }
            if(challengeRemain != _r.challengeRemain)
            {
                return false;
            }
            if(challengeBuyNum != _r.challengeBuyNum)
            {
                return false;
            }
            if(guardId != _r.guardId)
            {
                if(guardId == null || _r.guardId == null || !guardId.equals(_r.guardId))
                {
                    return false;
                }
            }
            if(rewardStr != _r.rewardStr)
            {
                if(rewardStr == null || _r.rewardStr == null || !rewardStr.equals(_r.rewardStr))
                {
                    return false;
                }
            }
            if(remainDate != _r.remainDate)
            {
                return false;
            }
            if(rankNum != _r.rankNum)
            {
                return false;
            }
            if(!java.util.Arrays.equals(reportList, _r.reportList))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::LadderView");
        __h = IceInternal.HashUtil.hashAdd(__h, ladderLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, ladderStar);
        __h = IceInternal.HashUtil.hashAdd(__h, ladderScore);
        __h = IceInternal.HashUtil.hashAdd(__h, challengeRemain);
        __h = IceInternal.HashUtil.hashAdd(__h, challengeBuyNum);
        __h = IceInternal.HashUtil.hashAdd(__h, guardId);
        __h = IceInternal.HashUtil.hashAdd(__h, rewardStr);
        __h = IceInternal.HashUtil.hashAdd(__h, remainDate);
        __h = IceInternal.HashUtil.hashAdd(__h, rankNum);
        __h = IceInternal.HashUtil.hashAdd(__h, reportList);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(ladderLevel);
        __os.writeInt(ladderStar);
        __os.writeInt(ladderScore);
        __os.writeInt(challengeRemain);
        __os.writeInt(challengeBuyNum);
        __os.writeString(guardId);
        __os.writeString(rewardStr);
        __os.writeInt(remainDate);
        __os.writeInt(rankNum);
        ReportSeqHelper.write(__os, reportList);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        ladderLevel = __is.readInt();
        ladderStar = __is.readInt();
        ladderScore = __is.readInt();
        challengeRemain = __is.readInt();
        challengeBuyNum = __is.readInt();
        guardId = __is.readString();
        rewardStr = __is.readString();
        remainDate = __is.readInt();
        rankNum = __is.readInt();
        reportList = ReportSeqHelper.read(__is);
    }

    public static final long serialVersionUID = -1828646979L;
}
