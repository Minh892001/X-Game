// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LoginSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class LoginCallbackPrxHelper extends Ice.ObjectPrxHelperBase implements LoginCallbackPrx
{
    private static final String __announce_name = "announce";

    public void announce(String content)
    {
        announce(content, null, false);
    }

    public void announce(String content, java.util.Map<String, String> __ctx)
    {
        announce(content, __ctx, true);
    }

    private void announce(String content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "announce", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _LoginCallbackDel __del = (_LoginCallbackDel)__delBase;
                    __del.announce(content, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_announce(String content)
    {
        return begin_announce(content, null, false, null);
    }

    public Ice.AsyncResult begin_announce(String content, java.util.Map<String, String> __ctx)
    {
        return begin_announce(content, __ctx, true, null);
    }

    public Ice.AsyncResult begin_announce(String content, Ice.Callback __cb)
    {
        return begin_announce(content, null, false, __cb);
    }

    public Ice.AsyncResult begin_announce(String content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_announce(content, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_announce(String content, Callback_LoginCallback_announce __cb)
    {
        return begin_announce(content, null, false, __cb);
    }

    public Ice.AsyncResult begin_announce(String content, java.util.Map<String, String> __ctx, Callback_LoginCallback_announce __cb)
    {
        return begin_announce(content, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_announce(String content, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __announce_name, __cb);
        try
        {
            __result.__prepare(__announce_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(content);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_announce(Ice.AsyncResult __result)
    {
        __end(__result, __announce_name);
    }

    public boolean announce_async(AMI_LoginCallback_announce __cb, String content)
    {
        Ice.AsyncResult __r = begin_announce(content, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean announce_async(AMI_LoginCallback_announce __cb, String content, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_announce(content, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static LoginCallbackPrx checkedCast(Ice.ObjectPrx __obj)
    {
        LoginCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LoginCallbackPrx)
            {
                __d = (LoginCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    LoginCallbackPrxHelper __h = new LoginCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LoginCallbackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        LoginCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LoginCallbackPrx)
            {
                __d = (LoginCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    LoginCallbackPrxHelper __h = new LoginCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LoginCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LoginCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    LoginCallbackPrxHelper __h = new LoginCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LoginCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        LoginCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    LoginCallbackPrxHelper __h = new LoginCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LoginCallbackPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        LoginCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LoginCallbackPrx)
            {
                __d = (LoginCallbackPrx)__obj;
            }
            else
            {
                LoginCallbackPrxHelper __h = new LoginCallbackPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static LoginCallbackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LoginCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            LoginCallbackPrxHelper __h = new LoginCallbackPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::LoginCallback"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _LoginCallbackDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _LoginCallbackDelD();
    }

    public static void __write(IceInternal.BasicStream __os, LoginCallbackPrx v)
    {
        __os.writeProxy(v);
    }

    public static LoginCallbackPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LoginCallbackPrxHelper result = new LoginCallbackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
