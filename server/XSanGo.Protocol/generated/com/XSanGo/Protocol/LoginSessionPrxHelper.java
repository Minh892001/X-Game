// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LoginSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class LoginSessionPrxHelper extends Ice.ObjectPrxHelperBase implements LoginSessionPrx
{
    private static final String __destroy_name = "destroy";

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     **/
    public void destroy()
    {
        destroy(null, false);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "destroy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _LoginSessionDel __del = (_LoginSessionDel)__delBase;
                    __del.destroy(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, null);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, null);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __destroy_name, __cb);
        try
        {
            __result.__prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_destroy(Ice.AsyncResult __result)
    {
        __end(__result, __destroy_name);
    }

    private static final String __login_name = "login";

    public ServerList login(String account, String password)
        throws NoteException
    {
        return login(account, password, null, false);
    }

    public ServerList login(String account, String password, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return login(account, password, __ctx, true);
    }

    private ServerList login(String account, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "login", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("login");
                    __delBase = __getDelegate(false);
                    _LoginSessionDel __del = (_LoginSessionDel)__delBase;
                    return __del.login(account, password, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_login(String account, String password)
    {
        return begin_login(account, password, null, false, null);
    }

    public Ice.AsyncResult begin_login(String account, String password, java.util.Map<String, String> __ctx)
    {
        return begin_login(account, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_login(String account, String password, Ice.Callback __cb)
    {
        return begin_login(account, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(String account, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(account, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_login(String account, String password, Callback_LoginSession_login __cb)
    {
        return begin_login(account, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(String account, String password, java.util.Map<String, String> __ctx, Callback_LoginSession_login __cb)
    {
        return begin_login(account, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_login(String account, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __login_name, __cb);
        try
        {
            __result.__prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(password);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ServerList end_login(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __login_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ServerList __ret;
            __ret = new ServerList();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean login_async(AMI_LoginSession_login __cb, String account, String password)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__login_name);
            __r = begin_login(account, password, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __login_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean login_async(AMI_LoginSession_login __cb, String account, String password, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__login_name);
            __r = begin_login(account, password, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __login_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __register_name = "register";

    public void register(String account, String password)
        throws NoteException
    {
        register(account, password, null, false);
    }

    public void register(String account, String password, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        register(account, password, __ctx, true);
    }

    private void register(String account, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "register", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("register");
                    __delBase = __getDelegate(false);
                    _LoginSessionDel __del = (_LoginSessionDel)__delBase;
                    __del.register(account, password, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_register(String account, String password)
    {
        return begin_register(account, password, null, false, null);
    }

    public Ice.AsyncResult begin_register(String account, String password, java.util.Map<String, String> __ctx)
    {
        return begin_register(account, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_register(String account, String password, Ice.Callback __cb)
    {
        return begin_register(account, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_register(String account, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_register(account, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_register(String account, String password, Callback_LoginSession_register __cb)
    {
        return begin_register(account, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_register(String account, String password, java.util.Map<String, String> __ctx, Callback_LoginSession_register __cb)
    {
        return begin_register(account, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_register(String account, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__register_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __register_name, __cb);
        try
        {
            __result.__prepare(__register_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(account);
            __os.writeString(password);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_register(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __register_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean register_async(AMI_LoginSession_register __cb, String account, String password)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__register_name);
            __r = begin_register(account, password, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __register_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean register_async(AMI_LoginSession_register __cb, String account, String password, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__register_name);
            __r = begin_register(account, password, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __register_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectServer_name = "selectServer";

    public String selectServer(int serverId)
        throws NoteException
    {
        return selectServer(serverId, null, false);
    }

    public String selectServer(int serverId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selectServer(serverId, __ctx, true);
    }

    private String selectServer(int serverId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectServer", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectServer");
                    __delBase = __getDelegate(false);
                    _LoginSessionDel __del = (_LoginSessionDel)__delBase;
                    return __del.selectServer(serverId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectServer(int serverId)
    {
        return begin_selectServer(serverId, null, false, null);
    }

    public Ice.AsyncResult begin_selectServer(int serverId, java.util.Map<String, String> __ctx)
    {
        return begin_selectServer(serverId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectServer(int serverId, Ice.Callback __cb)
    {
        return begin_selectServer(serverId, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectServer(int serverId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectServer(serverId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectServer(int serverId, Callback_LoginSession_selectServer __cb)
    {
        return begin_selectServer(serverId, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectServer(int serverId, java.util.Map<String, String> __ctx, Callback_LoginSession_selectServer __cb)
    {
        return begin_selectServer(serverId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectServer(int serverId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectServer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectServer_name, __cb);
        try
        {
            __result.__prepare(__selectServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(serverId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selectServer(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selectServer_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectServer_async(AMI_LoginSession_selectServer __cb, int serverId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectServer_name);
            __r = begin_selectServer(serverId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectServer_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectServer_async(AMI_LoginSession_selectServer __cb, int serverId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectServer_name);
            __r = begin_selectServer(serverId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectServer_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setCallback_name = "setCallback";

    public void setCallback(LoginCallbackPrx cb, String macAddress, int packageId)
    {
        setCallback(cb, macAddress, packageId, null, false);
    }

    public void setCallback(LoginCallbackPrx cb, String macAddress, int packageId, java.util.Map<String, String> __ctx)
    {
        setCallback(cb, macAddress, packageId, __ctx, true);
    }

    private void setCallback(LoginCallbackPrx cb, String macAddress, int packageId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCallback", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _LoginSessionDel __del = (_LoginSessionDel)__delBase;
                    __del.setCallback(cb, macAddress, packageId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCallback(LoginCallbackPrx cb, String macAddress, int packageId)
    {
        return begin_setCallback(cb, macAddress, packageId, null, false, null);
    }

    public Ice.AsyncResult begin_setCallback(LoginCallbackPrx cb, String macAddress, int packageId, java.util.Map<String, String> __ctx)
    {
        return begin_setCallback(cb, macAddress, packageId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCallback(LoginCallbackPrx cb, String macAddress, int packageId, Ice.Callback __cb)
    {
        return begin_setCallback(cb, macAddress, packageId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(LoginCallbackPrx cb, String macAddress, int packageId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCallback(cb, macAddress, packageId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCallback(LoginCallbackPrx cb, String macAddress, int packageId, Callback_LoginSession_setCallback __cb)
    {
        return begin_setCallback(cb, macAddress, packageId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(LoginCallbackPrx cb, String macAddress, int packageId, java.util.Map<String, String> __ctx, Callback_LoginSession_setCallback __cb)
    {
        return begin_setCallback(cb, macAddress, packageId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCallback(LoginCallbackPrx cb, String macAddress, int packageId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCallback_name, __cb);
        try
        {
            __result.__prepare(__setCallback_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            LoginCallbackPrxHelper.__write(__os, cb);
            __os.writeString(macAddress);
            __os.writeInt(packageId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCallback(Ice.AsyncResult __result)
    {
        __end(__result, __setCallback_name);
    }

    public boolean setCallback_async(AMI_LoginSession_setCallback __cb, LoginCallbackPrx cb, String macAddress, int packageId)
    {
        Ice.AsyncResult __r = begin_setCallback(cb, macAddress, packageId, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean setCallback_async(AMI_LoginSession_setCallback __cb, LoginCallbackPrx cb, String macAddress, int packageId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_setCallback(cb, macAddress, packageId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static LoginSessionPrx checkedCast(Ice.ObjectPrx __obj)
    {
        LoginSessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LoginSessionPrx)
            {
                __d = (LoginSessionPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    LoginSessionPrxHelper __h = new LoginSessionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LoginSessionPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        LoginSessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LoginSessionPrx)
            {
                __d = (LoginSessionPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    LoginSessionPrxHelper __h = new LoginSessionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LoginSessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LoginSessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    LoginSessionPrxHelper __h = new LoginSessionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LoginSessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        LoginSessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    LoginSessionPrxHelper __h = new LoginSessionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LoginSessionPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        LoginSessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LoginSessionPrx)
            {
                __d = (LoginSessionPrx)__obj;
            }
            else
            {
                LoginSessionPrxHelper __h = new LoginSessionPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static LoginSessionPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LoginSessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            LoginSessionPrxHelper __h = new LoginSessionPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::com::XSanGo::Protocol::LoginSession"
    };

    public static String ice_staticId()
    {
        return __ids[2];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _LoginSessionDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _LoginSessionDelD();
    }

    public static void __write(IceInternal.BasicStream __os, LoginSessionPrx v)
    {
        __os.writeProxy(v);
    }

    public static LoginSessionPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LoginSessionPrxHelper result = new LoginSessionPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
