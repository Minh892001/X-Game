// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `MakeWine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class MakeWineExchangeView implements java.lang.Cloneable, java.io.Serializable
{
    public MakeWineExchangeItem[] makeWineExchangeItems;

    public int myComposeScore;

    public MakeWineExchangeView()
    {
    }

    public MakeWineExchangeView(MakeWineExchangeItem[] makeWineExchangeItems, int myComposeScore)
    {
        this.makeWineExchangeItems = makeWineExchangeItems;
        this.myComposeScore = myComposeScore;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MakeWineExchangeView _r = null;
        if(rhs instanceof MakeWineExchangeView)
        {
            _r = (MakeWineExchangeView)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(makeWineExchangeItems, _r.makeWineExchangeItems))
            {
                return false;
            }
            if(myComposeScore != _r.myComposeScore)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::MakeWineExchangeView");
        __h = IceInternal.HashUtil.hashAdd(__h, makeWineExchangeItems);
        __h = IceInternal.HashUtil.hashAdd(__h, myComposeScore);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        MakeWineExchangeItemSeqHelper.write(__os, makeWineExchangeItems);
        __os.writeInt(myComposeScore);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        makeWineExchangeItems = MakeWineExchangeItemSeqHelper.read(__is);
        myComposeScore = __is.readInt();
    }

    public static final long serialVersionUID = 938216271L;
}
