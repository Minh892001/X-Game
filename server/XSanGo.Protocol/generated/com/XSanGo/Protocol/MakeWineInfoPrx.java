// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `MakeWine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface MakeWineInfoPrx extends Ice.ObjectPrx
{
    /**
     * 酿酒界面, 返回 MakeWineView
     **/
    public String makeWineView()
        throws NoteException;

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String makeWineView(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 酿酒界面, 返回 MakeWineView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_makeWineView();

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_makeWineView(java.util.Map<String, String> __ctx);

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_makeWineView(Ice.Callback __cb);

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_makeWineView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_makeWineView(Callback_MakeWineInfo_makeWineView __cb);

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_makeWineView(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_makeWineView __cb);

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __result The asynchronous result object.
     **/
    public String end_makeWineView(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     **/
    public boolean makeWineView_async(AMI_MakeWineInfo_makeWineView __cb);

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean makeWineView_async(AMI_MakeWineInfo_makeWineView __cb, java.util.Map<String, String> __ctx);

    /**
     * 定时 领取材料  MaterialView
     **/
    public String receiveMaterial()
        throws NoteException;

    /**
     * 定时 领取材料  MaterialView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String receiveMaterial(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 定时 领取材料  MaterialView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveMaterial();

    /**
     * 定时 领取材料  MaterialView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveMaterial(java.util.Map<String, String> __ctx);

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveMaterial(Ice.Callback __cb);

    /**
     * 定时 领取材料  MaterialView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveMaterial(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveMaterial(Callback_MakeWineInfo_receiveMaterial __cb);

    /**
     * 定时 领取材料  MaterialView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveMaterial(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_receiveMaterial __cb);

    /**
     * 定时 领取材料  MaterialView
     * @param __result The asynchronous result object.
     **/
    public String end_receiveMaterial(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveMaterial_async(AMI_MakeWineInfo_receiveMaterial __cb);

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveMaterial_async(AMI_MakeWineInfo_receiveMaterial __cb, java.util.Map<String, String> __ctx);

    /**
     * 定时 积分奖励 return ScoreAwardView
     **/
    public String receiveScoreAward()
        throws NoteException;

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String receiveScoreAward(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveScoreAward();

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(java.util.Map<String, String> __ctx);

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(Ice.Callback __cb);

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(Callback_MakeWineInfo_receiveScoreAward __cb);

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_receiveScoreAward __cb);

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __result The asynchronous result object.
     **/
    public String end_receiveScoreAward(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveScoreAward_async(AMI_MakeWineInfo_receiveScoreAward __cb);

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveScoreAward_async(AMI_MakeWineInfo_receiveScoreAward __cb, java.util.Map<String, String> __ctx);

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     **/
    public String make(int id, int type)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __ctx The Context map to send with the invocation.
     **/
    public String make(int id, int type, java.util.Map<String, String> __ctx)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_make(int id, int type);

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_make(int id, int type, java.util.Map<String, String> __ctx);

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_make(int id, int type, Ice.Callback __cb);

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_make(int id, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_make(int id, int type, Callback_MakeWineInfo_make __cb);

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_make(int id, int type, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_make __cb);

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __result The asynchronous result object.
     **/
    public String end_make(Ice.AsyncResult __result)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     **/
    public boolean make_async(AMI_MakeWineInfo_make __cb, int id, int type);

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean make_async(AMI_MakeWineInfo_make __cb, int id, int type, java.util.Map<String, String> __ctx);

    public String shareView(int condition, int startIndex)
        throws NoteException;

    public String shareView(int condition, int startIndex, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_shareView(int condition, int startIndex);

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, Ice.Callback __cb);

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, Callback_MakeWineInfo_shareView __cb);

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_shareView __cb);

    public String end_shareView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean shareView_async(AMI_MakeWineInfo_shareView __cb, int condition, int startIndex);

    public boolean shareView_async(AMI_MakeWineInfo_shareView __cb, int condition, int startIndex, java.util.Map<String, String> __ctx);

    /**
     * 分享 id:目标 , count:多少组
     **/
    public void share(int id, int count)
        throws NoteException;

    /**
     * 分享 id:目标 , count:多少组
     * @param __ctx The Context map to send with the invocation.
     **/
    public void share(int id, int count, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 分享 id:目标 , count:多少组
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_share(int id, int count);

    /**
     * 分享 id:目标 , count:多少组
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_share(int id, int count, java.util.Map<String, String> __ctx);

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_share(int id, int count, Ice.Callback __cb);

    /**
     * 分享 id:目标 , count:多少组
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_share(int id, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_share(int id, int count, Callback_MakeWineInfo_share __cb);

    /**
     * 分享 id:目标 , count:多少组
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_share(int id, int count, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_share __cb);

    /**
     * 分享 id:目标 , count:多少组
     * @param __result The asynchronous result object.
     **/
    public void end_share(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     **/
    public boolean share_async(AMI_MakeWineInfo_share __cb, int id, int count);

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean share_async(AMI_MakeWineInfo_share __cb, int id, int count, java.util.Map<String, String> __ctx);

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     **/
    public String receiveShare(String id, int condition, int startIndex)
        throws NoteException;

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex);

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx);

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, Ice.Callback __cb);

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, Callback_MakeWineInfo_receiveShare __cb);

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_receiveShare __cb);

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __result The asynchronous result object.
     **/
    public String end_receiveShare(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveShare_async(AMI_MakeWineInfo_receiveShare __cb, String id, int condition, int startIndex);

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveShare_async(AMI_MakeWineInfo_receiveShare __cb, String id, int condition, int startIndex, java.util.Map<String, String> __ctx);

    /**
     * 置顶  id:记录ID
     **/
    public void topUp(String id)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 置顶  id:记录ID
     * @param __ctx The Context map to send with the invocation.
     **/
    public void topUp(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 置顶  id:记录ID
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_topUp(String id);

    /**
     * 置顶  id:记录ID
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_topUp(String id, java.util.Map<String, String> __ctx);

    /**
     * 置顶  id:记录ID
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_topUp(String id, Ice.Callback __cb);

    /**
     * 置顶  id:记录ID
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_topUp(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 置顶  id:记录ID
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_topUp(String id, Callback_MakeWineInfo_topUp __cb);

    /**
     * 置顶  id:记录ID
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_topUp(String id, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_topUp __cb);

    /**
     * 置顶  id:记录ID
     * @param __result The asynchronous result object.
     **/
    public void end_topUp(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     **/
    public boolean topUp_async(AMI_MakeWineInfo_topUp __cb, String id);

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean topUp_async(AMI_MakeWineInfo_topUp __cb, String id, java.util.Map<String, String> __ctx);

    /**
     * 兑换界面 MakeWineExchangeView
     **/
    public String exchangeView()
        throws NoteException;

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String exchangeView(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 兑换界面 MakeWineExchangeView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchangeView();

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchangeView(java.util.Map<String, String> __ctx);

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchangeView(Ice.Callback __cb);

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchangeView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchangeView(Callback_MakeWineInfo_exchangeView __cb);

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchangeView(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_exchangeView __cb);

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __result The asynchronous result object.
     **/
    public String end_exchangeView(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     **/
    public boolean exchangeView_async(AMI_MakeWineInfo_exchangeView __cb);

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean exchangeView_async(AMI_MakeWineInfo_exchangeView __cb, java.util.Map<String, String> __ctx);

    /**
     * 兑换 id:编号, num:多少组
     **/
    public void exchange(int id, int num)
        throws NoteException;

    /**
     * 兑换 id:编号, num:多少组
     * @param __ctx The Context map to send with the invocation.
     **/
    public void exchange(int id, int num, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 兑换 id:编号, num:多少组
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num);

    /**
     * 兑换 id:编号, num:多少组
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, java.util.Map<String, String> __ctx);

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, Ice.Callback __cb);

    /**
     * 兑换 id:编号, num:多少组
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, Callback_MakeWineInfo_exchange __cb);

    /**
     * 兑换 id:编号, num:多少组
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_exchange __cb);

    /**
     * 兑换 id:编号, num:多少组
     * @param __result The asynchronous result object.
     **/
    public void end_exchange(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     **/
    public boolean exchange_async(AMI_MakeWineInfo_exchange __cb, int id, int num);

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean exchange_async(AMI_MakeWineInfo_exchange __cb, int id, int num, java.util.Map<String, String> __ctx);

    /**
     * 查看积分榜 return MakeWineScoreRank
     **/
    public String scoreRank()
        throws NoteException;

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __ctx The Context map to send with the invocation.
     **/
    public String scoreRank(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRank();

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRank(java.util.Map<String, String> __ctx);

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRank(Ice.Callback __cb);

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRank(Callback_MakeWineInfo_scoreRank __cb);

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRank(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_scoreRank __cb);

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __result The asynchronous result object.
     **/
    public String end_scoreRank(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     **/
    public boolean scoreRank_async(AMI_MakeWineInfo_scoreRank __cb);

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean scoreRank_async(AMI_MakeWineInfo_scoreRank __cb, java.util.Map<String, String> __ctx);

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     **/
    public String scoreRankAward()
        throws NoteException;

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __ctx The Context map to send with the invocation.
     **/
    public String scoreRankAward(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRankAward();

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRankAward(java.util.Map<String, String> __ctx);

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRankAward(Ice.Callback __cb);

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRankAward(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRankAward(Callback_MakeWineInfo_scoreRankAward __cb);

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_scoreRankAward(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_scoreRankAward __cb);

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __result The asynchronous result object.
     **/
    public String end_scoreRankAward(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     **/
    public boolean scoreRankAward_async(AMI_MakeWineInfo_scoreRankAward __cb);

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean scoreRankAward_async(AMI_MakeWineInfo_scoreRankAward __cb, java.util.Map<String, String> __ctx);

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     **/
    public String wineInfoView()
        throws NoteException;

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __ctx The Context map to send with the invocation.
     **/
    public String wineInfoView(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_wineInfoView();

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_wineInfoView(java.util.Map<String, String> __ctx);

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_wineInfoView(Ice.Callback __cb);

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_wineInfoView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_wineInfoView(Callback_MakeWineInfo_wineInfoView __cb);

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_wineInfoView(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_wineInfoView __cb);

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __result The asynchronous result object.
     **/
    public String end_wineInfoView(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public boolean wineInfoView_async(AMI_MakeWineInfo_wineInfoView __cb);

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean wineInfoView_async(AMI_MakeWineInfo_wineInfoView __cb, java.util.Map<String, String> __ctx);

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     **/
    public String seeLog(int type)
        throws NoteException;

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __ctx The Context map to send with the invocation.
     **/
    public String seeLog(int type, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_seeLog(int type);

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_seeLog(int type, java.util.Map<String, String> __ctx);

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_seeLog(int type, Ice.Callback __cb);

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_seeLog(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_seeLog(int type, Callback_MakeWineInfo_seeLog __cb);

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_seeLog(int type, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_seeLog __cb);

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __result The asynchronous result object.
     **/
    public String end_seeLog(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     **/
    public boolean seeLog_async(AMI_MakeWineInfo_seeLog __cb, int type);

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean seeLog_async(AMI_MakeWineInfo_seeLog __cb, int type, java.util.Map<String, String> __ctx);
}
