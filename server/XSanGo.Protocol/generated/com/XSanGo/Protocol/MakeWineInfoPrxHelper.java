// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `MakeWine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class MakeWineInfoPrxHelper extends Ice.ObjectPrxHelperBase implements MakeWineInfoPrx
{
    private static final String __exchange_name = "exchange";

    /**
     * 兑换 id:编号, num:多少组
     **/
    public void exchange(int id, int num)
        throws NoteException
    {
        exchange(id, num, null, false);
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __ctx The Context map to send with the invocation.
     **/
    public void exchange(int id, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        exchange(id, num, __ctx, true);
    }

    private void exchange(int id, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exchange", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exchange");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    __del.exchange(id, num, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num)
    {
        return begin_exchange(id, num, null, false, null);
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, java.util.Map<String, String> __ctx)
    {
        return begin_exchange(id, num, __ctx, true, null);
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, Ice.Callback __cb)
    {
        return begin_exchange(id, num, null, false, __cb);
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exchange(id, num, __ctx, true, __cb);
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, Callback_MakeWineInfo_exchange __cb)
    {
        return begin_exchange(id, num, null, false, __cb);
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_exchange(int id, int num, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_exchange __cb)
    {
        return begin_exchange(id, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exchange(int id, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exchange_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exchange_name, __cb);
        try
        {
            __result.__prepare(__exchange_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_exchange(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exchange_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     **/
    public boolean exchange_async(AMI_MakeWineInfo_exchange __cb, int id, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchange_name);
            __r = begin_exchange(id, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchange_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 兑换 id:编号, num:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean exchange_async(AMI_MakeWineInfo_exchange __cb, int id, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchange_name);
            __r = begin_exchange(id, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchange_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __exchangeView_name = "exchangeView";

    /**
     * 兑换界面 MakeWineExchangeView
     **/
    public String exchangeView()
        throws NoteException
    {
        return exchangeView(null, false);
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String exchangeView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return exchangeView(__ctx, true);
    }

    private String exchangeView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exchangeView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exchangeView");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.exchangeView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_exchangeView()
    {
        return begin_exchangeView(null, false, null);
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_exchangeView(java.util.Map<String, String> __ctx)
    {
        return begin_exchangeView(__ctx, true, null);
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_exchangeView(Ice.Callback __cb)
    {
        return begin_exchangeView(null, false, __cb);
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_exchangeView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exchangeView(__ctx, true, __cb);
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_exchangeView(Callback_MakeWineInfo_exchangeView __cb)
    {
        return begin_exchangeView(null, false, __cb);
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_exchangeView(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_exchangeView __cb)
    {
        return begin_exchangeView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exchangeView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exchangeView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exchangeView_name, __cb);
        try
        {
            __result.__prepare(__exchangeView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_exchangeView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exchangeView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     **/
    public boolean exchangeView_async(AMI_MakeWineInfo_exchangeView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeView_name);
            __r = begin_exchangeView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 兑换界面 MakeWineExchangeView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean exchangeView_async(AMI_MakeWineInfo_exchangeView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeView_name);
            __r = begin_exchangeView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __make_name = "make";

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     **/
    public String make(int id, int type)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return make(id, type, null, false);
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __ctx The Context map to send with the invocation.
     **/
    public String make(int id, int type, java.util.Map<String, String> __ctx)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return make(id, type, __ctx, true);
    }

    private String make(int id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "make", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("make");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.make(id, type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_make(int id, int type)
    {
        return begin_make(id, type, null, false, null);
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_make(int id, int type, java.util.Map<String, String> __ctx)
    {
        return begin_make(id, type, __ctx, true, null);
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_make(int id, int type, Ice.Callback __cb)
    {
        return begin_make(id, type, null, false, __cb);
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_make(int id, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_make(id, type, __ctx, true, __cb);
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_make(int id, int type, Callback_MakeWineInfo_make __cb)
    {
        return begin_make(id, type, null, false, __cb);
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_make(int id, int type, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_make __cb)
    {
        return begin_make(id, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_make(int id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__make_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __make_name, __cb);
        try
        {
            __result.__prepare(__make_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_make(Ice.AsyncResult __result)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __make_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     **/
    public boolean make_async(AMI_MakeWineInfo_make __cb, int id, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__make_name);
            __r = begin_make(id, type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __make_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean make_async(AMI_MakeWineInfo_make __cb, int id, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__make_name);
            __r = begin_make(id, type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __make_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __makeWineView_name = "makeWineView";

    /**
     * 酿酒界面, 返回 MakeWineView
     **/
    public String makeWineView()
        throws NoteException
    {
        return makeWineView(null, false);
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String makeWineView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return makeWineView(__ctx, true);
    }

    private String makeWineView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "makeWineView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("makeWineView");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.makeWineView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_makeWineView()
    {
        return begin_makeWineView(null, false, null);
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_makeWineView(java.util.Map<String, String> __ctx)
    {
        return begin_makeWineView(__ctx, true, null);
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_makeWineView(Ice.Callback __cb)
    {
        return begin_makeWineView(null, false, __cb);
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_makeWineView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_makeWineView(__ctx, true, __cb);
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_makeWineView(Callback_MakeWineInfo_makeWineView __cb)
    {
        return begin_makeWineView(null, false, __cb);
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_makeWineView(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_makeWineView __cb)
    {
        return begin_makeWineView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_makeWineView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__makeWineView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __makeWineView_name, __cb);
        try
        {
            __result.__prepare(__makeWineView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_makeWineView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __makeWineView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     **/
    public boolean makeWineView_async(AMI_MakeWineInfo_makeWineView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__makeWineView_name);
            __r = begin_makeWineView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __makeWineView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean makeWineView_async(AMI_MakeWineInfo_makeWineView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__makeWineView_name);
            __r = begin_makeWineView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __makeWineView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveMaterial_name = "receiveMaterial";

    /**
     * 定时 领取材料  MaterialView
     **/
    public String receiveMaterial()
        throws NoteException
    {
        return receiveMaterial(null, false);
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String receiveMaterial(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return receiveMaterial(__ctx, true);
    }

    private String receiveMaterial(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveMaterial", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveMaterial");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.receiveMaterial(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveMaterial()
    {
        return begin_receiveMaterial(null, false, null);
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveMaterial(java.util.Map<String, String> __ctx)
    {
        return begin_receiveMaterial(__ctx, true, null);
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveMaterial(Ice.Callback __cb)
    {
        return begin_receiveMaterial(null, false, __cb);
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveMaterial(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveMaterial(__ctx, true, __cb);
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveMaterial(Callback_MakeWineInfo_receiveMaterial __cb)
    {
        return begin_receiveMaterial(null, false, __cb);
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveMaterial(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_receiveMaterial __cb)
    {
        return begin_receiveMaterial(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveMaterial(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveMaterial_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveMaterial_name, __cb);
        try
        {
            __result.__prepare(__receiveMaterial_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_receiveMaterial(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveMaterial_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveMaterial_async(AMI_MakeWineInfo_receiveMaterial __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveMaterial_name);
            __r = begin_receiveMaterial(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveMaterial_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 定时 领取材料  MaterialView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveMaterial_async(AMI_MakeWineInfo_receiveMaterial __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveMaterial_name);
            __r = begin_receiveMaterial(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveMaterial_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveScoreAward_name = "receiveScoreAward";

    /**
     * 定时 积分奖励 return ScoreAwardView
     **/
    public String receiveScoreAward()
        throws NoteException
    {
        return receiveScoreAward(null, false);
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String receiveScoreAward(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return receiveScoreAward(__ctx, true);
    }

    private String receiveScoreAward(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveScoreAward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveScoreAward");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.receiveScoreAward(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveScoreAward()
    {
        return begin_receiveScoreAward(null, false, null);
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(java.util.Map<String, String> __ctx)
    {
        return begin_receiveScoreAward(__ctx, true, null);
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(Ice.Callback __cb)
    {
        return begin_receiveScoreAward(null, false, __cb);
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveScoreAward(__ctx, true, __cb);
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(Callback_MakeWineInfo_receiveScoreAward __cb)
    {
        return begin_receiveScoreAward(null, false, __cb);
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveScoreAward(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_receiveScoreAward __cb)
    {
        return begin_receiveScoreAward(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveScoreAward(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveScoreAward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveScoreAward_name, __cb);
        try
        {
            __result.__prepare(__receiveScoreAward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_receiveScoreAward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveScoreAward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveScoreAward_async(AMI_MakeWineInfo_receiveScoreAward __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveScoreAward_name);
            __r = begin_receiveScoreAward(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveScoreAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveScoreAward_async(AMI_MakeWineInfo_receiveScoreAward __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveScoreAward_name);
            __r = begin_receiveScoreAward(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveScoreAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveShare_name = "receiveShare";

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     **/
    public String receiveShare(String id, int condition, int startIndex)
        throws NoteException
    {
        return receiveShare(id, condition, startIndex, null, false);
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return receiveShare(id, condition, startIndex, __ctx, true);
    }

    private String receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveShare", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveShare");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.receiveShare(id, condition, startIndex, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex)
    {
        return begin_receiveShare(id, condition, startIndex, null, false, null);
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx)
    {
        return begin_receiveShare(id, condition, startIndex, __ctx, true, null);
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, Ice.Callback __cb)
    {
        return begin_receiveShare(id, condition, startIndex, null, false, __cb);
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveShare(id, condition, startIndex, __ctx, true, __cb);
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, Callback_MakeWineInfo_receiveShare __cb)
    {
        return begin_receiveShare(id, condition, startIndex, null, false, __cb);
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_receiveShare __cb)
    {
        return begin_receiveShare(id, condition, startIndex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveShare(String id, int condition, int startIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveShare_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveShare_name, __cb);
        try
        {
            __result.__prepare(__receiveShare_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeInt(condition);
            __os.writeInt(startIndex);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_receiveShare(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveShare_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveShare_async(AMI_MakeWineInfo_receiveShare __cb, String id, int condition, int startIndex)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveShare_name);
            __r = begin_receiveShare(id, condition, startIndex, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveShare_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveShare_async(AMI_MakeWineInfo_receiveShare __cb, String id, int condition, int startIndex, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveShare_name);
            __r = begin_receiveShare(id, condition, startIndex, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveShare_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __scoreRank_name = "scoreRank";

    /**
     * 查看积分榜 return MakeWineScoreRank
     **/
    public String scoreRank()
        throws NoteException
    {
        return scoreRank(null, false);
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __ctx The Context map to send with the invocation.
     **/
    public String scoreRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return scoreRank(__ctx, true);
    }

    private String scoreRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "scoreRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("scoreRank");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.scoreRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_scoreRank()
    {
        return begin_scoreRank(null, false, null);
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_scoreRank(java.util.Map<String, String> __ctx)
    {
        return begin_scoreRank(__ctx, true, null);
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_scoreRank(Ice.Callback __cb)
    {
        return begin_scoreRank(null, false, __cb);
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_scoreRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_scoreRank(__ctx, true, __cb);
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_scoreRank(Callback_MakeWineInfo_scoreRank __cb)
    {
        return begin_scoreRank(null, false, __cb);
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_scoreRank(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_scoreRank __cb)
    {
        return begin_scoreRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_scoreRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__scoreRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __scoreRank_name, __cb);
        try
        {
            __result.__prepare(__scoreRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_scoreRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __scoreRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     **/
    public boolean scoreRank_async(AMI_MakeWineInfo_scoreRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__scoreRank_name);
            __r = begin_scoreRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __scoreRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean scoreRank_async(AMI_MakeWineInfo_scoreRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__scoreRank_name);
            __r = begin_scoreRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __scoreRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __scoreRankAward_name = "scoreRankAward";

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     **/
    public String scoreRankAward()
        throws NoteException
    {
        return scoreRankAward(null, false);
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __ctx The Context map to send with the invocation.
     **/
    public String scoreRankAward(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return scoreRankAward(__ctx, true);
    }

    private String scoreRankAward(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "scoreRankAward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("scoreRankAward");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.scoreRankAward(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_scoreRankAward()
    {
        return begin_scoreRankAward(null, false, null);
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_scoreRankAward(java.util.Map<String, String> __ctx)
    {
        return begin_scoreRankAward(__ctx, true, null);
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_scoreRankAward(Ice.Callback __cb)
    {
        return begin_scoreRankAward(null, false, __cb);
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_scoreRankAward(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_scoreRankAward(__ctx, true, __cb);
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_scoreRankAward(Callback_MakeWineInfo_scoreRankAward __cb)
    {
        return begin_scoreRankAward(null, false, __cb);
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_scoreRankAward(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_scoreRankAward __cb)
    {
        return begin_scoreRankAward(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_scoreRankAward(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__scoreRankAward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __scoreRankAward_name, __cb);
        try
        {
            __result.__prepare(__scoreRankAward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_scoreRankAward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __scoreRankAward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     **/
    public boolean scoreRankAward_async(AMI_MakeWineInfo_scoreRankAward __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__scoreRankAward_name);
            __r = begin_scoreRankAward(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __scoreRankAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean scoreRankAward_async(AMI_MakeWineInfo_scoreRankAward __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__scoreRankAward_name);
            __r = begin_scoreRankAward(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __scoreRankAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __seeLog_name = "seeLog";

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     **/
    public String seeLog(int type)
        throws NoteException
    {
        return seeLog(type, null, false);
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __ctx The Context map to send with the invocation.
     **/
    public String seeLog(int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return seeLog(type, __ctx, true);
    }

    private String seeLog(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "seeLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("seeLog");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.seeLog(type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_seeLog(int type)
    {
        return begin_seeLog(type, null, false, null);
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_seeLog(int type, java.util.Map<String, String> __ctx)
    {
        return begin_seeLog(type, __ctx, true, null);
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_seeLog(int type, Ice.Callback __cb)
    {
        return begin_seeLog(type, null, false, __cb);
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_seeLog(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_seeLog(type, __ctx, true, __cb);
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_seeLog(int type, Callback_MakeWineInfo_seeLog __cb)
    {
        return begin_seeLog(type, null, false, __cb);
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_seeLog(int type, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_seeLog __cb)
    {
        return begin_seeLog(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_seeLog(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__seeLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __seeLog_name, __cb);
        try
        {
            __result.__prepare(__seeLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_seeLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __seeLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     **/
    public boolean seeLog_async(AMI_MakeWineInfo_seeLog __cb, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__seeLog_name);
            __r = begin_seeLog(type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __seeLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean seeLog_async(AMI_MakeWineInfo_seeLog __cb, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__seeLog_name);
            __r = begin_seeLog(type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __seeLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __share_name = "share";

    /**
     * 分享 id:目标 , count:多少组
     **/
    public void share(int id, int count)
        throws NoteException
    {
        share(id, count, null, false);
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __ctx The Context map to send with the invocation.
     **/
    public void share(int id, int count, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        share(id, count, __ctx, true);
    }

    private void share(int id, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "share", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("share");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    __del.share(id, count, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_share(int id, int count)
    {
        return begin_share(id, count, null, false, null);
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_share(int id, int count, java.util.Map<String, String> __ctx)
    {
        return begin_share(id, count, __ctx, true, null);
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_share(int id, int count, Ice.Callback __cb)
    {
        return begin_share(id, count, null, false, __cb);
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_share(int id, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_share(id, count, __ctx, true, __cb);
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_share(int id, int count, Callback_MakeWineInfo_share __cb)
    {
        return begin_share(id, count, null, false, __cb);
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_share(int id, int count, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_share __cb)
    {
        return begin_share(id, count, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_share(int id, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__share_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __share_name, __cb);
        try
        {
            __result.__prepare(__share_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(count);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_share(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __share_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     **/
    public boolean share_async(AMI_MakeWineInfo_share __cb, int id, int count)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__share_name);
            __r = begin_share(id, count, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __share_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 分享 id:目标 , count:多少组
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean share_async(AMI_MakeWineInfo_share __cb, int id, int count, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__share_name);
            __r = begin_share(id, count, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __share_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __shareView_name = "shareView";

    public String shareView(int condition, int startIndex)
        throws NoteException
    {
        return shareView(condition, startIndex, null, false);
    }

    public String shareView(int condition, int startIndex, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return shareView(condition, startIndex, __ctx, true);
    }

    private String shareView(int condition, int startIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "shareView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("shareView");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.shareView(condition, startIndex, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_shareView(int condition, int startIndex)
    {
        return begin_shareView(condition, startIndex, null, false, null);
    }

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, java.util.Map<String, String> __ctx)
    {
        return begin_shareView(condition, startIndex, __ctx, true, null);
    }

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, Ice.Callback __cb)
    {
        return begin_shareView(condition, startIndex, null, false, __cb);
    }

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shareView(condition, startIndex, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, Callback_MakeWineInfo_shareView __cb)
    {
        return begin_shareView(condition, startIndex, null, false, __cb);
    }

    public Ice.AsyncResult begin_shareView(int condition, int startIndex, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_shareView __cb)
    {
        return begin_shareView(condition, startIndex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shareView(int condition, int startIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__shareView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shareView_name, __cb);
        try
        {
            __result.__prepare(__shareView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(condition);
            __os.writeInt(startIndex);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_shareView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __shareView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean shareView_async(AMI_MakeWineInfo_shareView __cb, int condition, int startIndex)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__shareView_name);
            __r = begin_shareView(condition, startIndex, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __shareView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean shareView_async(AMI_MakeWineInfo_shareView __cb, int condition, int startIndex, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__shareView_name);
            __r = begin_shareView(condition, startIndex, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __shareView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __topUp_name = "topUp";

    /**
     * 置顶  id:记录ID
     **/
    public void topUp(String id)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        topUp(id, null, false);
    }

    /**
     * 置顶  id:记录ID
     * @param __ctx The Context map to send with the invocation.
     **/
    public void topUp(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        topUp(id, __ctx, true);
    }

    private void topUp(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "topUp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("topUp");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    __del.topUp(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_topUp(String id)
    {
        return begin_topUp(id, null, false, null);
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_topUp(String id, java.util.Map<String, String> __ctx)
    {
        return begin_topUp(id, __ctx, true, null);
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_topUp(String id, Ice.Callback __cb)
    {
        return begin_topUp(id, null, false, __cb);
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_topUp(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_topUp(id, __ctx, true, __cb);
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_topUp(String id, Callback_MakeWineInfo_topUp __cb)
    {
        return begin_topUp(id, null, false, __cb);
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_topUp(String id, java.util.Map<String, String> __ctx, Callback_MakeWineInfo_topUp __cb)
    {
        return begin_topUp(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_topUp(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__topUp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __topUp_name, __cb);
        try
        {
            __result.__prepare(__topUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_topUp(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __topUp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     **/
    public boolean topUp_async(AMI_MakeWineInfo_topUp __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__topUp_name);
            __r = begin_topUp(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __topUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean topUp_async(AMI_MakeWineInfo_topUp __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__topUp_name);
            __r = begin_topUp(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __topUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __wineInfoView_name = "wineInfoView";

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     **/
    public String wineInfoView()
        throws NoteException
    {
        return wineInfoView(null, false);
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __ctx The Context map to send with the invocation.
     **/
    public String wineInfoView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return wineInfoView(__ctx, true);
    }

    private String wineInfoView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "wineInfoView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("wineInfoView");
                    __delBase = __getDelegate(false);
                    _MakeWineInfoDel __del = (_MakeWineInfoDel)__delBase;
                    return __del.wineInfoView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_wineInfoView()
    {
        return begin_wineInfoView(null, false, null);
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_wineInfoView(java.util.Map<String, String> __ctx)
    {
        return begin_wineInfoView(__ctx, true, null);
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_wineInfoView(Ice.Callback __cb)
    {
        return begin_wineInfoView(null, false, __cb);
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_wineInfoView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_wineInfoView(__ctx, true, __cb);
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_wineInfoView(Callback_MakeWineInfo_wineInfoView __cb)
    {
        return begin_wineInfoView(null, false, __cb);
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_wineInfoView(java.util.Map<String, String> __ctx, Callback_MakeWineInfo_wineInfoView __cb)
    {
        return begin_wineInfoView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_wineInfoView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__wineInfoView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __wineInfoView_name, __cb);
        try
        {
            __result.__prepare(__wineInfoView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_wineInfoView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __wineInfoView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     **/
    public boolean wineInfoView_async(AMI_MakeWineInfo_wineInfoView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__wineInfoView_name);
            __r = begin_wineInfoView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __wineInfoView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean wineInfoView_async(AMI_MakeWineInfo_wineInfoView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__wineInfoView_name);
            __r = begin_wineInfoView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __wineInfoView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static MakeWineInfoPrx checkedCast(Ice.ObjectPrx __obj)
    {
        MakeWineInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MakeWineInfoPrx)
            {
                __d = (MakeWineInfoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MakeWineInfoPrxHelper __h = new MakeWineInfoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MakeWineInfoPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MakeWineInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MakeWineInfoPrx)
            {
                __d = (MakeWineInfoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MakeWineInfoPrxHelper __h = new MakeWineInfoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MakeWineInfoPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MakeWineInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MakeWineInfoPrxHelper __h = new MakeWineInfoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MakeWineInfoPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MakeWineInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MakeWineInfoPrxHelper __h = new MakeWineInfoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MakeWineInfoPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        MakeWineInfoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MakeWineInfoPrx)
            {
                __d = (MakeWineInfoPrx)__obj;
            }
            else
            {
                MakeWineInfoPrxHelper __h = new MakeWineInfoPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MakeWineInfoPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MakeWineInfoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MakeWineInfoPrxHelper __h = new MakeWineInfoPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::MakeWineInfo"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _MakeWineInfoDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _MakeWineInfoDelD();
    }

    public static void __write(IceInternal.BasicStream __os, MakeWineInfoPrx v)
    {
        __os.writeProxy(v);
    }

    public static MakeWineInfoPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MakeWineInfoPrxHelper result = new MakeWineInfoPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
