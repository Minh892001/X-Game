// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `MakeWine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class MakeWineScoreAwardView implements java.lang.Cloneable, java.io.Serializable
{
    public IntString scoreAward;

    public int receiveScoreLimit;

    public int receiveScoreState;

    public MakeWineScoreAwardView()
    {
    }

    public MakeWineScoreAwardView(IntString scoreAward, int receiveScoreLimit, int receiveScoreState)
    {
        this.scoreAward = scoreAward;
        this.receiveScoreLimit = receiveScoreLimit;
        this.receiveScoreState = receiveScoreState;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MakeWineScoreAwardView _r = null;
        if(rhs instanceof MakeWineScoreAwardView)
        {
            _r = (MakeWineScoreAwardView)rhs;
        }

        if(_r != null)
        {
            if(scoreAward != _r.scoreAward)
            {
                if(scoreAward == null || _r.scoreAward == null || !scoreAward.equals(_r.scoreAward))
                {
                    return false;
                }
            }
            if(receiveScoreLimit != _r.receiveScoreLimit)
            {
                return false;
            }
            if(receiveScoreState != _r.receiveScoreState)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::MakeWineScoreAwardView");
        __h = IceInternal.HashUtil.hashAdd(__h, scoreAward);
        __h = IceInternal.HashUtil.hashAdd(__h, receiveScoreLimit);
        __h = IceInternal.HashUtil.hashAdd(__h, receiveScoreState);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        scoreAward.__write(__os);
        __os.writeInt(receiveScoreLimit);
        __os.writeInt(receiveScoreState);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        scoreAward = new IntString();
        scoreAward.__read(__is);
        receiveScoreLimit = __is.readInt();
        receiveScoreState = __is.readInt();
    }

    public static final long serialVersionUID = -1991324177L;
}
