// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `MakeWine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class MakeWineShareRecord implements java.lang.Cloneable, java.io.Serializable
{
    public String recordId;

    public String itemId;

    public String roleId;

    public String name;

    public int lastCount;

    public int isFriend;

    public int state;

    public int toped;

    public int topCost;

    public int topLastCount;

    public String shareTime;

    public int receiveShareScore;

    public MakeWineShareRecord()
    {
    }

    public MakeWineShareRecord(String recordId, String itemId, String roleId, String name, int lastCount, int isFriend, int state, int toped, int topCost, int topLastCount, String shareTime, int receiveShareScore)
    {
        this.recordId = recordId;
        this.itemId = itemId;
        this.roleId = roleId;
        this.name = name;
        this.lastCount = lastCount;
        this.isFriend = isFriend;
        this.state = state;
        this.toped = toped;
        this.topCost = topCost;
        this.topLastCount = topLastCount;
        this.shareTime = shareTime;
        this.receiveShareScore = receiveShareScore;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MakeWineShareRecord _r = null;
        if(rhs instanceof MakeWineShareRecord)
        {
            _r = (MakeWineShareRecord)rhs;
        }

        if(_r != null)
        {
            if(recordId != _r.recordId)
            {
                if(recordId == null || _r.recordId == null || !recordId.equals(_r.recordId))
                {
                    return false;
                }
            }
            if(itemId != _r.itemId)
            {
                if(itemId == null || _r.itemId == null || !itemId.equals(_r.itemId))
                {
                    return false;
                }
            }
            if(roleId != _r.roleId)
            {
                if(roleId == null || _r.roleId == null || !roleId.equals(_r.roleId))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(lastCount != _r.lastCount)
            {
                return false;
            }
            if(isFriend != _r.isFriend)
            {
                return false;
            }
            if(state != _r.state)
            {
                return false;
            }
            if(toped != _r.toped)
            {
                return false;
            }
            if(topCost != _r.topCost)
            {
                return false;
            }
            if(topLastCount != _r.topLastCount)
            {
                return false;
            }
            if(shareTime != _r.shareTime)
            {
                if(shareTime == null || _r.shareTime == null || !shareTime.equals(_r.shareTime))
                {
                    return false;
                }
            }
            if(receiveShareScore != _r.receiveShareScore)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::MakeWineShareRecord");
        __h = IceInternal.HashUtil.hashAdd(__h, recordId);
        __h = IceInternal.HashUtil.hashAdd(__h, itemId);
        __h = IceInternal.HashUtil.hashAdd(__h, roleId);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, lastCount);
        __h = IceInternal.HashUtil.hashAdd(__h, isFriend);
        __h = IceInternal.HashUtil.hashAdd(__h, state);
        __h = IceInternal.HashUtil.hashAdd(__h, toped);
        __h = IceInternal.HashUtil.hashAdd(__h, topCost);
        __h = IceInternal.HashUtil.hashAdd(__h, topLastCount);
        __h = IceInternal.HashUtil.hashAdd(__h, shareTime);
        __h = IceInternal.HashUtil.hashAdd(__h, receiveShareScore);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(recordId);
        __os.writeString(itemId);
        __os.writeString(roleId);
        __os.writeString(name);
        __os.writeInt(lastCount);
        __os.writeInt(isFriend);
        __os.writeInt(state);
        __os.writeInt(toped);
        __os.writeInt(topCost);
        __os.writeInt(topLastCount);
        __os.writeString(shareTime);
        __os.writeInt(receiveShareScore);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        recordId = __is.readString();
        itemId = __is.readString();
        roleId = __is.readString();
        name = __is.readString();
        lastCount = __is.readInt();
        isFriend = __is.readInt();
        state = __is.readInt();
        toped = __is.readInt();
        topCost = __is.readInt();
        topLastCount = __is.readInt();
        shareTime = __is.readString();
        receiveShareScore = __is.readInt();
    }

    public static final long serialVersionUID = -252088119L;
}
