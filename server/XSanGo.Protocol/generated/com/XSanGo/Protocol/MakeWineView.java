// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `MakeWine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class MakeWineView implements java.lang.Cloneable, java.io.Serializable
{
    public OneWineItem[] oneWineItems;

    public long activityLastTime;

    public IntString receiveMaterial;

    public long receiveTime;

    public int receiveMaterialState;

    public int myScore;

    public IntString scoreAward;

    public int receiveScoreLimit;

    public int receiveScoreState;

    public MakeWineView()
    {
    }

    public MakeWineView(OneWineItem[] oneWineItems, long activityLastTime, IntString receiveMaterial, long receiveTime, int receiveMaterialState, int myScore, IntString scoreAward, int receiveScoreLimit, int receiveScoreState)
    {
        this.oneWineItems = oneWineItems;
        this.activityLastTime = activityLastTime;
        this.receiveMaterial = receiveMaterial;
        this.receiveTime = receiveTime;
        this.receiveMaterialState = receiveMaterialState;
        this.myScore = myScore;
        this.scoreAward = scoreAward;
        this.receiveScoreLimit = receiveScoreLimit;
        this.receiveScoreState = receiveScoreState;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MakeWineView _r = null;
        if(rhs instanceof MakeWineView)
        {
            _r = (MakeWineView)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(oneWineItems, _r.oneWineItems))
            {
                return false;
            }
            if(activityLastTime != _r.activityLastTime)
            {
                return false;
            }
            if(receiveMaterial != _r.receiveMaterial)
            {
                if(receiveMaterial == null || _r.receiveMaterial == null || !receiveMaterial.equals(_r.receiveMaterial))
                {
                    return false;
                }
            }
            if(receiveTime != _r.receiveTime)
            {
                return false;
            }
            if(receiveMaterialState != _r.receiveMaterialState)
            {
                return false;
            }
            if(myScore != _r.myScore)
            {
                return false;
            }
            if(scoreAward != _r.scoreAward)
            {
                if(scoreAward == null || _r.scoreAward == null || !scoreAward.equals(_r.scoreAward))
                {
                    return false;
                }
            }
            if(receiveScoreLimit != _r.receiveScoreLimit)
            {
                return false;
            }
            if(receiveScoreState != _r.receiveScoreState)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::MakeWineView");
        __h = IceInternal.HashUtil.hashAdd(__h, oneWineItems);
        __h = IceInternal.HashUtil.hashAdd(__h, activityLastTime);
        __h = IceInternal.HashUtil.hashAdd(__h, receiveMaterial);
        __h = IceInternal.HashUtil.hashAdd(__h, receiveTime);
        __h = IceInternal.HashUtil.hashAdd(__h, receiveMaterialState);
        __h = IceInternal.HashUtil.hashAdd(__h, myScore);
        __h = IceInternal.HashUtil.hashAdd(__h, scoreAward);
        __h = IceInternal.HashUtil.hashAdd(__h, receiveScoreLimit);
        __h = IceInternal.HashUtil.hashAdd(__h, receiveScoreState);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        OneWineItemSeqHelper.write(__os, oneWineItems);
        __os.writeLong(activityLastTime);
        receiveMaterial.__write(__os);
        __os.writeLong(receiveTime);
        __os.writeInt(receiveMaterialState);
        __os.writeInt(myScore);
        scoreAward.__write(__os);
        __os.writeInt(receiveScoreLimit);
        __os.writeInt(receiveScoreState);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        oneWineItems = OneWineItemSeqHelper.read(__is);
        activityLastTime = __is.readLong();
        receiveMaterial = new IntString();
        receiveMaterial.__read(__is);
        receiveTime = __is.readLong();
        receiveMaterialState = __is.readInt();
        myScore = __is.readInt();
        scoreAward = new IntString();
        scoreAward.__read(__is);
        receiveScoreLimit = __is.readInt();
        receiveScoreState = __is.readInt();
    }

    public static final long serialVersionUID = 2066930806L;
}
