// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Market.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class MarketPrxHelper extends Ice.ObjectPrxHelperBase implements MarketPrx
{
    private static final String __OneInHundred_name = "OneInHundred";

    public String OneInHundred()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return OneInHundred(null, false);
    }

    public String OneInHundred(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return OneInHundred(__ctx, true);
    }

    private String OneInHundred(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "OneInHundred", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("OneInHundred");
                    __delBase = __getDelegate(false);
                    _MarketDel __del = (_MarketDel)__delBase;
                    return __del.OneInHundred(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_OneInHundred()
    {
        return begin_OneInHundred(null, false, null);
    }

    public Ice.AsyncResult begin_OneInHundred(java.util.Map<String, String> __ctx)
    {
        return begin_OneInHundred(__ctx, true, null);
    }

    public Ice.AsyncResult begin_OneInHundred(Ice.Callback __cb)
    {
        return begin_OneInHundred(null, false, __cb);
    }

    public Ice.AsyncResult begin_OneInHundred(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_OneInHundred(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_OneInHundred(Callback_Market_OneInHundred __cb)
    {
        return begin_OneInHundred(null, false, __cb);
    }

    public Ice.AsyncResult begin_OneInHundred(java.util.Map<String, String> __ctx, Callback_Market_OneInHundred __cb)
    {
        return begin_OneInHundred(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_OneInHundred(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__OneInHundred_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __OneInHundred_name, __cb);
        try
        {
            __result.__prepare(__OneInHundred_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_OneInHundred(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __OneInHundred_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean OneInHundred_async(AMI_Market_OneInHundred __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__OneInHundred_name);
            __r = begin_OneInHundred(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __OneInHundred_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean OneInHundred_async(AMI_Market_OneInHundred __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__OneInHundred_name);
            __r = begin_OneInHundred(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __OneInHundred_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __OneInHundred10_name = "OneInHundred10";

    public String OneInHundred10()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return OneInHundred10(null, false);
    }

    public String OneInHundred10(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return OneInHundred10(__ctx, true);
    }

    private String OneInHundred10(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "OneInHundred10", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("OneInHundred10");
                    __delBase = __getDelegate(false);
                    _MarketDel __del = (_MarketDel)__delBase;
                    return __del.OneInHundred10(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_OneInHundred10()
    {
        return begin_OneInHundred10(null, false, null);
    }

    public Ice.AsyncResult begin_OneInHundred10(java.util.Map<String, String> __ctx)
    {
        return begin_OneInHundred10(__ctx, true, null);
    }

    public Ice.AsyncResult begin_OneInHundred10(Ice.Callback __cb)
    {
        return begin_OneInHundred10(null, false, __cb);
    }

    public Ice.AsyncResult begin_OneInHundred10(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_OneInHundred10(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_OneInHundred10(Callback_Market_OneInHundred10 __cb)
    {
        return begin_OneInHundred10(null, false, __cb);
    }

    public Ice.AsyncResult begin_OneInHundred10(java.util.Map<String, String> __ctx, Callback_Market_OneInHundred10 __cb)
    {
        return begin_OneInHundred10(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_OneInHundred10(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__OneInHundred10_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __OneInHundred10_name, __cb);
        try
        {
            __result.__prepare(__OneInHundred10_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_OneInHundred10(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __OneInHundred10_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean OneInHundred10_async(AMI_Market_OneInHundred10 __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__OneInHundred10_name);
            __r = begin_OneInHundred10(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __OneInHundred10_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean OneInHundred10_async(AMI_Market_OneInHundred10 __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__OneInHundred10_name);
            __r = begin_OneInHundred10(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __OneInHundred10_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __OneInTen_name = "OneInTen";

    public String OneInTen()
        throws NotEnoughMoneyException,
               NoteException
    {
        return OneInTen(null, false);
    }

    public String OneInTen(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return OneInTen(__ctx, true);
    }

    private String OneInTen(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "OneInTen", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("OneInTen");
                    __delBase = __getDelegate(false);
                    _MarketDel __del = (_MarketDel)__delBase;
                    return __del.OneInTen(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_OneInTen()
    {
        return begin_OneInTen(null, false, null);
    }

    public Ice.AsyncResult begin_OneInTen(java.util.Map<String, String> __ctx)
    {
        return begin_OneInTen(__ctx, true, null);
    }

    public Ice.AsyncResult begin_OneInTen(Ice.Callback __cb)
    {
        return begin_OneInTen(null, false, __cb);
    }

    public Ice.AsyncResult begin_OneInTen(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_OneInTen(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_OneInTen(Callback_Market_OneInTen __cb)
    {
        return begin_OneInTen(null, false, __cb);
    }

    public Ice.AsyncResult begin_OneInTen(java.util.Map<String, String> __ctx, Callback_Market_OneInTen __cb)
    {
        return begin_OneInTen(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_OneInTen(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__OneInTen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __OneInTen_name, __cb);
        try
        {
            __result.__prepare(__OneInTen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_OneInTen(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __OneInTen_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean OneInTen_async(AMI_Market_OneInTen __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__OneInTen_name);
            __r = begin_OneInTen(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __OneInTen_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean OneInTen_async(AMI_Market_OneInTen __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__OneInTen_name);
            __r = begin_OneInTen(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __OneInTen_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __OneInTen10_name = "OneInTen10";

    public String OneInTen10()
        throws NotEnoughMoneyException,
               NoteException
    {
        return OneInTen10(null, false);
    }

    public String OneInTen10(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return OneInTen10(__ctx, true);
    }

    private String OneInTen10(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "OneInTen10", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("OneInTen10");
                    __delBase = __getDelegate(false);
                    _MarketDel __del = (_MarketDel)__delBase;
                    return __del.OneInTen10(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_OneInTen10()
    {
        return begin_OneInTen10(null, false, null);
    }

    public Ice.AsyncResult begin_OneInTen10(java.util.Map<String, String> __ctx)
    {
        return begin_OneInTen10(__ctx, true, null);
    }

    public Ice.AsyncResult begin_OneInTen10(Ice.Callback __cb)
    {
        return begin_OneInTen10(null, false, __cb);
    }

    public Ice.AsyncResult begin_OneInTen10(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_OneInTen10(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_OneInTen10(Callback_Market_OneInTen10 __cb)
    {
        return begin_OneInTen10(null, false, __cb);
    }

    public Ice.AsyncResult begin_OneInTen10(java.util.Map<String, String> __ctx, Callback_Market_OneInTen10 __cb)
    {
        return begin_OneInTen10(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_OneInTen10(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__OneInTen10_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __OneInTen10_name, __cb);
        try
        {
            __result.__prepare(__OneInTen10_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_OneInTen10(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __OneInTen10_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean OneInTen10_async(AMI_Market_OneInTen10 __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__OneInTen10_name);
            __r = begin_OneInTen10(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __OneInTen10_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean OneInTen10_async(AMI_Market_OneInTen10 __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__OneInTen10_name);
            __r = begin_OneInTen10(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __OneInTen10_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyLimitHero_name = "buyLimitHero";

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     **/
    public String buyLimitHero(int type)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return buyLimitHero(type, null, false);
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public String buyLimitHero(int type, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return buyLimitHero(type, __ctx, true);
    }

    private String buyLimitHero(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyLimitHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyLimitHero");
                    __delBase = __getDelegate(false);
                    _MarketDel __del = (_MarketDel)__delBase;
                    return __del.buyLimitHero(type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyLimitHero(int type)
    {
        return begin_buyLimitHero(type, null, false, null);
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyLimitHero(int type, java.util.Map<String, String> __ctx)
    {
        return begin_buyLimitHero(type, __ctx, true, null);
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyLimitHero(int type, Ice.Callback __cb)
    {
        return begin_buyLimitHero(type, null, false, __cb);
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyLimitHero(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyLimitHero(type, __ctx, true, __cb);
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyLimitHero(int type, Callback_Market_buyLimitHero __cb)
    {
        return begin_buyLimitHero(type, null, false, __cb);
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyLimitHero(int type, java.util.Map<String, String> __ctx, Callback_Market_buyLimitHero __cb)
    {
        return begin_buyLimitHero(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyLimitHero(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyLimitHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyLimitHero_name, __cb);
        try
        {
            __result.__prepare(__buyLimitHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_buyLimitHero(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyLimitHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __cb The callback object for the operation.
     **/
    public boolean buyLimitHero_async(AMI_Market_buyLimitHero __cb, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyLimitHero_name);
            __r = begin_buyLimitHero(type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyLimitHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 限时武将，返回BuyHeroResultSeq的lua。type-0元宝1物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyLimitHero_async(AMI_Market_buyLimitHero __cb, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyLimitHero_name);
            __r = begin_buyLimitHero(type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyLimitHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getMarketView_name = "getMarketView";

    public String getMarketView()
    {
        return getMarketView(null, false);
    }

    public String getMarketView(java.util.Map<String, String> __ctx)
    {
        return getMarketView(__ctx, true);
    }

    private String getMarketView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMarketView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMarketView");
                    __delBase = __getDelegate(false);
                    _MarketDel __del = (_MarketDel)__delBase;
                    return __del.getMarketView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMarketView()
    {
        return begin_getMarketView(null, false, null);
    }

    public Ice.AsyncResult begin_getMarketView(java.util.Map<String, String> __ctx)
    {
        return begin_getMarketView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getMarketView(Ice.Callback __cb)
    {
        return begin_getMarketView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMarketView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMarketView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMarketView(Callback_Market_getMarketView __cb)
    {
        return begin_getMarketView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMarketView(java.util.Map<String, String> __ctx, Callback_Market_getMarketView __cb)
    {
        return begin_getMarketView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMarketView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMarketView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMarketView_name, __cb);
        try
        {
            __result.__prepare(__getMarketView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getMarketView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMarketView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getMarketView_async(AMI_Market_getMarketView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMarketView_name);
            __r = begin_getMarketView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMarketView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getMarketView_async(AMI_Market_getMarketView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getMarketView_name);
            __r = begin_getMarketView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getMarketView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static MarketPrx checkedCast(Ice.ObjectPrx __obj)
    {
        MarketPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MarketPrx)
            {
                __d = (MarketPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MarketPrxHelper __h = new MarketPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MarketPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MarketPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MarketPrx)
            {
                __d = (MarketPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MarketPrxHelper __h = new MarketPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MarketPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MarketPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MarketPrxHelper __h = new MarketPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MarketPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MarketPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MarketPrxHelper __h = new MarketPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MarketPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        MarketPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MarketPrx)
            {
                __d = (MarketPrx)__obj;
            }
            else
            {
                MarketPrxHelper __h = new MarketPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MarketPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MarketPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MarketPrxHelper __h = new MarketPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Market"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _MarketDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _MarketDelD();
    }

    public static void __write(IceInternal.BasicStream __os, MarketPrx v)
    {
        __os.writeProxy(v);
    }

    public static MarketPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MarketPrxHelper result = new MarketPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
