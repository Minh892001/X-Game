// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Activity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class OpenServerActivityNodeView implements java.lang.Cloneable, java.io.Serializable
{
    public int activeId;

    public int nodeId;

    public IntString[] reward;

    public int status;

    public String describe;

    public int conditionNum;

    public String condition1;

    public String condition2;

    public OpenServerActivityNodeView()
    {
    }

    public OpenServerActivityNodeView(int activeId, int nodeId, IntString[] reward, int status, String describe, int conditionNum, String condition1, String condition2)
    {
        this.activeId = activeId;
        this.nodeId = nodeId;
        this.reward = reward;
        this.status = status;
        this.describe = describe;
        this.conditionNum = conditionNum;
        this.condition1 = condition1;
        this.condition2 = condition2;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        OpenServerActivityNodeView _r = null;
        if(rhs instanceof OpenServerActivityNodeView)
        {
            _r = (OpenServerActivityNodeView)rhs;
        }

        if(_r != null)
        {
            if(activeId != _r.activeId)
            {
                return false;
            }
            if(nodeId != _r.nodeId)
            {
                return false;
            }
            if(!java.util.Arrays.equals(reward, _r.reward))
            {
                return false;
            }
            if(status != _r.status)
            {
                return false;
            }
            if(describe != _r.describe)
            {
                if(describe == null || _r.describe == null || !describe.equals(_r.describe))
                {
                    return false;
                }
            }
            if(conditionNum != _r.conditionNum)
            {
                return false;
            }
            if(condition1 != _r.condition1)
            {
                if(condition1 == null || _r.condition1 == null || !condition1.equals(_r.condition1))
                {
                    return false;
                }
            }
            if(condition2 != _r.condition2)
            {
                if(condition2 == null || _r.condition2 == null || !condition2.equals(_r.condition2))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::OpenServerActivityNodeView");
        __h = IceInternal.HashUtil.hashAdd(__h, activeId);
        __h = IceInternal.HashUtil.hashAdd(__h, nodeId);
        __h = IceInternal.HashUtil.hashAdd(__h, reward);
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        __h = IceInternal.HashUtil.hashAdd(__h, describe);
        __h = IceInternal.HashUtil.hashAdd(__h, conditionNum);
        __h = IceInternal.HashUtil.hashAdd(__h, condition1);
        __h = IceInternal.HashUtil.hashAdd(__h, condition2);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(activeId);
        __os.writeInt(nodeId);
        IntStringSeqHelper.write(__os, reward);
        __os.writeInt(status);
        __os.writeString(describe);
        __os.writeInt(conditionNum);
        __os.writeString(condition1);
        __os.writeString(condition2);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        activeId = __is.readInt();
        nodeId = __is.readInt();
        reward = IntStringSeqHelper.read(__is);
        status = __is.readInt();
        describe = __is.readString();
        conditionNum = __is.readInt();
        condition1 = __is.readString();
        condition2 = __is.readString();
    }

    public static final long serialVersionUID = -2104590779L;
}
