// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Sign.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class OpenSignView implements java.lang.Cloneable, java.io.Serializable
{
    public SignItem[] signItems;

    public TotalSignItem[] allSignPackViews;

    public LotteryView theLotteryView;

    public byte currentMonth;

    public int currentDate;

    public byte signCount;

    public boolean canResign;

    public boolean hasMonthCard;

    public OpenSignView()
    {
    }

    public OpenSignView(SignItem[] signItems, TotalSignItem[] allSignPackViews, LotteryView theLotteryView, byte currentMonth, int currentDate, byte signCount, boolean canResign, boolean hasMonthCard)
    {
        this.signItems = signItems;
        this.allSignPackViews = allSignPackViews;
        this.theLotteryView = theLotteryView;
        this.currentMonth = currentMonth;
        this.currentDate = currentDate;
        this.signCount = signCount;
        this.canResign = canResign;
        this.hasMonthCard = hasMonthCard;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        OpenSignView _r = null;
        if(rhs instanceof OpenSignView)
        {
            _r = (OpenSignView)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(signItems, _r.signItems))
            {
                return false;
            }
            if(!java.util.Arrays.equals(allSignPackViews, _r.allSignPackViews))
            {
                return false;
            }
            if(theLotteryView != _r.theLotteryView)
            {
                if(theLotteryView == null || _r.theLotteryView == null || !theLotteryView.equals(_r.theLotteryView))
                {
                    return false;
                }
            }
            if(currentMonth != _r.currentMonth)
            {
                return false;
            }
            if(currentDate != _r.currentDate)
            {
                return false;
            }
            if(signCount != _r.signCount)
            {
                return false;
            }
            if(canResign != _r.canResign)
            {
                return false;
            }
            if(hasMonthCard != _r.hasMonthCard)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::OpenSignView");
        __h = IceInternal.HashUtil.hashAdd(__h, signItems);
        __h = IceInternal.HashUtil.hashAdd(__h, allSignPackViews);
        __h = IceInternal.HashUtil.hashAdd(__h, theLotteryView);
        __h = IceInternal.HashUtil.hashAdd(__h, currentMonth);
        __h = IceInternal.HashUtil.hashAdd(__h, currentDate);
        __h = IceInternal.HashUtil.hashAdd(__h, signCount);
        __h = IceInternal.HashUtil.hashAdd(__h, canResign);
        __h = IceInternal.HashUtil.hashAdd(__h, hasMonthCard);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        SignItemViewSequenceHelper.write(__os, signItems);
        TotalSignPackViewsHelper.write(__os, allSignPackViews);
        theLotteryView.__write(__os);
        __os.writeByte(currentMonth);
        __os.writeInt(currentDate);
        __os.writeByte(signCount);
        __os.writeBool(canResign);
        __os.writeBool(hasMonthCard);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        signItems = SignItemViewSequenceHelper.read(__is);
        allSignPackViews = TotalSignPackViewsHelper.read(__is);
        theLotteryView = new LotteryView();
        theLotteryView.__read(__is);
        currentMonth = __is.readByte();
        currentDate = __is.readInt();
        signCount = __is.readByte();
        canResign = __is.readBool();
        hasMonthCard = __is.readBool();
    }

    public static final long serialVersionUID = -32170527L;
}
