// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ArenaRank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class OwnRank implements java.lang.Cloneable, java.io.Serializable
{
    public int rank;

    public int sneerId;

    public String SneerStr;

    public String guardId;

    public float attack;

    public float guard;

    public int challenge;

    public int challengeBuy;

    public int fightCdTime;

    public int challengeMoney;

    public int clearCdNum;

    public RivalRank[] rivalRankList;

    public OwnRank()
    {
    }

    public OwnRank(int rank, int sneerId, String SneerStr, String guardId, float attack, float guard, int challenge, int challengeBuy, int fightCdTime, int challengeMoney, int clearCdNum, RivalRank[] rivalRankList)
    {
        this.rank = rank;
        this.sneerId = sneerId;
        this.SneerStr = SneerStr;
        this.guardId = guardId;
        this.attack = attack;
        this.guard = guard;
        this.challenge = challenge;
        this.challengeBuy = challengeBuy;
        this.fightCdTime = fightCdTime;
        this.challengeMoney = challengeMoney;
        this.clearCdNum = clearCdNum;
        this.rivalRankList = rivalRankList;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        OwnRank _r = null;
        if(rhs instanceof OwnRank)
        {
            _r = (OwnRank)rhs;
        }

        if(_r != null)
        {
            if(rank != _r.rank)
            {
                return false;
            }
            if(sneerId != _r.sneerId)
            {
                return false;
            }
            if(SneerStr != _r.SneerStr)
            {
                if(SneerStr == null || _r.SneerStr == null || !SneerStr.equals(_r.SneerStr))
                {
                    return false;
                }
            }
            if(guardId != _r.guardId)
            {
                if(guardId == null || _r.guardId == null || !guardId.equals(_r.guardId))
                {
                    return false;
                }
            }
            if(attack != _r.attack)
            {
                return false;
            }
            if(guard != _r.guard)
            {
                return false;
            }
            if(challenge != _r.challenge)
            {
                return false;
            }
            if(challengeBuy != _r.challengeBuy)
            {
                return false;
            }
            if(fightCdTime != _r.fightCdTime)
            {
                return false;
            }
            if(challengeMoney != _r.challengeMoney)
            {
                return false;
            }
            if(clearCdNum != _r.clearCdNum)
            {
                return false;
            }
            if(!java.util.Arrays.equals(rivalRankList, _r.rivalRankList))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::OwnRank");
        __h = IceInternal.HashUtil.hashAdd(__h, rank);
        __h = IceInternal.HashUtil.hashAdd(__h, sneerId);
        __h = IceInternal.HashUtil.hashAdd(__h, SneerStr);
        __h = IceInternal.HashUtil.hashAdd(__h, guardId);
        __h = IceInternal.HashUtil.hashAdd(__h, attack);
        __h = IceInternal.HashUtil.hashAdd(__h, guard);
        __h = IceInternal.HashUtil.hashAdd(__h, challenge);
        __h = IceInternal.HashUtil.hashAdd(__h, challengeBuy);
        __h = IceInternal.HashUtil.hashAdd(__h, fightCdTime);
        __h = IceInternal.HashUtil.hashAdd(__h, challengeMoney);
        __h = IceInternal.HashUtil.hashAdd(__h, clearCdNum);
        __h = IceInternal.HashUtil.hashAdd(__h, rivalRankList);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(rank);
        __os.writeInt(sneerId);
        __os.writeString(SneerStr);
        __os.writeString(guardId);
        __os.writeFloat(attack);
        __os.writeFloat(guard);
        __os.writeInt(challenge);
        __os.writeInt(challengeBuy);
        __os.writeInt(fightCdTime);
        __os.writeInt(challengeMoney);
        __os.writeInt(clearCdNum);
        RivalRankSeqHelper.write(__os, rivalRankList);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        rank = __is.readInt();
        sneerId = __is.readInt();
        SneerStr = __is.readString();
        guardId = __is.readString();
        attack = __is.readFloat();
        guard = __is.readFloat();
        challenge = __is.readInt();
        challengeBuy = __is.readInt();
        fightCdTime = __is.readInt();
        challengeMoney = __is.readInt();
        clearCdNum = __is.readInt();
        rivalRankList = RivalRankSeqHelper.read(__is);
    }

    public static final long serialVersionUID = 1649103452L;
}
