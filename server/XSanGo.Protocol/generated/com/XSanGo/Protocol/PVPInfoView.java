// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Tournament.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class PVPInfoView implements java.lang.Cloneable, java.io.Serializable
{
    public int lastTime;

    public int buyFightCount;

    public int totalFightCount;

    public int lastFightCount;

    public int buyRefreshCount;

    public int totalRefreshCount;

    public int lastRefreshCount;

    public MyFormationView myFormation;

    public int myRank;

    public int myScore;

    public boolean canSetupFormation;

    public CrossRivalView[] opponentViews;

    public boolean qtFinished;

    public boolean isInKnockout;

    public boolean hasSignup;

    public int battleTimeCountdown;

    public PVPInfoView()
    {
    }

    public PVPInfoView(int lastTime, int buyFightCount, int totalFightCount, int lastFightCount, int buyRefreshCount, int totalRefreshCount, int lastRefreshCount, MyFormationView myFormation, int myRank, int myScore, boolean canSetupFormation, CrossRivalView[] opponentViews, boolean qtFinished, boolean isInKnockout, boolean hasSignup, int battleTimeCountdown)
    {
        this.lastTime = lastTime;
        this.buyFightCount = buyFightCount;
        this.totalFightCount = totalFightCount;
        this.lastFightCount = lastFightCount;
        this.buyRefreshCount = buyRefreshCount;
        this.totalRefreshCount = totalRefreshCount;
        this.lastRefreshCount = lastRefreshCount;
        this.myFormation = myFormation;
        this.myRank = myRank;
        this.myScore = myScore;
        this.canSetupFormation = canSetupFormation;
        this.opponentViews = opponentViews;
        this.qtFinished = qtFinished;
        this.isInKnockout = isInKnockout;
        this.hasSignup = hasSignup;
        this.battleTimeCountdown = battleTimeCountdown;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PVPInfoView _r = null;
        if(rhs instanceof PVPInfoView)
        {
            _r = (PVPInfoView)rhs;
        }

        if(_r != null)
        {
            if(lastTime != _r.lastTime)
            {
                return false;
            }
            if(buyFightCount != _r.buyFightCount)
            {
                return false;
            }
            if(totalFightCount != _r.totalFightCount)
            {
                return false;
            }
            if(lastFightCount != _r.lastFightCount)
            {
                return false;
            }
            if(buyRefreshCount != _r.buyRefreshCount)
            {
                return false;
            }
            if(totalRefreshCount != _r.totalRefreshCount)
            {
                return false;
            }
            if(lastRefreshCount != _r.lastRefreshCount)
            {
                return false;
            }
            if(myFormation != _r.myFormation)
            {
                if(myFormation == null || _r.myFormation == null || !myFormation.equals(_r.myFormation))
                {
                    return false;
                }
            }
            if(myRank != _r.myRank)
            {
                return false;
            }
            if(myScore != _r.myScore)
            {
                return false;
            }
            if(canSetupFormation != _r.canSetupFormation)
            {
                return false;
            }
            if(!java.util.Arrays.equals(opponentViews, _r.opponentViews))
            {
                return false;
            }
            if(qtFinished != _r.qtFinished)
            {
                return false;
            }
            if(isInKnockout != _r.isInKnockout)
            {
                return false;
            }
            if(hasSignup != _r.hasSignup)
            {
                return false;
            }
            if(battleTimeCountdown != _r.battleTimeCountdown)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::PVPInfoView");
        __h = IceInternal.HashUtil.hashAdd(__h, lastTime);
        __h = IceInternal.HashUtil.hashAdd(__h, buyFightCount);
        __h = IceInternal.HashUtil.hashAdd(__h, totalFightCount);
        __h = IceInternal.HashUtil.hashAdd(__h, lastFightCount);
        __h = IceInternal.HashUtil.hashAdd(__h, buyRefreshCount);
        __h = IceInternal.HashUtil.hashAdd(__h, totalRefreshCount);
        __h = IceInternal.HashUtil.hashAdd(__h, lastRefreshCount);
        __h = IceInternal.HashUtil.hashAdd(__h, myFormation);
        __h = IceInternal.HashUtil.hashAdd(__h, myRank);
        __h = IceInternal.HashUtil.hashAdd(__h, myScore);
        __h = IceInternal.HashUtil.hashAdd(__h, canSetupFormation);
        __h = IceInternal.HashUtil.hashAdd(__h, opponentViews);
        __h = IceInternal.HashUtil.hashAdd(__h, qtFinished);
        __h = IceInternal.HashUtil.hashAdd(__h, isInKnockout);
        __h = IceInternal.HashUtil.hashAdd(__h, hasSignup);
        __h = IceInternal.HashUtil.hashAdd(__h, battleTimeCountdown);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(lastTime);
        __os.writeInt(buyFightCount);
        __os.writeInt(totalFightCount);
        __os.writeInt(lastFightCount);
        __os.writeInt(buyRefreshCount);
        __os.writeInt(totalRefreshCount);
        __os.writeInt(lastRefreshCount);
        myFormation.__write(__os);
        __os.writeInt(myRank);
        __os.writeInt(myScore);
        __os.writeBool(canSetupFormation);
        CrossRivalViewSeqHelper.write(__os, opponentViews);
        __os.writeBool(qtFinished);
        __os.writeBool(isInKnockout);
        __os.writeBool(hasSignup);
        __os.writeInt(battleTimeCountdown);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        lastTime = __is.readInt();
        buyFightCount = __is.readInt();
        totalFightCount = __is.readInt();
        lastFightCount = __is.readInt();
        buyRefreshCount = __is.readInt();
        totalRefreshCount = __is.readInt();
        lastRefreshCount = __is.readInt();
        myFormation = new MyFormationView();
        myFormation.__read(__is);
        myRank = __is.readInt();
        myScore = __is.readInt();
        canSetupFormation = __is.readBool();
        opponentViews = CrossRivalViewSeqHelper.read(__is);
        qtFinished = __is.readBool();
        isInKnockout = __is.readBool();
        hasSignup = __is.readBool();
        battleTimeCountdown = __is.readInt();
    }

    public static final long serialVersionUID = 671267833L;
}
