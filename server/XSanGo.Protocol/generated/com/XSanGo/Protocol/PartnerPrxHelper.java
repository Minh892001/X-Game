// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `partner.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class PartnerPrxHelper extends Ice.ObjectPrxHelperBase implements PartnerPrx
{
    private static final String __clearAll_name = "clearAll";

    /**
     * 清空所有伙伴阵位
     **/
    public void clearAll()
        throws NoteException
    {
        clearAll(null, false);
    }

    /**
     * 清空所有伙伴阵位
     * @param __ctx The Context map to send with the invocation.
     **/
    public void clearAll(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        clearAll(__ctx, true);
    }

    private void clearAll(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearAll", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clearAll");
                    __delBase = __getDelegate(false);
                    _PartnerDel __del = (_PartnerDel)__delBase;
                    __del.clearAll(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 清空所有伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearAll()
    {
        return begin_clearAll(null, false, null);
    }

    /**
     * 清空所有伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearAll(java.util.Map<String, String> __ctx)
    {
        return begin_clearAll(__ctx, true, null);
    }

    /**
     * 清空所有伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearAll(Ice.Callback __cb)
    {
        return begin_clearAll(null, false, __cb);
    }

    /**
     * 清空所有伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearAll(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearAll(__ctx, true, __cb);
    }

    /**
     * 清空所有伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearAll(Callback_Partner_clearAll __cb)
    {
        return begin_clearAll(null, false, __cb);
    }

    /**
     * 清空所有伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearAll(java.util.Map<String, String> __ctx, Callback_Partner_clearAll __cb)
    {
        return begin_clearAll(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearAll(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearAll_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearAll_name, __cb);
        try
        {
            __result.__prepare(__clearAll_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_clearAll(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clearAll_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 清空所有伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public boolean clearAll_async(AMI_Partner_clearAll __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearAll_name);
            __r = begin_clearAll(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearAll_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 清空所有伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clearAll_async(AMI_Partner_clearAll __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearAll_name);
            __r = begin_clearAll(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearAll_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getLevelRequired_name = "getLevelRequired";

    /**
     * 获取伙伴开启等级条件
     **/
    public String getLevelRequired()
        throws NoteException
    {
        return getLevelRequired(null, false);
    }

    /**
     * 获取伙伴开启等级条件
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getLevelRequired(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getLevelRequired(__ctx, true);
    }

    private String getLevelRequired(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLevelRequired", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLevelRequired");
                    __delBase = __getDelegate(false);
                    _PartnerDel __del = (_PartnerDel)__delBase;
                    return __del.getLevelRequired(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取伙伴开启等级条件
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLevelRequired()
    {
        return begin_getLevelRequired(null, false, null);
    }

    /**
     * 获取伙伴开启等级条件
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLevelRequired(java.util.Map<String, String> __ctx)
    {
        return begin_getLevelRequired(__ctx, true, null);
    }

    /**
     * 获取伙伴开启等级条件
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLevelRequired(Ice.Callback __cb)
    {
        return begin_getLevelRequired(null, false, __cb);
    }

    /**
     * 获取伙伴开启等级条件
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLevelRequired(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLevelRequired(__ctx, true, __cb);
    }

    /**
     * 获取伙伴开启等级条件
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLevelRequired(Callback_Partner_getLevelRequired __cb)
    {
        return begin_getLevelRequired(null, false, __cb);
    }

    /**
     * 获取伙伴开启等级条件
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLevelRequired(java.util.Map<String, String> __ctx, Callback_Partner_getLevelRequired __cb)
    {
        return begin_getLevelRequired(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLevelRequired(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLevelRequired_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLevelRequired_name, __cb);
        try
        {
            __result.__prepare(__getLevelRequired_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getLevelRequired(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getLevelRequired_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取伙伴开启等级条件
     * @param __cb The callback object for the operation.
     **/
    public boolean getLevelRequired_async(AMI_Partner_getLevelRequired __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getLevelRequired_name);
            __r = begin_getLevelRequired(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getLevelRequired_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取伙伴开启等级条件
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getLevelRequired_async(AMI_Partner_getLevelRequired __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getLevelRequired_name);
            __r = begin_getLevelRequired(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getLevelRequired_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getPartnerViewList_name = "getPartnerViewList";

    /**
     * 获取伙伴列表
     **/
    public String getPartnerViewList()
        throws NoteException
    {
        return getPartnerViewList(null, false);
    }

    /**
     * 获取伙伴列表
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getPartnerViewList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getPartnerViewList(__ctx, true);
    }

    private String getPartnerViewList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPartnerViewList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPartnerViewList");
                    __delBase = __getDelegate(false);
                    _PartnerDel __del = (_PartnerDel)__delBase;
                    return __del.getPartnerViewList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取伙伴列表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPartnerViewList()
    {
        return begin_getPartnerViewList(null, false, null);
    }

    /**
     * 获取伙伴列表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPartnerViewList(java.util.Map<String, String> __ctx)
    {
        return begin_getPartnerViewList(__ctx, true, null);
    }

    /**
     * 获取伙伴列表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPartnerViewList(Ice.Callback __cb)
    {
        return begin_getPartnerViewList(null, false, __cb);
    }

    /**
     * 获取伙伴列表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPartnerViewList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPartnerViewList(__ctx, true, __cb);
    }

    /**
     * 获取伙伴列表
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPartnerViewList(Callback_Partner_getPartnerViewList __cb)
    {
        return begin_getPartnerViewList(null, false, __cb);
    }

    /**
     * 获取伙伴列表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPartnerViewList(java.util.Map<String, String> __ctx, Callback_Partner_getPartnerViewList __cb)
    {
        return begin_getPartnerViewList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPartnerViewList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPartnerViewList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPartnerViewList_name, __cb);
        try
        {
            __result.__prepare(__getPartnerViewList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getPartnerViewList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getPartnerViewList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取伙伴列表
     * @param __cb The callback object for the operation.
     **/
    public boolean getPartnerViewList_async(AMI_Partner_getPartnerViewList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPartnerViewList_name);
            __r = begin_getPartnerViewList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPartnerViewList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取伙伴列表
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getPartnerViewList_async(AMI_Partner_getPartnerViewList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getPartnerViewList_name);
            __r = begin_getPartnerViewList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getPartnerViewList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openPartnerShipPos_name = "openPartnerShipPos";

    /**
     * 开启伙伴阵位
     **/
    public String openPartnerShipPos(byte postion)
        throws NoteException
    {
        return openPartnerShipPos(postion, null, false);
    }

    /**
     * 开启伙伴阵位
     * @param __ctx The Context map to send with the invocation.
     **/
    public String openPartnerShipPos(byte postion, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openPartnerShipPos(postion, __ctx, true);
    }

    private String openPartnerShipPos(byte postion, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openPartnerShipPos", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openPartnerShipPos");
                    __delBase = __getDelegate(false);
                    _PartnerDel __del = (_PartnerDel)__delBase;
                    return __del.openPartnerShipPos(postion, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 开启伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openPartnerShipPos(byte postion)
    {
        return begin_openPartnerShipPos(postion, null, false, null);
    }

    /**
     * 开启伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openPartnerShipPos(byte postion, java.util.Map<String, String> __ctx)
    {
        return begin_openPartnerShipPos(postion, __ctx, true, null);
    }

    /**
     * 开启伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openPartnerShipPos(byte postion, Ice.Callback __cb)
    {
        return begin_openPartnerShipPos(postion, null, false, __cb);
    }

    /**
     * 开启伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openPartnerShipPos(byte postion, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openPartnerShipPos(postion, __ctx, true, __cb);
    }

    /**
     * 开启伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_openPartnerShipPos(byte postion, Callback_Partner_openPartnerShipPos __cb)
    {
        return begin_openPartnerShipPos(postion, null, false, __cb);
    }

    /**
     * 开启伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_openPartnerShipPos(byte postion, java.util.Map<String, String> __ctx, Callback_Partner_openPartnerShipPos __cb)
    {
        return begin_openPartnerShipPos(postion, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openPartnerShipPos(byte postion, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openPartnerShipPos_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openPartnerShipPos_name, __cb);
        try
        {
            __result.__prepare(__openPartnerShipPos_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(postion);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_openPartnerShipPos(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openPartnerShipPos_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 开启伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public boolean openPartnerShipPos_async(AMI_Partner_openPartnerShipPos __cb, byte postion)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openPartnerShipPos_name);
            __r = begin_openPartnerShipPos(postion, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openPartnerShipPos_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 开启伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean openPartnerShipPos_async(AMI_Partner_openPartnerShipPos __cb, byte postion, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openPartnerShipPos_name);
            __r = begin_openPartnerShipPos(postion, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openPartnerShipPos_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __resetPartnerPos_name = "resetPartnerPos";

    /**
     * 重置伙伴阵位
     **/
    public String resetPartnerPos(byte postion, int cost, int isLock)
        throws NoteException
    {
        return resetPartnerPos(postion, cost, isLock, null, false);
    }

    /**
     * 重置伙伴阵位
     * @param __ctx The Context map to send with the invocation.
     **/
    public String resetPartnerPos(byte postion, int cost, int isLock, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return resetPartnerPos(postion, cost, isLock, __ctx, true);
    }

    private String resetPartnerPos(byte postion, int cost, int isLock, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "resetPartnerPos", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("resetPartnerPos");
                    __delBase = __getDelegate(false);
                    _PartnerDel __del = (_PartnerDel)__delBase;
                    return __del.resetPartnerPos(postion, cost, isLock, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 重置伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetPartnerPos(byte postion, int cost, int isLock)
    {
        return begin_resetPartnerPos(postion, cost, isLock, null, false, null);
    }

    /**
     * 重置伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetPartnerPos(byte postion, int cost, int isLock, java.util.Map<String, String> __ctx)
    {
        return begin_resetPartnerPos(postion, cost, isLock, __ctx, true, null);
    }

    /**
     * 重置伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetPartnerPos(byte postion, int cost, int isLock, Ice.Callback __cb)
    {
        return begin_resetPartnerPos(postion, cost, isLock, null, false, __cb);
    }

    /**
     * 重置伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetPartnerPos(byte postion, int cost, int isLock, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_resetPartnerPos(postion, cost, isLock, __ctx, true, __cb);
    }

    /**
     * 重置伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_resetPartnerPos(byte postion, int cost, int isLock, Callback_Partner_resetPartnerPos __cb)
    {
        return begin_resetPartnerPos(postion, cost, isLock, null, false, __cb);
    }

    /**
     * 重置伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_resetPartnerPos(byte postion, int cost, int isLock, java.util.Map<String, String> __ctx, Callback_Partner_resetPartnerPos __cb)
    {
        return begin_resetPartnerPos(postion, cost, isLock, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_resetPartnerPos(byte postion, int cost, int isLock, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__resetPartnerPos_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __resetPartnerPos_name, __cb);
        try
        {
            __result.__prepare(__resetPartnerPos_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(postion);
            __os.writeInt(cost);
            __os.writeInt(isLock);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_resetPartnerPos(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __resetPartnerPos_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 重置伙伴阵位
     * @param __cb The callback object for the operation.
     **/
    public boolean resetPartnerPos_async(AMI_Partner_resetPartnerPos __cb, byte postion, int cost, int isLock)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetPartnerPos_name);
            __r = begin_resetPartnerPos(postion, cost, isLock, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetPartnerPos_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 重置伙伴阵位
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean resetPartnerPos_async(AMI_Partner_resetPartnerPos __cb, byte postion, int cost, int isLock, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetPartnerPos_name);
            __r = begin_resetPartnerPos(postion, cost, isLock, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetPartnerPos_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setHeroPosition_name = "setHeroPosition";

    /**
     * 设置伙伴武将
     **/
    public void setHeroPosition(byte postion, String heroId, String oldHeroId)
        throws NoteException
    {
        setHeroPosition(postion, heroId, oldHeroId, null, false);
    }

    /**
     * 设置伙伴武将
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setHeroPosition(byte postion, String heroId, String oldHeroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setHeroPosition(postion, heroId, oldHeroId, __ctx, true);
    }

    private void setHeroPosition(byte postion, String heroId, String oldHeroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setHeroPosition", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setHeroPosition");
                    __delBase = __getDelegate(false);
                    _PartnerDel __del = (_PartnerDel)__delBase;
                    __del.setHeroPosition(postion, heroId, oldHeroId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 设置伙伴武将
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setHeroPosition(byte postion, String heroId, String oldHeroId)
    {
        return begin_setHeroPosition(postion, heroId, oldHeroId, null, false, null);
    }

    /**
     * 设置伙伴武将
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setHeroPosition(byte postion, String heroId, String oldHeroId, java.util.Map<String, String> __ctx)
    {
        return begin_setHeroPosition(postion, heroId, oldHeroId, __ctx, true, null);
    }

    /**
     * 设置伙伴武将
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setHeroPosition(byte postion, String heroId, String oldHeroId, Ice.Callback __cb)
    {
        return begin_setHeroPosition(postion, heroId, oldHeroId, null, false, __cb);
    }

    /**
     * 设置伙伴武将
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setHeroPosition(byte postion, String heroId, String oldHeroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setHeroPosition(postion, heroId, oldHeroId, __ctx, true, __cb);
    }

    /**
     * 设置伙伴武将
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setHeroPosition(byte postion, String heroId, String oldHeroId, Callback_Partner_setHeroPosition __cb)
    {
        return begin_setHeroPosition(postion, heroId, oldHeroId, null, false, __cb);
    }

    /**
     * 设置伙伴武将
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setHeroPosition(byte postion, String heroId, String oldHeroId, java.util.Map<String, String> __ctx, Callback_Partner_setHeroPosition __cb)
    {
        return begin_setHeroPosition(postion, heroId, oldHeroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setHeroPosition(byte postion, String heroId, String oldHeroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setHeroPosition_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setHeroPosition_name, __cb);
        try
        {
            __result.__prepare(__setHeroPosition_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(postion);
            __os.writeString(heroId);
            __os.writeString(oldHeroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_setHeroPosition(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setHeroPosition_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 设置伙伴武将
     * @param __cb The callback object for the operation.
     **/
    public boolean setHeroPosition_async(AMI_Partner_setHeroPosition __cb, byte postion, String heroId, String oldHeroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeroPosition_name);
            __r = begin_setHeroPosition(postion, heroId, oldHeroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeroPosition_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 设置伙伴武将
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean setHeroPosition_async(AMI_Partner_setHeroPosition __cb, byte postion, String heroId, String oldHeroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeroPosition_name);
            __r = begin_setHeroPosition(postion, heroId, oldHeroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeroPosition_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static PartnerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        PartnerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PartnerPrx)
            {
                __d = (PartnerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    PartnerPrxHelper __h = new PartnerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PartnerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        PartnerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PartnerPrx)
            {
                __d = (PartnerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    PartnerPrxHelper __h = new PartnerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PartnerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PartnerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    PartnerPrxHelper __h = new PartnerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PartnerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        PartnerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    PartnerPrxHelper __h = new PartnerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PartnerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        PartnerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PartnerPrx)
            {
                __d = (PartnerPrx)__obj;
            }
            else
            {
                PartnerPrxHelper __h = new PartnerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PartnerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PartnerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PartnerPrxHelper __h = new PartnerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Partner"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _PartnerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _PartnerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, PartnerPrx v)
    {
        __os.writeProxy(v);
    }

    public static PartnerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PartnerPrxHelper result = new PartnerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
