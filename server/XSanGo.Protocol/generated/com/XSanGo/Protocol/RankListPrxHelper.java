// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RankList.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class RankListPrxHelper extends Ice.ObjectPrxHelperBase implements RankListPrx
{
    private static final String __selFactionDetail_name = "selFactionDetail";

    public String selFactionDetail(String id)
        throws NoteException
    {
        return selFactionDetail(id, null, false);
    }

    public String selFactionDetail(String id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selFactionDetail(id, __ctx, true);
    }

    private String selFactionDetail(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selFactionDetail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selFactionDetail");
                    __delBase = __getDelegate(false);
                    _RankListDel __del = (_RankListDel)__delBase;
                    return __del.selFactionDetail(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selFactionDetail(String id)
    {
        return begin_selFactionDetail(id, null, false, null);
    }

    public Ice.AsyncResult begin_selFactionDetail(String id, java.util.Map<String, String> __ctx)
    {
        return begin_selFactionDetail(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selFactionDetail(String id, Ice.Callback __cb)
    {
        return begin_selFactionDetail(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_selFactionDetail(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selFactionDetail(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selFactionDetail(String id, Callback_RankList_selFactionDetail __cb)
    {
        return begin_selFactionDetail(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_selFactionDetail(String id, java.util.Map<String, String> __ctx, Callback_RankList_selFactionDetail __cb)
    {
        return begin_selFactionDetail(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selFactionDetail(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selFactionDetail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selFactionDetail_name, __cb);
        try
        {
            __result.__prepare(__selFactionDetail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selFactionDetail(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selFactionDetail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selFactionDetail_async(AMI_RankList_selFactionDetail __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selFactionDetail_name);
            __r = begin_selFactionDetail(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selFactionDetail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selFactionDetail_async(AMI_RankList_selFactionDetail __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selFactionDetail_name);
            __r = begin_selFactionDetail(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selFactionDetail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selRankListAchieve_name = "selRankListAchieve";

    public String selRankListAchieve()
        throws NoteException
    {
        return selRankListAchieve(null, false);
    }

    public String selRankListAchieve(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selRankListAchieve(__ctx, true);
    }

    private String selRankListAchieve(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selRankListAchieve", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selRankListAchieve");
                    __delBase = __getDelegate(false);
                    _RankListDel __del = (_RankListDel)__delBase;
                    return __del.selRankListAchieve(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selRankListAchieve()
    {
        return begin_selRankListAchieve(null, false, null);
    }

    public Ice.AsyncResult begin_selRankListAchieve(java.util.Map<String, String> __ctx)
    {
        return begin_selRankListAchieve(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selRankListAchieve(Ice.Callback __cb)
    {
        return begin_selRankListAchieve(null, false, __cb);
    }

    public Ice.AsyncResult begin_selRankListAchieve(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selRankListAchieve(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selRankListAchieve(Callback_RankList_selRankListAchieve __cb)
    {
        return begin_selRankListAchieve(null, false, __cb);
    }

    public Ice.AsyncResult begin_selRankListAchieve(java.util.Map<String, String> __ctx, Callback_RankList_selRankListAchieve __cb)
    {
        return begin_selRankListAchieve(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selRankListAchieve(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selRankListAchieve_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selRankListAchieve_name, __cb);
        try
        {
            __result.__prepare(__selRankListAchieve_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selRankListAchieve(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selRankListAchieve_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selRankListAchieve_async(AMI_RankList_selRankListAchieve __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selRankListAchieve_name);
            __r = begin_selRankListAchieve(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selRankListAchieve_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selRankListAchieve_async(AMI_RankList_selRankListAchieve __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selRankListAchieve_name);
            __r = begin_selRankListAchieve(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selRankListAchieve_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selRankListCombat_name = "selRankListCombat";

    public String selRankListCombat()
        throws NoteException
    {
        return selRankListCombat(null, false);
    }

    public String selRankListCombat(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selRankListCombat(__ctx, true);
    }

    private String selRankListCombat(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selRankListCombat", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selRankListCombat");
                    __delBase = __getDelegate(false);
                    _RankListDel __del = (_RankListDel)__delBase;
                    return __del.selRankListCombat(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selRankListCombat()
    {
        return begin_selRankListCombat(null, false, null);
    }

    public Ice.AsyncResult begin_selRankListCombat(java.util.Map<String, String> __ctx)
    {
        return begin_selRankListCombat(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selRankListCombat(Ice.Callback __cb)
    {
        return begin_selRankListCombat(null, false, __cb);
    }

    public Ice.AsyncResult begin_selRankListCombat(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selRankListCombat(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selRankListCombat(Callback_RankList_selRankListCombat __cb)
    {
        return begin_selRankListCombat(null, false, __cb);
    }

    public Ice.AsyncResult begin_selRankListCombat(java.util.Map<String, String> __ctx, Callback_RankList_selRankListCombat __cb)
    {
        return begin_selRankListCombat(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selRankListCombat(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selRankListCombat_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selRankListCombat_name, __cb);
        try
        {
            __result.__prepare(__selRankListCombat_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selRankListCombat(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selRankListCombat_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selRankListCombat_async(AMI_RankList_selRankListCombat __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selRankListCombat_name);
            __r = begin_selRankListCombat(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selRankListCombat_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selRankListCombat_async(AMI_RankList_selRankListCombat __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selRankListCombat_name);
            __r = begin_selRankListCombat(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selRankListCombat_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selRankListFaction_name = "selRankListFaction";

    public String selRankListFaction()
        throws NoteException
    {
        return selRankListFaction(null, false);
    }

    public String selRankListFaction(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selRankListFaction(__ctx, true);
    }

    private String selRankListFaction(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selRankListFaction", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selRankListFaction");
                    __delBase = __getDelegate(false);
                    _RankListDel __del = (_RankListDel)__delBase;
                    return __del.selRankListFaction(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selRankListFaction()
    {
        return begin_selRankListFaction(null, false, null);
    }

    public Ice.AsyncResult begin_selRankListFaction(java.util.Map<String, String> __ctx)
    {
        return begin_selRankListFaction(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selRankListFaction(Ice.Callback __cb)
    {
        return begin_selRankListFaction(null, false, __cb);
    }

    public Ice.AsyncResult begin_selRankListFaction(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selRankListFaction(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selRankListFaction(Callback_RankList_selRankListFaction __cb)
    {
        return begin_selRankListFaction(null, false, __cb);
    }

    public Ice.AsyncResult begin_selRankListFaction(java.util.Map<String, String> __ctx, Callback_RankList_selRankListFaction __cb)
    {
        return begin_selRankListFaction(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selRankListFaction(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selRankListFaction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selRankListFaction_name, __cb);
        try
        {
            __result.__prepare(__selRankListFaction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selRankListFaction(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selRankListFaction_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selRankListFaction_async(AMI_RankList_selRankListFaction __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selRankListFaction_name);
            __r = begin_selRankListFaction(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selRankListFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selRankListFaction_async(AMI_RankList_selRankListFaction __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selRankListFaction_name);
            __r = begin_selRankListFaction(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selRankListFaction_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selRoleDetail_name = "selRoleDetail";

    public String selRoleDetail(String roleId)
        throws NoteException
    {
        return selRoleDetail(roleId, null, false);
    }

    public String selRoleDetail(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selRoleDetail(roleId, __ctx, true);
    }

    private String selRoleDetail(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selRoleDetail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selRoleDetail");
                    __delBase = __getDelegate(false);
                    _RankListDel __del = (_RankListDel)__delBase;
                    return __del.selRoleDetail(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selRoleDetail(String roleId)
    {
        return begin_selRoleDetail(roleId, null, false, null);
    }

    public Ice.AsyncResult begin_selRoleDetail(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_selRoleDetail(roleId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selRoleDetail(String roleId, Ice.Callback __cb)
    {
        return begin_selRoleDetail(roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_selRoleDetail(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selRoleDetail(roleId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selRoleDetail(String roleId, Callback_RankList_selRoleDetail __cb)
    {
        return begin_selRoleDetail(roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_selRoleDetail(String roleId, java.util.Map<String, String> __ctx, Callback_RankList_selRoleDetail __cb)
    {
        return begin_selRoleDetail(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selRoleDetail(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selRoleDetail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selRoleDetail_name, __cb);
        try
        {
            __result.__prepare(__selRoleDetail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selRoleDetail(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selRoleDetail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selRoleDetail_async(AMI_RankList_selRoleDetail __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selRoleDetail_name);
            __r = begin_selRoleDetail(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selRoleDetail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selRoleDetail_async(AMI_RankList_selRoleDetail __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selRoleDetail_name);
            __r = begin_selRoleDetail(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selRoleDetail_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selrankListWorship_name = "selrankListWorship";

    public String selrankListWorship()
        throws NoteException
    {
        return selrankListWorship(null, false);
    }

    public String selrankListWorship(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selrankListWorship(__ctx, true);
    }

    private String selrankListWorship(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selrankListWorship", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selrankListWorship");
                    __delBase = __getDelegate(false);
                    _RankListDel __del = (_RankListDel)__delBase;
                    return __del.selrankListWorship(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selrankListWorship()
    {
        return begin_selrankListWorship(null, false, null);
    }

    public Ice.AsyncResult begin_selrankListWorship(java.util.Map<String, String> __ctx)
    {
        return begin_selrankListWorship(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selrankListWorship(Ice.Callback __cb)
    {
        return begin_selrankListWorship(null, false, __cb);
    }

    public Ice.AsyncResult begin_selrankListWorship(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selrankListWorship(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selrankListWorship(Callback_RankList_selrankListWorship __cb)
    {
        return begin_selrankListWorship(null, false, __cb);
    }

    public Ice.AsyncResult begin_selrankListWorship(java.util.Map<String, String> __ctx, Callback_RankList_selrankListWorship __cb)
    {
        return begin_selrankListWorship(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selrankListWorship(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selrankListWorship_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selrankListWorship_name, __cb);
        try
        {
            __result.__prepare(__selrankListWorship_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selrankListWorship(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selrankListWorship_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selrankListWorship_async(AMI_RankList_selrankListWorship __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selrankListWorship_name);
            __r = begin_selrankListWorship(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selrankListWorship_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selrankListWorship_async(AMI_RankList_selrankListWorship __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selrankListWorship_name);
            __r = begin_selrankListWorship(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selrankListWorship_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static RankListPrx checkedCast(Ice.ObjectPrx __obj)
    {
        RankListPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RankListPrx)
            {
                __d = (RankListPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    RankListPrxHelper __h = new RankListPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RankListPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        RankListPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RankListPrx)
            {
                __d = (RankListPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    RankListPrxHelper __h = new RankListPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RankListPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RankListPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    RankListPrxHelper __h = new RankListPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RankListPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        RankListPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    RankListPrxHelper __h = new RankListPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RankListPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        RankListPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RankListPrx)
            {
                __d = (RankListPrx)__obj;
            }
            else
            {
                RankListPrxHelper __h = new RankListPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static RankListPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RankListPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            RankListPrxHelper __h = new RankListPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::RankList"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _RankListDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _RankListDelD();
    }

    public static void __write(IceInternal.BasicStream __os, RankListPrx v)
    {
        __os.writeProxy(v);
    }

    public static RankListPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RankListPrxHelper result = new RankListPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
