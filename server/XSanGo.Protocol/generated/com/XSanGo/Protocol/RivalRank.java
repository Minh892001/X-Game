// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ArenaRank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class RivalRank implements java.lang.Cloneable, java.io.Serializable
{
    public String id;

    public String name;

    public String icon;

    public int level;

    public int vip;

    public int sex;

    public int rank;

    public int compositeCombat;

    public String groupName;

    public float attack;

    public float guard;

    public int sneerId;

    public String sneerStr;

    public String guardId;

    public String formationBuffID;

    public FormationSummaryView[] guardHeroArr;

    public FormationSummaryView[] supportHeroArr;

    public int serverId;

    public RivalRank()
    {
    }

    public RivalRank(String id, String name, String icon, int level, int vip, int sex, int rank, int compositeCombat, String groupName, float attack, float guard, int sneerId, String sneerStr, String guardId, String formationBuffID, FormationSummaryView[] guardHeroArr, FormationSummaryView[] supportHeroArr, int serverId)
    {
        this.id = id;
        this.name = name;
        this.icon = icon;
        this.level = level;
        this.vip = vip;
        this.sex = sex;
        this.rank = rank;
        this.compositeCombat = compositeCombat;
        this.groupName = groupName;
        this.attack = attack;
        this.guard = guard;
        this.sneerId = sneerId;
        this.sneerStr = sneerStr;
        this.guardId = guardId;
        this.formationBuffID = formationBuffID;
        this.guardHeroArr = guardHeroArr;
        this.supportHeroArr = supportHeroArr;
        this.serverId = serverId;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RivalRank _r = null;
        if(rhs instanceof RivalRank)
        {
            _r = (RivalRank)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(icon != _r.icon)
            {
                if(icon == null || _r.icon == null || !icon.equals(_r.icon))
                {
                    return false;
                }
            }
            if(level != _r.level)
            {
                return false;
            }
            if(vip != _r.vip)
            {
                return false;
            }
            if(sex != _r.sex)
            {
                return false;
            }
            if(rank != _r.rank)
            {
                return false;
            }
            if(compositeCombat != _r.compositeCombat)
            {
                return false;
            }
            if(groupName != _r.groupName)
            {
                if(groupName == null || _r.groupName == null || !groupName.equals(_r.groupName))
                {
                    return false;
                }
            }
            if(attack != _r.attack)
            {
                return false;
            }
            if(guard != _r.guard)
            {
                return false;
            }
            if(sneerId != _r.sneerId)
            {
                return false;
            }
            if(sneerStr != _r.sneerStr)
            {
                if(sneerStr == null || _r.sneerStr == null || !sneerStr.equals(_r.sneerStr))
                {
                    return false;
                }
            }
            if(guardId != _r.guardId)
            {
                if(guardId == null || _r.guardId == null || !guardId.equals(_r.guardId))
                {
                    return false;
                }
            }
            if(formationBuffID != _r.formationBuffID)
            {
                if(formationBuffID == null || _r.formationBuffID == null || !formationBuffID.equals(_r.formationBuffID))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(guardHeroArr, _r.guardHeroArr))
            {
                return false;
            }
            if(!java.util.Arrays.equals(supportHeroArr, _r.supportHeroArr))
            {
                return false;
            }
            if(serverId != _r.serverId)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::RivalRank");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, icon);
        __h = IceInternal.HashUtil.hashAdd(__h, level);
        __h = IceInternal.HashUtil.hashAdd(__h, vip);
        __h = IceInternal.HashUtil.hashAdd(__h, sex);
        __h = IceInternal.HashUtil.hashAdd(__h, rank);
        __h = IceInternal.HashUtil.hashAdd(__h, compositeCombat);
        __h = IceInternal.HashUtil.hashAdd(__h, groupName);
        __h = IceInternal.HashUtil.hashAdd(__h, attack);
        __h = IceInternal.HashUtil.hashAdd(__h, guard);
        __h = IceInternal.HashUtil.hashAdd(__h, sneerId);
        __h = IceInternal.HashUtil.hashAdd(__h, sneerStr);
        __h = IceInternal.HashUtil.hashAdd(__h, guardId);
        __h = IceInternal.HashUtil.hashAdd(__h, formationBuffID);
        __h = IceInternal.HashUtil.hashAdd(__h, guardHeroArr);
        __h = IceInternal.HashUtil.hashAdd(__h, supportHeroArr);
        __h = IceInternal.HashUtil.hashAdd(__h, serverId);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(id);
        __os.writeString(name);
        __os.writeString(icon);
        __os.writeInt(level);
        __os.writeInt(vip);
        __os.writeInt(sex);
        __os.writeInt(rank);
        __os.writeInt(compositeCombat);
        __os.writeString(groupName);
        __os.writeFloat(attack);
        __os.writeFloat(guard);
        __os.writeInt(sneerId);
        __os.writeString(sneerStr);
        __os.writeString(guardId);
        __os.writeString(formationBuffID);
        FormationSummaryViewSeqHelper.write(__os, guardHeroArr);
        FormationSummaryViewSeqHelper.write(__os, supportHeroArr);
        __os.writeInt(serverId);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readString();
        name = __is.readString();
        icon = __is.readString();
        level = __is.readInt();
        vip = __is.readInt();
        sex = __is.readInt();
        rank = __is.readInt();
        compositeCombat = __is.readInt();
        groupName = __is.readString();
        attack = __is.readFloat();
        guard = __is.readFloat();
        sneerId = __is.readInt();
        sneerStr = __is.readString();
        guardId = __is.readString();
        formationBuffID = __is.readString();
        guardHeroArr = FormationSummaryViewSeqHelper.read(__is);
        supportHeroArr = FormationSummaryViewSeqHelper.read(__is);
        serverId = __is.readInt();
    }

    public static final long serialVersionUID = 774033747L;
}
