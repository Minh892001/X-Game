// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class RivalView implements java.lang.Cloneable, java.io.Serializable
{
    public String id;

    public String name;

    public String headImage;

    public String factionName;

    public int level;

    public int vipLevel;

    public int power;

    public RivalView()
    {
    }

    public RivalView(String id, String name, String headImage, String factionName, int level, int vipLevel, int power)
    {
        this.id = id;
        this.name = name;
        this.headImage = headImage;
        this.factionName = factionName;
        this.level = level;
        this.vipLevel = vipLevel;
        this.power = power;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RivalView _r = null;
        if(rhs instanceof RivalView)
        {
            _r = (RivalView)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(headImage != _r.headImage)
            {
                if(headImage == null || _r.headImage == null || !headImage.equals(_r.headImage))
                {
                    return false;
                }
            }
            if(factionName != _r.factionName)
            {
                if(factionName == null || _r.factionName == null || !factionName.equals(_r.factionName))
                {
                    return false;
                }
            }
            if(level != _r.level)
            {
                return false;
            }
            if(vipLevel != _r.vipLevel)
            {
                return false;
            }
            if(power != _r.power)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::RivalView");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, headImage);
        __h = IceInternal.HashUtil.hashAdd(__h, factionName);
        __h = IceInternal.HashUtil.hashAdd(__h, level);
        __h = IceInternal.HashUtil.hashAdd(__h, vipLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, power);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(id);
        __os.writeString(name);
        __os.writeString(headImage);
        __os.writeString(factionName);
        __os.writeInt(level);
        __os.writeInt(vipLevel);
        __os.writeInt(power);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readString();
        name = __is.readString();
        headImage = __is.readString();
        factionName = __is.readString();
        level = __is.readInt();
        vipLevel = __is.readInt();
        power = __is.readInt();
    }

    public static final long serialVersionUID = 2112665808L;
}
