// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ItemChip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class RobResult implements java.lang.Cloneable, java.io.Serializable
{
    public ChipResult chipRs;

    public int fightStar;

    public int money;

    public int exp;

    public RobResult()
    {
    }

    public RobResult(ChipResult chipRs, int fightStar, int money, int exp)
    {
        this.chipRs = chipRs;
        this.fightStar = fightStar;
        this.money = money;
        this.exp = exp;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RobResult _r = null;
        if(rhs instanceof RobResult)
        {
            _r = (RobResult)rhs;
        }

        if(_r != null)
        {
            if(chipRs != _r.chipRs)
            {
                if(chipRs == null || _r.chipRs == null || !chipRs.equals(_r.chipRs))
                {
                    return false;
                }
            }
            if(fightStar != _r.fightStar)
            {
                return false;
            }
            if(money != _r.money)
            {
                return false;
            }
            if(exp != _r.exp)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::RobResult");
        __h = IceInternal.HashUtil.hashAdd(__h, chipRs);
        __h = IceInternal.HashUtil.hashAdd(__h, fightStar);
        __h = IceInternal.HashUtil.hashAdd(__h, money);
        __h = IceInternal.HashUtil.hashAdd(__h, exp);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        chipRs.__write(__os);
        __os.writeInt(fightStar);
        __os.writeInt(money);
        __os.writeInt(exp);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        chipRs = ChipResult.__read(__is);
        fightStar = __is.readInt();
        money = __is.readInt();
        exp = __is.readInt();
    }

    public static final long serialVersionUID = -766274872L;
}
