// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Role.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class RoleCallbackPrxHelper extends Ice.ObjectPrxHelperBase implements RoleCallbackPrx
{
    private static final String __factionCopyState_name = "factionCopyState";

    public void factionCopyState(String roleName, String icon, int vipLevel)
    {
        factionCopyState(roleName, icon, vipLevel, null, false);
    }

    public void factionCopyState(String roleName, String icon, int vipLevel, java.util.Map<String, String> __ctx)
    {
        factionCopyState(roleName, icon, vipLevel, __ctx, true);
    }

    private void factionCopyState(String roleName, String icon, int vipLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "factionCopyState", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.factionCopyState(roleName, icon, vipLevel, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_factionCopyState(String roleName, String icon, int vipLevel)
    {
        return begin_factionCopyState(roleName, icon, vipLevel, null, false, null);
    }

    public Ice.AsyncResult begin_factionCopyState(String roleName, String icon, int vipLevel, java.util.Map<String, String> __ctx)
    {
        return begin_factionCopyState(roleName, icon, vipLevel, __ctx, true, null);
    }

    public Ice.AsyncResult begin_factionCopyState(String roleName, String icon, int vipLevel, Ice.Callback __cb)
    {
        return begin_factionCopyState(roleName, icon, vipLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_factionCopyState(String roleName, String icon, int vipLevel, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factionCopyState(roleName, icon, vipLevel, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_factionCopyState(String roleName, String icon, int vipLevel, Callback_RoleCallback_factionCopyState __cb)
    {
        return begin_factionCopyState(roleName, icon, vipLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_factionCopyState(String roleName, String icon, int vipLevel, java.util.Map<String, String> __ctx, Callback_RoleCallback_factionCopyState __cb)
    {
        return begin_factionCopyState(roleName, icon, vipLevel, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_factionCopyState(String roleName, String icon, int vipLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __factionCopyState_name, __cb);
        try
        {
            __result.__prepare(__factionCopyState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleName);
            __os.writeString(icon);
            __os.writeInt(vipLevel);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_factionCopyState(Ice.AsyncResult __result)
    {
        __end(__result, __factionCopyState_name);
    }

    public boolean factionCopyState_async(AMI_RoleCallback_factionCopyState __cb, String roleName, String icon, int vipLevel)
    {
        Ice.AsyncResult __r = begin_factionCopyState(roleName, icon, vipLevel, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean factionCopyState_async(AMI_RoleCallback_factionCopyState __cb, String roleName, String icon, int vipLevel, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_factionCopyState(roleName, icon, vipLevel, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __heroChange_name = "heroChange";

    public void heroChange(HeroView view)
    {
        heroChange(view, null, false);
    }

    public void heroChange(HeroView view, java.util.Map<String, String> __ctx)
    {
        heroChange(view, __ctx, true);
    }

    private void heroChange(HeroView view, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "heroChange", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.heroChange(view, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_heroChange(HeroView view)
    {
        return begin_heroChange(view, null, false, null);
    }

    public Ice.AsyncResult begin_heroChange(HeroView view, java.util.Map<String, String> __ctx)
    {
        return begin_heroChange(view, __ctx, true, null);
    }

    public Ice.AsyncResult begin_heroChange(HeroView view, Ice.Callback __cb)
    {
        return begin_heroChange(view, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroChange(HeroView view, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_heroChange(view, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_heroChange(HeroView view, Callback_RoleCallback_heroChange __cb)
    {
        return begin_heroChange(view, null, false, __cb);
    }

    public Ice.AsyncResult begin_heroChange(HeroView view, java.util.Map<String, String> __ctx, Callback_RoleCallback_heroChange __cb)
    {
        return begin_heroChange(view, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_heroChange(HeroView view, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __heroChange_name, __cb);
        try
        {
            __result.__prepare(__heroChange_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            view.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_heroChange(Ice.AsyncResult __result)
    {
        __end(__result, __heroChange_name);
    }

    public boolean heroChange_async(AMI_RoleCallback_heroChange __cb, HeroView view)
    {
        Ice.AsyncResult __r = begin_heroChange(view, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean heroChange_async(AMI_RoleCallback_heroChange __cb, HeroView view, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_heroChange(view, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __itemChange_name = "itemChange";

    public void itemChange(ItemView view)
    {
        itemChange(view, null, false);
    }

    public void itemChange(ItemView view, java.util.Map<String, String> __ctx)
    {
        itemChange(view, __ctx, true);
    }

    private void itemChange(ItemView view, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "itemChange", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.itemChange(view, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_itemChange(ItemView view)
    {
        return begin_itemChange(view, null, false, null);
    }

    public Ice.AsyncResult begin_itemChange(ItemView view, java.util.Map<String, String> __ctx)
    {
        return begin_itemChange(view, __ctx, true, null);
    }

    public Ice.AsyncResult begin_itemChange(ItemView view, Ice.Callback __cb)
    {
        return begin_itemChange(view, null, false, __cb);
    }

    public Ice.AsyncResult begin_itemChange(ItemView view, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_itemChange(view, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_itemChange(ItemView view, Callback_RoleCallback_itemChange __cb)
    {
        return begin_itemChange(view, null, false, __cb);
    }

    public Ice.AsyncResult begin_itemChange(ItemView view, java.util.Map<String, String> __ctx, Callback_RoleCallback_itemChange __cb)
    {
        return begin_itemChange(view, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_itemChange(ItemView view, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __itemChange_name, __cb);
        try
        {
            __result.__prepare(__itemChange_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            view.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_itemChange(Ice.AsyncResult __result)
    {
        __end(__result, __itemChange_name);
    }

    public boolean itemChange_async(AMI_RoleCallback_itemChange __cb, ItemView view)
    {
        Ice.AsyncResult __r = begin_itemChange(view, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean itemChange_async(AMI_RoleCallback_itemChange __cb, ItemView view, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_itemChange(view, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __loginRankList_name = "loginRankList";

    public void loginRankList(LoadingRankList listShow)
    {
        loginRankList(listShow, null, false);
    }

    public void loginRankList(LoadingRankList listShow, java.util.Map<String, String> __ctx)
    {
        loginRankList(listShow, __ctx, true);
    }

    private void loginRankList(LoadingRankList listShow, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "loginRankList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.loginRankList(listShow, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_loginRankList(LoadingRankList listShow)
    {
        return begin_loginRankList(listShow, null, false, null);
    }

    public Ice.AsyncResult begin_loginRankList(LoadingRankList listShow, java.util.Map<String, String> __ctx)
    {
        return begin_loginRankList(listShow, __ctx, true, null);
    }

    public Ice.AsyncResult begin_loginRankList(LoadingRankList listShow, Ice.Callback __cb)
    {
        return begin_loginRankList(listShow, null, false, __cb);
    }

    public Ice.AsyncResult begin_loginRankList(LoadingRankList listShow, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_loginRankList(listShow, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_loginRankList(LoadingRankList listShow, Callback_RoleCallback_loginRankList __cb)
    {
        return begin_loginRankList(listShow, null, false, __cb);
    }

    public Ice.AsyncResult begin_loginRankList(LoadingRankList listShow, java.util.Map<String, String> __ctx, Callback_RoleCallback_loginRankList __cb)
    {
        return begin_loginRankList(listShow, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_loginRankList(LoadingRankList listShow, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __loginRankList_name, __cb);
        try
        {
            __result.__prepare(__loginRankList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            listShow.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_loginRankList(Ice.AsyncResult __result)
    {
        __end(__result, __loginRankList_name);
    }

    public boolean loginRankList_async(AMI_RoleCallback_loginRankList __cb, LoadingRankList listShow)
    {
        Ice.AsyncResult __r = begin_loginRankList(listShow, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean loginRankList_async(AMI_RoleCallback_loginRankList __cb, LoadingRankList listShow, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_loginRankList(listShow, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __pushMsgs_name = "pushMsgs";

    public void pushMsgs(String msgs)
    {
        pushMsgs(msgs, null, false);
    }

    public void pushMsgs(String msgs, java.util.Map<String, String> __ctx)
    {
        pushMsgs(msgs, __ctx, true);
    }

    private void pushMsgs(String msgs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "pushMsgs", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.pushMsgs(msgs, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_pushMsgs(String msgs)
    {
        return begin_pushMsgs(msgs, null, false, null);
    }

    public Ice.AsyncResult begin_pushMsgs(String msgs, java.util.Map<String, String> __ctx)
    {
        return begin_pushMsgs(msgs, __ctx, true, null);
    }

    public Ice.AsyncResult begin_pushMsgs(String msgs, Ice.Callback __cb)
    {
        return begin_pushMsgs(msgs, null, false, __cb);
    }

    public Ice.AsyncResult begin_pushMsgs(String msgs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_pushMsgs(msgs, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_pushMsgs(String msgs, Callback_RoleCallback_pushMsgs __cb)
    {
        return begin_pushMsgs(msgs, null, false, __cb);
    }

    public Ice.AsyncResult begin_pushMsgs(String msgs, java.util.Map<String, String> __ctx, Callback_RoleCallback_pushMsgs __cb)
    {
        return begin_pushMsgs(msgs, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_pushMsgs(String msgs, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __pushMsgs_name, __cb);
        try
        {
            __result.__prepare(__pushMsgs_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(msgs);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_pushMsgs(Ice.AsyncResult __result)
    {
        __end(__result, __pushMsgs_name);
    }

    public boolean pushMsgs_async(AMI_RoleCallback_pushMsgs __cb, String msgs)
    {
        Ice.AsyncResult __r = begin_pushMsgs(msgs, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean pushMsgs_async(AMI_RoleCallback_pushMsgs __cb, String msgs, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_pushMsgs(msgs, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __rolePropertyChange_name = "rolePropertyChange";

    public void rolePropertyChange(Property pro)
    {
        rolePropertyChange(pro, null, false);
    }

    public void rolePropertyChange(Property pro, java.util.Map<String, String> __ctx)
    {
        rolePropertyChange(pro, __ctx, true);
    }

    private void rolePropertyChange(Property pro, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "rolePropertyChange", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.rolePropertyChange(pro, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_rolePropertyChange(Property pro)
    {
        return begin_rolePropertyChange(pro, null, false, null);
    }

    public Ice.AsyncResult begin_rolePropertyChange(Property pro, java.util.Map<String, String> __ctx)
    {
        return begin_rolePropertyChange(pro, __ctx, true, null);
    }

    public Ice.AsyncResult begin_rolePropertyChange(Property pro, Ice.Callback __cb)
    {
        return begin_rolePropertyChange(pro, null, false, __cb);
    }

    public Ice.AsyncResult begin_rolePropertyChange(Property pro, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rolePropertyChange(pro, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_rolePropertyChange(Property pro, Callback_RoleCallback_rolePropertyChange __cb)
    {
        return begin_rolePropertyChange(pro, null, false, __cb);
    }

    public Ice.AsyncResult begin_rolePropertyChange(Property pro, java.util.Map<String, String> __ctx, Callback_RoleCallback_rolePropertyChange __cb)
    {
        return begin_rolePropertyChange(pro, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rolePropertyChange(Property pro, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rolePropertyChange_name, __cb);
        try
        {
            __result.__prepare(__rolePropertyChange_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            pro.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_rolePropertyChange(Ice.AsyncResult __result)
    {
        __end(__result, __rolePropertyChange_name);
    }

    public boolean rolePropertyChange_async(AMI_RoleCallback_rolePropertyChange __cb, Property pro)
    {
        Ice.AsyncResult __r = begin_rolePropertyChange(pro, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean rolePropertyChange_async(AMI_RoleCallback_rolePropertyChange __cb, Property pro, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_rolePropertyChange(pro, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __showAchieves_name = "showAchieves";

    public void showAchieves(int[] achieves)
    {
        showAchieves(achieves, null, false);
    }

    public void showAchieves(int[] achieves, java.util.Map<String, String> __ctx)
    {
        showAchieves(achieves, __ctx, true);
    }

    private void showAchieves(int[] achieves, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "showAchieves", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.showAchieves(achieves, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_showAchieves(int[] achieves)
    {
        return begin_showAchieves(achieves, null, false, null);
    }

    public Ice.AsyncResult begin_showAchieves(int[] achieves, java.util.Map<String, String> __ctx)
    {
        return begin_showAchieves(achieves, __ctx, true, null);
    }

    public Ice.AsyncResult begin_showAchieves(int[] achieves, Ice.Callback __cb)
    {
        return begin_showAchieves(achieves, null, false, __cb);
    }

    public Ice.AsyncResult begin_showAchieves(int[] achieves, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showAchieves(achieves, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_showAchieves(int[] achieves, Callback_RoleCallback_showAchieves __cb)
    {
        return begin_showAchieves(achieves, null, false, __cb);
    }

    public Ice.AsyncResult begin_showAchieves(int[] achieves, java.util.Map<String, String> __ctx, Callback_RoleCallback_showAchieves __cb)
    {
        return begin_showAchieves(achieves, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showAchieves(int[] achieves, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showAchieves_name, __cb);
        try
        {
            __result.__prepare(__showAchieves_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            IntSeqHelper.write(__os, achieves);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_showAchieves(Ice.AsyncResult __result)
    {
        __end(__result, __showAchieves_name);
    }

    public boolean showAchieves_async(AMI_RoleCallback_showAchieves __cb, int[] achieves)
    {
        Ice.AsyncResult __r = begin_showAchieves(achieves, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean showAchieves_async(AMI_RoleCallback_showAchieves __cb, int[] achieves, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_showAchieves(achieves, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __showRedPointOnMajorUI_name = "showRedPointOnMajorUI";

    public void showRedPointOnMajorUI(MajorUIRedPointNote[] points)
    {
        showRedPointOnMajorUI(points, null, false);
    }

    public void showRedPointOnMajorUI(MajorUIRedPointNote[] points, java.util.Map<String, String> __ctx)
    {
        showRedPointOnMajorUI(points, __ctx, true);
    }

    private void showRedPointOnMajorUI(MajorUIRedPointNote[] points, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "showRedPointOnMajorUI", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.showRedPointOnMajorUI(points, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_showRedPointOnMajorUI(MajorUIRedPointNote[] points)
    {
        return begin_showRedPointOnMajorUI(points, null, false, null);
    }

    public Ice.AsyncResult begin_showRedPointOnMajorUI(MajorUIRedPointNote[] points, java.util.Map<String, String> __ctx)
    {
        return begin_showRedPointOnMajorUI(points, __ctx, true, null);
    }

    public Ice.AsyncResult begin_showRedPointOnMajorUI(MajorUIRedPointNote[] points, Ice.Callback __cb)
    {
        return begin_showRedPointOnMajorUI(points, null, false, __cb);
    }

    public Ice.AsyncResult begin_showRedPointOnMajorUI(MajorUIRedPointNote[] points, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showRedPointOnMajorUI(points, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_showRedPointOnMajorUI(MajorUIRedPointNote[] points, Callback_RoleCallback_showRedPointOnMajorUI __cb)
    {
        return begin_showRedPointOnMajorUI(points, null, false, __cb);
    }

    public Ice.AsyncResult begin_showRedPointOnMajorUI(MajorUIRedPointNote[] points, java.util.Map<String, String> __ctx, Callback_RoleCallback_showRedPointOnMajorUI __cb)
    {
        return begin_showRedPointOnMajorUI(points, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showRedPointOnMajorUI(MajorUIRedPointNote[] points, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showRedPointOnMajorUI_name, __cb);
        try
        {
            __result.__prepare(__showRedPointOnMajorUI_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            MajorUIRedPointNoteSeqHelper.write(__os, points);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_showRedPointOnMajorUI(Ice.AsyncResult __result)
    {
        __end(__result, __showRedPointOnMajorUI_name);
    }

    public boolean showRedPointOnMajorUI_async(AMI_RoleCallback_showRedPointOnMajorUI __cb, MajorUIRedPointNote[] points)
    {
        Ice.AsyncResult __r = begin_showRedPointOnMajorUI(points, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean showRedPointOnMajorUI_async(AMI_RoleCallback_showRedPointOnMajorUI __cb, MajorUIRedPointNote[] points, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_showRedPointOnMajorUI(points, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __showRenameUI_name = "showRenameUI";

    public void showRenameUI()
    {
        showRenameUI(null, false);
    }

    public void showRenameUI(java.util.Map<String, String> __ctx)
    {
        showRenameUI(__ctx, true);
    }

    private void showRenameUI(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "showRenameUI", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.showRenameUI(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_showRenameUI()
    {
        return begin_showRenameUI(null, false, null);
    }

    public Ice.AsyncResult begin_showRenameUI(java.util.Map<String, String> __ctx)
    {
        return begin_showRenameUI(__ctx, true, null);
    }

    public Ice.AsyncResult begin_showRenameUI(Ice.Callback __cb)
    {
        return begin_showRenameUI(null, false, __cb);
    }

    public Ice.AsyncResult begin_showRenameUI(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showRenameUI(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_showRenameUI(Callback_RoleCallback_showRenameUI __cb)
    {
        return begin_showRenameUI(null, false, __cb);
    }

    public Ice.AsyncResult begin_showRenameUI(java.util.Map<String, String> __ctx, Callback_RoleCallback_showRenameUI __cb)
    {
        return begin_showRenameUI(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showRenameUI(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showRenameUI_name, __cb);
        try
        {
            __result.__prepare(__showRenameUI_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_showRenameUI(Ice.AsyncResult __result)
    {
        __end(__result, __showRenameUI_name);
    }

    public boolean showRenameUI_async(AMI_RoleCallback_showRenameUI __cb)
    {
        Ice.AsyncResult __r = begin_showRenameUI(null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean showRenameUI_async(AMI_RoleCallback_showRenameUI __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_showRenameUI(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __showTips_name = "showTips";

    public void showTips(String tips)
    {
        showTips(tips, null, false);
    }

    public void showTips(String tips, java.util.Map<String, String> __ctx)
    {
        showTips(tips, __ctx, true);
    }

    private void showTips(String tips, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "showTips", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.showTips(tips, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_showTips(String tips)
    {
        return begin_showTips(tips, null, false, null);
    }

    public Ice.AsyncResult begin_showTips(String tips, java.util.Map<String, String> __ctx)
    {
        return begin_showTips(tips, __ctx, true, null);
    }

    public Ice.AsyncResult begin_showTips(String tips, Ice.Callback __cb)
    {
        return begin_showTips(tips, null, false, __cb);
    }

    public Ice.AsyncResult begin_showTips(String tips, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showTips(tips, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_showTips(String tips, Callback_RoleCallback_showTips __cb)
    {
        return begin_showTips(tips, null, false, __cb);
    }

    public Ice.AsyncResult begin_showTips(String tips, java.util.Map<String, String> __ctx, Callback_RoleCallback_showTips __cb)
    {
        return begin_showTips(tips, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showTips(String tips, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showTips_name, __cb);
        try
        {
            __result.__prepare(__showTips_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(tips);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_showTips(Ice.AsyncResult __result)
    {
        __end(__result, __showTips_name);
    }

    public boolean showTips_async(AMI_RoleCallback_showTips __cb, String tips)
    {
        Ice.AsyncResult __r = begin_showTips(tips, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean showTips_async(AMI_RoleCallback_showTips __cb, String tips, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_showTips(tips, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __strPropertyChange_name = "strPropertyChange";

    public void strPropertyChange(String code, String value)
    {
        strPropertyChange(code, value, null, false);
    }

    public void strPropertyChange(String code, String value, java.util.Map<String, String> __ctx)
    {
        strPropertyChange(code, value, __ctx, true);
    }

    private void strPropertyChange(String code, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "strPropertyChange", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleCallbackDel __del = (_RoleCallbackDel)__delBase;
                    __del.strPropertyChange(code, value, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_strPropertyChange(String code, String value)
    {
        return begin_strPropertyChange(code, value, null, false, null);
    }

    public Ice.AsyncResult begin_strPropertyChange(String code, String value, java.util.Map<String, String> __ctx)
    {
        return begin_strPropertyChange(code, value, __ctx, true, null);
    }

    public Ice.AsyncResult begin_strPropertyChange(String code, String value, Ice.Callback __cb)
    {
        return begin_strPropertyChange(code, value, null, false, __cb);
    }

    public Ice.AsyncResult begin_strPropertyChange(String code, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_strPropertyChange(code, value, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_strPropertyChange(String code, String value, Callback_RoleCallback_strPropertyChange __cb)
    {
        return begin_strPropertyChange(code, value, null, false, __cb);
    }

    public Ice.AsyncResult begin_strPropertyChange(String code, String value, java.util.Map<String, String> __ctx, Callback_RoleCallback_strPropertyChange __cb)
    {
        return begin_strPropertyChange(code, value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_strPropertyChange(String code, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __strPropertyChange_name, __cb);
        try
        {
            __result.__prepare(__strPropertyChange_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(code);
            __os.writeString(value);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_strPropertyChange(Ice.AsyncResult __result)
    {
        __end(__result, __strPropertyChange_name);
    }

    public boolean strPropertyChange_async(AMI_RoleCallback_strPropertyChange __cb, String code, String value)
    {
        Ice.AsyncResult __r = begin_strPropertyChange(code, value, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean strPropertyChange_async(AMI_RoleCallback_strPropertyChange __cb, String code, String value, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_strPropertyChange(code, value, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static RoleCallbackPrx checkedCast(Ice.ObjectPrx __obj)
    {
        RoleCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RoleCallbackPrx)
            {
                __d = (RoleCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    RoleCallbackPrxHelper __h = new RoleCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RoleCallbackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        RoleCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RoleCallbackPrx)
            {
                __d = (RoleCallbackPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    RoleCallbackPrxHelper __h = new RoleCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RoleCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RoleCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    RoleCallbackPrxHelper __h = new RoleCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RoleCallbackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        RoleCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    RoleCallbackPrxHelper __h = new RoleCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RoleCallbackPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        RoleCallbackPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RoleCallbackPrx)
            {
                __d = (RoleCallbackPrx)__obj;
            }
            else
            {
                RoleCallbackPrxHelper __h = new RoleCallbackPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static RoleCallbackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RoleCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            RoleCallbackPrxHelper __h = new RoleCallbackPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::RoleCallback"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _RoleCallbackDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _RoleCallbackDelD();
    }

    public static void __write(IceInternal.BasicStream __os, RoleCallbackPrx v)
    {
        __os.writeProxy(v);
    }

    public static RoleCallbackPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RoleCallbackPrxHelper result = new RoleCallbackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
