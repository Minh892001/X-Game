// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Role.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface RolePrx extends Ice.ObjectPrx
{
    public String setRoleCallback(RoleCallbackPrx cb)
        throws NoteException;

    public String setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb);

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, Ice.Callback __cb);

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, Callback_Role_setRoleCallback __cb);

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_Role_setRoleCallback __cb);

    public String end_setRoleCallback(Ice.AsyncResult __result)
        throws NoteException;

    public boolean setRoleCallback_async(AMI_Role_setRoleCallback __cb, RoleCallbackPrx cb);

    public boolean setRoleCallback_async(AMI_Role_setRoleCallback __cb, RoleCallbackPrx cb, java.util.Map<String, String> __ctx);

    public String[] getServerOpenTime();

    public String[] getServerOpenTime(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getServerOpenTime();

    public Ice.AsyncResult begin_getServerOpenTime(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getServerOpenTime(Ice.Callback __cb);

    public Ice.AsyncResult begin_getServerOpenTime(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getServerOpenTime(Callback_Role_getServerOpenTime __cb);

    public Ice.AsyncResult begin_getServerOpenTime(java.util.Map<String, String> __ctx, Callback_Role_getServerOpenTime __cb);

    public String[] end_getServerOpenTime(Ice.AsyncResult __result);

    public boolean getServerOpenTime_async(AMI_Role_getServerOpenTime __cb);

    public boolean getServerOpenTime_async(AMI_Role_getServerOpenTime __cb, java.util.Map<String, String> __ctx);

    public RoleView[] getRoleViewList()
        throws NoteException;

    public RoleView[] getRoleViewList(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getRoleViewList();

    public Ice.AsyncResult begin_getRoleViewList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getRoleViewList(Ice.Callback __cb);

    public Ice.AsyncResult begin_getRoleViewList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getRoleViewList(Callback_Role_getRoleViewList __cb);

    public Ice.AsyncResult begin_getRoleViewList(java.util.Map<String, String> __ctx, Callback_Role_getRoleViewList __cb);

    public RoleView[] end_getRoleViewList(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getRoleViewList_async(AMI_Role_getRoleViewList __cb);

    public boolean getRoleViewList_async(AMI_Role_getRoleViewList __cb, java.util.Map<String, String> __ctx);

    public Property randomName(int sex);

    public Property randomName(int sex, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_randomName(int sex);

    public Ice.AsyncResult begin_randomName(int sex, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_randomName(int sex, Ice.Callback __cb);

    public Ice.AsyncResult begin_randomName(int sex, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_randomName(int sex, Callback_Role_randomName __cb);

    public Ice.AsyncResult begin_randomName(int sex, java.util.Map<String, String> __ctx, Callback_Role_randomName __cb);

    public Property end_randomName(Ice.AsyncResult __result);

    public boolean randomName_async(AMI_Role_randomName __cb, int sex);

    public boolean randomName_async(AMI_Role_randomName __cb, int sex, java.util.Map<String, String> __ctx);

    public String setSexAndName(int sex, String name, String inviteCode)
        throws NoteException;

    public String setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode);

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, Ice.Callback __cb);

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, Callback_Role_setSexAndName __cb);

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx, Callback_Role_setSexAndName __cb);

    public String end_setSexAndName(Ice.AsyncResult __result)
        throws NoteException;

    public boolean setSexAndName_async(AMI_Role_setSexAndName __cb, int sex, String name, String inviteCode);

    public boolean setSexAndName_async(AMI_Role_setSexAndName __cb, int sex, String name, String inviteCode, java.util.Map<String, String> __ctx);

    public void rename(String name)
        throws NotEnoughYuanBaoException,
               NoteException;

    public void rename(String name, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_rename(String name);

    public Ice.AsyncResult begin_rename(String name, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_rename(String name, Ice.Callback __cb);

    public Ice.AsyncResult begin_rename(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_rename(String name, Callback_Role_rename __cb);

    public Ice.AsyncResult begin_rename(String name, java.util.Map<String, String> __ctx, Callback_Role_rename __cb);

    public void end_rename(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean rename_async(AMI_Role_rename __cb, String name);

    public boolean rename_async(AMI_Role_rename __cb, String name, java.util.Map<String, String> __ctx);

    public void levelUp()
        throws NoteException;

    public void levelUp(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_levelUp();

    public Ice.AsyncResult begin_levelUp(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_levelUp(Ice.Callback __cb);

    public Ice.AsyncResult begin_levelUp(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_levelUp(Callback_Role_levelUp __cb);

    public Ice.AsyncResult begin_levelUp(java.util.Map<String, String> __ctx, Callback_Role_levelUp __cb);

    public void end_levelUp(Ice.AsyncResult __result)
        throws NoteException;

    public boolean levelUp_async(AMI_Role_levelUp __cb);

    public boolean levelUp_async(AMI_Role_levelUp __cb, java.util.Map<String, String> __ctx);

    public boolean readActivityAnnounce(int id);

    public boolean readActivityAnnounce(int id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_readActivityAnnounce(int id);

    public Ice.AsyncResult begin_readActivityAnnounce(int id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_readActivityAnnounce(int id, Ice.Callback __cb);

    public Ice.AsyncResult begin_readActivityAnnounce(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_readActivityAnnounce(int id, Callback_Role_readActivityAnnounce __cb);

    public Ice.AsyncResult begin_readActivityAnnounce(int id, java.util.Map<String, String> __ctx, Callback_Role_readActivityAnnounce __cb);

    public boolean end_readActivityAnnounce(Ice.AsyncResult __result);

    public boolean readActivityAnnounce_async(AMI_Role_readActivityAnnounce __cb, int id);

    public boolean readActivityAnnounce_async(AMI_Role_readActivityAnnounce __cb, int id, java.util.Map<String, String> __ctx);

    public void salary()
        throws NoteException;

    public void salary(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_salary();

    public Ice.AsyncResult begin_salary(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_salary(Ice.Callback __cb);

    public Ice.AsyncResult begin_salary(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_salary(Callback_Role_salary __cb);

    public Ice.AsyncResult begin_salary(java.util.Map<String, String> __ctx, Callback_Role_salary __cb);

    public void end_salary(Ice.AsyncResult __result)
        throws NoteException;

    public boolean salary_async(AMI_Role_salary __cb);

    public boolean salary_async(AMI_Role_salary __cb, java.util.Map<String, String> __ctx);

    public String getOtherPlayInfo(String targetId)
        throws NoteException;

    public String getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId);

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, Ice.Callback __cb);

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, Callback_Role_getOtherPlayInfo __cb);

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx, Callback_Role_getOtherPlayInfo __cb);

    public String end_getOtherPlayInfo(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getOtherPlayInfo_async(AMI_Role_getOtherPlayInfo __cb, String targetId);

    public boolean getOtherPlayInfo_async(AMI_Role_getOtherPlayInfo __cb, String targetId, java.util.Map<String, String> __ctx);

    public void setHeadImage(String img)
        throws NoteException;

    public void setHeadImage(String img, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_setHeadImage(String img);

    public Ice.AsyncResult begin_setHeadImage(String img, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setHeadImage(String img, Ice.Callback __cb);

    public Ice.AsyncResult begin_setHeadImage(String img, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setHeadImage(String img, Callback_Role_setHeadImage __cb);

    public Ice.AsyncResult begin_setHeadImage(String img, java.util.Map<String, String> __ctx, Callback_Role_setHeadImage __cb);

    public void end_setHeadImage(Ice.AsyncResult __result)
        throws NoteException;

    public boolean setHeadImage_async(AMI_Role_setHeadImage __cb, String img);

    public boolean setHeadImage_async(AMI_Role_setHeadImage __cb, String img, java.util.Map<String, String> __ctx);

    public void setHeadBorder(String border)
        throws NoteException;

    public void setHeadBorder(String border, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_setHeadBorder(String border);

    public Ice.AsyncResult begin_setHeadBorder(String border, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setHeadBorder(String border, Ice.Callback __cb);

    public Ice.AsyncResult begin_setHeadBorder(String border, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setHeadBorder(String border, Callback_Role_setHeadBorder __cb);

    public Ice.AsyncResult begin_setHeadBorder(String border, java.util.Map<String, String> __ctx, Callback_Role_setHeadBorder __cb);

    public void end_setHeadBorder(Ice.AsyncResult __result)
        throws NoteException;

    public boolean setHeadBorder_async(AMI_Role_setHeadBorder __cb, String border);

    public boolean setHeadBorder_async(AMI_Role_setHeadBorder __cb, String border, java.util.Map<String, String> __ctx);

    public String getReportView(String reportId)
        throws NoteException;

    public String getReportView(String reportId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getReportView(String reportId);

    public Ice.AsyncResult begin_getReportView(String reportId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getReportView(String reportId, Ice.Callback __cb);

    public Ice.AsyncResult begin_getReportView(String reportId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getReportView(String reportId, Callback_Role_getReportView __cb);

    public Ice.AsyncResult begin_getReportView(String reportId, java.util.Map<String, String> __ctx, Callback_Role_getReportView __cb);

    public String end_getReportView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getReportView_async(AMI_Role_getReportView __cb, String reportId);

    public boolean getReportView_async(AMI_Role_getReportView __cb, String reportId, java.util.Map<String, String> __ctx);

    public void completeGuide(int guideId);

    public void completeGuide(int guideId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_completeGuide(int guideId);

    public Ice.AsyncResult begin_completeGuide(int guideId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_completeGuide(int guideId, Ice.Callback __cb);

    public Ice.AsyncResult begin_completeGuide(int guideId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_completeGuide(int guideId, Callback_Role_completeGuide __cb);

    public Ice.AsyncResult begin_completeGuide(int guideId, java.util.Map<String, String> __ctx, Callback_Role_completeGuide __cb);

    public void end_completeGuide(Ice.AsyncResult __result);

    public boolean completeGuide_async(AMI_Role_completeGuide __cb, int guideId);

    public boolean completeGuide_async(AMI_Role_completeGuide __cb, int guideId, java.util.Map<String, String> __ctx);

    public SceneDuelView[] openCeremony(int id)
        throws NoteException;

    public SceneDuelView[] openCeremony(int id, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_openCeremony(int id);

    public Ice.AsyncResult begin_openCeremony(int id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openCeremony(int id, Ice.Callback __cb);

    public Ice.AsyncResult begin_openCeremony(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_openCeremony(int id, Callback_Role_openCeremony __cb);

    public Ice.AsyncResult begin_openCeremony(int id, java.util.Map<String, String> __ctx, Callback_Role_openCeremony __cb);

    public SceneDuelView[] end_openCeremony(Ice.AsyncResult __result)
        throws NoteException;

    public boolean openCeremony_async(AMI_Role_openCeremony __cb, int id);

    public boolean openCeremony_async(AMI_Role_openCeremony __cb, int id, java.util.Map<String, String> __ctx);

    public DuelSkillTemplateView[] getDuelStrategyConfig()
        throws NoteException;

    public DuelSkillTemplateView[] getDuelStrategyConfig(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getDuelStrategyConfig();

    public Ice.AsyncResult begin_getDuelStrategyConfig(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getDuelStrategyConfig(Ice.Callback __cb);

    public Ice.AsyncResult begin_getDuelStrategyConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getDuelStrategyConfig(Callback_Role_getDuelStrategyConfig __cb);

    public Ice.AsyncResult begin_getDuelStrategyConfig(java.util.Map<String, String> __ctx, Callback_Role_getDuelStrategyConfig __cb);

    public DuelSkillTemplateView[] end_getDuelStrategyConfig(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getDuelStrategyConfig_async(AMI_Role_getDuelStrategyConfig __cb);

    public boolean getDuelStrategyConfig_async(AMI_Role_getDuelStrategyConfig __cb, java.util.Map<String, String> __ctx);

    public void xsgPing()
        throws NoteException;

    public void xsgPing(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_xsgPing();

    public Ice.AsyncResult begin_xsgPing(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_xsgPing(Ice.Callback __cb);

    public Ice.AsyncResult begin_xsgPing(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_xsgPing(Callback_Role_xsgPing __cb);

    public Ice.AsyncResult begin_xsgPing(java.util.Map<String, String> __ctx, Callback_Role_xsgPing __cb);

    public void end_xsgPing(Ice.AsyncResult __result)
        throws NoteException;

    public boolean xsgPing_async(AMI_Role_xsgPing __cb);

    public boolean xsgPing_async(AMI_Role_xsgPing __cb, java.util.Map<String, String> __ctx);

    public void resetRole()
        throws NoteException;

    public void resetRole(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_resetRole();

    public Ice.AsyncResult begin_resetRole(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_resetRole(Ice.Callback __cb);

    public Ice.AsyncResult begin_resetRole(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_resetRole(Callback_Role_resetRole __cb);

    public Ice.AsyncResult begin_resetRole(java.util.Map<String, String> __ctx, Callback_Role_resetRole __cb);

    public void end_resetRole(Ice.AsyncResult __result)
        throws NoteException;

    public boolean resetRole_async(AMI_Role_resetRole __cb);

    public boolean resetRole_async(AMI_Role_resetRole __cb, java.util.Map<String, String> __ctx);

    public ActivityAnnounceView[] getActivityAnnounce();

    public ActivityAnnounceView[] getActivityAnnounce(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getActivityAnnounce();

    public Ice.AsyncResult begin_getActivityAnnounce(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getActivityAnnounce(Ice.Callback __cb);

    public Ice.AsyncResult begin_getActivityAnnounce(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getActivityAnnounce(Callback_Role_getActivityAnnounce __cb);

    public Ice.AsyncResult begin_getActivityAnnounce(java.util.Map<String, String> __ctx, Callback_Role_getActivityAnnounce __cb);

    public ActivityAnnounceView[] end_getActivityAnnounce(Ice.AsyncResult __result);

    public boolean getActivityAnnounce_async(AMI_Role_getActivityAnnounce __cb);

    public boolean getActivityAnnounce_async(AMI_Role_getActivityAnnounce __cb, java.util.Map<String, String> __ctx);

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     **/
    public String getDoubleCardTime()
        throws NoteException;

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getDoubleCardTime(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime();

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(java.util.Map<String, String> __ctx);

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(Ice.Callback __cb);

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(Callback_Role_getDoubleCardTime __cb);

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(java.util.Map<String, String> __ctx, Callback_Role_getDoubleCardTime __cb);

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __result The asynchronous result object.
     **/
    public String end_getDoubleCardTime(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     **/
    public boolean getDoubleCardTime_async(AMI_Role_getDoubleCardTime __cb);

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getDoubleCardTime_async(AMI_Role_getDoubleCardTime __cb, java.util.Map<String, String> __ctx);

    public void shareWeixin()
        throws NoteException;

    public void shareWeixin(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_shareWeixin();

    public Ice.AsyncResult begin_shareWeixin(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_shareWeixin(Ice.Callback __cb);

    public Ice.AsyncResult begin_shareWeixin(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_shareWeixin(Callback_Role_shareWeixin __cb);

    public Ice.AsyncResult begin_shareWeixin(java.util.Map<String, String> __ctx, Callback_Role_shareWeixin __cb);

    public void end_shareWeixin(Ice.AsyncResult __result)
        throws NoteException;

    public boolean shareWeixin_async(AMI_Role_shareWeixin __cb);

    public boolean shareWeixin_async(AMI_Role_shareWeixin __cb, java.util.Map<String, String> __ctx);

    public OthersHeroView getRoleHeros(String roleId)
        throws NoteException;

    public OthersHeroView getRoleHeros(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getRoleHeros(String roleId);

    public Ice.AsyncResult begin_getRoleHeros(String roleId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getRoleHeros(String roleId, Ice.Callback __cb);

    public Ice.AsyncResult begin_getRoleHeros(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getRoleHeros(String roleId, Callback_Role_getRoleHeros __cb);

    public Ice.AsyncResult begin_getRoleHeros(String roleId, java.util.Map<String, String> __ctx, Callback_Role_getRoleHeros __cb);

    public OthersHeroView end_getRoleHeros(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getRoleHeros_async(AMI_Role_getRoleHeros __cb, String roleId);

    public boolean getRoleHeros_async(AMI_Role_getRoleHeros __cb, String roleId, java.util.Map<String, String> __ctx);
}
