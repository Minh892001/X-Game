// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Role.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class RolePrxHelper extends Ice.ObjectPrxHelperBase implements RolePrx
{
    private static final String __completeGuide_name = "completeGuide";

    public void completeGuide(int guideId)
    {
        completeGuide(guideId, null, false);
    }

    public void completeGuide(int guideId, java.util.Map<String, String> __ctx)
    {
        completeGuide(guideId, __ctx, true);
    }

    private void completeGuide(int guideId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "completeGuide", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.completeGuide(guideId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_completeGuide(int guideId)
    {
        return begin_completeGuide(guideId, null, false, null);
    }

    public Ice.AsyncResult begin_completeGuide(int guideId, java.util.Map<String, String> __ctx)
    {
        return begin_completeGuide(guideId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_completeGuide(int guideId, Ice.Callback __cb)
    {
        return begin_completeGuide(guideId, null, false, __cb);
    }

    public Ice.AsyncResult begin_completeGuide(int guideId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_completeGuide(guideId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_completeGuide(int guideId, Callback_Role_completeGuide __cb)
    {
        return begin_completeGuide(guideId, null, false, __cb);
    }

    public Ice.AsyncResult begin_completeGuide(int guideId, java.util.Map<String, String> __ctx, Callback_Role_completeGuide __cb)
    {
        return begin_completeGuide(guideId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_completeGuide(int guideId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __completeGuide_name, __cb);
        try
        {
            __result.__prepare(__completeGuide_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(guideId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_completeGuide(Ice.AsyncResult __result)
    {
        __end(__result, __completeGuide_name);
    }

    public boolean completeGuide_async(AMI_Role_completeGuide __cb, int guideId)
    {
        Ice.AsyncResult __r = begin_completeGuide(guideId, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean completeGuide_async(AMI_Role_completeGuide __cb, int guideId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_completeGuide(guideId, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __getActivityAnnounce_name = "getActivityAnnounce";

    public ActivityAnnounceView[] getActivityAnnounce()
    {
        return getActivityAnnounce(null, false);
    }

    public ActivityAnnounceView[] getActivityAnnounce(java.util.Map<String, String> __ctx)
    {
        return getActivityAnnounce(__ctx, true);
    }

    private ActivityAnnounceView[] getActivityAnnounce(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getActivityAnnounce", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getActivityAnnounce");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.getActivityAnnounce(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getActivityAnnounce()
    {
        return begin_getActivityAnnounce(null, false, null);
    }

    public Ice.AsyncResult begin_getActivityAnnounce(java.util.Map<String, String> __ctx)
    {
        return begin_getActivityAnnounce(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getActivityAnnounce(Ice.Callback __cb)
    {
        return begin_getActivityAnnounce(null, false, __cb);
    }

    public Ice.AsyncResult begin_getActivityAnnounce(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getActivityAnnounce(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getActivityAnnounce(Callback_Role_getActivityAnnounce __cb)
    {
        return begin_getActivityAnnounce(null, false, __cb);
    }

    public Ice.AsyncResult begin_getActivityAnnounce(java.util.Map<String, String> __ctx, Callback_Role_getActivityAnnounce __cb)
    {
        return begin_getActivityAnnounce(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getActivityAnnounce(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getActivityAnnounce_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getActivityAnnounce_name, __cb);
        try
        {
            __result.__prepare(__getActivityAnnounce_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ActivityAnnounceView[] end_getActivityAnnounce(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getActivityAnnounce_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ActivityAnnounceView[] __ret;
            __ret = ActivityAnnounceViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getActivityAnnounce_async(AMI_Role_getActivityAnnounce __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getActivityAnnounce_name);
            __r = begin_getActivityAnnounce(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getActivityAnnounce_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getActivityAnnounce_async(AMI_Role_getActivityAnnounce __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getActivityAnnounce_name);
            __r = begin_getActivityAnnounce(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getActivityAnnounce_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getDoubleCardTime_name = "getDoubleCardTime";

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     **/
    public String getDoubleCardTime()
        throws NoteException
    {
        return getDoubleCardTime(null, false);
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getDoubleCardTime(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getDoubleCardTime(__ctx, true);
    }

    private String getDoubleCardTime(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDoubleCardTime", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDoubleCardTime");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.getDoubleCardTime(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime()
    {
        return begin_getDoubleCardTime(null, false, null);
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(java.util.Map<String, String> __ctx)
    {
        return begin_getDoubleCardTime(__ctx, true, null);
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(Ice.Callback __cb)
    {
        return begin_getDoubleCardTime(null, false, __cb);
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDoubleCardTime(__ctx, true, __cb);
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(Callback_Role_getDoubleCardTime __cb)
    {
        return begin_getDoubleCardTime(null, false, __cb);
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDoubleCardTime(java.util.Map<String, String> __ctx, Callback_Role_getDoubleCardTime __cb)
    {
        return begin_getDoubleCardTime(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDoubleCardTime(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDoubleCardTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDoubleCardTime_name, __cb);
        try
        {
            __result.__prepare(__getDoubleCardTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getDoubleCardTime(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getDoubleCardTime_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     **/
    public boolean getDoubleCardTime_async(AMI_Role_getDoubleCardTime __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDoubleCardTime_name);
            __r = begin_getDoubleCardTime(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDoubleCardTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getDoubleCardTime_async(AMI_Role_getDoubleCardTime __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDoubleCardTime_name);
            __r = begin_getDoubleCardTime(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDoubleCardTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getDuelStrategyConfig_name = "getDuelStrategyConfig";

    public DuelSkillTemplateView[] getDuelStrategyConfig()
        throws NoteException
    {
        return getDuelStrategyConfig(null, false);
    }

    public DuelSkillTemplateView[] getDuelStrategyConfig(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getDuelStrategyConfig(__ctx, true);
    }

    private DuelSkillTemplateView[] getDuelStrategyConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDuelStrategyConfig", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDuelStrategyConfig");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.getDuelStrategyConfig(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDuelStrategyConfig()
    {
        return begin_getDuelStrategyConfig(null, false, null);
    }

    public Ice.AsyncResult begin_getDuelStrategyConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getDuelStrategyConfig(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDuelStrategyConfig(Ice.Callback __cb)
    {
        return begin_getDuelStrategyConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDuelStrategyConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDuelStrategyConfig(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDuelStrategyConfig(Callback_Role_getDuelStrategyConfig __cb)
    {
        return begin_getDuelStrategyConfig(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDuelStrategyConfig(java.util.Map<String, String> __ctx, Callback_Role_getDuelStrategyConfig __cb)
    {
        return begin_getDuelStrategyConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDuelStrategyConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDuelStrategyConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDuelStrategyConfig_name, __cb);
        try
        {
            __result.__prepare(__getDuelStrategyConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DuelSkillTemplateView[] end_getDuelStrategyConfig(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getDuelStrategyConfig_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            DuelSkillTemplateView[] __ret;
            __ret = DuelSkillTemplateViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getDuelStrategyConfig_async(AMI_Role_getDuelStrategyConfig __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDuelStrategyConfig_name);
            __r = begin_getDuelStrategyConfig(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDuelStrategyConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getDuelStrategyConfig_async(AMI_Role_getDuelStrategyConfig __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getDuelStrategyConfig_name);
            __r = begin_getDuelStrategyConfig(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getDuelStrategyConfig_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getOtherPlayInfo_name = "getOtherPlayInfo";

    public String getOtherPlayInfo(String targetId)
        throws NoteException
    {
        return getOtherPlayInfo(targetId, null, false);
    }

    public String getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getOtherPlayInfo(targetId, __ctx, true);
    }

    private String getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getOtherPlayInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getOtherPlayInfo");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.getOtherPlayInfo(targetId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId)
    {
        return begin_getOtherPlayInfo(targetId, null, false, null);
    }

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx)
    {
        return begin_getOtherPlayInfo(targetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, Ice.Callback __cb)
    {
        return begin_getOtherPlayInfo(targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getOtherPlayInfo(targetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, Callback_Role_getOtherPlayInfo __cb)
    {
        return begin_getOtherPlayInfo(targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx, Callback_Role_getOtherPlayInfo __cb)
    {
        return begin_getOtherPlayInfo(targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getOtherPlayInfo(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getOtherPlayInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getOtherPlayInfo_name, __cb);
        try
        {
            __result.__prepare(__getOtherPlayInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getOtherPlayInfo(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getOtherPlayInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getOtherPlayInfo_async(AMI_Role_getOtherPlayInfo __cb, String targetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getOtherPlayInfo_name);
            __r = begin_getOtherPlayInfo(targetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getOtherPlayInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getOtherPlayInfo_async(AMI_Role_getOtherPlayInfo __cb, String targetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getOtherPlayInfo_name);
            __r = begin_getOtherPlayInfo(targetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getOtherPlayInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getReportView_name = "getReportView";

    public String getReportView(String reportId)
        throws NoteException
    {
        return getReportView(reportId, null, false);
    }

    public String getReportView(String reportId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getReportView(reportId, __ctx, true);
    }

    private String getReportView(String reportId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getReportView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getReportView");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.getReportView(reportId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getReportView(String reportId)
    {
        return begin_getReportView(reportId, null, false, null);
    }

    public Ice.AsyncResult begin_getReportView(String reportId, java.util.Map<String, String> __ctx)
    {
        return begin_getReportView(reportId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getReportView(String reportId, Ice.Callback __cb)
    {
        return begin_getReportView(reportId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getReportView(String reportId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getReportView(reportId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getReportView(String reportId, Callback_Role_getReportView __cb)
    {
        return begin_getReportView(reportId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getReportView(String reportId, java.util.Map<String, String> __ctx, Callback_Role_getReportView __cb)
    {
        return begin_getReportView(reportId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getReportView(String reportId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getReportView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getReportView_name, __cb);
        try
        {
            __result.__prepare(__getReportView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(reportId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getReportView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getReportView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getReportView_async(AMI_Role_getReportView __cb, String reportId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getReportView_name);
            __r = begin_getReportView(reportId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getReportView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getReportView_async(AMI_Role_getReportView __cb, String reportId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getReportView_name);
            __r = begin_getReportView(reportId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getReportView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRoleHeros_name = "getRoleHeros";

    public OthersHeroView getRoleHeros(String roleId)
        throws NoteException
    {
        return getRoleHeros(roleId, null, false);
    }

    public OthersHeroView getRoleHeros(String roleId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRoleHeros(roleId, __ctx, true);
    }

    private OthersHeroView getRoleHeros(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRoleHeros", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRoleHeros");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.getRoleHeros(roleId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRoleHeros(String roleId)
    {
        return begin_getRoleHeros(roleId, null, false, null);
    }

    public Ice.AsyncResult begin_getRoleHeros(String roleId, java.util.Map<String, String> __ctx)
    {
        return begin_getRoleHeros(roleId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getRoleHeros(String roleId, Ice.Callback __cb)
    {
        return begin_getRoleHeros(roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRoleHeros(String roleId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRoleHeros(roleId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRoleHeros(String roleId, Callback_Role_getRoleHeros __cb)
    {
        return begin_getRoleHeros(roleId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRoleHeros(String roleId, java.util.Map<String, String> __ctx, Callback_Role_getRoleHeros __cb)
    {
        return begin_getRoleHeros(roleId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRoleHeros(String roleId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRoleHeros_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRoleHeros_name, __cb);
        try
        {
            __result.__prepare(__getRoleHeros_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roleId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public OthersHeroView end_getRoleHeros(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRoleHeros_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            OthersHeroView __ret;
            __ret = new OthersHeroView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getRoleHeros_async(AMI_Role_getRoleHeros __cb, String roleId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRoleHeros_name);
            __r = begin_getRoleHeros(roleId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRoleHeros_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getRoleHeros_async(AMI_Role_getRoleHeros __cb, String roleId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRoleHeros_name);
            __r = begin_getRoleHeros(roleId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRoleHeros_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRoleViewList_name = "getRoleViewList";

    public RoleView[] getRoleViewList()
        throws NoteException
    {
        return getRoleViewList(null, false);
    }

    public RoleView[] getRoleViewList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRoleViewList(__ctx, true);
    }

    private RoleView[] getRoleViewList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRoleViewList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRoleViewList");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.getRoleViewList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRoleViewList()
    {
        return begin_getRoleViewList(null, false, null);
    }

    public Ice.AsyncResult begin_getRoleViewList(java.util.Map<String, String> __ctx)
    {
        return begin_getRoleViewList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getRoleViewList(Ice.Callback __cb)
    {
        return begin_getRoleViewList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRoleViewList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRoleViewList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRoleViewList(Callback_Role_getRoleViewList __cb)
    {
        return begin_getRoleViewList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRoleViewList(java.util.Map<String, String> __ctx, Callback_Role_getRoleViewList __cb)
    {
        return begin_getRoleViewList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRoleViewList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRoleViewList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRoleViewList_name, __cb);
        try
        {
            __result.__prepare(__getRoleViewList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public RoleView[] end_getRoleViewList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRoleViewList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RoleView[] __ret;
            __ret = RoleViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getRoleViewList_async(AMI_Role_getRoleViewList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRoleViewList_name);
            __r = begin_getRoleViewList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRoleViewList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getRoleViewList_async(AMI_Role_getRoleViewList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRoleViewList_name);
            __r = begin_getRoleViewList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRoleViewList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getServerOpenTime_name = "getServerOpenTime";

    public String[] getServerOpenTime()
    {
        return getServerOpenTime(null, false);
    }

    public String[] getServerOpenTime(java.util.Map<String, String> __ctx)
    {
        return getServerOpenTime(__ctx, true);
    }

    private String[] getServerOpenTime(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getServerOpenTime", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getServerOpenTime");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.getServerOpenTime(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getServerOpenTime()
    {
        return begin_getServerOpenTime(null, false, null);
    }

    public Ice.AsyncResult begin_getServerOpenTime(java.util.Map<String, String> __ctx)
    {
        return begin_getServerOpenTime(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getServerOpenTime(Ice.Callback __cb)
    {
        return begin_getServerOpenTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getServerOpenTime(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getServerOpenTime(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getServerOpenTime(Callback_Role_getServerOpenTime __cb)
    {
        return begin_getServerOpenTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getServerOpenTime(java.util.Map<String, String> __ctx, Callback_Role_getServerOpenTime __cb)
    {
        return begin_getServerOpenTime(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getServerOpenTime(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getServerOpenTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getServerOpenTime_name, __cb);
        try
        {
            __result.__prepare(__getServerOpenTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getServerOpenTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getServerOpenTime_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = StringSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getServerOpenTime_async(AMI_Role_getServerOpenTime __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getServerOpenTime_name);
            __r = begin_getServerOpenTime(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getServerOpenTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getServerOpenTime_async(AMI_Role_getServerOpenTime __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getServerOpenTime_name);
            __r = begin_getServerOpenTime(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getServerOpenTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __levelUp_name = "levelUp";

    public void levelUp()
        throws NoteException
    {
        levelUp(null, false);
    }

    public void levelUp(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        levelUp(__ctx, true);
    }

    private void levelUp(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "levelUp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("levelUp");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.levelUp(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_levelUp()
    {
        return begin_levelUp(null, false, null);
    }

    public Ice.AsyncResult begin_levelUp(java.util.Map<String, String> __ctx)
    {
        return begin_levelUp(__ctx, true, null);
    }

    public Ice.AsyncResult begin_levelUp(Ice.Callback __cb)
    {
        return begin_levelUp(null, false, __cb);
    }

    public Ice.AsyncResult begin_levelUp(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_levelUp(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_levelUp(Callback_Role_levelUp __cb)
    {
        return begin_levelUp(null, false, __cb);
    }

    public Ice.AsyncResult begin_levelUp(java.util.Map<String, String> __ctx, Callback_Role_levelUp __cb)
    {
        return begin_levelUp(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_levelUp(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__levelUp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __levelUp_name, __cb);
        try
        {
            __result.__prepare(__levelUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_levelUp(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __levelUp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean levelUp_async(AMI_Role_levelUp __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelUp_name);
            __r = begin_levelUp(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean levelUp_async(AMI_Role_levelUp __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__levelUp_name);
            __r = begin_levelUp(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __levelUp_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openCeremony_name = "openCeremony";

    public SceneDuelView[] openCeremony(int id)
        throws NoteException
    {
        return openCeremony(id, null, false);
    }

    public SceneDuelView[] openCeremony(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openCeremony(id, __ctx, true);
    }

    private SceneDuelView[] openCeremony(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openCeremony", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openCeremony");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.openCeremony(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_openCeremony(int id)
    {
        return begin_openCeremony(id, null, false, null);
    }

    public Ice.AsyncResult begin_openCeremony(int id, java.util.Map<String, String> __ctx)
    {
        return begin_openCeremony(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_openCeremony(int id, Ice.Callback __cb)
    {
        return begin_openCeremony(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_openCeremony(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openCeremony(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_openCeremony(int id, Callback_Role_openCeremony __cb)
    {
        return begin_openCeremony(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_openCeremony(int id, java.util.Map<String, String> __ctx, Callback_Role_openCeremony __cb)
    {
        return begin_openCeremony(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openCeremony(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openCeremony_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openCeremony_name, __cb);
        try
        {
            __result.__prepare(__openCeremony_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public SceneDuelView[] end_openCeremony(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openCeremony_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            SceneDuelView[] __ret;
            __ret = SceneDuelViewSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean openCeremony_async(AMI_Role_openCeremony __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openCeremony_name);
            __r = begin_openCeremony(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openCeremony_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean openCeremony_async(AMI_Role_openCeremony __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openCeremony_name);
            __r = begin_openCeremony(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openCeremony_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __randomName_name = "randomName";

    public Property randomName(int sex)
    {
        return randomName(sex, null, false);
    }

    public Property randomName(int sex, java.util.Map<String, String> __ctx)
    {
        return randomName(sex, __ctx, true);
    }

    private Property randomName(int sex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "randomName", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("randomName");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.randomName(sex, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_randomName(int sex)
    {
        return begin_randomName(sex, null, false, null);
    }

    public Ice.AsyncResult begin_randomName(int sex, java.util.Map<String, String> __ctx)
    {
        return begin_randomName(sex, __ctx, true, null);
    }

    public Ice.AsyncResult begin_randomName(int sex, Ice.Callback __cb)
    {
        return begin_randomName(sex, null, false, __cb);
    }

    public Ice.AsyncResult begin_randomName(int sex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_randomName(sex, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_randomName(int sex, Callback_Role_randomName __cb)
    {
        return begin_randomName(sex, null, false, __cb);
    }

    public Ice.AsyncResult begin_randomName(int sex, java.util.Map<String, String> __ctx, Callback_Role_randomName __cb)
    {
        return begin_randomName(sex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_randomName(int sex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__randomName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __randomName_name, __cb);
        try
        {
            __result.__prepare(__randomName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(sex);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Property end_randomName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __randomName_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Property __ret;
            __ret = new Property();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean randomName_async(AMI_Role_randomName __cb, int sex)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__randomName_name);
            __r = begin_randomName(sex, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __randomName_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean randomName_async(AMI_Role_randomName __cb, int sex, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__randomName_name);
            __r = begin_randomName(sex, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __randomName_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __readActivityAnnounce_name = "readActivityAnnounce";

    public boolean readActivityAnnounce(int id)
    {
        return readActivityAnnounce(id, null, false);
    }

    public boolean readActivityAnnounce(int id, java.util.Map<String, String> __ctx)
    {
        return readActivityAnnounce(id, __ctx, true);
    }

    private boolean readActivityAnnounce(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "readActivityAnnounce", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("readActivityAnnounce");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.readActivityAnnounce(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_readActivityAnnounce(int id)
    {
        return begin_readActivityAnnounce(id, null, false, null);
    }

    public Ice.AsyncResult begin_readActivityAnnounce(int id, java.util.Map<String, String> __ctx)
    {
        return begin_readActivityAnnounce(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_readActivityAnnounce(int id, Ice.Callback __cb)
    {
        return begin_readActivityAnnounce(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_readActivityAnnounce(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_readActivityAnnounce(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_readActivityAnnounce(int id, Callback_Role_readActivityAnnounce __cb)
    {
        return begin_readActivityAnnounce(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_readActivityAnnounce(int id, java.util.Map<String, String> __ctx, Callback_Role_readActivityAnnounce __cb)
    {
        return begin_readActivityAnnounce(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_readActivityAnnounce(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__readActivityAnnounce_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __readActivityAnnounce_name, __cb);
        try
        {
            __result.__prepare(__readActivityAnnounce_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_readActivityAnnounce(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __readActivityAnnounce_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean readActivityAnnounce_async(AMI_Role_readActivityAnnounce __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__readActivityAnnounce_name);
            __r = begin_readActivityAnnounce(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __readActivityAnnounce_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean readActivityAnnounce_async(AMI_Role_readActivityAnnounce __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__readActivityAnnounce_name);
            __r = begin_readActivityAnnounce(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __readActivityAnnounce_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __rename_name = "rename";

    public void rename(String name)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        rename(name, null, false);
    }

    public void rename(String name, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        rename(name, __ctx, true);
    }

    private void rename(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "rename", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("rename");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.rename(name, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_rename(String name)
    {
        return begin_rename(name, null, false, null);
    }

    public Ice.AsyncResult begin_rename(String name, java.util.Map<String, String> __ctx)
    {
        return begin_rename(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_rename(String name, Ice.Callback __cb)
    {
        return begin_rename(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_rename(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rename(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_rename(String name, Callback_Role_rename __cb)
    {
        return begin_rename(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_rename(String name, java.util.Map<String, String> __ctx, Callback_Role_rename __cb)
    {
        return begin_rename(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rename(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rename_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rename_name, __cb);
        try
        {
            __result.__prepare(__rename_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_rename(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __rename_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean rename_async(AMI_Role_rename __cb, String name)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rename_name);
            __r = begin_rename(name, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rename_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean rename_async(AMI_Role_rename __cb, String name, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rename_name);
            __r = begin_rename(name, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rename_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __resetRole_name = "resetRole";

    public void resetRole()
        throws NoteException
    {
        resetRole(null, false);
    }

    public void resetRole(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        resetRole(__ctx, true);
    }

    private void resetRole(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "resetRole", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("resetRole");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.resetRole(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_resetRole()
    {
        return begin_resetRole(null, false, null);
    }

    public Ice.AsyncResult begin_resetRole(java.util.Map<String, String> __ctx)
    {
        return begin_resetRole(__ctx, true, null);
    }

    public Ice.AsyncResult begin_resetRole(Ice.Callback __cb)
    {
        return begin_resetRole(null, false, __cb);
    }

    public Ice.AsyncResult begin_resetRole(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_resetRole(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_resetRole(Callback_Role_resetRole __cb)
    {
        return begin_resetRole(null, false, __cb);
    }

    public Ice.AsyncResult begin_resetRole(java.util.Map<String, String> __ctx, Callback_Role_resetRole __cb)
    {
        return begin_resetRole(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_resetRole(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__resetRole_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __resetRole_name, __cb);
        try
        {
            __result.__prepare(__resetRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_resetRole(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __resetRole_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean resetRole_async(AMI_Role_resetRole __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetRole_name);
            __r = begin_resetRole(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetRole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean resetRole_async(AMI_Role_resetRole __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__resetRole_name);
            __r = begin_resetRole(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __resetRole_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __salary_name = "salary";

    public void salary()
        throws NoteException
    {
        salary(null, false);
    }

    public void salary(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        salary(__ctx, true);
    }

    private void salary(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "salary", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("salary");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.salary(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_salary()
    {
        return begin_salary(null, false, null);
    }

    public Ice.AsyncResult begin_salary(java.util.Map<String, String> __ctx)
    {
        return begin_salary(__ctx, true, null);
    }

    public Ice.AsyncResult begin_salary(Ice.Callback __cb)
    {
        return begin_salary(null, false, __cb);
    }

    public Ice.AsyncResult begin_salary(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_salary(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_salary(Callback_Role_salary __cb)
    {
        return begin_salary(null, false, __cb);
    }

    public Ice.AsyncResult begin_salary(java.util.Map<String, String> __ctx, Callback_Role_salary __cb)
    {
        return begin_salary(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_salary(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__salary_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __salary_name, __cb);
        try
        {
            __result.__prepare(__salary_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_salary(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __salary_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean salary_async(AMI_Role_salary __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__salary_name);
            __r = begin_salary(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __salary_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean salary_async(AMI_Role_salary __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__salary_name);
            __r = begin_salary(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __salary_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setHeadBorder_name = "setHeadBorder";

    public void setHeadBorder(String border)
        throws NoteException
    {
        setHeadBorder(border, null, false);
    }

    public void setHeadBorder(String border, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setHeadBorder(border, __ctx, true);
    }

    private void setHeadBorder(String border, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setHeadBorder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setHeadBorder");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.setHeadBorder(border, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setHeadBorder(String border)
    {
        return begin_setHeadBorder(border, null, false, null);
    }

    public Ice.AsyncResult begin_setHeadBorder(String border, java.util.Map<String, String> __ctx)
    {
        return begin_setHeadBorder(border, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setHeadBorder(String border, Ice.Callback __cb)
    {
        return begin_setHeadBorder(border, null, false, __cb);
    }

    public Ice.AsyncResult begin_setHeadBorder(String border, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setHeadBorder(border, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setHeadBorder(String border, Callback_Role_setHeadBorder __cb)
    {
        return begin_setHeadBorder(border, null, false, __cb);
    }

    public Ice.AsyncResult begin_setHeadBorder(String border, java.util.Map<String, String> __ctx, Callback_Role_setHeadBorder __cb)
    {
        return begin_setHeadBorder(border, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setHeadBorder(String border, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setHeadBorder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setHeadBorder_name, __cb);
        try
        {
            __result.__prepare(__setHeadBorder_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(border);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setHeadBorder(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setHeadBorder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setHeadBorder_async(AMI_Role_setHeadBorder __cb, String border)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeadBorder_name);
            __r = begin_setHeadBorder(border, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeadBorder_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setHeadBorder_async(AMI_Role_setHeadBorder __cb, String border, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeadBorder_name);
            __r = begin_setHeadBorder(border, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeadBorder_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setHeadImage_name = "setHeadImage";

    public void setHeadImage(String img)
        throws NoteException
    {
        setHeadImage(img, null, false);
    }

    public void setHeadImage(String img, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setHeadImage(img, __ctx, true);
    }

    private void setHeadImage(String img, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setHeadImage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setHeadImage");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.setHeadImage(img, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setHeadImage(String img)
    {
        return begin_setHeadImage(img, null, false, null);
    }

    public Ice.AsyncResult begin_setHeadImage(String img, java.util.Map<String, String> __ctx)
    {
        return begin_setHeadImage(img, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setHeadImage(String img, Ice.Callback __cb)
    {
        return begin_setHeadImage(img, null, false, __cb);
    }

    public Ice.AsyncResult begin_setHeadImage(String img, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setHeadImage(img, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setHeadImage(String img, Callback_Role_setHeadImage __cb)
    {
        return begin_setHeadImage(img, null, false, __cb);
    }

    public Ice.AsyncResult begin_setHeadImage(String img, java.util.Map<String, String> __ctx, Callback_Role_setHeadImage __cb)
    {
        return begin_setHeadImage(img, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setHeadImage(String img, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setHeadImage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setHeadImage_name, __cb);
        try
        {
            __result.__prepare(__setHeadImage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(img);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setHeadImage(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setHeadImage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setHeadImage_async(AMI_Role_setHeadImage __cb, String img)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeadImage_name);
            __r = begin_setHeadImage(img, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeadImage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setHeadImage_async(AMI_Role_setHeadImage __cb, String img, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setHeadImage_name);
            __r = begin_setHeadImage(img, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setHeadImage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setRoleCallback_name = "setRoleCallback";

    public String setRoleCallback(RoleCallbackPrx cb)
        throws NoteException
    {
        return setRoleCallback(cb, null, false);
    }

    public String setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return setRoleCallback(cb, __ctx, true);
    }

    private String setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setRoleCallback", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setRoleCallback");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.setRoleCallback(cb, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb)
    {
        return begin_setRoleCallback(cb, null, false, null);
    }

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        return begin_setRoleCallback(cb, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, Ice.Callback __cb)
    {
        return begin_setRoleCallback(cb, null, false, __cb);
    }

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setRoleCallback(cb, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, Callback_Role_setRoleCallback __cb)
    {
        return begin_setRoleCallback(cb, null, false, __cb);
    }

    public Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_Role_setRoleCallback __cb)
    {
        return begin_setRoleCallback(cb, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setRoleCallback(RoleCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setRoleCallback_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setRoleCallback_name, __cb);
        try
        {
            __result.__prepare(__setRoleCallback_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            RoleCallbackPrxHelper.__write(__os, cb);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_setRoleCallback(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setRoleCallback_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setRoleCallback_async(AMI_Role_setRoleCallback __cb, RoleCallbackPrx cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setRoleCallback_name);
            __r = begin_setRoleCallback(cb, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setRoleCallback_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setRoleCallback_async(AMI_Role_setRoleCallback __cb, RoleCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setRoleCallback_name);
            __r = begin_setRoleCallback(cb, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setRoleCallback_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setSexAndName_name = "setSexAndName";

    public String setSexAndName(int sex, String name, String inviteCode)
        throws NoteException
    {
        return setSexAndName(sex, name, inviteCode, null, false);
    }

    public String setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return setSexAndName(sex, name, inviteCode, __ctx, true);
    }

    private String setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setSexAndName", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setSexAndName");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    return __del.setSexAndName(sex, name, inviteCode, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode)
    {
        return begin_setSexAndName(sex, name, inviteCode, null, false, null);
    }

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx)
    {
        return begin_setSexAndName(sex, name, inviteCode, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, Ice.Callback __cb)
    {
        return begin_setSexAndName(sex, name, inviteCode, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSexAndName(sex, name, inviteCode, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, Callback_Role_setSexAndName __cb)
    {
        return begin_setSexAndName(sex, name, inviteCode, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx, Callback_Role_setSexAndName __cb)
    {
        return begin_setSexAndName(sex, name, inviteCode, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSexAndName(int sex, String name, String inviteCode, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setSexAndName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSexAndName_name, __cb);
        try
        {
            __result.__prepare(__setSexAndName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(sex);
            __os.writeString(name);
            __os.writeString(inviteCode);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_setSexAndName(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setSexAndName_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setSexAndName_async(AMI_Role_setSexAndName __cb, int sex, String name, String inviteCode)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setSexAndName_name);
            __r = begin_setSexAndName(sex, name, inviteCode, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setSexAndName_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setSexAndName_async(AMI_Role_setSexAndName __cb, int sex, String name, String inviteCode, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setSexAndName_name);
            __r = begin_setSexAndName(sex, name, inviteCode, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setSexAndName_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __shareWeixin_name = "shareWeixin";

    public void shareWeixin()
        throws NoteException
    {
        shareWeixin(null, false);
    }

    public void shareWeixin(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        shareWeixin(__ctx, true);
    }

    private void shareWeixin(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "shareWeixin", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("shareWeixin");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.shareWeixin(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_shareWeixin()
    {
        return begin_shareWeixin(null, false, null);
    }

    public Ice.AsyncResult begin_shareWeixin(java.util.Map<String, String> __ctx)
    {
        return begin_shareWeixin(__ctx, true, null);
    }

    public Ice.AsyncResult begin_shareWeixin(Ice.Callback __cb)
    {
        return begin_shareWeixin(null, false, __cb);
    }

    public Ice.AsyncResult begin_shareWeixin(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shareWeixin(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shareWeixin(Callback_Role_shareWeixin __cb)
    {
        return begin_shareWeixin(null, false, __cb);
    }

    public Ice.AsyncResult begin_shareWeixin(java.util.Map<String, String> __ctx, Callback_Role_shareWeixin __cb)
    {
        return begin_shareWeixin(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shareWeixin(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__shareWeixin_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shareWeixin_name, __cb);
        try
        {
            __result.__prepare(__shareWeixin_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_shareWeixin(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __shareWeixin_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean shareWeixin_async(AMI_Role_shareWeixin __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__shareWeixin_name);
            __r = begin_shareWeixin(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __shareWeixin_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean shareWeixin_async(AMI_Role_shareWeixin __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__shareWeixin_name);
            __r = begin_shareWeixin(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __shareWeixin_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __xsgPing_name = "xsgPing";

    public void xsgPing()
        throws NoteException
    {
        xsgPing(null, false);
    }

    public void xsgPing(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        xsgPing(__ctx, true);
    }

    private void xsgPing(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "xsgPing", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("xsgPing");
                    __delBase = __getDelegate(false);
                    _RoleDel __del = (_RoleDel)__delBase;
                    __del.xsgPing(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_xsgPing()
    {
        return begin_xsgPing(null, false, null);
    }

    public Ice.AsyncResult begin_xsgPing(java.util.Map<String, String> __ctx)
    {
        return begin_xsgPing(__ctx, true, null);
    }

    public Ice.AsyncResult begin_xsgPing(Ice.Callback __cb)
    {
        return begin_xsgPing(null, false, __cb);
    }

    public Ice.AsyncResult begin_xsgPing(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_xsgPing(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_xsgPing(Callback_Role_xsgPing __cb)
    {
        return begin_xsgPing(null, false, __cb);
    }

    public Ice.AsyncResult begin_xsgPing(java.util.Map<String, String> __ctx, Callback_Role_xsgPing __cb)
    {
        return begin_xsgPing(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_xsgPing(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__xsgPing_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __xsgPing_name, __cb);
        try
        {
            __result.__prepare(__xsgPing_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_xsgPing(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __xsgPing_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean xsgPing_async(AMI_Role_xsgPing __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__xsgPing_name);
            __r = begin_xsgPing(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __xsgPing_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean xsgPing_async(AMI_Role_xsgPing __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__xsgPing_name);
            __r = begin_xsgPing(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __xsgPing_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static RolePrx checkedCast(Ice.ObjectPrx __obj)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RolePrx)
            {
                __d = (RolePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    RolePrxHelper __h = new RolePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RolePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RolePrx)
            {
                __d = (RolePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    RolePrxHelper __h = new RolePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RolePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    RolePrxHelper __h = new RolePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RolePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    RolePrxHelper __h = new RolePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RolePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RolePrx)
            {
                __d = (RolePrx)__obj;
            }
            else
            {
                RolePrxHelper __h = new RolePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static RolePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            RolePrxHelper __h = new RolePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Role"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _RoleDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _RoleDelD();
    }

    public static void __write(IceInternal.BasicStream __os, RolePrx v)
    {
        __os.writeProxy(v);
    }

    public static RolePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RolePrxHelper result = new RolePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
