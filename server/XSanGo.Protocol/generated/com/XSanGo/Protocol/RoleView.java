// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Role.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class RoleView implements java.lang.Cloneable, java.io.Serializable
{
    public int[] completedGuides;

    public int sex;

    public String headImg;

    public ActivityAnnounceView[] activities;

    public String id;

    public String supportId;

    public String name;

    public short level;

    public int vip;

    public int topupYuanbao;

    public int exp;

    public int levelupExp;

    public short rank;

    public int remainSalaryTimes;

    public int compositeCombat;

    public int yuanbao;

    public long jinbi;

    public HeroView[] heroList;

    public ItemView[] items;

    public FormationView[] formations;

    public int vit;

    public int vitNum;

    public boolean hasFaction;

    public boolean hasFirstCharge;

    public String extend;

    public int maxTournamentRank;

    public long createDate;

    public long levelUpDate;

    public RoleView()
    {
    }

    public RoleView(int[] completedGuides, int sex, String headImg, ActivityAnnounceView[] activities, String id, String supportId, String name, short level, int vip, int topupYuanbao, int exp, int levelupExp, short rank, int remainSalaryTimes, int compositeCombat, int yuanbao, long jinbi, HeroView[] heroList, ItemView[] items, FormationView[] formations, int vit, int vitNum, boolean hasFaction, boolean hasFirstCharge, String extend, int maxTournamentRank, long createDate, long levelUpDate)
    {
        this.completedGuides = completedGuides;
        this.sex = sex;
        this.headImg = headImg;
        this.activities = activities;
        this.id = id;
        this.supportId = supportId;
        this.name = name;
        this.level = level;
        this.vip = vip;
        this.topupYuanbao = topupYuanbao;
        this.exp = exp;
        this.levelupExp = levelupExp;
        this.rank = rank;
        this.remainSalaryTimes = remainSalaryTimes;
        this.compositeCombat = compositeCombat;
        this.yuanbao = yuanbao;
        this.jinbi = jinbi;
        this.heroList = heroList;
        this.items = items;
        this.formations = formations;
        this.vit = vit;
        this.vitNum = vitNum;
        this.hasFaction = hasFaction;
        this.hasFirstCharge = hasFirstCharge;
        this.extend = extend;
        this.maxTournamentRank = maxTournamentRank;
        this.createDate = createDate;
        this.levelUpDate = levelUpDate;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RoleView _r = null;
        if(rhs instanceof RoleView)
        {
            _r = (RoleView)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(completedGuides, _r.completedGuides))
            {
                return false;
            }
            if(sex != _r.sex)
            {
                return false;
            }
            if(headImg != _r.headImg)
            {
                if(headImg == null || _r.headImg == null || !headImg.equals(_r.headImg))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(activities, _r.activities))
            {
                return false;
            }
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(supportId != _r.supportId)
            {
                if(supportId == null || _r.supportId == null || !supportId.equals(_r.supportId))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(level != _r.level)
            {
                return false;
            }
            if(vip != _r.vip)
            {
                return false;
            }
            if(topupYuanbao != _r.topupYuanbao)
            {
                return false;
            }
            if(exp != _r.exp)
            {
                return false;
            }
            if(levelupExp != _r.levelupExp)
            {
                return false;
            }
            if(rank != _r.rank)
            {
                return false;
            }
            if(remainSalaryTimes != _r.remainSalaryTimes)
            {
                return false;
            }
            if(compositeCombat != _r.compositeCombat)
            {
                return false;
            }
            if(yuanbao != _r.yuanbao)
            {
                return false;
            }
            if(jinbi != _r.jinbi)
            {
                return false;
            }
            if(!java.util.Arrays.equals(heroList, _r.heroList))
            {
                return false;
            }
            if(!java.util.Arrays.equals(items, _r.items))
            {
                return false;
            }
            if(!java.util.Arrays.equals(formations, _r.formations))
            {
                return false;
            }
            if(vit != _r.vit)
            {
                return false;
            }
            if(vitNum != _r.vitNum)
            {
                return false;
            }
            if(hasFaction != _r.hasFaction)
            {
                return false;
            }
            if(hasFirstCharge != _r.hasFirstCharge)
            {
                return false;
            }
            if(extend != _r.extend)
            {
                if(extend == null || _r.extend == null || !extend.equals(_r.extend))
                {
                    return false;
                }
            }
            if(maxTournamentRank != _r.maxTournamentRank)
            {
                return false;
            }
            if(createDate != _r.createDate)
            {
                return false;
            }
            if(levelUpDate != _r.levelUpDate)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::RoleView");
        __h = IceInternal.HashUtil.hashAdd(__h, completedGuides);
        __h = IceInternal.HashUtil.hashAdd(__h, sex);
        __h = IceInternal.HashUtil.hashAdd(__h, headImg);
        __h = IceInternal.HashUtil.hashAdd(__h, activities);
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, supportId);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, level);
        __h = IceInternal.HashUtil.hashAdd(__h, vip);
        __h = IceInternal.HashUtil.hashAdd(__h, topupYuanbao);
        __h = IceInternal.HashUtil.hashAdd(__h, exp);
        __h = IceInternal.HashUtil.hashAdd(__h, levelupExp);
        __h = IceInternal.HashUtil.hashAdd(__h, rank);
        __h = IceInternal.HashUtil.hashAdd(__h, remainSalaryTimes);
        __h = IceInternal.HashUtil.hashAdd(__h, compositeCombat);
        __h = IceInternal.HashUtil.hashAdd(__h, yuanbao);
        __h = IceInternal.HashUtil.hashAdd(__h, jinbi);
        __h = IceInternal.HashUtil.hashAdd(__h, heroList);
        __h = IceInternal.HashUtil.hashAdd(__h, items);
        __h = IceInternal.HashUtil.hashAdd(__h, formations);
        __h = IceInternal.HashUtil.hashAdd(__h, vit);
        __h = IceInternal.HashUtil.hashAdd(__h, vitNum);
        __h = IceInternal.HashUtil.hashAdd(__h, hasFaction);
        __h = IceInternal.HashUtil.hashAdd(__h, hasFirstCharge);
        __h = IceInternal.HashUtil.hashAdd(__h, extend);
        __h = IceInternal.HashUtil.hashAdd(__h, maxTournamentRank);
        __h = IceInternal.HashUtil.hashAdd(__h, createDate);
        __h = IceInternal.HashUtil.hashAdd(__h, levelUpDate);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        IntSeqHelper.write(__os, completedGuides);
        __os.writeInt(sex);
        __os.writeString(headImg);
        ActivityAnnounceViewSeqHelper.write(__os, activities);
        __os.writeString(id);
        __os.writeString(supportId);
        __os.writeString(name);
        __os.writeShort(level);
        __os.writeInt(vip);
        __os.writeInt(topupYuanbao);
        __os.writeInt(exp);
        __os.writeInt(levelupExp);
        __os.writeShort(rank);
        __os.writeInt(remainSalaryTimes);
        __os.writeInt(compositeCombat);
        __os.writeInt(yuanbao);
        __os.writeLong(jinbi);
        HeroViewSeqHelper.write(__os, heroList);
        ItemViewSeqHelper.write(__os, items);
        FormationViewSeqHelper.write(__os, formations);
        __os.writeInt(vit);
        __os.writeInt(vitNum);
        __os.writeBool(hasFaction);
        __os.writeBool(hasFirstCharge);
        __os.writeString(extend);
        __os.writeInt(maxTournamentRank);
        __os.writeLong(createDate);
        __os.writeLong(levelUpDate);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        completedGuides = IntSeqHelper.read(__is);
        sex = __is.readInt();
        headImg = __is.readString();
        activities = ActivityAnnounceViewSeqHelper.read(__is);
        id = __is.readString();
        supportId = __is.readString();
        name = __is.readString();
        level = __is.readShort();
        vip = __is.readInt();
        topupYuanbao = __is.readInt();
        exp = __is.readInt();
        levelupExp = __is.readInt();
        rank = __is.readShort();
        remainSalaryTimes = __is.readInt();
        compositeCombat = __is.readInt();
        yuanbao = __is.readInt();
        jinbi = __is.readLong();
        heroList = HeroViewSeqHelper.read(__is);
        items = ItemViewSeqHelper.read(__is);
        formations = FormationViewSeqHelper.read(__is);
        vit = __is.readInt();
        vitNum = __is.readInt();
        hasFaction = __is.readBool();
        hasFirstCharge = __is.readBool();
        extend = __is.readString();
        maxTournamentRank = __is.readInt();
        createDate = __is.readLong();
        levelUpDate = __is.readLong();
    }

    public static final long serialVersionUID = 1578974786L;
}
