// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Shop.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class ShopPrxHelper extends Ice.ObjectPrxHelperBase implements ShopPrx
{
    private static final String __buyItem_name = "buyItem";

    /**
     * 购买商品 type 0-商城 1-礼包
     **/
    public void buyItem(int num, String id, int type)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyItem(num, id, type, null, false);
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyItem(int num, String id, int type, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyItem(num, id, type, __ctx, true);
    }

    private void buyItem(int num, String id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyItem");
                    __delBase = __getDelegate(false);
                    _ShopDel __del = (_ShopDel)__delBase;
                    __del.buyItem(num, id, type, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyItem(int num, String id, int type)
    {
        return begin_buyItem(num, id, type, null, false, null);
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyItem(int num, String id, int type, java.util.Map<String, String> __ctx)
    {
        return begin_buyItem(num, id, type, __ctx, true, null);
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyItem(int num, String id, int type, Ice.Callback __cb)
    {
        return begin_buyItem(num, id, type, null, false, __cb);
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyItem(int num, String id, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyItem(num, id, type, __ctx, true, __cb);
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyItem(int num, String id, int type, Callback_Shop_buyItem __cb)
    {
        return begin_buyItem(num, id, type, null, false, __cb);
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyItem(int num, String id, int type, java.util.Map<String, String> __ctx, Callback_Shop_buyItem __cb)
    {
        return begin_buyItem(num, id, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyItem(int num, String id, int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyItem_name, __cb);
        try
        {
            __result.__prepare(__buyItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(num);
            __os.writeString(id);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_buyItem(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     **/
    public boolean buyItem_async(AMI_Shop_buyItem __cb, int num, String id, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyItem_name);
            __r = begin_buyItem(num, id, type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 购买商品 type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyItem_async(AMI_Shop_buyItem __cb, int num, String id, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyItem_name);
            __r = begin_buyItem(num, id, type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getShopView_name = "getShopView";

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     **/
    public String getShopView(int type)
        throws NoteException
    {
        return getShopView(type, null, false);
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getShopView(int type, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getShopView(type, __ctx, true);
    }

    private String getShopView(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getShopView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getShopView");
                    __delBase = __getDelegate(false);
                    _ShopDel __del = (_ShopDel)__delBase;
                    return __del.getShopView(type, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getShopView(int type)
    {
        return begin_getShopView(type, null, false, null);
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getShopView(int type, java.util.Map<String, String> __ctx)
    {
        return begin_getShopView(type, __ctx, true, null);
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getShopView(int type, Ice.Callback __cb)
    {
        return begin_getShopView(type, null, false, __cb);
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getShopView(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getShopView(type, __ctx, true, __cb);
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getShopView(int type, Callback_Shop_getShopView __cb)
    {
        return begin_getShopView(type, null, false, __cb);
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getShopView(int type, java.util.Map<String, String> __ctx, Callback_Shop_getShopView __cb)
    {
        return begin_getShopView(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getShopView(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getShopView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getShopView_name, __cb);
        try
        {
            __result.__prepare(__getShopView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getShopView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getShopView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     **/
    public boolean getShopView_async(AMI_Shop_getShopView __cb, int type)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getShopView_name);
            __r = begin_getShopView(type, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getShopView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取商品列表 lua格式的ShopView[] type 0-商城 1-礼包
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getShopView_async(AMI_Shop_getShopView __cb, int type, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getShopView_name);
            __r = begin_getShopView(type, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getShopView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static ShopPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ShopPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ShopPrx)
            {
                __d = (ShopPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ShopPrxHelper __h = new ShopPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ShopPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ShopPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ShopPrx)
            {
                __d = (ShopPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ShopPrxHelper __h = new ShopPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ShopPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ShopPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ShopPrxHelper __h = new ShopPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ShopPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ShopPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ShopPrxHelper __h = new ShopPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ShopPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ShopPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ShopPrx)
            {
                __d = (ShopPrx)__obj;
            }
            else
            {
                ShopPrxHelper __h = new ShopPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ShopPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ShopPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ShopPrxHelper __h = new ShopPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Shop"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ShopDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ShopDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ShopPrx v)
    {
        __os.writeProxy(v);
    }

    public static ShopPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ShopPrxHelper result = new ShopPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
