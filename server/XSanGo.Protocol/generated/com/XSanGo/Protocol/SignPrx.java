// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Sign.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface SignPrx extends Ice.ObjectPrx
{
    public String openTheSignView();

    public String openTheSignView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openTheSignView();

    public Ice.AsyncResult begin_openTheSignView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openTheSignView(Ice.Callback __cb);

    public Ice.AsyncResult begin_openTheSignView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_openTheSignView(Callback_Sign_openTheSignView __cb);

    public Ice.AsyncResult begin_openTheSignView(java.util.Map<String, String> __ctx, Callback_Sign_openTheSignView __cb);

    public String end_openTheSignView(Ice.AsyncResult __result);

    public boolean openTheSignView_async(AMI_Sign_openTheSignView __cb);

    public boolean openTheSignView_async(AMI_Sign_openTheSignView __cb, java.util.Map<String, String> __ctx);

    public void signIn(String itemId)
        throws NotEnoughYuanBaoException,
               NoteException;

    public void signIn(String itemId, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_signIn(String itemId);

    public Ice.AsyncResult begin_signIn(String itemId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_signIn(String itemId, Ice.Callback __cb);

    public Ice.AsyncResult begin_signIn(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_signIn(String itemId, Callback_Sign_signIn __cb);

    public Ice.AsyncResult begin_signIn(String itemId, java.util.Map<String, String> __ctx, Callback_Sign_signIn __cb);

    public void end_signIn(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean signIn_async(AMI_Sign_signIn __cb, String itemId);

    public boolean signIn_async(AMI_Sign_signIn __cb, String itemId, java.util.Map<String, String> __ctx);

    public int autoResign()
        throws NotEnoughYuanBaoException,
               NoteException;

    public int autoResign(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_autoResign();

    public Ice.AsyncResult begin_autoResign(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_autoResign(Ice.Callback __cb);

    public Ice.AsyncResult begin_autoResign(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_autoResign(Callback_Sign_autoResign __cb);

    public Ice.AsyncResult begin_autoResign(java.util.Map<String, String> __ctx, Callback_Sign_autoResign __cb);

    public int end_autoResign(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean autoResign_async(AMI_Sign_autoResign __cb);

    public boolean autoResign_async(AMI_Sign_autoResign __cb, java.util.Map<String, String> __ctx);

    public void collectGiftPack(int count)
        throws NoteException;

    public void collectGiftPack(int count, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_collectGiftPack(int count);

    public Ice.AsyncResult begin_collectGiftPack(int count, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_collectGiftPack(int count, Ice.Callback __cb);

    public Ice.AsyncResult begin_collectGiftPack(int count, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_collectGiftPack(int count, Callback_Sign_collectGiftPack __cb);

    public Ice.AsyncResult begin_collectGiftPack(int count, java.util.Map<String, String> __ctx, Callback_Sign_collectGiftPack __cb);

    public void end_collectGiftPack(Ice.AsyncResult __result)
        throws NoteException;

    public boolean collectGiftPack_async(AMI_Sign_collectGiftPack __cb, int count);

    public boolean collectGiftPack_async(AMI_Sign_collectGiftPack __cb, int count, java.util.Map<String, String> __ctx);

    public String reqLottery()
        throws NoteException;

    public String reqLottery(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_reqLottery();

    public Ice.AsyncResult begin_reqLottery(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_reqLottery(Ice.Callback __cb);

    public Ice.AsyncResult begin_reqLottery(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_reqLottery(Callback_Sign_reqLottery __cb);

    public Ice.AsyncResult begin_reqLottery(java.util.Map<String, String> __ctx, Callback_Sign_reqLottery __cb);

    public String end_reqLottery(Ice.AsyncResult __result)
        throws NoteException;

    public boolean reqLottery_async(AMI_Sign_reqLottery __cb);

    public boolean reqLottery_async(AMI_Sign_reqLottery __cb, java.util.Map<String, String> __ctx);

    public String roulette()
        throws NotEnoughMoneyException;

    public String roulette(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException;

    public Ice.AsyncResult begin_roulette();

    public Ice.AsyncResult begin_roulette(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_roulette(Ice.Callback __cb);

    public Ice.AsyncResult begin_roulette(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_roulette(Callback_Sign_roulette __cb);

    public Ice.AsyncResult begin_roulette(java.util.Map<String, String> __ctx, Callback_Sign_roulette __cb);

    public String end_roulette(Ice.AsyncResult __result)
        throws NotEnoughMoneyException;

    public boolean roulette_async(AMI_Sign_roulette __cb);

    public boolean roulette_async(AMI_Sign_roulette __cb, java.util.Map<String, String> __ctx);

    public String cdkey(String cdkeyCode)
        throws NoteException;

    public String cdkey(String cdkeyCode, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_cdkey(String cdkeyCode);

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, Ice.Callback __cb);

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, Callback_Sign_cdkey __cb);

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, java.util.Map<String, String> __ctx, Callback_Sign_cdkey __cb);

    public String end_cdkey(Ice.AsyncResult __result)
        throws NoteException;

    public boolean cdkey_async(AMI_Sign_cdkey __cb, String cdkeyCode);

    public boolean cdkey_async(AMI_Sign_cdkey __cb, String cdkeyCode, java.util.Map<String, String> __ctx);

    public String inviteCode(String code)
        throws NoteException;

    public String inviteCode(String code, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_inviteCode(String code);

    public Ice.AsyncResult begin_inviteCode(String code, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_inviteCode(String code, Ice.Callback __cb);

    public Ice.AsyncResult begin_inviteCode(String code, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_inviteCode(String code, Callback_Sign_inviteCode __cb);

    public Ice.AsyncResult begin_inviteCode(String code, java.util.Map<String, String> __ctx, Callback_Sign_inviteCode __cb);

    public String end_inviteCode(Ice.AsyncResult __result)
        throws NoteException;

    public boolean inviteCode_async(AMI_Sign_inviteCode __cb, String code);

    public boolean inviteCode_async(AMI_Sign_inviteCode __cb, String code, java.util.Map<String, String> __ctx);

    public void broadcastLastLottery();

    public void broadcastLastLottery(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_broadcastLastLottery();

    public Ice.AsyncResult begin_broadcastLastLottery(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_broadcastLastLottery(Ice.Callback __cb);

    public Ice.AsyncResult begin_broadcastLastLottery(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_broadcastLastLottery(Callback_Sign_broadcastLastLottery __cb);

    public Ice.AsyncResult begin_broadcastLastLottery(java.util.Map<String, String> __ctx, Callback_Sign_broadcastLastLottery __cb);

    public void end_broadcastLastLottery(Ice.AsyncResult __result);

    public boolean broadcastLastLottery_async(AMI_Sign_broadcastLastLottery __cb);

    public boolean broadcastLastLottery_async(AMI_Sign_broadcastLastLottery __cb, java.util.Map<String, String> __ctx);
}
