// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Sign.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class SignPrxHelper extends Ice.ObjectPrxHelperBase implements SignPrx
{
    private static final String __autoResign_name = "autoResign";

    public int autoResign()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return autoResign(null, false);
    }

    public int autoResign(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return autoResign(__ctx, true);
    }

    private int autoResign(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "autoResign", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("autoResign");
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    return __del.autoResign(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_autoResign()
    {
        return begin_autoResign(null, false, null);
    }

    public Ice.AsyncResult begin_autoResign(java.util.Map<String, String> __ctx)
    {
        return begin_autoResign(__ctx, true, null);
    }

    public Ice.AsyncResult begin_autoResign(Ice.Callback __cb)
    {
        return begin_autoResign(null, false, __cb);
    }

    public Ice.AsyncResult begin_autoResign(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_autoResign(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_autoResign(Callback_Sign_autoResign __cb)
    {
        return begin_autoResign(null, false, __cb);
    }

    public Ice.AsyncResult begin_autoResign(java.util.Map<String, String> __ctx, Callback_Sign_autoResign __cb)
    {
        return begin_autoResign(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_autoResign(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__autoResign_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __autoResign_name, __cb);
        try
        {
            __result.__prepare(__autoResign_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_autoResign(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __autoResign_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean autoResign_async(AMI_Sign_autoResign __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__autoResign_name);
            __r = begin_autoResign(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __autoResign_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean autoResign_async(AMI_Sign_autoResign __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__autoResign_name);
            __r = begin_autoResign(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __autoResign_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __broadcastLastLottery_name = "broadcastLastLottery";

    public void broadcastLastLottery()
    {
        broadcastLastLottery(null, false);
    }

    public void broadcastLastLottery(java.util.Map<String, String> __ctx)
    {
        broadcastLastLottery(__ctx, true);
    }

    private void broadcastLastLottery(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "broadcastLastLottery", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    __del.broadcastLastLottery(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_broadcastLastLottery()
    {
        return begin_broadcastLastLottery(null, false, null);
    }

    public Ice.AsyncResult begin_broadcastLastLottery(java.util.Map<String, String> __ctx)
    {
        return begin_broadcastLastLottery(__ctx, true, null);
    }

    public Ice.AsyncResult begin_broadcastLastLottery(Ice.Callback __cb)
    {
        return begin_broadcastLastLottery(null, false, __cb);
    }

    public Ice.AsyncResult begin_broadcastLastLottery(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_broadcastLastLottery(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_broadcastLastLottery(Callback_Sign_broadcastLastLottery __cb)
    {
        return begin_broadcastLastLottery(null, false, __cb);
    }

    public Ice.AsyncResult begin_broadcastLastLottery(java.util.Map<String, String> __ctx, Callback_Sign_broadcastLastLottery __cb)
    {
        return begin_broadcastLastLottery(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_broadcastLastLottery(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __broadcastLastLottery_name, __cb);
        try
        {
            __result.__prepare(__broadcastLastLottery_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_broadcastLastLottery(Ice.AsyncResult __result)
    {
        __end(__result, __broadcastLastLottery_name);
    }

    public boolean broadcastLastLottery_async(AMI_Sign_broadcastLastLottery __cb)
    {
        Ice.AsyncResult __r = begin_broadcastLastLottery(null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean broadcastLastLottery_async(AMI_Sign_broadcastLastLottery __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_broadcastLastLottery(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __cdkey_name = "cdkey";

    public String cdkey(String cdkeyCode)
        throws NoteException
    {
        return cdkey(cdkeyCode, null, false);
    }

    public String cdkey(String cdkeyCode, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return cdkey(cdkeyCode, __ctx, true);
    }

    private String cdkey(String cdkeyCode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "cdkey", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("cdkey");
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    return __del.cdkey(cdkeyCode, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_cdkey(String cdkeyCode)
    {
        return begin_cdkey(cdkeyCode, null, false, null);
    }

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, java.util.Map<String, String> __ctx)
    {
        return begin_cdkey(cdkeyCode, __ctx, true, null);
    }

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, Ice.Callback __cb)
    {
        return begin_cdkey(cdkeyCode, null, false, __cb);
    }

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cdkey(cdkeyCode, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, Callback_Sign_cdkey __cb)
    {
        return begin_cdkey(cdkeyCode, null, false, __cb);
    }

    public Ice.AsyncResult begin_cdkey(String cdkeyCode, java.util.Map<String, String> __ctx, Callback_Sign_cdkey __cb)
    {
        return begin_cdkey(cdkeyCode, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_cdkey(String cdkeyCode, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__cdkey_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __cdkey_name, __cb);
        try
        {
            __result.__prepare(__cdkey_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cdkeyCode);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_cdkey(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __cdkey_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean cdkey_async(AMI_Sign_cdkey __cb, String cdkeyCode)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__cdkey_name);
            __r = begin_cdkey(cdkeyCode, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __cdkey_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean cdkey_async(AMI_Sign_cdkey __cb, String cdkeyCode, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__cdkey_name);
            __r = begin_cdkey(cdkeyCode, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __cdkey_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __collectGiftPack_name = "collectGiftPack";

    public void collectGiftPack(int count)
        throws NoteException
    {
        collectGiftPack(count, null, false);
    }

    public void collectGiftPack(int count, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        collectGiftPack(count, __ctx, true);
    }

    private void collectGiftPack(int count, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "collectGiftPack", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("collectGiftPack");
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    __del.collectGiftPack(count, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_collectGiftPack(int count)
    {
        return begin_collectGiftPack(count, null, false, null);
    }

    public Ice.AsyncResult begin_collectGiftPack(int count, java.util.Map<String, String> __ctx)
    {
        return begin_collectGiftPack(count, __ctx, true, null);
    }

    public Ice.AsyncResult begin_collectGiftPack(int count, Ice.Callback __cb)
    {
        return begin_collectGiftPack(count, null, false, __cb);
    }

    public Ice.AsyncResult begin_collectGiftPack(int count, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_collectGiftPack(count, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_collectGiftPack(int count, Callback_Sign_collectGiftPack __cb)
    {
        return begin_collectGiftPack(count, null, false, __cb);
    }

    public Ice.AsyncResult begin_collectGiftPack(int count, java.util.Map<String, String> __ctx, Callback_Sign_collectGiftPack __cb)
    {
        return begin_collectGiftPack(count, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_collectGiftPack(int count, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__collectGiftPack_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __collectGiftPack_name, __cb);
        try
        {
            __result.__prepare(__collectGiftPack_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(count);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_collectGiftPack(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __collectGiftPack_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean collectGiftPack_async(AMI_Sign_collectGiftPack __cb, int count)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__collectGiftPack_name);
            __r = begin_collectGiftPack(count, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __collectGiftPack_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean collectGiftPack_async(AMI_Sign_collectGiftPack __cb, int count, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__collectGiftPack_name);
            __r = begin_collectGiftPack(count, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __collectGiftPack_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __inviteCode_name = "inviteCode";

    public String inviteCode(String code)
        throws NoteException
    {
        return inviteCode(code, null, false);
    }

    public String inviteCode(String code, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return inviteCode(code, __ctx, true);
    }

    private String inviteCode(String code, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "inviteCode", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("inviteCode");
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    return __del.inviteCode(code, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_inviteCode(String code)
    {
        return begin_inviteCode(code, null, false, null);
    }

    public Ice.AsyncResult begin_inviteCode(String code, java.util.Map<String, String> __ctx)
    {
        return begin_inviteCode(code, __ctx, true, null);
    }

    public Ice.AsyncResult begin_inviteCode(String code, Ice.Callback __cb)
    {
        return begin_inviteCode(code, null, false, __cb);
    }

    public Ice.AsyncResult begin_inviteCode(String code, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_inviteCode(code, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_inviteCode(String code, Callback_Sign_inviteCode __cb)
    {
        return begin_inviteCode(code, null, false, __cb);
    }

    public Ice.AsyncResult begin_inviteCode(String code, java.util.Map<String, String> __ctx, Callback_Sign_inviteCode __cb)
    {
        return begin_inviteCode(code, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_inviteCode(String code, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__inviteCode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __inviteCode_name, __cb);
        try
        {
            __result.__prepare(__inviteCode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(code);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_inviteCode(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __inviteCode_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean inviteCode_async(AMI_Sign_inviteCode __cb, String code)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__inviteCode_name);
            __r = begin_inviteCode(code, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __inviteCode_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean inviteCode_async(AMI_Sign_inviteCode __cb, String code, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__inviteCode_name);
            __r = begin_inviteCode(code, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __inviteCode_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openTheSignView_name = "openTheSignView";

    public String openTheSignView()
    {
        return openTheSignView(null, false);
    }

    public String openTheSignView(java.util.Map<String, String> __ctx)
    {
        return openTheSignView(__ctx, true);
    }

    private String openTheSignView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openTheSignView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openTheSignView");
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    return __del.openTheSignView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_openTheSignView()
    {
        return begin_openTheSignView(null, false, null);
    }

    public Ice.AsyncResult begin_openTheSignView(java.util.Map<String, String> __ctx)
    {
        return begin_openTheSignView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_openTheSignView(Ice.Callback __cb)
    {
        return begin_openTheSignView(null, false, __cb);
    }

    public Ice.AsyncResult begin_openTheSignView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openTheSignView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_openTheSignView(Callback_Sign_openTheSignView __cb)
    {
        return begin_openTheSignView(null, false, __cb);
    }

    public Ice.AsyncResult begin_openTheSignView(java.util.Map<String, String> __ctx, Callback_Sign_openTheSignView __cb)
    {
        return begin_openTheSignView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openTheSignView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openTheSignView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openTheSignView_name, __cb);
        try
        {
            __result.__prepare(__openTheSignView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_openTheSignView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __openTheSignView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean openTheSignView_async(AMI_Sign_openTheSignView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openTheSignView_name);
            __r = begin_openTheSignView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openTheSignView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean openTheSignView_async(AMI_Sign_openTheSignView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openTheSignView_name);
            __r = begin_openTheSignView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openTheSignView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __reqLottery_name = "reqLottery";

    public String reqLottery()
        throws NoteException
    {
        return reqLottery(null, false);
    }

    public String reqLottery(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return reqLottery(__ctx, true);
    }

    private String reqLottery(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "reqLottery", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("reqLottery");
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    return __del.reqLottery(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_reqLottery()
    {
        return begin_reqLottery(null, false, null);
    }

    public Ice.AsyncResult begin_reqLottery(java.util.Map<String, String> __ctx)
    {
        return begin_reqLottery(__ctx, true, null);
    }

    public Ice.AsyncResult begin_reqLottery(Ice.Callback __cb)
    {
        return begin_reqLottery(null, false, __cb);
    }

    public Ice.AsyncResult begin_reqLottery(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reqLottery(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_reqLottery(Callback_Sign_reqLottery __cb)
    {
        return begin_reqLottery(null, false, __cb);
    }

    public Ice.AsyncResult begin_reqLottery(java.util.Map<String, String> __ctx, Callback_Sign_reqLottery __cb)
    {
        return begin_reqLottery(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reqLottery(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__reqLottery_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reqLottery_name, __cb);
        try
        {
            __result.__prepare(__reqLottery_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_reqLottery(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __reqLottery_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean reqLottery_async(AMI_Sign_reqLottery __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__reqLottery_name);
            __r = begin_reqLottery(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __reqLottery_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean reqLottery_async(AMI_Sign_reqLottery __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__reqLottery_name);
            __r = begin_reqLottery(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __reqLottery_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __roulette_name = "roulette";

    public String roulette()
        throws NotEnoughMoneyException
    {
        return roulette(null, false);
    }

    public String roulette(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException
    {
        return roulette(__ctx, true);
    }

    private String roulette(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "roulette", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("roulette");
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    return __del.roulette(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_roulette()
    {
        return begin_roulette(null, false, null);
    }

    public Ice.AsyncResult begin_roulette(java.util.Map<String, String> __ctx)
    {
        return begin_roulette(__ctx, true, null);
    }

    public Ice.AsyncResult begin_roulette(Ice.Callback __cb)
    {
        return begin_roulette(null, false, __cb);
    }

    public Ice.AsyncResult begin_roulette(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_roulette(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_roulette(Callback_Sign_roulette __cb)
    {
        return begin_roulette(null, false, __cb);
    }

    public Ice.AsyncResult begin_roulette(java.util.Map<String, String> __ctx, Callback_Sign_roulette __cb)
    {
        return begin_roulette(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_roulette(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__roulette_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __roulette_name, __cb);
        try
        {
            __result.__prepare(__roulette_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_roulette(Ice.AsyncResult __result)
        throws NotEnoughMoneyException
    {
        Ice.AsyncResult.__check(__result, this, __roulette_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean roulette_async(AMI_Sign_roulette __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__roulette_name);
            __r = begin_roulette(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __roulette_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean roulette_async(AMI_Sign_roulette __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__roulette_name);
            __r = begin_roulette(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __roulette_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __signIn_name = "signIn";

    public void signIn(String itemId)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        signIn(itemId, null, false);
    }

    public void signIn(String itemId, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        signIn(itemId, __ctx, true);
    }

    private void signIn(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "signIn", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("signIn");
                    __delBase = __getDelegate(false);
                    _SignDel __del = (_SignDel)__delBase;
                    __del.signIn(itemId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_signIn(String itemId)
    {
        return begin_signIn(itemId, null, false, null);
    }

    public Ice.AsyncResult begin_signIn(String itemId, java.util.Map<String, String> __ctx)
    {
        return begin_signIn(itemId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_signIn(String itemId, Ice.Callback __cb)
    {
        return begin_signIn(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_signIn(String itemId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_signIn(itemId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_signIn(String itemId, Callback_Sign_signIn __cb)
    {
        return begin_signIn(itemId, null, false, __cb);
    }

    public Ice.AsyncResult begin_signIn(String itemId, java.util.Map<String, String> __ctx, Callback_Sign_signIn __cb)
    {
        return begin_signIn(itemId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_signIn(String itemId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__signIn_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __signIn_name, __cb);
        try
        {
            __result.__prepare(__signIn_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(itemId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_signIn(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __signIn_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean signIn_async(AMI_Sign_signIn __cb, String itemId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__signIn_name);
            __r = begin_signIn(itemId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __signIn_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean signIn_async(AMI_Sign_signIn __cb, String itemId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__signIn_name);
            __r = begin_signIn(itemId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __signIn_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static SignPrx checkedCast(Ice.ObjectPrx __obj)
    {
        SignPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SignPrx)
            {
                __d = (SignPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    SignPrxHelper __h = new SignPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SignPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SignPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SignPrx)
            {
                __d = (SignPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    SignPrxHelper __h = new SignPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SignPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SignPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    SignPrxHelper __h = new SignPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SignPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SignPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    SignPrxHelper __h = new SignPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SignPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        SignPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SignPrx)
            {
                __d = (SignPrx)__obj;
            }
            else
            {
                SignPrxHelper __h = new SignPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SignPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SignPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SignPrxHelper __h = new SignPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Sign"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _SignDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _SignDelD();
    }

    public static void __write(IceInternal.BasicStream __os, SignPrx v)
    {
        __os.writeProxy(v);
    }

    public static SignPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SignPrxHelper result = new SignPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
