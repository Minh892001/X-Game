// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Tournament.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class SignupView implements java.lang.Cloneable, java.io.Serializable
{
    public int num;

    public String currentStageDesc;

    public String startSignupDate;

    public String startRaceDate;

    public int isOpen;

    public int hasSignup;

    public int canSignup;

    public String showDesc;

    public TournamentView mainView;

    public SignupView()
    {
    }

    public SignupView(int num, String currentStageDesc, String startSignupDate, String startRaceDate, int isOpen, int hasSignup, int canSignup, String showDesc, TournamentView mainView)
    {
        this.num = num;
        this.currentStageDesc = currentStageDesc;
        this.startSignupDate = startSignupDate;
        this.startRaceDate = startRaceDate;
        this.isOpen = isOpen;
        this.hasSignup = hasSignup;
        this.canSignup = canSignup;
        this.showDesc = showDesc;
        this.mainView = mainView;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SignupView _r = null;
        if(rhs instanceof SignupView)
        {
            _r = (SignupView)rhs;
        }

        if(_r != null)
        {
            if(num != _r.num)
            {
                return false;
            }
            if(currentStageDesc != _r.currentStageDesc)
            {
                if(currentStageDesc == null || _r.currentStageDesc == null || !currentStageDesc.equals(_r.currentStageDesc))
                {
                    return false;
                }
            }
            if(startSignupDate != _r.startSignupDate)
            {
                if(startSignupDate == null || _r.startSignupDate == null || !startSignupDate.equals(_r.startSignupDate))
                {
                    return false;
                }
            }
            if(startRaceDate != _r.startRaceDate)
            {
                if(startRaceDate == null || _r.startRaceDate == null || !startRaceDate.equals(_r.startRaceDate))
                {
                    return false;
                }
            }
            if(isOpen != _r.isOpen)
            {
                return false;
            }
            if(hasSignup != _r.hasSignup)
            {
                return false;
            }
            if(canSignup != _r.canSignup)
            {
                return false;
            }
            if(showDesc != _r.showDesc)
            {
                if(showDesc == null || _r.showDesc == null || !showDesc.equals(_r.showDesc))
                {
                    return false;
                }
            }
            if(mainView != _r.mainView)
            {
                if(mainView == null || _r.mainView == null || !mainView.equals(_r.mainView))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::SignupView");
        __h = IceInternal.HashUtil.hashAdd(__h, num);
        __h = IceInternal.HashUtil.hashAdd(__h, currentStageDesc);
        __h = IceInternal.HashUtil.hashAdd(__h, startSignupDate);
        __h = IceInternal.HashUtil.hashAdd(__h, startRaceDate);
        __h = IceInternal.HashUtil.hashAdd(__h, isOpen);
        __h = IceInternal.HashUtil.hashAdd(__h, hasSignup);
        __h = IceInternal.HashUtil.hashAdd(__h, canSignup);
        __h = IceInternal.HashUtil.hashAdd(__h, showDesc);
        __h = IceInternal.HashUtil.hashAdd(__h, mainView);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(num);
        __os.writeString(currentStageDesc);
        __os.writeString(startSignupDate);
        __os.writeString(startRaceDate);
        __os.writeInt(isOpen);
        __os.writeInt(hasSignup);
        __os.writeInt(canSignup);
        __os.writeString(showDesc);
        mainView.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        num = __is.readInt();
        currentStageDesc = __is.readString();
        startSignupDate = __is.readString();
        startRaceDate = __is.readString();
        isOpen = __is.readInt();
        hasSignup = __is.readInt();
        canSignup = __is.readInt();
        showDesc = __is.readString();
        mainView = new TournamentView();
        mainView.__read(__is);
    }

    public static final long serialVersionUID = 283549641L;
}
