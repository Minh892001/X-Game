// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Copy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class SmallCopyView implements java.lang.Cloneable, java.io.Serializable
{
    public short challengeTime;

    public short maxTime;

    public int clearTokenCount;

    public boolean hasAllStar;

    public String firstAllStar;

    public int firstAllStarLvl;

    public int resetCount;

    public String refreshTime;

    public int needMilitaryOrder;

    public SmallCopyView()
    {
    }

    public SmallCopyView(short challengeTime, short maxTime, int clearTokenCount, boolean hasAllStar, String firstAllStar, int firstAllStarLvl, int resetCount, String refreshTime, int needMilitaryOrder)
    {
        this.challengeTime = challengeTime;
        this.maxTime = maxTime;
        this.clearTokenCount = clearTokenCount;
        this.hasAllStar = hasAllStar;
        this.firstAllStar = firstAllStar;
        this.firstAllStarLvl = firstAllStarLvl;
        this.resetCount = resetCount;
        this.refreshTime = refreshTime;
        this.needMilitaryOrder = needMilitaryOrder;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SmallCopyView _r = null;
        if(rhs instanceof SmallCopyView)
        {
            _r = (SmallCopyView)rhs;
        }

        if(_r != null)
        {
            if(challengeTime != _r.challengeTime)
            {
                return false;
            }
            if(maxTime != _r.maxTime)
            {
                return false;
            }
            if(clearTokenCount != _r.clearTokenCount)
            {
                return false;
            }
            if(hasAllStar != _r.hasAllStar)
            {
                return false;
            }
            if(firstAllStar != _r.firstAllStar)
            {
                if(firstAllStar == null || _r.firstAllStar == null || !firstAllStar.equals(_r.firstAllStar))
                {
                    return false;
                }
            }
            if(firstAllStarLvl != _r.firstAllStarLvl)
            {
                return false;
            }
            if(resetCount != _r.resetCount)
            {
                return false;
            }
            if(refreshTime != _r.refreshTime)
            {
                if(refreshTime == null || _r.refreshTime == null || !refreshTime.equals(_r.refreshTime))
                {
                    return false;
                }
            }
            if(needMilitaryOrder != _r.needMilitaryOrder)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::SmallCopyView");
        __h = IceInternal.HashUtil.hashAdd(__h, challengeTime);
        __h = IceInternal.HashUtil.hashAdd(__h, maxTime);
        __h = IceInternal.HashUtil.hashAdd(__h, clearTokenCount);
        __h = IceInternal.HashUtil.hashAdd(__h, hasAllStar);
        __h = IceInternal.HashUtil.hashAdd(__h, firstAllStar);
        __h = IceInternal.HashUtil.hashAdd(__h, firstAllStarLvl);
        __h = IceInternal.HashUtil.hashAdd(__h, resetCount);
        __h = IceInternal.HashUtil.hashAdd(__h, refreshTime);
        __h = IceInternal.HashUtil.hashAdd(__h, needMilitaryOrder);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeShort(challengeTime);
        __os.writeShort(maxTime);
        __os.writeInt(clearTokenCount);
        __os.writeBool(hasAllStar);
        __os.writeString(firstAllStar);
        __os.writeInt(firstAllStarLvl);
        __os.writeInt(resetCount);
        __os.writeString(refreshTime);
        __os.writeInt(needMilitaryOrder);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        challengeTime = __is.readShort();
        maxTime = __is.readShort();
        clearTokenCount = __is.readInt();
        hasAllStar = __is.readBool();
        firstAllStar = __is.readString();
        firstAllStarLvl = __is.readInt();
        resetCount = __is.readInt();
        refreshTime = __is.readString();
        needMilitaryOrder = __is.readInt();
    }

    public static final long serialVersionUID = -750822998L;
}
