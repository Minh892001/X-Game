// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SmithyExchange.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class SmithyExchangePrxHelper extends Ice.ObjectPrxHelperBase implements SmithyExchangePrx
{
    private static final String __exchangeBlueItem_name = "exchangeBlueItem";

    public String exchangeBlueItem(int storId)
        throws NoteException
    {
        return exchangeBlueItem(storId, null, false);
    }

    public String exchangeBlueItem(int storId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return exchangeBlueItem(storId, __ctx, true);
    }

    private String exchangeBlueItem(int storId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exchangeBlueItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exchangeBlueItem");
                    __delBase = __getDelegate(false);
                    _SmithyExchangeDel __del = (_SmithyExchangeDel)__delBase;
                    return __del.exchangeBlueItem(storId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_exchangeBlueItem(int storId)
    {
        return begin_exchangeBlueItem(storId, null, false, null);
    }

    public Ice.AsyncResult begin_exchangeBlueItem(int storId, java.util.Map<String, String> __ctx)
    {
        return begin_exchangeBlueItem(storId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_exchangeBlueItem(int storId, Ice.Callback __cb)
    {
        return begin_exchangeBlueItem(storId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeBlueItem(int storId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exchangeBlueItem(storId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_exchangeBlueItem(int storId, Callback_SmithyExchange_exchangeBlueItem __cb)
    {
        return begin_exchangeBlueItem(storId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeBlueItem(int storId, java.util.Map<String, String> __ctx, Callback_SmithyExchange_exchangeBlueItem __cb)
    {
        return begin_exchangeBlueItem(storId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exchangeBlueItem(int storId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exchangeBlueItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exchangeBlueItem_name, __cb);
        try
        {
            __result.__prepare(__exchangeBlueItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(storId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_exchangeBlueItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exchangeBlueItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean exchangeBlueItem_async(AMI_SmithyExchange_exchangeBlueItem __cb, int storId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeBlueItem_name);
            __r = begin_exchangeBlueItem(storId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeBlueItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean exchangeBlueItem_async(AMI_SmithyExchange_exchangeBlueItem __cb, int storId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeBlueItem_name);
            __r = begin_exchangeBlueItem(storId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeBlueItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __exchangeItem_name = "exchangeItem";

    public String exchangeItem(int storId)
        throws NoteException
    {
        return exchangeItem(storId, null, false);
    }

    public String exchangeItem(int storId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return exchangeItem(storId, __ctx, true);
    }

    private String exchangeItem(int storId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "exchangeItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("exchangeItem");
                    __delBase = __getDelegate(false);
                    _SmithyExchangeDel __del = (_SmithyExchangeDel)__delBase;
                    return __del.exchangeItem(storId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_exchangeItem(int storId)
    {
        return begin_exchangeItem(storId, null, false, null);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx)
    {
        return begin_exchangeItem(storId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, Ice.Callback __cb)
    {
        return begin_exchangeItem(storId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_exchangeItem(storId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, Callback_SmithyExchange_exchangeItem __cb)
    {
        return begin_exchangeItem(storId, null, false, __cb);
    }

    public Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx, Callback_SmithyExchange_exchangeItem __cb)
    {
        return begin_exchangeItem(storId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_exchangeItem(int storId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__exchangeItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
        try
        {
            __result.__prepare(__exchangeItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(storId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_exchangeItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __exchangeItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean exchangeItem_async(AMI_SmithyExchange_exchangeItem __cb, int storId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeItem_name);
            __r = begin_exchangeItem(storId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean exchangeItem_async(AMI_SmithyExchange_exchangeItem __cb, int storId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__exchangeItem_name);
            __r = begin_exchangeItem(storId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __exchangeItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __preview_name = "preview";

    public String preview()
        throws NoteException
    {
        return preview(null, false);
    }

    public String preview(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return preview(__ctx, true);
    }

    private String preview(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "preview", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("preview");
                    __delBase = __getDelegate(false);
                    _SmithyExchangeDel __del = (_SmithyExchangeDel)__delBase;
                    return __del.preview(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_preview()
    {
        return begin_preview(null, false, null);
    }

    public Ice.AsyncResult begin_preview(java.util.Map<String, String> __ctx)
    {
        return begin_preview(__ctx, true, null);
    }

    public Ice.AsyncResult begin_preview(Ice.Callback __cb)
    {
        return begin_preview(null, false, __cb);
    }

    public Ice.AsyncResult begin_preview(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_preview(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_preview(Callback_SmithyExchange_preview __cb)
    {
        return begin_preview(null, false, __cb);
    }

    public Ice.AsyncResult begin_preview(java.util.Map<String, String> __ctx, Callback_SmithyExchange_preview __cb)
    {
        return begin_preview(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_preview(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__preview_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __preview_name, __cb);
        try
        {
            __result.__prepare(__preview_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_preview(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __preview_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean preview_async(AMI_SmithyExchange_preview __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__preview_name);
            __r = begin_preview(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __preview_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean preview_async(AMI_SmithyExchange_preview __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__preview_name);
            __r = begin_preview(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __preview_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refBlueMallList_name = "refBlueMallList";

    public String refBlueMallList()
        throws NotEnoughMoneyException,
               NoteException
    {
        return refBlueMallList(null, false);
    }

    public String refBlueMallList(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return refBlueMallList(__ctx, true);
    }

    private String refBlueMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refBlueMallList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refBlueMallList");
                    __delBase = __getDelegate(false);
                    _SmithyExchangeDel __del = (_SmithyExchangeDel)__delBase;
                    return __del.refBlueMallList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_refBlueMallList()
    {
        return begin_refBlueMallList(null, false, null);
    }

    public Ice.AsyncResult begin_refBlueMallList(java.util.Map<String, String> __ctx)
    {
        return begin_refBlueMallList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_refBlueMallList(Ice.Callback __cb)
    {
        return begin_refBlueMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_refBlueMallList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refBlueMallList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_refBlueMallList(Callback_SmithyExchange_refBlueMallList __cb)
    {
        return begin_refBlueMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_refBlueMallList(java.util.Map<String, String> __ctx, Callback_SmithyExchange_refBlueMallList __cb)
    {
        return begin_refBlueMallList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refBlueMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refBlueMallList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refBlueMallList_name, __cb);
        try
        {
            __result.__prepare(__refBlueMallList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_refBlueMallList(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refBlueMallList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean refBlueMallList_async(AMI_SmithyExchange_refBlueMallList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refBlueMallList_name);
            __r = begin_refBlueMallList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refBlueMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean refBlueMallList_async(AMI_SmithyExchange_refBlueMallList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refBlueMallList_name);
            __r = begin_refBlueMallList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refBlueMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refMallList_name = "refMallList";

    public String refMallList()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return refMallList(null, false);
    }

    public String refMallList(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return refMallList(__ctx, true);
    }

    private String refMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refMallList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refMallList");
                    __delBase = __getDelegate(false);
                    _SmithyExchangeDel __del = (_SmithyExchangeDel)__delBase;
                    return __del.refMallList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_refMallList()
    {
        return begin_refMallList(null, false, null);
    }

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx)
    {
        return begin_refMallList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_refMallList(Ice.Callback __cb)
    {
        return begin_refMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refMallList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_refMallList(Callback_SmithyExchange_refMallList __cb)
    {
        return begin_refMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx, Callback_SmithyExchange_refMallList __cb)
    {
        return begin_refMallList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refMallList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refMallList_name, __cb);
        try
        {
            __result.__prepare(__refMallList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_refMallList(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refMallList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean refMallList_async(AMI_SmithyExchange_refMallList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refMallList_name);
            __r = begin_refMallList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean refMallList_async(AMI_SmithyExchange_refMallList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refMallList_name);
            __r = begin_refMallList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selBlueMallList_name = "selBlueMallList";

    public String selBlueMallList()
        throws NoteException
    {
        return selBlueMallList(null, false);
    }

    public String selBlueMallList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selBlueMallList(__ctx, true);
    }

    private String selBlueMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selBlueMallList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selBlueMallList");
                    __delBase = __getDelegate(false);
                    _SmithyExchangeDel __del = (_SmithyExchangeDel)__delBase;
                    return __del.selBlueMallList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selBlueMallList()
    {
        return begin_selBlueMallList(null, false, null);
    }

    public Ice.AsyncResult begin_selBlueMallList(java.util.Map<String, String> __ctx)
    {
        return begin_selBlueMallList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selBlueMallList(Ice.Callback __cb)
    {
        return begin_selBlueMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_selBlueMallList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selBlueMallList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selBlueMallList(Callback_SmithyExchange_selBlueMallList __cb)
    {
        return begin_selBlueMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_selBlueMallList(java.util.Map<String, String> __ctx, Callback_SmithyExchange_selBlueMallList __cb)
    {
        return begin_selBlueMallList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selBlueMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selBlueMallList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selBlueMallList_name, __cb);
        try
        {
            __result.__prepare(__selBlueMallList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selBlueMallList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selBlueMallList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selBlueMallList_async(AMI_SmithyExchange_selBlueMallList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selBlueMallList_name);
            __r = begin_selBlueMallList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selBlueMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selBlueMallList_async(AMI_SmithyExchange_selBlueMallList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selBlueMallList_name);
            __r = begin_selBlueMallList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selBlueMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selMallList_name = "selMallList";

    public String selMallList()
        throws NoteException
    {
        return selMallList(null, false);
    }

    public String selMallList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return selMallList(__ctx, true);
    }

    private String selMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selMallList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selMallList");
                    __delBase = __getDelegate(false);
                    _SmithyExchangeDel __del = (_SmithyExchangeDel)__delBase;
                    return __del.selMallList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selMallList()
    {
        return begin_selMallList(null, false, null);
    }

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx)
    {
        return begin_selMallList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_selMallList(Ice.Callback __cb)
    {
        return begin_selMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selMallList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selMallList(Callback_SmithyExchange_selMallList __cb)
    {
        return begin_selMallList(null, false, __cb);
    }

    public Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx, Callback_SmithyExchange_selMallList __cb)
    {
        return begin_selMallList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selMallList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selMallList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selMallList_name, __cb);
        try
        {
            __result.__prepare(__selMallList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selMallList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __selMallList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selMallList_async(AMI_SmithyExchange_selMallList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selMallList_name);
            __r = begin_selMallList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selMallList_async(AMI_SmithyExchange_selMallList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selMallList_name);
            __r = begin_selMallList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selMallList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static SmithyExchangePrx checkedCast(Ice.ObjectPrx __obj)
    {
        SmithyExchangePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SmithyExchangePrx)
            {
                __d = (SmithyExchangePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    SmithyExchangePrxHelper __h = new SmithyExchangePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SmithyExchangePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SmithyExchangePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SmithyExchangePrx)
            {
                __d = (SmithyExchangePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    SmithyExchangePrxHelper __h = new SmithyExchangePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SmithyExchangePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SmithyExchangePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    SmithyExchangePrxHelper __h = new SmithyExchangePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SmithyExchangePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SmithyExchangePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    SmithyExchangePrxHelper __h = new SmithyExchangePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SmithyExchangePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        SmithyExchangePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SmithyExchangePrx)
            {
                __d = (SmithyExchangePrx)__obj;
            }
            else
            {
                SmithyExchangePrxHelper __h = new SmithyExchangePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SmithyExchangePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SmithyExchangePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SmithyExchangePrxHelper __h = new SmithyExchangePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::SmithyExchange"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _SmithyExchangeDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _SmithyExchangeDelD();
    }

    public static void __write(IceInternal.BasicStream __os, SmithyExchangePrx v)
    {
        __os.writeProxy(v);
    }

    public static SmithyExchangePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SmithyExchangePrxHelper result = new SmithyExchangePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
