// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Sns.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface SnsPrx extends Ice.ObjectPrx
{
    public void applyForFriend(String targetPlayer)
        throws NoteException;

    public void applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer);

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, Ice.Callback __cb);

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, Callback_Sns_applyForFriend __cb);

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_applyForFriend __cb);

    public void end_applyForFriend(Ice.AsyncResult __result)
        throws NoteException;

    public boolean applyForFriend_async(AMI_Sns_applyForFriend __cb, String targetPlayer);

    public boolean applyForFriend_async(AMI_Sns_applyForFriend __cb, String targetPlayer, java.util.Map<String, String> __ctx);

    public void accept(String player)
        throws NoteException;

    public void accept(String player, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_accept(String player);

    public Ice.AsyncResult begin_accept(String player, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_accept(String player, Ice.Callback __cb);

    public Ice.AsyncResult begin_accept(String player, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_accept(String player, Callback_Sns_accept __cb);

    public Ice.AsyncResult begin_accept(String player, java.util.Map<String, String> __ctx, Callback_Sns_accept __cb);

    public void end_accept(Ice.AsyncResult __result)
        throws NoteException;

    public boolean accept_async(AMI_Sns_accept __cb, String player);

    public boolean accept_async(AMI_Sns_accept __cb, String player, java.util.Map<String, String> __ctx);

    public void refuse(String player);

    public void refuse(String player, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_refuse(String player);

    public Ice.AsyncResult begin_refuse(String player, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_refuse(String player, Ice.Callback __cb);

    public Ice.AsyncResult begin_refuse(String player, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_refuse(String player, Callback_Sns_refuse __cb);

    public Ice.AsyncResult begin_refuse(String player, java.util.Map<String, String> __ctx, Callback_Sns_refuse __cb);

    public void end_refuse(Ice.AsyncResult __result);

    public boolean refuse_async(AMI_Sns_refuse __cb, String player);

    public boolean refuse_async(AMI_Sns_refuse __cb, String player, java.util.Map<String, String> __ctx);

    public void removeFriend(String targetPlayer);

    public void removeFriend(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_removeFriend(String targetPlayer);

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, Ice.Callback __cb);

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, Callback_Sns_removeFriend __cb);

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_removeFriend __cb);

    public void end_removeFriend(Ice.AsyncResult __result);

    public boolean removeFriend_async(AMI_Sns_removeFriend __cb, String targetPlayer);

    public boolean removeFriend_async(AMI_Sns_removeFriend __cb, String targetPlayer, java.util.Map<String, String> __ctx);

    public String untreatedFriendApplyings();

    public String untreatedFriendApplyings(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_untreatedFriendApplyings();

    public Ice.AsyncResult begin_untreatedFriendApplyings(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_untreatedFriendApplyings(Ice.Callback __cb);

    public Ice.AsyncResult begin_untreatedFriendApplyings(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_untreatedFriendApplyings(Callback_Sns_untreatedFriendApplyings __cb);

    public Ice.AsyncResult begin_untreatedFriendApplyings(java.util.Map<String, String> __ctx, Callback_Sns_untreatedFriendApplyings __cb);

    public String end_untreatedFriendApplyings(Ice.AsyncResult __result);

    public boolean untreatedFriendApplyings_async(AMI_Sns_untreatedFriendApplyings __cb);

    public boolean untreatedFriendApplyings_async(AMI_Sns_untreatedFriendApplyings __cb, java.util.Map<String, String> __ctx);

    public void addFoe(String targetPlayer)
        throws NoteException;

    public void addFoe(String targetPlayer, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_addFoe(String targetPlayer);

    public Ice.AsyncResult begin_addFoe(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_addFoe(String targetPlayer, Ice.Callback __cb);

    public Ice.AsyncResult begin_addFoe(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_addFoe(String targetPlayer, Callback_Sns_addFoe __cb);

    public Ice.AsyncResult begin_addFoe(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_addFoe __cb);

    public void end_addFoe(Ice.AsyncResult __result)
        throws NoteException;

    public boolean addFoe_async(AMI_Sns_addFoe __cb, String targetPlayer);

    public boolean addFoe_async(AMI_Sns_addFoe __cb, String targetPlayer, java.util.Map<String, String> __ctx);

    public void removeFoe(String targetPlayer);

    public void removeFoe(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_removeFoe(String targetPlayer);

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, Ice.Callback __cb);

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, Callback_Sns_removeFoe __cb);

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_removeFoe __cb);

    public void end_removeFoe(Ice.AsyncResult __result);

    public boolean removeFoe_async(AMI_Sns_removeFoe __cb, String targetPlayer);

    public boolean removeFoe_async(AMI_Sns_removeFoe __cb, String targetPlayer, java.util.Map<String, String> __ctx);

    public void cleanFoes();

    public void cleanFoes(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_cleanFoes();

    public Ice.AsyncResult begin_cleanFoes(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_cleanFoes(Ice.Callback __cb);

    public Ice.AsyncResult begin_cleanFoes(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_cleanFoes(Callback_Sns_cleanFoes __cb);

    public Ice.AsyncResult begin_cleanFoes(java.util.Map<String, String> __ctx, Callback_Sns_cleanFoes __cb);

    public void end_cleanFoes(Ice.AsyncResult __result);

    public boolean cleanFoes_async(AMI_Sns_cleanFoes __cb);

    public boolean cleanFoes_async(AMI_Sns_cleanFoes __cb, java.util.Map<String, String> __ctx);

    public void addBlacklist(String targetPlayer)
        throws NoteException;

    public void addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer);

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, Ice.Callback __cb);

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, Callback_Sns_addBlacklist __cb);

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_addBlacklist __cb);

    public void end_addBlacklist(Ice.AsyncResult __result)
        throws NoteException;

    public boolean addBlacklist_async(AMI_Sns_addBlacklist __cb, String targetPlayer);

    public boolean addBlacklist_async(AMI_Sns_addBlacklist __cb, String targetPlayer, java.util.Map<String, String> __ctx);

    public void removeBlacklist(String targetPlayer);

    public void removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer);

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, Ice.Callback __cb);

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, Callback_Sns_removeBlacklist __cb);

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_removeBlacklist __cb);

    public void end_removeBlacklist(Ice.AsyncResult __result);

    public boolean removeBlacklist_async(AMI_Sns_removeBlacklist __cb, String targetPlayer);

    public boolean removeBlacklist_async(AMI_Sns_removeBlacklist __cb, String targetPlayer, java.util.Map<String, String> __ctx);

    public void cleanBlacklist();

    public void cleanBlacklist(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_cleanBlacklist();

    public Ice.AsyncResult begin_cleanBlacklist(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_cleanBlacklist(Ice.Callback __cb);

    public Ice.AsyncResult begin_cleanBlacklist(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_cleanBlacklist(Callback_Sns_cleanBlacklist __cb);

    public Ice.AsyncResult begin_cleanBlacklist(java.util.Map<String, String> __ctx, Callback_Sns_cleanBlacklist __cb);

    public void end_cleanBlacklist(Ice.AsyncResult __result);

    public boolean cleanBlacklist_async(AMI_Sns_cleanBlacklist __cb);

    public boolean cleanBlacklist_async(AMI_Sns_cleanBlacklist __cb, java.util.Map<String, String> __ctx);

    public String queryAllFreinds();

    public String queryAllFreinds(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryAllFreinds();

    public Ice.AsyncResult begin_queryAllFreinds(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryAllFreinds(Ice.Callback __cb);

    public Ice.AsyncResult begin_queryAllFreinds(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_queryAllFreinds(Callback_Sns_queryAllFreinds __cb);

    public Ice.AsyncResult begin_queryAllFreinds(java.util.Map<String, String> __ctx, Callback_Sns_queryAllFreinds __cb);

    public String end_queryAllFreinds(Ice.AsyncResult __result);

    public boolean queryAllFreinds_async(AMI_Sns_queryAllFreinds __cb);

    public boolean queryAllFreinds_async(AMI_Sns_queryAllFreinds __cb, java.util.Map<String, String> __ctx);

    public String queryAllFreindsView();

    public String queryAllFreindsView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryAllFreindsView();

    public Ice.AsyncResult begin_queryAllFreindsView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryAllFreindsView(Ice.Callback __cb);

    public Ice.AsyncResult begin_queryAllFreindsView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_queryAllFreindsView(Callback_Sns_queryAllFreindsView __cb);

    public Ice.AsyncResult begin_queryAllFreindsView(java.util.Map<String, String> __ctx, Callback_Sns_queryAllFreindsView __cb);

    public String end_queryAllFreindsView(Ice.AsyncResult __result);

    public boolean queryAllFreindsView_async(AMI_Sns_queryAllFreindsView __cb);

    public boolean queryAllFreindsView_async(AMI_Sns_queryAllFreindsView __cb, java.util.Map<String, String> __ctx);

    public String queryPlayersLike(int type, String partOfNickname);

    public String queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname);

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, Ice.Callback __cb);

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, Callback_Sns_queryPlayersLike __cb);

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx, Callback_Sns_queryPlayersLike __cb);

    public String end_queryPlayersLike(Ice.AsyncResult __result);

    public boolean queryPlayersLike_async(AMI_Sns_queryPlayersLike __cb, int type, String partOfNickname);

    public boolean queryPlayersLike_async(AMI_Sns_queryPlayersLike __cb, int type, String partOfNickname, java.util.Map<String, String> __ctx);

    public String changeMorePlayers()
        throws NoteException;

    public String changeMorePlayers(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_changeMorePlayers();

    public Ice.AsyncResult begin_changeMorePlayers(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_changeMorePlayers(Ice.Callback __cb);

    public Ice.AsyncResult begin_changeMorePlayers(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_changeMorePlayers(Callback_Sns_changeMorePlayers __cb);

    public Ice.AsyncResult begin_changeMorePlayers(java.util.Map<String, String> __ctx, Callback_Sns_changeMorePlayers __cb);

    public String end_changeMorePlayers(Ice.AsyncResult __result)
        throws NoteException;

    public boolean changeMorePlayers_async(AMI_Sns_changeMorePlayers __cb);

    public boolean changeMorePlayers_async(AMI_Sns_changeMorePlayers __cb, java.util.Map<String, String> __ctx);

    public String queryAllFoes();

    public String queryAllFoes(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryAllFoes();

    public Ice.AsyncResult begin_queryAllFoes(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryAllFoes(Ice.Callback __cb);

    public Ice.AsyncResult begin_queryAllFoes(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_queryAllFoes(Callback_Sns_queryAllFoes __cb);

    public Ice.AsyncResult begin_queryAllFoes(java.util.Map<String, String> __ctx, Callback_Sns_queryAllFoes __cb);

    public String end_queryAllFoes(Ice.AsyncResult __result);

    public boolean queryAllFoes_async(AMI_Sns_queryAllFoes __cb);

    public boolean queryAllFoes_async(AMI_Sns_queryAllFoes __cb, java.util.Map<String, String> __ctx);

    public String queryAllBlacklist();

    public String queryAllBlacklist(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryAllBlacklist();

    public Ice.AsyncResult begin_queryAllBlacklist(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryAllBlacklist(Ice.Callback __cb);

    public Ice.AsyncResult begin_queryAllBlacklist(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_queryAllBlacklist(Callback_Sns_queryAllBlacklist __cb);

    public Ice.AsyncResult begin_queryAllBlacklist(java.util.Map<String, String> __ctx, Callback_Sns_queryAllBlacklist __cb);

    public String end_queryAllBlacklist(Ice.AsyncResult __result);

    public boolean queryAllBlacklist_async(AMI_Sns_queryAllBlacklist __cb);

    public boolean queryAllBlacklist_async(AMI_Sns_queryAllBlacklist __cb, java.util.Map<String, String> __ctx);

    public int sendJunLing(String targetId)
        throws NoteException;

    public int sendJunLing(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_sendJunLing(String targetId);

    public Ice.AsyncResult begin_sendJunLing(String targetId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendJunLing(String targetId, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendJunLing(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendJunLing(String targetId, Callback_Sns_sendJunLing __cb);

    public Ice.AsyncResult begin_sendJunLing(String targetId, java.util.Map<String, String> __ctx, Callback_Sns_sendJunLing __cb);

    public int end_sendJunLing(Ice.AsyncResult __result)
        throws NoteException;

    public boolean sendJunLing_async(AMI_Sns_sendJunLing __cb, String targetId);

    public boolean sendJunLing_async(AMI_Sns_sendJunLing __cb, String targetId, java.util.Map<String, String> __ctx);

    public String acceptJunLing(String targetId)
        throws NoteException;

    public String acceptJunLing(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_acceptJunLing(String targetId);

    public Ice.AsyncResult begin_acceptJunLing(String targetId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_acceptJunLing(String targetId, Ice.Callback __cb);

    public Ice.AsyncResult begin_acceptJunLing(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_acceptJunLing(String targetId, Callback_Sns_acceptJunLing __cb);

    public Ice.AsyncResult begin_acceptJunLing(String targetId, java.util.Map<String, String> __ctx, Callback_Sns_acceptJunLing __cb);

    public String end_acceptJunLing(Ice.AsyncResult __result)
        throws NoteException;

    public boolean acceptJunLing_async(AMI_Sns_acceptJunLing __cb, String targetId);

    public boolean acceptJunLing_async(AMI_Sns_acceptJunLing __cb, String targetId, java.util.Map<String, String> __ctx);

    public String queryBattleRecordView()
        throws NoteException;

    public String queryBattleRecordView(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_queryBattleRecordView();

    public Ice.AsyncResult begin_queryBattleRecordView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_queryBattleRecordView(Ice.Callback __cb);

    public Ice.AsyncResult begin_queryBattleRecordView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_queryBattleRecordView(Callback_Sns_queryBattleRecordView __cb);

    public Ice.AsyncResult begin_queryBattleRecordView(java.util.Map<String, String> __ctx, Callback_Sns_queryBattleRecordView __cb);

    public String end_queryBattleRecordView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean queryBattleRecordView_async(AMI_Sns_queryBattleRecordView __cb);

    public boolean queryBattleRecordView_async(AMI_Sns_queryBattleRecordView __cb, java.util.Map<String, String> __ctx);
}
