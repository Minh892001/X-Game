// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Sns.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class SnsPrxHelper extends Ice.ObjectPrxHelperBase implements SnsPrx
{
    private static final String __accept_name = "accept";

    public void accept(String player)
        throws NoteException
    {
        accept(player, null, false);
    }

    public void accept(String player, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        accept(player, __ctx, true);
    }

    private void accept(String player, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "accept", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("accept");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.accept(player, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_accept(String player)
    {
        return begin_accept(player, null, false, null);
    }

    public Ice.AsyncResult begin_accept(String player, java.util.Map<String, String> __ctx)
    {
        return begin_accept(player, __ctx, true, null);
    }

    public Ice.AsyncResult begin_accept(String player, Ice.Callback __cb)
    {
        return begin_accept(player, null, false, __cb);
    }

    public Ice.AsyncResult begin_accept(String player, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_accept(player, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_accept(String player, Callback_Sns_accept __cb)
    {
        return begin_accept(player, null, false, __cb);
    }

    public Ice.AsyncResult begin_accept(String player, java.util.Map<String, String> __ctx, Callback_Sns_accept __cb)
    {
        return begin_accept(player, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_accept(String player, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__accept_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __accept_name, __cb);
        try
        {
            __result.__prepare(__accept_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(player);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_accept(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __accept_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean accept_async(AMI_Sns_accept __cb, String player)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__accept_name);
            __r = begin_accept(player, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __accept_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean accept_async(AMI_Sns_accept __cb, String player, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__accept_name);
            __r = begin_accept(player, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __accept_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __acceptJunLing_name = "acceptJunLing";

    public String acceptJunLing(String targetId)
        throws NoteException
    {
        return acceptJunLing(targetId, null, false);
    }

    public String acceptJunLing(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return acceptJunLing(targetId, __ctx, true);
    }

    private String acceptJunLing(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptJunLing", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptJunLing");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.acceptJunLing(targetId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptJunLing(String targetId)
    {
        return begin_acceptJunLing(targetId, null, false, null);
    }

    public Ice.AsyncResult begin_acceptJunLing(String targetId, java.util.Map<String, String> __ctx)
    {
        return begin_acceptJunLing(targetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptJunLing(String targetId, Ice.Callback __cb)
    {
        return begin_acceptJunLing(targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptJunLing(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptJunLing(targetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptJunLing(String targetId, Callback_Sns_acceptJunLing __cb)
    {
        return begin_acceptJunLing(targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptJunLing(String targetId, java.util.Map<String, String> __ctx, Callback_Sns_acceptJunLing __cb)
    {
        return begin_acceptJunLing(targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptJunLing(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptJunLing_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptJunLing_name, __cb);
        try
        {
            __result.__prepare(__acceptJunLing_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_acceptJunLing(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptJunLing_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptJunLing_async(AMI_Sns_acceptJunLing __cb, String targetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptJunLing_name);
            __r = begin_acceptJunLing(targetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptJunLing_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptJunLing_async(AMI_Sns_acceptJunLing __cb, String targetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptJunLing_name);
            __r = begin_acceptJunLing(targetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptJunLing_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __addBlacklist_name = "addBlacklist";

    public void addBlacklist(String targetPlayer)
        throws NoteException
    {
        addBlacklist(targetPlayer, null, false);
    }

    public void addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        addBlacklist(targetPlayer, __ctx, true);
    }

    private void addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addBlacklist", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addBlacklist");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.addBlacklist(targetPlayer, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer)
    {
        return begin_addBlacklist(targetPlayer, null, false, null);
    }

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        return begin_addBlacklist(targetPlayer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, Ice.Callback __cb)
    {
        return begin_addBlacklist(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addBlacklist(targetPlayer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, Callback_Sns_addBlacklist __cb)
    {
        return begin_addBlacklist(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_addBlacklist __cb)
    {
        return begin_addBlacklist(targetPlayer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addBlacklist_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addBlacklist_name, __cb);
        try
        {
            __result.__prepare(__addBlacklist_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetPlayer);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addBlacklist(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __addBlacklist_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean addBlacklist_async(AMI_Sns_addBlacklist __cb, String targetPlayer)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__addBlacklist_name);
            __r = begin_addBlacklist(targetPlayer, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __addBlacklist_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean addBlacklist_async(AMI_Sns_addBlacklist __cb, String targetPlayer, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__addBlacklist_name);
            __r = begin_addBlacklist(targetPlayer, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __addBlacklist_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __addFoe_name = "addFoe";

    public void addFoe(String targetPlayer)
        throws NoteException
    {
        addFoe(targetPlayer, null, false);
    }

    public void addFoe(String targetPlayer, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        addFoe(targetPlayer, __ctx, true);
    }

    private void addFoe(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addFoe", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addFoe");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.addFoe(targetPlayer, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addFoe(String targetPlayer)
    {
        return begin_addFoe(targetPlayer, null, false, null);
    }

    public Ice.AsyncResult begin_addFoe(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        return begin_addFoe(targetPlayer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addFoe(String targetPlayer, Ice.Callback __cb)
    {
        return begin_addFoe(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_addFoe(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addFoe(targetPlayer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addFoe(String targetPlayer, Callback_Sns_addFoe __cb)
    {
        return begin_addFoe(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_addFoe(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_addFoe __cb)
    {
        return begin_addFoe(targetPlayer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addFoe(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addFoe_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addFoe_name, __cb);
        try
        {
            __result.__prepare(__addFoe_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetPlayer);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addFoe(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __addFoe_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean addFoe_async(AMI_Sns_addFoe __cb, String targetPlayer)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__addFoe_name);
            __r = begin_addFoe(targetPlayer, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __addFoe_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean addFoe_async(AMI_Sns_addFoe __cb, String targetPlayer, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__addFoe_name);
            __r = begin_addFoe(targetPlayer, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __addFoe_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __applyForFriend_name = "applyForFriend";

    public void applyForFriend(String targetPlayer)
        throws NoteException
    {
        applyForFriend(targetPlayer, null, false);
    }

    public void applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        applyForFriend(targetPlayer, __ctx, true);
    }

    private void applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "applyForFriend", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("applyForFriend");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.applyForFriend(targetPlayer, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer)
    {
        return begin_applyForFriend(targetPlayer, null, false, null);
    }

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        return begin_applyForFriend(targetPlayer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, Ice.Callback __cb)
    {
        return begin_applyForFriend(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_applyForFriend(targetPlayer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, Callback_Sns_applyForFriend __cb)
    {
        return begin_applyForFriend(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_applyForFriend __cb)
    {
        return begin_applyForFriend(targetPlayer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_applyForFriend(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__applyForFriend_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __applyForFriend_name, __cb);
        try
        {
            __result.__prepare(__applyForFriend_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetPlayer);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_applyForFriend(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __applyForFriend_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean applyForFriend_async(AMI_Sns_applyForFriend __cb, String targetPlayer)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__applyForFriend_name);
            __r = begin_applyForFriend(targetPlayer, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __applyForFriend_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean applyForFriend_async(AMI_Sns_applyForFriend __cb, String targetPlayer, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__applyForFriend_name);
            __r = begin_applyForFriend(targetPlayer, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __applyForFriend_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __changeMorePlayers_name = "changeMorePlayers";

    public String changeMorePlayers()
        throws NoteException
    {
        return changeMorePlayers(null, false);
    }

    public String changeMorePlayers(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return changeMorePlayers(__ctx, true);
    }

    private String changeMorePlayers(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "changeMorePlayers", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("changeMorePlayers");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.changeMorePlayers(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_changeMorePlayers()
    {
        return begin_changeMorePlayers(null, false, null);
    }

    public Ice.AsyncResult begin_changeMorePlayers(java.util.Map<String, String> __ctx)
    {
        return begin_changeMorePlayers(__ctx, true, null);
    }

    public Ice.AsyncResult begin_changeMorePlayers(Ice.Callback __cb)
    {
        return begin_changeMorePlayers(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeMorePlayers(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeMorePlayers(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeMorePlayers(Callback_Sns_changeMorePlayers __cb)
    {
        return begin_changeMorePlayers(null, false, __cb);
    }

    public Ice.AsyncResult begin_changeMorePlayers(java.util.Map<String, String> __ctx, Callback_Sns_changeMorePlayers __cb)
    {
        return begin_changeMorePlayers(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeMorePlayers(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeMorePlayers_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeMorePlayers_name, __cb);
        try
        {
            __result.__prepare(__changeMorePlayers_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_changeMorePlayers(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __changeMorePlayers_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean changeMorePlayers_async(AMI_Sns_changeMorePlayers __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__changeMorePlayers_name);
            __r = begin_changeMorePlayers(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __changeMorePlayers_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean changeMorePlayers_async(AMI_Sns_changeMorePlayers __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__changeMorePlayers_name);
            __r = begin_changeMorePlayers(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __changeMorePlayers_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __cleanBlacklist_name = "cleanBlacklist";

    public void cleanBlacklist()
    {
        cleanBlacklist(null, false);
    }

    public void cleanBlacklist(java.util.Map<String, String> __ctx)
    {
        cleanBlacklist(__ctx, true);
    }

    private void cleanBlacklist(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "cleanBlacklist", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.cleanBlacklist(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_cleanBlacklist()
    {
        return begin_cleanBlacklist(null, false, null);
    }

    public Ice.AsyncResult begin_cleanBlacklist(java.util.Map<String, String> __ctx)
    {
        return begin_cleanBlacklist(__ctx, true, null);
    }

    public Ice.AsyncResult begin_cleanBlacklist(Ice.Callback __cb)
    {
        return begin_cleanBlacklist(null, false, __cb);
    }

    public Ice.AsyncResult begin_cleanBlacklist(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cleanBlacklist(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_cleanBlacklist(Callback_Sns_cleanBlacklist __cb)
    {
        return begin_cleanBlacklist(null, false, __cb);
    }

    public Ice.AsyncResult begin_cleanBlacklist(java.util.Map<String, String> __ctx, Callback_Sns_cleanBlacklist __cb)
    {
        return begin_cleanBlacklist(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_cleanBlacklist(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __cleanBlacklist_name, __cb);
        try
        {
            __result.__prepare(__cleanBlacklist_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_cleanBlacklist(Ice.AsyncResult __result)
    {
        __end(__result, __cleanBlacklist_name);
    }

    public boolean cleanBlacklist_async(AMI_Sns_cleanBlacklist __cb)
    {
        Ice.AsyncResult __r = begin_cleanBlacklist(null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean cleanBlacklist_async(AMI_Sns_cleanBlacklist __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_cleanBlacklist(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __cleanFoes_name = "cleanFoes";

    public void cleanFoes()
    {
        cleanFoes(null, false);
    }

    public void cleanFoes(java.util.Map<String, String> __ctx)
    {
        cleanFoes(__ctx, true);
    }

    private void cleanFoes(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "cleanFoes", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.cleanFoes(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_cleanFoes()
    {
        return begin_cleanFoes(null, false, null);
    }

    public Ice.AsyncResult begin_cleanFoes(java.util.Map<String, String> __ctx)
    {
        return begin_cleanFoes(__ctx, true, null);
    }

    public Ice.AsyncResult begin_cleanFoes(Ice.Callback __cb)
    {
        return begin_cleanFoes(null, false, __cb);
    }

    public Ice.AsyncResult begin_cleanFoes(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cleanFoes(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_cleanFoes(Callback_Sns_cleanFoes __cb)
    {
        return begin_cleanFoes(null, false, __cb);
    }

    public Ice.AsyncResult begin_cleanFoes(java.util.Map<String, String> __ctx, Callback_Sns_cleanFoes __cb)
    {
        return begin_cleanFoes(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_cleanFoes(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __cleanFoes_name, __cb);
        try
        {
            __result.__prepare(__cleanFoes_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_cleanFoes(Ice.AsyncResult __result)
    {
        __end(__result, __cleanFoes_name);
    }

    public boolean cleanFoes_async(AMI_Sns_cleanFoes __cb)
    {
        Ice.AsyncResult __r = begin_cleanFoes(null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean cleanFoes_async(AMI_Sns_cleanFoes __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_cleanFoes(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __queryAllBlacklist_name = "queryAllBlacklist";

    public String queryAllBlacklist()
    {
        return queryAllBlacklist(null, false);
    }

    public String queryAllBlacklist(java.util.Map<String, String> __ctx)
    {
        return queryAllBlacklist(__ctx, true);
    }

    private String queryAllBlacklist(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryAllBlacklist", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryAllBlacklist");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.queryAllBlacklist(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_queryAllBlacklist()
    {
        return begin_queryAllBlacklist(null, false, null);
    }

    public Ice.AsyncResult begin_queryAllBlacklist(java.util.Map<String, String> __ctx)
    {
        return begin_queryAllBlacklist(__ctx, true, null);
    }

    public Ice.AsyncResult begin_queryAllBlacklist(Ice.Callback __cb)
    {
        return begin_queryAllBlacklist(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryAllBlacklist(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryAllBlacklist(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_queryAllBlacklist(Callback_Sns_queryAllBlacklist __cb)
    {
        return begin_queryAllBlacklist(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryAllBlacklist(java.util.Map<String, String> __ctx, Callback_Sns_queryAllBlacklist __cb)
    {
        return begin_queryAllBlacklist(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryAllBlacklist(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryAllBlacklist_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryAllBlacklist_name, __cb);
        try
        {
            __result.__prepare(__queryAllBlacklist_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_queryAllBlacklist(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryAllBlacklist_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean queryAllBlacklist_async(AMI_Sns_queryAllBlacklist __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryAllBlacklist_name);
            __r = begin_queryAllBlacklist(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryAllBlacklist_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean queryAllBlacklist_async(AMI_Sns_queryAllBlacklist __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryAllBlacklist_name);
            __r = begin_queryAllBlacklist(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryAllBlacklist_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __queryAllFoes_name = "queryAllFoes";

    public String queryAllFoes()
    {
        return queryAllFoes(null, false);
    }

    public String queryAllFoes(java.util.Map<String, String> __ctx)
    {
        return queryAllFoes(__ctx, true);
    }

    private String queryAllFoes(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryAllFoes", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryAllFoes");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.queryAllFoes(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_queryAllFoes()
    {
        return begin_queryAllFoes(null, false, null);
    }

    public Ice.AsyncResult begin_queryAllFoes(java.util.Map<String, String> __ctx)
    {
        return begin_queryAllFoes(__ctx, true, null);
    }

    public Ice.AsyncResult begin_queryAllFoes(Ice.Callback __cb)
    {
        return begin_queryAllFoes(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryAllFoes(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryAllFoes(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_queryAllFoes(Callback_Sns_queryAllFoes __cb)
    {
        return begin_queryAllFoes(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryAllFoes(java.util.Map<String, String> __ctx, Callback_Sns_queryAllFoes __cb)
    {
        return begin_queryAllFoes(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryAllFoes(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryAllFoes_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryAllFoes_name, __cb);
        try
        {
            __result.__prepare(__queryAllFoes_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_queryAllFoes(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryAllFoes_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean queryAllFoes_async(AMI_Sns_queryAllFoes __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryAllFoes_name);
            __r = begin_queryAllFoes(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryAllFoes_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean queryAllFoes_async(AMI_Sns_queryAllFoes __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryAllFoes_name);
            __r = begin_queryAllFoes(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryAllFoes_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __queryAllFreinds_name = "queryAllFreinds";

    public String queryAllFreinds()
    {
        return queryAllFreinds(null, false);
    }

    public String queryAllFreinds(java.util.Map<String, String> __ctx)
    {
        return queryAllFreinds(__ctx, true);
    }

    private String queryAllFreinds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryAllFreinds", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryAllFreinds");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.queryAllFreinds(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_queryAllFreinds()
    {
        return begin_queryAllFreinds(null, false, null);
    }

    public Ice.AsyncResult begin_queryAllFreinds(java.util.Map<String, String> __ctx)
    {
        return begin_queryAllFreinds(__ctx, true, null);
    }

    public Ice.AsyncResult begin_queryAllFreinds(Ice.Callback __cb)
    {
        return begin_queryAllFreinds(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryAllFreinds(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryAllFreinds(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_queryAllFreinds(Callback_Sns_queryAllFreinds __cb)
    {
        return begin_queryAllFreinds(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryAllFreinds(java.util.Map<String, String> __ctx, Callback_Sns_queryAllFreinds __cb)
    {
        return begin_queryAllFreinds(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryAllFreinds(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryAllFreinds_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryAllFreinds_name, __cb);
        try
        {
            __result.__prepare(__queryAllFreinds_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_queryAllFreinds(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryAllFreinds_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean queryAllFreinds_async(AMI_Sns_queryAllFreinds __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryAllFreinds_name);
            __r = begin_queryAllFreinds(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryAllFreinds_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean queryAllFreinds_async(AMI_Sns_queryAllFreinds __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryAllFreinds_name);
            __r = begin_queryAllFreinds(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryAllFreinds_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __queryAllFreindsView_name = "queryAllFreindsView";

    public String queryAllFreindsView()
    {
        return queryAllFreindsView(null, false);
    }

    public String queryAllFreindsView(java.util.Map<String, String> __ctx)
    {
        return queryAllFreindsView(__ctx, true);
    }

    private String queryAllFreindsView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryAllFreindsView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryAllFreindsView");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.queryAllFreindsView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_queryAllFreindsView()
    {
        return begin_queryAllFreindsView(null, false, null);
    }

    public Ice.AsyncResult begin_queryAllFreindsView(java.util.Map<String, String> __ctx)
    {
        return begin_queryAllFreindsView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_queryAllFreindsView(Ice.Callback __cb)
    {
        return begin_queryAllFreindsView(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryAllFreindsView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryAllFreindsView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_queryAllFreindsView(Callback_Sns_queryAllFreindsView __cb)
    {
        return begin_queryAllFreindsView(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryAllFreindsView(java.util.Map<String, String> __ctx, Callback_Sns_queryAllFreindsView __cb)
    {
        return begin_queryAllFreindsView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryAllFreindsView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryAllFreindsView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryAllFreindsView_name, __cb);
        try
        {
            __result.__prepare(__queryAllFreindsView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_queryAllFreindsView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryAllFreindsView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean queryAllFreindsView_async(AMI_Sns_queryAllFreindsView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryAllFreindsView_name);
            __r = begin_queryAllFreindsView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryAllFreindsView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean queryAllFreindsView_async(AMI_Sns_queryAllFreindsView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryAllFreindsView_name);
            __r = begin_queryAllFreindsView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryAllFreindsView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __queryBattleRecordView_name = "queryBattleRecordView";

    public String queryBattleRecordView()
        throws NoteException
    {
        return queryBattleRecordView(null, false);
    }

    public String queryBattleRecordView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return queryBattleRecordView(__ctx, true);
    }

    private String queryBattleRecordView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryBattleRecordView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryBattleRecordView");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.queryBattleRecordView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_queryBattleRecordView()
    {
        return begin_queryBattleRecordView(null, false, null);
    }

    public Ice.AsyncResult begin_queryBattleRecordView(java.util.Map<String, String> __ctx)
    {
        return begin_queryBattleRecordView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_queryBattleRecordView(Ice.Callback __cb)
    {
        return begin_queryBattleRecordView(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryBattleRecordView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryBattleRecordView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_queryBattleRecordView(Callback_Sns_queryBattleRecordView __cb)
    {
        return begin_queryBattleRecordView(null, false, __cb);
    }

    public Ice.AsyncResult begin_queryBattleRecordView(java.util.Map<String, String> __ctx, Callback_Sns_queryBattleRecordView __cb)
    {
        return begin_queryBattleRecordView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryBattleRecordView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryBattleRecordView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryBattleRecordView_name, __cb);
        try
        {
            __result.__prepare(__queryBattleRecordView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_queryBattleRecordView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __queryBattleRecordView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean queryBattleRecordView_async(AMI_Sns_queryBattleRecordView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryBattleRecordView_name);
            __r = begin_queryBattleRecordView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryBattleRecordView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean queryBattleRecordView_async(AMI_Sns_queryBattleRecordView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryBattleRecordView_name);
            __r = begin_queryBattleRecordView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryBattleRecordView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __queryPlayersLike_name = "queryPlayersLike";

    public String queryPlayersLike(int type, String partOfNickname)
    {
        return queryPlayersLike(type, partOfNickname, null, false);
    }

    public String queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx)
    {
        return queryPlayersLike(type, partOfNickname, __ctx, true);
    }

    private String queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "queryPlayersLike", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("queryPlayersLike");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.queryPlayersLike(type, partOfNickname, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname)
    {
        return begin_queryPlayersLike(type, partOfNickname, null, false, null);
    }

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx)
    {
        return begin_queryPlayersLike(type, partOfNickname, __ctx, true, null);
    }

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, Ice.Callback __cb)
    {
        return begin_queryPlayersLike(type, partOfNickname, null, false, __cb);
    }

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryPlayersLike(type, partOfNickname, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, Callback_Sns_queryPlayersLike __cb)
    {
        return begin_queryPlayersLike(type, partOfNickname, null, false, __cb);
    }

    public Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx, Callback_Sns_queryPlayersLike __cb)
    {
        return begin_queryPlayersLike(type, partOfNickname, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryPlayersLike(int type, String partOfNickname, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryPlayersLike_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryPlayersLike_name, __cb);
        try
        {
            __result.__prepare(__queryPlayersLike_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __os.writeString(partOfNickname);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_queryPlayersLike(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryPlayersLike_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean queryPlayersLike_async(AMI_Sns_queryPlayersLike __cb, int type, String partOfNickname)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryPlayersLike_name);
            __r = begin_queryPlayersLike(type, partOfNickname, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryPlayersLike_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean queryPlayersLike_async(AMI_Sns_queryPlayersLike __cb, int type, String partOfNickname, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__queryPlayersLike_name);
            __r = begin_queryPlayersLike(type, partOfNickname, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __queryPlayersLike_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refuse_name = "refuse";

    public void refuse(String player)
    {
        refuse(player, null, false);
    }

    public void refuse(String player, java.util.Map<String, String> __ctx)
    {
        refuse(player, __ctx, true);
    }

    private void refuse(String player, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refuse", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.refuse(player, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_refuse(String player)
    {
        return begin_refuse(player, null, false, null);
    }

    public Ice.AsyncResult begin_refuse(String player, java.util.Map<String, String> __ctx)
    {
        return begin_refuse(player, __ctx, true, null);
    }

    public Ice.AsyncResult begin_refuse(String player, Ice.Callback __cb)
    {
        return begin_refuse(player, null, false, __cb);
    }

    public Ice.AsyncResult begin_refuse(String player, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refuse(player, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_refuse(String player, Callback_Sns_refuse __cb)
    {
        return begin_refuse(player, null, false, __cb);
    }

    public Ice.AsyncResult begin_refuse(String player, java.util.Map<String, String> __ctx, Callback_Sns_refuse __cb)
    {
        return begin_refuse(player, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refuse(String player, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refuse_name, __cb);
        try
        {
            __result.__prepare(__refuse_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(player);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_refuse(Ice.AsyncResult __result)
    {
        __end(__result, __refuse_name);
    }

    public boolean refuse_async(AMI_Sns_refuse __cb, String player)
    {
        Ice.AsyncResult __r = begin_refuse(player, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean refuse_async(AMI_Sns_refuse __cb, String player, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_refuse(player, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __removeBlacklist_name = "removeBlacklist";

    public void removeBlacklist(String targetPlayer)
    {
        removeBlacklist(targetPlayer, null, false);
    }

    public void removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        removeBlacklist(targetPlayer, __ctx, true);
    }

    private void removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeBlacklist", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.removeBlacklist(targetPlayer, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer)
    {
        return begin_removeBlacklist(targetPlayer, null, false, null);
    }

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        return begin_removeBlacklist(targetPlayer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, Ice.Callback __cb)
    {
        return begin_removeBlacklist(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeBlacklist(targetPlayer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, Callback_Sns_removeBlacklist __cb)
    {
        return begin_removeBlacklist(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_removeBlacklist __cb)
    {
        return begin_removeBlacklist(targetPlayer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeBlacklist(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeBlacklist_name, __cb);
        try
        {
            __result.__prepare(__removeBlacklist_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetPlayer);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeBlacklist(Ice.AsyncResult __result)
    {
        __end(__result, __removeBlacklist_name);
    }

    public boolean removeBlacklist_async(AMI_Sns_removeBlacklist __cb, String targetPlayer)
    {
        Ice.AsyncResult __r = begin_removeBlacklist(targetPlayer, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean removeBlacklist_async(AMI_Sns_removeBlacklist __cb, String targetPlayer, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_removeBlacklist(targetPlayer, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __removeFoe_name = "removeFoe";

    public void removeFoe(String targetPlayer)
    {
        removeFoe(targetPlayer, null, false);
    }

    public void removeFoe(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        removeFoe(targetPlayer, __ctx, true);
    }

    private void removeFoe(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeFoe", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.removeFoe(targetPlayer, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeFoe(String targetPlayer)
    {
        return begin_removeFoe(targetPlayer, null, false, null);
    }

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        return begin_removeFoe(targetPlayer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, Ice.Callback __cb)
    {
        return begin_removeFoe(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeFoe(targetPlayer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, Callback_Sns_removeFoe __cb)
    {
        return begin_removeFoe(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeFoe(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_removeFoe __cb)
    {
        return begin_removeFoe(targetPlayer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeFoe(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeFoe_name, __cb);
        try
        {
            __result.__prepare(__removeFoe_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetPlayer);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeFoe(Ice.AsyncResult __result)
    {
        __end(__result, __removeFoe_name);
    }

    public boolean removeFoe_async(AMI_Sns_removeFoe __cb, String targetPlayer)
    {
        Ice.AsyncResult __r = begin_removeFoe(targetPlayer, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean removeFoe_async(AMI_Sns_removeFoe __cb, String targetPlayer, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_removeFoe(targetPlayer, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __removeFriend_name = "removeFriend";

    public void removeFriend(String targetPlayer)
    {
        removeFriend(targetPlayer, null, false);
    }

    public void removeFriend(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        removeFriend(targetPlayer, __ctx, true);
    }

    private void removeFriend(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeFriend", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    __del.removeFriend(targetPlayer, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeFriend(String targetPlayer)
    {
        return begin_removeFriend(targetPlayer, null, false, null);
    }

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, java.util.Map<String, String> __ctx)
    {
        return begin_removeFriend(targetPlayer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, Ice.Callback __cb)
    {
        return begin_removeFriend(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeFriend(targetPlayer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, Callback_Sns_removeFriend __cb)
    {
        return begin_removeFriend(targetPlayer, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeFriend(String targetPlayer, java.util.Map<String, String> __ctx, Callback_Sns_removeFriend __cb)
    {
        return begin_removeFriend(targetPlayer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeFriend(String targetPlayer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeFriend_name, __cb);
        try
        {
            __result.__prepare(__removeFriend_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetPlayer);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeFriend(Ice.AsyncResult __result)
    {
        __end(__result, __removeFriend_name);
    }

    public boolean removeFriend_async(AMI_Sns_removeFriend __cb, String targetPlayer)
    {
        Ice.AsyncResult __r = begin_removeFriend(targetPlayer, null, false, __cb);
        return __r.sentSynchronously();
    }

    public boolean removeFriend_async(AMI_Sns_removeFriend __cb, String targetPlayer, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_removeFriend(targetPlayer, __ctx, true, __cb);
        return __r.sentSynchronously();
    }

    private static final String __sendJunLing_name = "sendJunLing";

    public int sendJunLing(String targetId)
        throws NoteException
    {
        return sendJunLing(targetId, null, false);
    }

    public int sendJunLing(String targetId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return sendJunLing(targetId, __ctx, true);
    }

    private int sendJunLing(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendJunLing", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendJunLing");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.sendJunLing(targetId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendJunLing(String targetId)
    {
        return begin_sendJunLing(targetId, null, false, null);
    }

    public Ice.AsyncResult begin_sendJunLing(String targetId, java.util.Map<String, String> __ctx)
    {
        return begin_sendJunLing(targetId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendJunLing(String targetId, Ice.Callback __cb)
    {
        return begin_sendJunLing(targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendJunLing(String targetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendJunLing(targetId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendJunLing(String targetId, Callback_Sns_sendJunLing __cb)
    {
        return begin_sendJunLing(targetId, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendJunLing(String targetId, java.util.Map<String, String> __ctx, Callback_Sns_sendJunLing __cb)
    {
        return begin_sendJunLing(targetId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendJunLing(String targetId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendJunLing_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendJunLing_name, __cb);
        try
        {
            __result.__prepare(__sendJunLing_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(targetId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_sendJunLing(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendJunLing_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean sendJunLing_async(AMI_Sns_sendJunLing __cb, String targetId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendJunLing_name);
            __r = begin_sendJunLing(targetId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendJunLing_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean sendJunLing_async(AMI_Sns_sendJunLing __cb, String targetId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendJunLing_name);
            __r = begin_sendJunLing(targetId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendJunLing_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __untreatedFriendApplyings_name = "untreatedFriendApplyings";

    public String untreatedFriendApplyings()
    {
        return untreatedFriendApplyings(null, false);
    }

    public String untreatedFriendApplyings(java.util.Map<String, String> __ctx)
    {
        return untreatedFriendApplyings(__ctx, true);
    }

    private String untreatedFriendApplyings(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "untreatedFriendApplyings", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("untreatedFriendApplyings");
                    __delBase = __getDelegate(false);
                    _SnsDel __del = (_SnsDel)__delBase;
                    return __del.untreatedFriendApplyings(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_untreatedFriendApplyings()
    {
        return begin_untreatedFriendApplyings(null, false, null);
    }

    public Ice.AsyncResult begin_untreatedFriendApplyings(java.util.Map<String, String> __ctx)
    {
        return begin_untreatedFriendApplyings(__ctx, true, null);
    }

    public Ice.AsyncResult begin_untreatedFriendApplyings(Ice.Callback __cb)
    {
        return begin_untreatedFriendApplyings(null, false, __cb);
    }

    public Ice.AsyncResult begin_untreatedFriendApplyings(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_untreatedFriendApplyings(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_untreatedFriendApplyings(Callback_Sns_untreatedFriendApplyings __cb)
    {
        return begin_untreatedFriendApplyings(null, false, __cb);
    }

    public Ice.AsyncResult begin_untreatedFriendApplyings(java.util.Map<String, String> __ctx, Callback_Sns_untreatedFriendApplyings __cb)
    {
        return begin_untreatedFriendApplyings(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_untreatedFriendApplyings(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__untreatedFriendApplyings_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __untreatedFriendApplyings_name, __cb);
        try
        {
            __result.__prepare(__untreatedFriendApplyings_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_untreatedFriendApplyings(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __untreatedFriendApplyings_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean untreatedFriendApplyings_async(AMI_Sns_untreatedFriendApplyings __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__untreatedFriendApplyings_name);
            __r = begin_untreatedFriendApplyings(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __untreatedFriendApplyings_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean untreatedFriendApplyings_async(AMI_Sns_untreatedFriendApplyings __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__untreatedFriendApplyings_name);
            __r = begin_untreatedFriendApplyings(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __untreatedFriendApplyings_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static SnsPrx checkedCast(Ice.ObjectPrx __obj)
    {
        SnsPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SnsPrx)
            {
                __d = (SnsPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    SnsPrxHelper __h = new SnsPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SnsPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SnsPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SnsPrx)
            {
                __d = (SnsPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    SnsPrxHelper __h = new SnsPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SnsPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SnsPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    SnsPrxHelper __h = new SnsPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SnsPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SnsPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    SnsPrxHelper __h = new SnsPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SnsPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        SnsPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SnsPrx)
            {
                __d = (SnsPrx)__obj;
            }
            else
            {
                SnsPrxHelper __h = new SnsPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SnsPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SnsPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SnsPrxHelper __h = new SnsPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Sns"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _SnsDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _SnsDelD();
    }

    public static void __write(IceInternal.BasicStream __os, SnsPrx v)
    {
        __os.writeProxy(v);
    }

    public static SnsPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SnsPrxHelper result = new SnsPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
