// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class SoloReportN implements java.lang.Cloneable, java.io.Serializable
{
    public String resultTalk;

    public boolean runEscape;

    public int runType;

    public int firstLasthp;

    public int secondLasthp;

    public int defyPos;

    public int skipDefyTalkPos;

    public float skipTime;

    public boolean sneakTrigger;

    public boolean secKillTrigger;

    public boolean skipBattle;

    public int aiSkill;

    public ActionN[] actions;

    public FloatIntPair[] controlOrder;

    public int actionIndex;

    public int addActionIndex;

    public SoloReportN()
    {
    }

    public SoloReportN(String resultTalk, boolean runEscape, int runType, int firstLasthp, int secondLasthp, int defyPos, int skipDefyTalkPos, float skipTime, boolean sneakTrigger, boolean secKillTrigger, boolean skipBattle, int aiSkill, ActionN[] actions, FloatIntPair[] controlOrder, int actionIndex, int addActionIndex)
    {
        this.resultTalk = resultTalk;
        this.runEscape = runEscape;
        this.runType = runType;
        this.firstLasthp = firstLasthp;
        this.secondLasthp = secondLasthp;
        this.defyPos = defyPos;
        this.skipDefyTalkPos = skipDefyTalkPos;
        this.skipTime = skipTime;
        this.sneakTrigger = sneakTrigger;
        this.secKillTrigger = secKillTrigger;
        this.skipBattle = skipBattle;
        this.aiSkill = aiSkill;
        this.actions = actions;
        this.controlOrder = controlOrder;
        this.actionIndex = actionIndex;
        this.addActionIndex = addActionIndex;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SoloReportN _r = null;
        if(rhs instanceof SoloReportN)
        {
            _r = (SoloReportN)rhs;
        }

        if(_r != null)
        {
            if(resultTalk != _r.resultTalk)
            {
                if(resultTalk == null || _r.resultTalk == null || !resultTalk.equals(_r.resultTalk))
                {
                    return false;
                }
            }
            if(runEscape != _r.runEscape)
            {
                return false;
            }
            if(runType != _r.runType)
            {
                return false;
            }
            if(firstLasthp != _r.firstLasthp)
            {
                return false;
            }
            if(secondLasthp != _r.secondLasthp)
            {
                return false;
            }
            if(defyPos != _r.defyPos)
            {
                return false;
            }
            if(skipDefyTalkPos != _r.skipDefyTalkPos)
            {
                return false;
            }
            if(skipTime != _r.skipTime)
            {
                return false;
            }
            if(sneakTrigger != _r.sneakTrigger)
            {
                return false;
            }
            if(secKillTrigger != _r.secKillTrigger)
            {
                return false;
            }
            if(skipBattle != _r.skipBattle)
            {
                return false;
            }
            if(aiSkill != _r.aiSkill)
            {
                return false;
            }
            if(!java.util.Arrays.equals(actions, _r.actions))
            {
                return false;
            }
            if(!java.util.Arrays.equals(controlOrder, _r.controlOrder))
            {
                return false;
            }
            if(actionIndex != _r.actionIndex)
            {
                return false;
            }
            if(addActionIndex != _r.addActionIndex)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::SoloReportN");
        __h = IceInternal.HashUtil.hashAdd(__h, resultTalk);
        __h = IceInternal.HashUtil.hashAdd(__h, runEscape);
        __h = IceInternal.HashUtil.hashAdd(__h, runType);
        __h = IceInternal.HashUtil.hashAdd(__h, firstLasthp);
        __h = IceInternal.HashUtil.hashAdd(__h, secondLasthp);
        __h = IceInternal.HashUtil.hashAdd(__h, defyPos);
        __h = IceInternal.HashUtil.hashAdd(__h, skipDefyTalkPos);
        __h = IceInternal.HashUtil.hashAdd(__h, skipTime);
        __h = IceInternal.HashUtil.hashAdd(__h, sneakTrigger);
        __h = IceInternal.HashUtil.hashAdd(__h, secKillTrigger);
        __h = IceInternal.HashUtil.hashAdd(__h, skipBattle);
        __h = IceInternal.HashUtil.hashAdd(__h, aiSkill);
        __h = IceInternal.HashUtil.hashAdd(__h, actions);
        __h = IceInternal.HashUtil.hashAdd(__h, controlOrder);
        __h = IceInternal.HashUtil.hashAdd(__h, actionIndex);
        __h = IceInternal.HashUtil.hashAdd(__h, addActionIndex);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(resultTalk);
        __os.writeBool(runEscape);
        __os.writeInt(runType);
        __os.writeInt(firstLasthp);
        __os.writeInt(secondLasthp);
        __os.writeInt(defyPos);
        __os.writeInt(skipDefyTalkPos);
        __os.writeFloat(skipTime);
        __os.writeBool(sneakTrigger);
        __os.writeBool(secKillTrigger);
        __os.writeBool(skipBattle);
        __os.writeInt(aiSkill);
        ActionNSeqHelper.write(__os, actions);
        FloatIntPairSeqHelper.write(__os, controlOrder);
        __os.writeInt(actionIndex);
        __os.writeInt(addActionIndex);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        resultTalk = __is.readString();
        runEscape = __is.readBool();
        runType = __is.readInt();
        firstLasthp = __is.readInt();
        secondLasthp = __is.readInt();
        defyPos = __is.readInt();
        skipDefyTalkPos = __is.readInt();
        skipTime = __is.readFloat();
        sneakTrigger = __is.readBool();
        secKillTrigger = __is.readBool();
        skipBattle = __is.readBool();
        aiSkill = __is.readInt();
        actions = ActionNSeqHelper.read(__is);
        controlOrder = FloatIntPairSeqHelper.read(__is);
        actionIndex = __is.readInt();
        addActionIndex = __is.readInt();
    }

    public static final long serialVersionUID = -1904121774L;
}
