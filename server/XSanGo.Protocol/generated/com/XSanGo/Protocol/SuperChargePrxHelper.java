// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SuperCharge.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class SuperChargePrxHelper extends Ice.ObjectPrxHelperBase implements SuperChargePrx
{
    private static final String __acceptRaffleReward_name = "acceptRaffleReward";

    /**
     * 转盘抽奖
     **/
    public String acceptRaffleReward()
        throws NoteException
    {
        return acceptRaffleReward(null, false);
    }

    /**
     * 转盘抽奖
     * @param __ctx The Context map to send with the invocation.
     **/
    public String acceptRaffleReward(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return acceptRaffleReward(__ctx, true);
    }

    private String acceptRaffleReward(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptRaffleReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptRaffleReward");
                    __delBase = __getDelegate(false);
                    _SuperChargeDel __del = (_SuperChargeDel)__delBase;
                    return __del.acceptRaffleReward(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 转盘抽奖
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptRaffleReward()
    {
        return begin_acceptRaffleReward(null, false, null);
    }

    /**
     * 转盘抽奖
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptRaffleReward(java.util.Map<String, String> __ctx)
    {
        return begin_acceptRaffleReward(__ctx, true, null);
    }

    /**
     * 转盘抽奖
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptRaffleReward(Ice.Callback __cb)
    {
        return begin_acceptRaffleReward(null, false, __cb);
    }

    /**
     * 转盘抽奖
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptRaffleReward(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptRaffleReward(__ctx, true, __cb);
    }

    /**
     * 转盘抽奖
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_acceptRaffleReward(Callback_SuperCharge_acceptRaffleReward __cb)
    {
        return begin_acceptRaffleReward(null, false, __cb);
    }

    /**
     * 转盘抽奖
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_acceptRaffleReward(java.util.Map<String, String> __ctx, Callback_SuperCharge_acceptRaffleReward __cb)
    {
        return begin_acceptRaffleReward(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptRaffleReward(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptRaffleReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptRaffleReward_name, __cb);
        try
        {
            __result.__prepare(__acceptRaffleReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_acceptRaffleReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __acceptRaffleReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 转盘抽奖
     * @param __cb The callback object for the operation.
     **/
    public boolean acceptRaffleReward_async(AMI_SuperCharge_acceptRaffleReward __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptRaffleReward_name);
            __r = begin_acceptRaffleReward(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptRaffleReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 转盘抽奖
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean acceptRaffleReward_async(AMI_SuperCharge_acceptRaffleReward __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptRaffleReward_name);
            __r = begin_acceptRaffleReward(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptRaffleReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRaffleView_name = "getRaffleView";

    /**
     * 获取超级转盘view,返回RaffleView的lua
     **/
    public String getRaffleView()
        throws NoteException
    {
        return getRaffleView(null, false);
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getRaffleView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRaffleView(__ctx, true);
    }

    private String getRaffleView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRaffleView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRaffleView");
                    __delBase = __getDelegate(false);
                    _SuperChargeDel __del = (_SuperChargeDel)__delBase;
                    return __del.getRaffleView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRaffleView()
    {
        return begin_getRaffleView(null, false, null);
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRaffleView(java.util.Map<String, String> __ctx)
    {
        return begin_getRaffleView(__ctx, true, null);
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRaffleView(Ice.Callback __cb)
    {
        return begin_getRaffleView(null, false, __cb);
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRaffleView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRaffleView(__ctx, true, __cb);
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRaffleView(Callback_SuperCharge_getRaffleView __cb)
    {
        return begin_getRaffleView(null, false, __cb);
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRaffleView(java.util.Map<String, String> __ctx, Callback_SuperCharge_getRaffleView __cb)
    {
        return begin_getRaffleView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRaffleView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRaffleView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRaffleView_name, __cb);
        try
        {
            __result.__prepare(__getRaffleView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getRaffleView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRaffleView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getRaffleView_async(AMI_SuperCharge_getRaffleView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRaffleView_name);
            __r = begin_getRaffleView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRaffleView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取超级转盘view,返回RaffleView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRaffleView_async(AMI_SuperCharge_getRaffleView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRaffleView_name);
            __r = begin_getRaffleView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRaffleView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getReceivedViews_name = "getReceivedViews";

    /**
     * 获取领奖列表信息
     **/
    public String getReceivedViews()
        throws NoteException
    {
        return getReceivedViews(null, false);
    }

    /**
     * 获取领奖列表信息
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getReceivedViews(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getReceivedViews(__ctx, true);
    }

    private String getReceivedViews(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getReceivedViews", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getReceivedViews");
                    __delBase = __getDelegate(false);
                    _SuperChargeDel __del = (_SuperChargeDel)__delBase;
                    return __del.getReceivedViews(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取领奖列表信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getReceivedViews()
    {
        return begin_getReceivedViews(null, false, null);
    }

    /**
     * 获取领奖列表信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getReceivedViews(java.util.Map<String, String> __ctx)
    {
        return begin_getReceivedViews(__ctx, true, null);
    }

    /**
     * 获取领奖列表信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getReceivedViews(Ice.Callback __cb)
    {
        return begin_getReceivedViews(null, false, __cb);
    }

    /**
     * 获取领奖列表信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getReceivedViews(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getReceivedViews(__ctx, true, __cb);
    }

    /**
     * 获取领奖列表信息
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getReceivedViews(Callback_SuperCharge_getReceivedViews __cb)
    {
        return begin_getReceivedViews(null, false, __cb);
    }

    /**
     * 获取领奖列表信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getReceivedViews(java.util.Map<String, String> __ctx, Callback_SuperCharge_getReceivedViews __cb)
    {
        return begin_getReceivedViews(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getReceivedViews(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getReceivedViews_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getReceivedViews_name, __cb);
        try
        {
            __result.__prepare(__getReceivedViews_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getReceivedViews(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getReceivedViews_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取领奖列表信息
     * @param __cb The callback object for the operation.
     **/
    public boolean getReceivedViews_async(AMI_SuperCharge_getReceivedViews __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getReceivedViews_name);
            __r = begin_getReceivedViews(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getReceivedViews_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取领奖列表信息
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getReceivedViews_async(AMI_SuperCharge_getReceivedViews __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getReceivedViews_name);
            __r = begin_getReceivedViews(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getReceivedViews_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getSuperChargeView_name = "getSuperChargeView";

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     **/
    public String getSuperChargeView()
        throws NoteException
    {
        return getSuperChargeView(null, false);
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getSuperChargeView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getSuperChargeView(__ctx, true);
    }

    private String getSuperChargeView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSuperChargeView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSuperChargeView");
                    __delBase = __getDelegate(false);
                    _SuperChargeDel __del = (_SuperChargeDel)__delBase;
                    return __del.getSuperChargeView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSuperChargeView()
    {
        return begin_getSuperChargeView(null, false, null);
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSuperChargeView(java.util.Map<String, String> __ctx)
    {
        return begin_getSuperChargeView(__ctx, true, null);
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSuperChargeView(Ice.Callback __cb)
    {
        return begin_getSuperChargeView(null, false, __cb);
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSuperChargeView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSuperChargeView(__ctx, true, __cb);
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSuperChargeView(Callback_SuperCharge_getSuperChargeView __cb)
    {
        return begin_getSuperChargeView(null, false, __cb);
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSuperChargeView(java.util.Map<String, String> __ctx, Callback_SuperCharge_getSuperChargeView __cb)
    {
        return begin_getSuperChargeView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSuperChargeView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSuperChargeView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSuperChargeView_name, __cb);
        try
        {
            __result.__prepare(__getSuperChargeView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getSuperChargeView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getSuperChargeView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getSuperChargeView_async(AMI_SuperCharge_getSuperChargeView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSuperChargeView_name);
            __r = begin_getSuperChargeView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSuperChargeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取感恩回馈VIEW，返回SuperChargeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getSuperChargeView_async(AMI_SuperCharge_getSuperChargeView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getSuperChargeView_name);
            __r = begin_getSuperChargeView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getSuperChargeView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __receiveSuperChargeReward_name = "receiveSuperChargeReward";

    /**
     * 领取充值奖励
     **/
    public String receiveSuperChargeReward(int id)
        throws NoteException
    {
        return receiveSuperChargeReward(id, null, false);
    }

    /**
     * 领取充值奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public String receiveSuperChargeReward(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return receiveSuperChargeReward(id, __ctx, true);
    }

    private String receiveSuperChargeReward(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "receiveSuperChargeReward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("receiveSuperChargeReward");
                    __delBase = __getDelegate(false);
                    _SuperChargeDel __del = (_SuperChargeDel)__delBase;
                    return __del.receiveSuperChargeReward(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveSuperChargeReward(int id)
    {
        return begin_receiveSuperChargeReward(id, null, false, null);
    }

    /**
     * 领取充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveSuperChargeReward(int id, java.util.Map<String, String> __ctx)
    {
        return begin_receiveSuperChargeReward(id, __ctx, true, null);
    }

    /**
     * 领取充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveSuperChargeReward(int id, Ice.Callback __cb)
    {
        return begin_receiveSuperChargeReward(id, null, false, __cb);
    }

    /**
     * 领取充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveSuperChargeReward(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_receiveSuperChargeReward(id, __ctx, true, __cb);
    }

    /**
     * 领取充值奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_receiveSuperChargeReward(int id, Callback_SuperCharge_receiveSuperChargeReward __cb)
    {
        return begin_receiveSuperChargeReward(id, null, false, __cb);
    }

    /**
     * 领取充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_receiveSuperChargeReward(int id, java.util.Map<String, String> __ctx, Callback_SuperCharge_receiveSuperChargeReward __cb)
    {
        return begin_receiveSuperChargeReward(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_receiveSuperChargeReward(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__receiveSuperChargeReward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __receiveSuperChargeReward_name, __cb);
        try
        {
            __result.__prepare(__receiveSuperChargeReward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_receiveSuperChargeReward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __receiveSuperChargeReward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取充值奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveSuperChargeReward_async(AMI_SuperCharge_receiveSuperChargeReward __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveSuperChargeReward_name);
            __r = begin_receiveSuperChargeReward(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveSuperChargeReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取充值奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveSuperChargeReward_async(AMI_SuperCharge_receiveSuperChargeReward __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__receiveSuperChargeReward_name);
            __r = begin_receiveSuperChargeReward(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __receiveSuperChargeReward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static SuperChargePrx checkedCast(Ice.ObjectPrx __obj)
    {
        SuperChargePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SuperChargePrx)
            {
                __d = (SuperChargePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    SuperChargePrxHelper __h = new SuperChargePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SuperChargePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SuperChargePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SuperChargePrx)
            {
                __d = (SuperChargePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    SuperChargePrxHelper __h = new SuperChargePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SuperChargePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SuperChargePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    SuperChargePrxHelper __h = new SuperChargePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SuperChargePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SuperChargePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    SuperChargePrxHelper __h = new SuperChargePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SuperChargePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        SuperChargePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SuperChargePrx)
            {
                __d = (SuperChargePrx)__obj;
            }
            else
            {
                SuperChargePrxHelper __h = new SuperChargePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SuperChargePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SuperChargePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SuperChargePrxHelper __h = new SuperChargePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::SuperCharge"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _SuperChargeDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _SuperChargeDelD();
    }

    public static void __write(IceInternal.BasicStream __os, SuperChargePrx v)
    {
        __os.writeProxy(v);
    }

    public static SuperChargePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SuperChargePrxHelper result = new SuperChargePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
