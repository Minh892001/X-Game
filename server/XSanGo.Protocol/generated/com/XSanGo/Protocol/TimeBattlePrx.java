// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TimeBattle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface TimeBattlePrx extends Ice.ObjectPrx
{
    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     **/
    public String getChallengeTimes()
        throws NoteException;

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getChallengeTimes(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChallengeTimes();

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(java.util.Map<String, String> __ctx);

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(Ice.Callback __cb);

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(Callback_TimeBattle_getChallengeTimes __cb);

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(java.util.Map<String, String> __ctx, Callback_TimeBattle_getChallengeTimes __cb);

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __result The asynchronous result object.
     **/
    public String end_getChallengeTimes(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getChallengeTimes_async(AMI_TimeBattle_getChallengeTimes __cb);

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getChallengeTimes_async(AMI_TimeBattle_getChallengeTimes __cb, java.util.Map<String, String> __ctx);

    /**
     * 挑战副本 返回掉落物品
     **/
    public BattleChallengeResultView beginChallenge(String formationId, int id)
        throws NoteException;

    /**
     * 挑战副本 返回掉落物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public BattleChallengeResultView beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 挑战副本 返回掉落物品
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id);

    /**
     * 挑战副本 返回掉落物品
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx);

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, Ice.Callback __cb);

    /**
     * 挑战副本 返回掉落物品
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, Callback_TimeBattle_beginChallenge __cb);

    /**
     * 挑战副本 返回掉落物品
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx, Callback_TimeBattle_beginChallenge __cb);

    /**
     * 挑战副本 返回掉落物品
     * @param __result The asynchronous result object.
     **/
    public BattleChallengeResultView end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     **/
    public boolean beginChallenge_async(AMI_TimeBattle_beginChallenge __cb, String formationId, int id);

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginChallenge_async(AMI_TimeBattle_beginChallenge __cb, String formationId, int id, java.util.Map<String, String> __ctx);

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     **/
    public int endChallenge(int heroNum)
        throws NoteException;

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __ctx The Context map to send with the invocation.
     **/
    public int endChallenge(int heroNum, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum);

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, java.util.Map<String, String> __ctx);

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, Ice.Callback __cb);

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, Callback_TimeBattle_endChallenge __cb);

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, java.util.Map<String, String> __ctx, Callback_TimeBattle_endChallenge __cb);

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __result The asynchronous result object.
     **/
    public int end_endChallenge(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallenge_async(AMI_TimeBattle_endChallenge __cb, int heroNum);

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge_async(AMI_TimeBattle_endChallenge __cb, int heroNum, java.util.Map<String, String> __ctx);

    public void failChallenge()
        throws NoteException;

    public void failChallenge(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_failChallenge();

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_failChallenge(Ice.Callback __cb);

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_failChallenge(Callback_TimeBattle_failChallenge __cb);

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, Callback_TimeBattle_failChallenge __cb);

    public void end_failChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean failChallenge_async(AMI_TimeBattle_failChallenge __cb);

    public boolean failChallenge_async(AMI_TimeBattle_failChallenge __cb, java.util.Map<String, String> __ctx);

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     **/
    public int endLimitChallenge(int heroNum, String items)
        throws NoteException;

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __ctx The Context map to send with the invocation.
     **/
    public int endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items);

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx);

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, Ice.Callback __cb);

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, Callback_TimeBattle_endLimitChallenge __cb);

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx, Callback_TimeBattle_endLimitChallenge __cb);

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __result The asynchronous result object.
     **/
    public int end_endLimitChallenge(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     **/
    public boolean endLimitChallenge_async(AMI_TimeBattle_endLimitChallenge __cb, int heroNum, String items);

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endLimitChallenge_async(AMI_TimeBattle_endLimitChallenge __cb, int heroNum, String items, java.util.Map<String, String> __ctx);

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     **/
    public String clear(int id)
        throws NoteException;

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String clear(int id, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clear(int id);

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clear(int id, java.util.Map<String, String> __ctx);

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clear(int id, Ice.Callback __cb);

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clear(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clear(int id, Callback_TimeBattle_clear __cb);

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clear(int id, java.util.Map<String, String> __ctx, Callback_TimeBattle_clear __cb);

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __result The asynchronous result object.
     **/
    public String end_clear(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean clear_async(AMI_TimeBattle_clear __cb, int id);

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clear_async(AMI_TimeBattle_clear __cb, int id, java.util.Map<String, String> __ctx);
}
