// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TimeBattle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class TimeBattlePrxHelper extends Ice.ObjectPrxHelperBase implements TimeBattlePrx
{
    private static final String __beginChallenge_name = "beginChallenge";

    /**
     * 挑战副本 返回掉落物品
     **/
    public BattleChallengeResultView beginChallenge(String formationId, int id)
        throws NoteException
    {
        return beginChallenge(formationId, id, null, false);
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __ctx The Context map to send with the invocation.
     **/
    public BattleChallengeResultView beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginChallenge(formationId, id, __ctx, true);
    }

    private BattleChallengeResultView beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginChallenge");
                    __delBase = __getDelegate(false);
                    _TimeBattleDel __del = (_TimeBattleDel)__delBase;
                    return __del.beginChallenge(formationId, id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id)
    {
        return begin_beginChallenge(formationId, id, null, false, null);
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx)
    {
        return begin_beginChallenge(formationId, id, __ctx, true, null);
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, Ice.Callback __cb)
    {
        return begin_beginChallenge(formationId, id, null, false, __cb);
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginChallenge(formationId, id, __ctx, true, __cb);
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, Callback_TimeBattle_beginChallenge __cb)
    {
        return begin_beginChallenge(formationId, id, null, false, __cb);
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx, Callback_TimeBattle_beginChallenge __cb)
    {
        return begin_beginChallenge(formationId, id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginChallenge(String formationId, int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
        try
        {
            __result.__prepare(__beginChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(formationId);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public BattleChallengeResultView end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            BattleChallengeResultView __ret;
            __ret = new BattleChallengeResultView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     **/
    public boolean beginChallenge_async(AMI_TimeBattle_beginChallenge __cb, String formationId, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(formationId, id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 挑战副本 返回掉落物品
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginChallenge_async(AMI_TimeBattle_beginChallenge __cb, String formationId, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(formationId, id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clear_name = "clear";

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     **/
    public String clear(int id)
        throws NoteException
    {
        return clear(id, null, false);
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String clear(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return clear(id, __ctx, true);
    }

    private String clear(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clear", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clear");
                    __delBase = __getDelegate(false);
                    _TimeBattleDel __del = (_TimeBattleDel)__delBase;
                    return __del.clear(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clear(int id)
    {
        return begin_clear(id, null, false, null);
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clear(int id, java.util.Map<String, String> __ctx)
    {
        return begin_clear(id, __ctx, true, null);
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clear(int id, Ice.Callback __cb)
    {
        return begin_clear(id, null, false, __cb);
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clear(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clear(id, __ctx, true, __cb);
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clear(int id, Callback_TimeBattle_clear __cb)
    {
        return begin_clear(id, null, false, __cb);
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clear(int id, java.util.Map<String, String> __ctx, Callback_TimeBattle_clear __cb)
    {
        return begin_clear(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clear(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clear_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clear_name, __cb);
        try
        {
            __result.__prepare(__clear_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_clear(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clear_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean clear_async(AMI_TimeBattle_clear __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clear_name);
            __r = begin_clear(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clear_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 扫荡，可无限出怪的关卡不可扫荡。返回CopyClearResultView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clear_async(AMI_TimeBattle_clear __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clear_name);
            __r = begin_clear(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clear_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallenge_name = "endChallenge";

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     **/
    public int endChallenge(int heroNum)
        throws NoteException
    {
        return endChallenge(heroNum, null, false);
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __ctx The Context map to send with the invocation.
     **/
    public int endChallenge(int heroNum, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endChallenge(heroNum, __ctx, true);
    }

    private int endChallenge(int heroNum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallenge");
                    __delBase = __getDelegate(false);
                    _TimeBattleDel __del = (_TimeBattleDel)__delBase;
                    return __del.endChallenge(heroNum, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum)
    {
        return begin_endChallenge(heroNum, null, false, null);
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, java.util.Map<String, String> __ctx)
    {
        return begin_endChallenge(heroNum, __ctx, true, null);
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, Ice.Callback __cb)
    {
        return begin_endChallenge(heroNum, null, false, __cb);
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallenge(heroNum, __ctx, true, __cb);
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, Callback_TimeBattle_endChallenge __cb)
    {
        return begin_endChallenge(heroNum, null, false, __cb);
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(int heroNum, java.util.Map<String, String> __ctx, Callback_TimeBattle_endChallenge __cb)
    {
        return begin_endChallenge(heroNum, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallenge(int heroNum, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
        try
        {
            __result.__prepare(__endChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(heroNum);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_endChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallenge_async(AMI_TimeBattle_endChallenge __cb, int heroNum)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(heroNum, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 打赢或者战败时调用 heroNum-剩余武将数量，返回星级
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge_async(AMI_TimeBattle_endChallenge __cb, int heroNum, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(heroNum, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endLimitChallenge_name = "endLimitChallenge";

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     **/
    public int endLimitChallenge(int heroNum, String items)
        throws NoteException
    {
        return endLimitChallenge(heroNum, items, null, false);
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __ctx The Context map to send with the invocation.
     **/
    public int endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endLimitChallenge(heroNum, items, __ctx, true);
    }

    private int endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endLimitChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endLimitChallenge");
                    __delBase = __getDelegate(false);
                    _TimeBattleDel __del = (_TimeBattleDel)__delBase;
                    return __del.endLimitChallenge(heroNum, items, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items)
    {
        return begin_endLimitChallenge(heroNum, items, null, false, null);
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx)
    {
        return begin_endLimitChallenge(heroNum, items, __ctx, true, null);
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, Ice.Callback __cb)
    {
        return begin_endLimitChallenge(heroNum, items, null, false, __cb);
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endLimitChallenge(heroNum, items, __ctx, true, __cb);
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, Callback_TimeBattle_endLimitChallenge __cb)
    {
        return begin_endLimitChallenge(heroNum, items, null, false, __cb);
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx, Callback_TimeBattle_endLimitChallenge __cb)
    {
        return begin_endLimitChallenge(heroNum, items, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endLimitChallenge(int heroNum, String items, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endLimitChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endLimitChallenge_name, __cb);
        try
        {
            __result.__prepare(__endLimitChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(heroNum);
            __os.writeString(items);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public int end_endLimitChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endLimitChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     **/
    public boolean endLimitChallenge_async(AMI_TimeBattle_endLimitChallenge __cb, int heroNum, String items)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endLimitChallenge_name);
            __r = begin_endLimitChallenge(heroNum, items, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endLimitChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 夷陵之战结束协议 items格式：模版id,数量;模版id,数量
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endLimitChallenge_async(AMI_TimeBattle_endLimitChallenge __cb, int heroNum, String items, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endLimitChallenge_name);
            __r = begin_endLimitChallenge(heroNum, items, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endLimitChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __failChallenge_name = "failChallenge";

    public void failChallenge()
        throws NoteException
    {
        failChallenge(null, false);
    }

    public void failChallenge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        failChallenge(__ctx, true);
    }

    private void failChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "failChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("failChallenge");
                    __delBase = __getDelegate(false);
                    _TimeBattleDel __del = (_TimeBattleDel)__delBase;
                    __del.failChallenge(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_failChallenge()
    {
        return begin_failChallenge(null, false, null);
    }

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx)
    {
        return begin_failChallenge(__ctx, true, null);
    }

    public Ice.AsyncResult begin_failChallenge(Ice.Callback __cb)
    {
        return begin_failChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_failChallenge(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_failChallenge(Callback_TimeBattle_failChallenge __cb)
    {
        return begin_failChallenge(null, false, __cb);
    }

    public Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, Callback_TimeBattle_failChallenge __cb)
    {
        return begin_failChallenge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_failChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__failChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __failChallenge_name, __cb);
        try
        {
            __result.__prepare(__failChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_failChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __failChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean failChallenge_async(AMI_TimeBattle_failChallenge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__failChallenge_name);
            __r = begin_failChallenge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __failChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean failChallenge_async(AMI_TimeBattle_failChallenge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__failChallenge_name);
            __r = begin_failChallenge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __failChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getChallengeTimes_name = "getChallengeTimes";

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     **/
    public String getChallengeTimes()
        throws NoteException
    {
        return getChallengeTimes(null, false);
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getChallengeTimes(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getChallengeTimes(__ctx, true);
    }

    private String getChallengeTimes(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getChallengeTimes", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getChallengeTimes");
                    __delBase = __getDelegate(false);
                    _TimeBattleDel __del = (_TimeBattleDel)__delBase;
                    return __del.getChallengeTimes(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChallengeTimes()
    {
        return begin_getChallengeTimes(null, false, null);
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(java.util.Map<String, String> __ctx)
    {
        return begin_getChallengeTimes(__ctx, true, null);
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(Ice.Callback __cb)
    {
        return begin_getChallengeTimes(null, false, __cb);
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChallengeTimes(__ctx, true, __cb);
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(Callback_TimeBattle_getChallengeTimes __cb)
    {
        return begin_getChallengeTimes(null, false, __cb);
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChallengeTimes(java.util.Map<String, String> __ctx, Callback_TimeBattle_getChallengeTimes __cb)
    {
        return begin_getChallengeTimes(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChallengeTimes(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChallengeTimes_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChallengeTimes_name, __cb);
        try
        {
            __result.__prepare(__getChallengeTimes_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getChallengeTimes(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getChallengeTimes_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getChallengeTimes_async(AMI_TimeBattle_getChallengeTimes __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChallengeTimes_name);
            __r = begin_getChallengeTimes(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChallengeTimes_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取所有时空战役可挑战的次数BattleTimesView[]的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getChallengeTimes_async(AMI_TimeBattle_getChallengeTimes __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChallengeTimes_name);
            __r = begin_getChallengeTimes(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChallengeTimes_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static TimeBattlePrx checkedCast(Ice.ObjectPrx __obj)
    {
        TimeBattlePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TimeBattlePrx)
            {
                __d = (TimeBattlePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    TimeBattlePrxHelper __h = new TimeBattlePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TimeBattlePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        TimeBattlePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TimeBattlePrx)
            {
                __d = (TimeBattlePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    TimeBattlePrxHelper __h = new TimeBattlePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TimeBattlePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TimeBattlePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    TimeBattlePrxHelper __h = new TimeBattlePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TimeBattlePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        TimeBattlePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    TimeBattlePrxHelper __h = new TimeBattlePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TimeBattlePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        TimeBattlePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TimeBattlePrx)
            {
                __d = (TimeBattlePrx)__obj;
            }
            else
            {
                TimeBattlePrxHelper __h = new TimeBattlePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static TimeBattlePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TimeBattlePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            TimeBattlePrxHelper __h = new TimeBattlePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::TimeBattle"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _TimeBattleDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _TimeBattleDelD();
    }

    public static void __write(IceInternal.BasicStream __os, TimeBattlePrx v)
    {
        __os.writeProxy(v);
    }

    public static TimeBattlePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TimeBattlePrxHelper result = new TimeBattlePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
