// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Tournament.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface TournamentPrx extends Ice.ObjectPrx
{
    public String enterTournament()
        throws NoteException;

    public String enterTournament(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_enterTournament();

    public Ice.AsyncResult begin_enterTournament(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_enterTournament(Ice.Callback __cb);

    public Ice.AsyncResult begin_enterTournament(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_enterTournament(Callback_Tournament_enterTournament __cb);

    public Ice.AsyncResult begin_enterTournament(java.util.Map<String, String> __ctx, Callback_Tournament_enterTournament __cb);

    public String end_enterTournament(Ice.AsyncResult __result)
        throws NoteException;

    public boolean enterTournament_async(AMI_Tournament_enterTournament __cb);

    public boolean enterTournament_async(AMI_Tournament_enterTournament __cb, java.util.Map<String, String> __ctx);

    public String openTournamentView()
        throws NoteException;

    public String openTournamentView(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_openTournamentView();

    public Ice.AsyncResult begin_openTournamentView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openTournamentView(Ice.Callback __cb);

    public Ice.AsyncResult begin_openTournamentView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_openTournamentView(Callback_Tournament_openTournamentView __cb);

    public Ice.AsyncResult begin_openTournamentView(java.util.Map<String, String> __ctx, Callback_Tournament_openTournamentView __cb);

    public String end_openTournamentView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean openTournamentView_async(AMI_Tournament_openTournamentView __cb);

    public boolean openTournamentView_async(AMI_Tournament_openTournamentView __cb, java.util.Map<String, String> __ctx);

    public String preSignup()
        throws NoteException;

    public String preSignup(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_preSignup();

    public Ice.AsyncResult begin_preSignup(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_preSignup(Ice.Callback __cb);

    public Ice.AsyncResult begin_preSignup(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_preSignup(Callback_Tournament_preSignup __cb);

    public Ice.AsyncResult begin_preSignup(java.util.Map<String, String> __ctx, Callback_Tournament_preSignup __cb);

    public String end_preSignup(Ice.AsyncResult __result)
        throws NoteException;

    public boolean preSignup_async(AMI_Tournament_preSignup __cb);

    public boolean preSignup_async(AMI_Tournament_preSignup __cb, java.util.Map<String, String> __ctx);

    public String signup()
        throws NoteException;

    public String signup(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_signup();

    public Ice.AsyncResult begin_signup(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_signup(Ice.Callback __cb);

    public Ice.AsyncResult begin_signup(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_signup(Callback_Tournament_signup __cb);

    public Ice.AsyncResult begin_signup(java.util.Map<String, String> __ctx, Callback_Tournament_signup __cb);

    public String end_signup(Ice.AsyncResult __result)
        throws NoteException;

    public boolean signup_async(AMI_Tournament_signup __cb);

    public boolean signup_async(AMI_Tournament_signup __cb, java.util.Map<String, String> __ctx);

    public int buyRefreshCount()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public int buyRefreshCount(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyRefreshCount();

    public Ice.AsyncResult begin_buyRefreshCount(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyRefreshCount(Ice.Callback __cb);

    public Ice.AsyncResult begin_buyRefreshCount(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyRefreshCount(Callback_Tournament_buyRefreshCount __cb);

    public Ice.AsyncResult begin_buyRefreshCount(java.util.Map<String, String> __ctx, Callback_Tournament_buyRefreshCount __cb);

    public int end_buyRefreshCount(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean buyRefreshCount_async(AMI_Tournament_buyRefreshCount __cb);

    public boolean buyRefreshCount_async(AMI_Tournament_buyRefreshCount __cb, java.util.Map<String, String> __ctx);

    public int buyFightCount()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public int buyFightCount(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyFightCount();

    public Ice.AsyncResult begin_buyFightCount(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyFightCount(Ice.Callback __cb);

    public Ice.AsyncResult begin_buyFightCount(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyFightCount(Callback_Tournament_buyFightCount __cb);

    public Ice.AsyncResult begin_buyFightCount(java.util.Map<String, String> __ctx, Callback_Tournament_buyFightCount __cb);

    public int end_buyFightCount(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean buyFightCount_async(AMI_Tournament_buyFightCount __cb);

    public boolean buyFightCount_async(AMI_Tournament_buyFightCount __cb, java.util.Map<String, String> __ctx);

    public String enterPVPView()
        throws NoteException;

    public String enterPVPView(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_enterPVPView();

    public Ice.AsyncResult begin_enterPVPView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_enterPVPView(Ice.Callback __cb);

    public Ice.AsyncResult begin_enterPVPView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_enterPVPView(Callback_Tournament_enterPVPView __cb);

    public Ice.AsyncResult begin_enterPVPView(java.util.Map<String, String> __ctx, Callback_Tournament_enterPVPView __cb);

    public String end_enterPVPView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean enterPVPView_async(AMI_Tournament_enterPVPView __cb);

    public boolean enterPVPView_async(AMI_Tournament_enterPVPView __cb, java.util.Map<String, String> __ctx);

    public String refreshPVPView()
        throws NoteException;

    public String refreshPVPView(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_refreshPVPView();

    public Ice.AsyncResult begin_refreshPVPView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_refreshPVPView(Ice.Callback __cb);

    public Ice.AsyncResult begin_refreshPVPView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_refreshPVPView(Callback_Tournament_refreshPVPView __cb);

    public Ice.AsyncResult begin_refreshPVPView(java.util.Map<String, String> __ctx, Callback_Tournament_refreshPVPView __cb);

    public String end_refreshPVPView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean refreshPVPView_async(AMI_Tournament_refreshPVPView __cb);

    public boolean refreshPVPView_async(AMI_Tournament_refreshPVPView __cb, java.util.Map<String, String> __ctx);

    public FightFormations beginFightWith(String opponentId)
        throws NoteException;

    public FightFormations beginFightWith(String opponentId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_beginFightWith(String opponentId);

    public Ice.AsyncResult begin_beginFightWith(String opponentId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginFightWith(String opponentId, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginFightWith(String opponentId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginFightWith(String opponentId, Callback_Tournament_beginFightWith __cb);

    public Ice.AsyncResult begin_beginFightWith(String opponentId, java.util.Map<String, String> __ctx, Callback_Tournament_beginFightWith __cb);

    public FightFormations end_beginFightWith(Ice.AsyncResult __result)
        throws NoteException;

    public boolean beginFightWith_async(AMI_Tournament_beginFightWith __cb, String opponentId);

    public boolean beginFightWith_async(AMI_Tournament_beginFightWith __cb, String opponentId, java.util.Map<String, String> __ctx);

    public String endFightWith(String opponentId, int flag, int remainHeroCount, int power)
        throws NoteException;

    public String endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power);

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, Ice.Callback __cb);

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, Callback_Tournament_endFightWith __cb);

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx, Callback_Tournament_endFightWith __cb);

    public String end_endFightWith(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endFightWith_async(AMI_Tournament_endFightWith __cb, String opponentId, int flag, int remainHeroCount, int power);

    public boolean endFightWith_async(AMI_Tournament_endFightWith __cb, String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx);

    public FightFormations fightWith(String opponentId)
        throws NoteException;

    public FightFormations fightWith(String opponentId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_fightWith(String opponentId);

    public Ice.AsyncResult begin_fightWith(String opponentId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_fightWith(String opponentId, Ice.Callback __cb);

    public Ice.AsyncResult begin_fightWith(String opponentId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_fightWith(String opponentId, Callback_Tournament_fightWith __cb);

    public Ice.AsyncResult begin_fightWith(String opponentId, java.util.Map<String, String> __ctx, Callback_Tournament_fightWith __cb);

    public FightFormations end_fightWith(Ice.AsyncResult __result)
        throws NoteException;

    public boolean fightWith_async(AMI_Tournament_fightWith __cb, String opponentId);

    public boolean fightWith_async(AMI_Tournament_fightWith __cb, String opponentId, java.util.Map<String, String> __ctx);

    public String openSetupFormation()
        throws NoteException;

    public String openSetupFormation(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_openSetupFormation();

    public Ice.AsyncResult begin_openSetupFormation(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openSetupFormation(Ice.Callback __cb);

    public Ice.AsyncResult begin_openSetupFormation(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_openSetupFormation(Callback_Tournament_openSetupFormation __cb);

    public Ice.AsyncResult begin_openSetupFormation(java.util.Map<String, String> __ctx, Callback_Tournament_openSetupFormation __cb);

    public String end_openSetupFormation(Ice.AsyncResult __result)
        throws NoteException;

    public boolean openSetupFormation_async(AMI_Tournament_openSetupFormation __cb);

    public boolean openSetupFormation_async(AMI_Tournament_openSetupFormation __cb, java.util.Map<String, String> __ctx);

    public void setupFormation()
        throws NoteException;

    public void setupFormation(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_setupFormation();

    public Ice.AsyncResult begin_setupFormation(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setupFormation(Ice.Callback __cb);

    public Ice.AsyncResult begin_setupFormation(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setupFormation(Callback_Tournament_setupFormation __cb);

    public Ice.AsyncResult begin_setupFormation(java.util.Map<String, String> __ctx, Callback_Tournament_setupFormation __cb);

    public void end_setupFormation(Ice.AsyncResult __result)
        throws NoteException;

    public boolean setupFormation_async(AMI_Tournament_setupFormation __cb);

    public boolean setupFormation_async(AMI_Tournament_setupFormation __cb, java.util.Map<String, String> __ctx);

    public String getFightRecords()
        throws NoteException;

    public String getFightRecords(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getFightRecords();

    public Ice.AsyncResult begin_getFightRecords(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getFightRecords(Ice.Callback __cb);

    public Ice.AsyncResult begin_getFightRecords(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFightRecords(Callback_Tournament_getFightRecords __cb);

    public Ice.AsyncResult begin_getFightRecords(java.util.Map<String, String> __ctx, Callback_Tournament_getFightRecords __cb);

    public String end_getFightRecords(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getFightRecords_async(AMI_Tournament_getFightRecords __cb);

    public boolean getFightRecords_async(AMI_Tournament_getFightRecords __cb, java.util.Map<String, String> __ctx);

    public String getRankList()
        throws NoteException;

    public String getRankList(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getRankList();

    public Ice.AsyncResult begin_getRankList(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getRankList(Ice.Callback __cb);

    public Ice.AsyncResult begin_getRankList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getRankList(Callback_Tournament_getRankList __cb);

    public Ice.AsyncResult begin_getRankList(java.util.Map<String, String> __ctx, Callback_Tournament_getRankList __cb);

    public String end_getRankList(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getRankList_async(AMI_Tournament_getRankList __cb);

    public boolean getRankList_async(AMI_Tournament_getRankList __cb, java.util.Map<String, String> __ctx);

    public String getFightMovieByRecordId(String recordId)
        throws NoteException;

    public String getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId);

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, Callback_Tournament_getFightMovieByRecordId __cb);

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx, Callback_Tournament_getFightMovieByRecordId __cb);

    public String end_getFightMovieByRecordId(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getFightMovieByRecordId_async(AMI_Tournament_getFightMovieByRecordId __cb, String recordId);

    public boolean getFightMovieByRecordId_async(AMI_Tournament_getFightMovieByRecordId __cb, String recordId, java.util.Map<String, String> __ctx);

    public String getKnockOutView();

    public String getKnockOutView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getKnockOutView();

    public Ice.AsyncResult begin_getKnockOutView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getKnockOutView(Ice.Callback __cb);

    public Ice.AsyncResult begin_getKnockOutView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getKnockOutView(Callback_Tournament_getKnockOutView __cb);

    public Ice.AsyncResult begin_getKnockOutView(java.util.Map<String, String> __ctx, Callback_Tournament_getKnockOutView __cb);

    public String end_getKnockOutView(Ice.AsyncResult __result);

    public boolean getKnockOutView_async(AMI_Tournament_getKnockOutView __cb);

    public boolean getKnockOutView_async(AMI_Tournament_getKnockOutView __cb, java.util.Map<String, String> __ctx);

    public String getKnockOutMovieList(int id)
        throws NoteException;

    public String getKnockOutMovieList(int id, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getKnockOutMovieList(int id);

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, Ice.Callback __cb);

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, Callback_Tournament_getKnockOutMovieList __cb);

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, java.util.Map<String, String> __ctx, Callback_Tournament_getKnockOutMovieList __cb);

    public String end_getKnockOutMovieList(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getKnockOutMovieList_async(AMI_Tournament_getKnockOutMovieList __cb, int id);

    public boolean getKnockOutMovieList_async(AMI_Tournament_getKnockOutMovieList __cb, int id, java.util.Map<String, String> __ctx);

    public CrossMovieView getKnockOutMovie(int id, int index)
        throws NoteException;

    public CrossMovieView getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index);

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, Ice.Callback __cb);

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, Callback_Tournament_getKnockOutMovie __cb);

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx, Callback_Tournament_getKnockOutMovie __cb);

    public CrossMovieView end_getKnockOutMovie(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getKnockOutMovie_async(AMI_Tournament_getKnockOutMovie __cb, int id, int index);

    public boolean getKnockOutMovie_async(AMI_Tournament_getKnockOutMovie __cb, int id, int index, java.util.Map<String, String> __ctx);

    public String getBetView()
        throws NoteException;

    public String getBetView(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getBetView();

    public Ice.AsyncResult begin_getBetView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getBetView(Ice.Callback __cb);

    public Ice.AsyncResult begin_getBetView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getBetView(Callback_Tournament_getBetView __cb);

    public Ice.AsyncResult begin_getBetView(java.util.Map<String, String> __ctx, Callback_Tournament_getBetView __cb);

    public String end_getBetView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getBetView_async(AMI_Tournament_getBetView __cb);

    public boolean getBetView_async(AMI_Tournament_getBetView __cb, java.util.Map<String, String> __ctx);

    public int bet(int stage, int id, String roleId, int num)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public int bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num);

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, Ice.Callback __cb);

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, Callback_Tournament_bet __cb);

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx, Callback_Tournament_bet __cb);

    public int end_bet(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean bet_async(AMI_Tournament_bet __cb, int stage, int id, String roleId, int num);

    public boolean bet_async(AMI_Tournament_bet __cb, int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx);

    public String getTournamentStatus()
        throws NoteException;

    public String getTournamentStatus(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getTournamentStatus();

    public Ice.AsyncResult begin_getTournamentStatus(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getTournamentStatus(Ice.Callback __cb);

    public Ice.AsyncResult begin_getTournamentStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getTournamentStatus(Callback_Tournament_getTournamentStatus __cb);

    public Ice.AsyncResult begin_getTournamentStatus(java.util.Map<String, String> __ctx, Callback_Tournament_getTournamentStatus __cb);

    public String end_getTournamentStatus(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getTournamentStatus_async(AMI_Tournament_getTournamentStatus __cb);

    public boolean getTournamentStatus_async(AMI_Tournament_getTournamentStatus __cb, java.util.Map<String, String> __ctx);

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     **/
    public String getScoreAndWinNum()
        throws NoteException;

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getScoreAndWinNum(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum();

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(java.util.Map<String, String> __ctx);

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(Ice.Callback __cb);

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(Callback_Tournament_getScoreAndWinNum __cb);

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(java.util.Map<String, String> __ctx, Callback_Tournament_getScoreAndWinNum __cb);

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __result The asynchronous result object.
     **/
    public String end_getScoreAndWinNum(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public boolean getScoreAndWinNum_async(AMI_Tournament_getScoreAndWinNum __cb);

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getScoreAndWinNum_async(AMI_Tournament_getScoreAndWinNum __cb, java.util.Map<String, String> __ctx);

    public String getTournamentShopView()
        throws NoteException;

    public String getTournamentShopView(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getTournamentShopView();

    public Ice.AsyncResult begin_getTournamentShopView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getTournamentShopView(Ice.Callback __cb);

    public Ice.AsyncResult begin_getTournamentShopView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getTournamentShopView(Callback_Tournament_getTournamentShopView __cb);

    public Ice.AsyncResult begin_getTournamentShopView(java.util.Map<String, String> __ctx, Callback_Tournament_getTournamentShopView __cb);

    public String end_getTournamentShopView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getTournamentShopView_async(AMI_Tournament_getTournamentShopView __cb);

    public boolean getTournamentShopView_async(AMI_Tournament_getTournamentShopView __cb, java.util.Map<String, String> __ctx);

    public String buyShopItem(String id, int num)
        throws NoteException;

    public String buyShopItem(String id, int num, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_buyShopItem(String id, int num);

    public Ice.AsyncResult begin_buyShopItem(String id, int num, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyShopItem(String id, int num, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyShopItem(String id, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyShopItem(String id, int num, Callback_Tournament_buyShopItem __cb);

    public Ice.AsyncResult begin_buyShopItem(String id, int num, java.util.Map<String, String> __ctx, Callback_Tournament_buyShopItem __cb);

    public String end_buyShopItem(Ice.AsyncResult __result)
        throws NoteException;

    public boolean buyShopItem_async(AMI_Tournament_buyShopItem __cb, String id, int num);

    public boolean buyShopItem_async(AMI_Tournament_buyShopItem __cb, String id, int num, java.util.Map<String, String> __ctx);
}
