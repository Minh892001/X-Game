// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Tournament.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class TournamentPrxHelper extends Ice.ObjectPrxHelperBase implements TournamentPrx
{
    private static final String __beginFightWith_name = "beginFightWith";

    public FightFormations beginFightWith(String opponentId)
        throws NoteException
    {
        return beginFightWith(opponentId, null, false);
    }

    public FightFormations beginFightWith(String opponentId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginFightWith(opponentId, __ctx, true);
    }

    private FightFormations beginFightWith(String opponentId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginFightWith", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginFightWith");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.beginFightWith(opponentId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginFightWith(String opponentId)
    {
        return begin_beginFightWith(opponentId, null, false, null);
    }

    public Ice.AsyncResult begin_beginFightWith(String opponentId, java.util.Map<String, String> __ctx)
    {
        return begin_beginFightWith(opponentId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginFightWith(String opponentId, Ice.Callback __cb)
    {
        return begin_beginFightWith(opponentId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginFightWith(String opponentId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginFightWith(opponentId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginFightWith(String opponentId, Callback_Tournament_beginFightWith __cb)
    {
        return begin_beginFightWith(opponentId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginFightWith(String opponentId, java.util.Map<String, String> __ctx, Callback_Tournament_beginFightWith __cb)
    {
        return begin_beginFightWith(opponentId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginFightWith(String opponentId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginFightWith_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginFightWith_name, __cb);
        try
        {
            __result.__prepare(__beginFightWith_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(opponentId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public FightFormations end_beginFightWith(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginFightWith_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightFormations __ret;
            __ret = new FightFormations();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginFightWith_async(AMI_Tournament_beginFightWith __cb, String opponentId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginFightWith_name);
            __r = begin_beginFightWith(opponentId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginFightWith_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginFightWith_async(AMI_Tournament_beginFightWith __cb, String opponentId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginFightWith_name);
            __r = begin_beginFightWith(opponentId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginFightWith_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __bet_name = "bet";

    public int bet(int stage, int id, String roleId, int num)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return bet(stage, id, roleId, num, null, false);
    }

    public int bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return bet(stage, id, roleId, num, __ctx, true);
    }

    private int bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "bet", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("bet");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.bet(stage, id, roleId, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num)
    {
        return begin_bet(stage, id, roleId, num, null, false, null);
    }

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx)
    {
        return begin_bet(stage, id, roleId, num, __ctx, true, null);
    }

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, Ice.Callback __cb)
    {
        return begin_bet(stage, id, roleId, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_bet(stage, id, roleId, num, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, Callback_Tournament_bet __cb)
    {
        return begin_bet(stage, id, roleId, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx, Callback_Tournament_bet __cb)
    {
        return begin_bet(stage, id, roleId, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_bet(int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__bet_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __bet_name, __cb);
        try
        {
            __result.__prepare(__bet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(stage);
            __os.writeInt(id);
            __os.writeString(roleId);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_bet(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __bet_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean bet_async(AMI_Tournament_bet __cb, int stage, int id, String roleId, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__bet_name);
            __r = begin_bet(stage, id, roleId, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __bet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean bet_async(AMI_Tournament_bet __cb, int stage, int id, String roleId, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__bet_name);
            __r = begin_bet(stage, id, roleId, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __bet_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyFightCount_name = "buyFightCount";

    public int buyFightCount()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyFightCount(null, false);
    }

    public int buyFightCount(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyFightCount(__ctx, true);
    }

    private int buyFightCount(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyFightCount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyFightCount");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.buyFightCount(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyFightCount()
    {
        return begin_buyFightCount(null, false, null);
    }

    public Ice.AsyncResult begin_buyFightCount(java.util.Map<String, String> __ctx)
    {
        return begin_buyFightCount(__ctx, true, null);
    }

    public Ice.AsyncResult begin_buyFightCount(Ice.Callback __cb)
    {
        return begin_buyFightCount(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyFightCount(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyFightCount(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyFightCount(Callback_Tournament_buyFightCount __cb)
    {
        return begin_buyFightCount(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyFightCount(java.util.Map<String, String> __ctx, Callback_Tournament_buyFightCount __cb)
    {
        return begin_buyFightCount(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyFightCount(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyFightCount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyFightCount_name, __cb);
        try
        {
            __result.__prepare(__buyFightCount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_buyFightCount(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyFightCount_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyFightCount_async(AMI_Tournament_buyFightCount __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyFightCount_name);
            __r = begin_buyFightCount(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyFightCount_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyFightCount_async(AMI_Tournament_buyFightCount __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyFightCount_name);
            __r = begin_buyFightCount(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyFightCount_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyRefreshCount_name = "buyRefreshCount";

    public int buyRefreshCount()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyRefreshCount(null, false);
    }

    public int buyRefreshCount(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyRefreshCount(__ctx, true);
    }

    private int buyRefreshCount(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyRefreshCount", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyRefreshCount");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.buyRefreshCount(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyRefreshCount()
    {
        return begin_buyRefreshCount(null, false, null);
    }

    public Ice.AsyncResult begin_buyRefreshCount(java.util.Map<String, String> __ctx)
    {
        return begin_buyRefreshCount(__ctx, true, null);
    }

    public Ice.AsyncResult begin_buyRefreshCount(Ice.Callback __cb)
    {
        return begin_buyRefreshCount(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyRefreshCount(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyRefreshCount(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyRefreshCount(Callback_Tournament_buyRefreshCount __cb)
    {
        return begin_buyRefreshCount(null, false, __cb);
    }

    public Ice.AsyncResult begin_buyRefreshCount(java.util.Map<String, String> __ctx, Callback_Tournament_buyRefreshCount __cb)
    {
        return begin_buyRefreshCount(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyRefreshCount(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyRefreshCount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyRefreshCount_name, __cb);
        try
        {
            __result.__prepare(__buyRefreshCount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_buyRefreshCount(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyRefreshCount_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyRefreshCount_async(AMI_Tournament_buyRefreshCount __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyRefreshCount_name);
            __r = begin_buyRefreshCount(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyRefreshCount_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyRefreshCount_async(AMI_Tournament_buyRefreshCount __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyRefreshCount_name);
            __r = begin_buyRefreshCount(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyRefreshCount_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyShopItem_name = "buyShopItem";

    public String buyShopItem(String id, int num)
        throws NoteException
    {
        return buyShopItem(id, num, null, false);
    }

    public String buyShopItem(String id, int num, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return buyShopItem(id, num, __ctx, true);
    }

    private String buyShopItem(String id, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyShopItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyShopItem");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.buyShopItem(id, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyShopItem(String id, int num)
    {
        return begin_buyShopItem(id, num, null, false, null);
    }

    public Ice.AsyncResult begin_buyShopItem(String id, int num, java.util.Map<String, String> __ctx)
    {
        return begin_buyShopItem(id, num, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buyShopItem(String id, int num, Ice.Callback __cb)
    {
        return begin_buyShopItem(id, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyShopItem(String id, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyShopItem(id, num, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyShopItem(String id, int num, Callback_Tournament_buyShopItem __cb)
    {
        return begin_buyShopItem(id, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyShopItem(String id, int num, java.util.Map<String, String> __ctx, Callback_Tournament_buyShopItem __cb)
    {
        return begin_buyShopItem(id, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyShopItem(String id, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyShopItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyShopItem_name, __cb);
        try
        {
            __result.__prepare(__buyShopItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_buyShopItem(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyShopItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyShopItem_async(AMI_Tournament_buyShopItem __cb, String id, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyShopItem_name);
            __r = begin_buyShopItem(id, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyShopItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyShopItem_async(AMI_Tournament_buyShopItem __cb, String id, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyShopItem_name);
            __r = begin_buyShopItem(id, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyShopItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endFightWith_name = "endFightWith";

    public String endFightWith(String opponentId, int flag, int remainHeroCount, int power)
        throws NoteException
    {
        return endFightWith(opponentId, flag, remainHeroCount, power, null, false);
    }

    public String endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endFightWith(opponentId, flag, remainHeroCount, power, __ctx, true);
    }

    private String endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endFightWith", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endFightWith");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.endFightWith(opponentId, flag, remainHeroCount, power, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power)
    {
        return begin_endFightWith(opponentId, flag, remainHeroCount, power, null, false, null);
    }

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx)
    {
        return begin_endFightWith(opponentId, flag, remainHeroCount, power, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, Ice.Callback __cb)
    {
        return begin_endFightWith(opponentId, flag, remainHeroCount, power, null, false, __cb);
    }

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endFightWith(opponentId, flag, remainHeroCount, power, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, Callback_Tournament_endFightWith __cb)
    {
        return begin_endFightWith(opponentId, flag, remainHeroCount, power, null, false, __cb);
    }

    public Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx, Callback_Tournament_endFightWith __cb)
    {
        return begin_endFightWith(opponentId, flag, remainHeroCount, power, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endFightWith(String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endFightWith_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endFightWith_name, __cb);
        try
        {
            __result.__prepare(__endFightWith_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(opponentId);
            __os.writeInt(flag);
            __os.writeInt(remainHeroCount);
            __os.writeInt(power);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_endFightWith(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endFightWith_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endFightWith_async(AMI_Tournament_endFightWith __cb, String opponentId, int flag, int remainHeroCount, int power)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endFightWith_name);
            __r = begin_endFightWith(opponentId, flag, remainHeroCount, power, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endFightWith_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endFightWith_async(AMI_Tournament_endFightWith __cb, String opponentId, int flag, int remainHeroCount, int power, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endFightWith_name);
            __r = begin_endFightWith(opponentId, flag, remainHeroCount, power, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endFightWith_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __enterPVPView_name = "enterPVPView";

    public String enterPVPView()
        throws NoteException
    {
        return enterPVPView(null, false);
    }

    public String enterPVPView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return enterPVPView(__ctx, true);
    }

    private String enterPVPView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "enterPVPView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("enterPVPView");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.enterPVPView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_enterPVPView()
    {
        return begin_enterPVPView(null, false, null);
    }

    public Ice.AsyncResult begin_enterPVPView(java.util.Map<String, String> __ctx)
    {
        return begin_enterPVPView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_enterPVPView(Ice.Callback __cb)
    {
        return begin_enterPVPView(null, false, __cb);
    }

    public Ice.AsyncResult begin_enterPVPView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enterPVPView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_enterPVPView(Callback_Tournament_enterPVPView __cb)
    {
        return begin_enterPVPView(null, false, __cb);
    }

    public Ice.AsyncResult begin_enterPVPView(java.util.Map<String, String> __ctx, Callback_Tournament_enterPVPView __cb)
    {
        return begin_enterPVPView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enterPVPView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enterPVPView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enterPVPView_name, __cb);
        try
        {
            __result.__prepare(__enterPVPView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_enterPVPView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __enterPVPView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean enterPVPView_async(AMI_Tournament_enterPVPView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enterPVPView_name);
            __r = begin_enterPVPView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enterPVPView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean enterPVPView_async(AMI_Tournament_enterPVPView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enterPVPView_name);
            __r = begin_enterPVPView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enterPVPView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __enterTournament_name = "enterTournament";

    public String enterTournament()
        throws NoteException
    {
        return enterTournament(null, false);
    }

    public String enterTournament(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return enterTournament(__ctx, true);
    }

    private String enterTournament(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "enterTournament", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("enterTournament");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.enterTournament(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_enterTournament()
    {
        return begin_enterTournament(null, false, null);
    }

    public Ice.AsyncResult begin_enterTournament(java.util.Map<String, String> __ctx)
    {
        return begin_enterTournament(__ctx, true, null);
    }

    public Ice.AsyncResult begin_enterTournament(Ice.Callback __cb)
    {
        return begin_enterTournament(null, false, __cb);
    }

    public Ice.AsyncResult begin_enterTournament(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enterTournament(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_enterTournament(Callback_Tournament_enterTournament __cb)
    {
        return begin_enterTournament(null, false, __cb);
    }

    public Ice.AsyncResult begin_enterTournament(java.util.Map<String, String> __ctx, Callback_Tournament_enterTournament __cb)
    {
        return begin_enterTournament(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enterTournament(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enterTournament_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enterTournament_name, __cb);
        try
        {
            __result.__prepare(__enterTournament_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_enterTournament(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __enterTournament_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean enterTournament_async(AMI_Tournament_enterTournament __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enterTournament_name);
            __r = begin_enterTournament(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enterTournament_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean enterTournament_async(AMI_Tournament_enterTournament __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__enterTournament_name);
            __r = begin_enterTournament(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __enterTournament_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __fightWith_name = "fightWith";

    public FightFormations fightWith(String opponentId)
        throws NoteException
    {
        return fightWith(opponentId, null, false);
    }

    public FightFormations fightWith(String opponentId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return fightWith(opponentId, __ctx, true);
    }

    private FightFormations fightWith(String opponentId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "fightWith", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("fightWith");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.fightWith(opponentId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_fightWith(String opponentId)
    {
        return begin_fightWith(opponentId, null, false, null);
    }

    public Ice.AsyncResult begin_fightWith(String opponentId, java.util.Map<String, String> __ctx)
    {
        return begin_fightWith(opponentId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_fightWith(String opponentId, Ice.Callback __cb)
    {
        return begin_fightWith(opponentId, null, false, __cb);
    }

    public Ice.AsyncResult begin_fightWith(String opponentId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_fightWith(opponentId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_fightWith(String opponentId, Callback_Tournament_fightWith __cb)
    {
        return begin_fightWith(opponentId, null, false, __cb);
    }

    public Ice.AsyncResult begin_fightWith(String opponentId, java.util.Map<String, String> __ctx, Callback_Tournament_fightWith __cb)
    {
        return begin_fightWith(opponentId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_fightWith(String opponentId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__fightWith_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __fightWith_name, __cb);
        try
        {
            __result.__prepare(__fightWith_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(opponentId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public FightFormations end_fightWith(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __fightWith_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            FightFormations __ret;
            __ret = new FightFormations();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean fightWith_async(AMI_Tournament_fightWith __cb, String opponentId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__fightWith_name);
            __r = begin_fightWith(opponentId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __fightWith_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean fightWith_async(AMI_Tournament_fightWith __cb, String opponentId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__fightWith_name);
            __r = begin_fightWith(opponentId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __fightWith_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getBetView_name = "getBetView";

    public String getBetView()
        throws NoteException
    {
        return getBetView(null, false);
    }

    public String getBetView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getBetView(__ctx, true);
    }

    private String getBetView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBetView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBetView");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getBetView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBetView()
    {
        return begin_getBetView(null, false, null);
    }

    public Ice.AsyncResult begin_getBetView(java.util.Map<String, String> __ctx)
    {
        return begin_getBetView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBetView(Ice.Callback __cb)
    {
        return begin_getBetView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBetView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBetView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBetView(Callback_Tournament_getBetView __cb)
    {
        return begin_getBetView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBetView(java.util.Map<String, String> __ctx, Callback_Tournament_getBetView __cb)
    {
        return begin_getBetView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBetView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBetView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBetView_name, __cb);
        try
        {
            __result.__prepare(__getBetView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getBetView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getBetView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getBetView_async(AMI_Tournament_getBetView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBetView_name);
            __r = begin_getBetView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBetView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getBetView_async(AMI_Tournament_getBetView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getBetView_name);
            __r = begin_getBetView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getBetView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFightMovieByRecordId_name = "getFightMovieByRecordId";

    public String getFightMovieByRecordId(String recordId)
        throws NoteException
    {
        return getFightMovieByRecordId(recordId, null, false);
    }

    public String getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFightMovieByRecordId(recordId, __ctx, true);
    }

    private String getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFightMovieByRecordId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFightMovieByRecordId");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getFightMovieByRecordId(recordId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId)
    {
        return begin_getFightMovieByRecordId(recordId, null, false, null);
    }

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx)
    {
        return begin_getFightMovieByRecordId(recordId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, Ice.Callback __cb)
    {
        return begin_getFightMovieByRecordId(recordId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFightMovieByRecordId(recordId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, Callback_Tournament_getFightMovieByRecordId __cb)
    {
        return begin_getFightMovieByRecordId(recordId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx, Callback_Tournament_getFightMovieByRecordId __cb)
    {
        return begin_getFightMovieByRecordId(recordId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFightMovieByRecordId(String recordId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFightMovieByRecordId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFightMovieByRecordId_name, __cb);
        try
        {
            __result.__prepare(__getFightMovieByRecordId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(recordId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getFightMovieByRecordId(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFightMovieByRecordId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFightMovieByRecordId_async(AMI_Tournament_getFightMovieByRecordId __cb, String recordId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFightMovieByRecordId_name);
            __r = begin_getFightMovieByRecordId(recordId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFightMovieByRecordId_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFightMovieByRecordId_async(AMI_Tournament_getFightMovieByRecordId __cb, String recordId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFightMovieByRecordId_name);
            __r = begin_getFightMovieByRecordId(recordId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFightMovieByRecordId_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFightRecords_name = "getFightRecords";

    public String getFightRecords()
        throws NoteException
    {
        return getFightRecords(null, false);
    }

    public String getFightRecords(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getFightRecords(__ctx, true);
    }

    private String getFightRecords(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFightRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFightRecords");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getFightRecords(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFightRecords()
    {
        return begin_getFightRecords(null, false, null);
    }

    public Ice.AsyncResult begin_getFightRecords(java.util.Map<String, String> __ctx)
    {
        return begin_getFightRecords(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFightRecords(Ice.Callback __cb)
    {
        return begin_getFightRecords(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFightRecords(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFightRecords(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFightRecords(Callback_Tournament_getFightRecords __cb)
    {
        return begin_getFightRecords(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFightRecords(java.util.Map<String, String> __ctx, Callback_Tournament_getFightRecords __cb)
    {
        return begin_getFightRecords(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFightRecords(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFightRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFightRecords_name, __cb);
        try
        {
            __result.__prepare(__getFightRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getFightRecords(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getFightRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFightRecords_async(AMI_Tournament_getFightRecords __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFightRecords_name);
            __r = begin_getFightRecords(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFightRecords_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFightRecords_async(AMI_Tournament_getFightRecords __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFightRecords_name);
            __r = begin_getFightRecords(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFightRecords_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getKnockOutMovie_name = "getKnockOutMovie";

    public CrossMovieView getKnockOutMovie(int id, int index)
        throws NoteException
    {
        return getKnockOutMovie(id, index, null, false);
    }

    public CrossMovieView getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getKnockOutMovie(id, index, __ctx, true);
    }

    private CrossMovieView getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getKnockOutMovie", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getKnockOutMovie");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getKnockOutMovie(id, index, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index)
    {
        return begin_getKnockOutMovie(id, index, null, false, null);
    }

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx)
    {
        return begin_getKnockOutMovie(id, index, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, Ice.Callback __cb)
    {
        return begin_getKnockOutMovie(id, index, null, false, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getKnockOutMovie(id, index, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, Callback_Tournament_getKnockOutMovie __cb)
    {
        return begin_getKnockOutMovie(id, index, null, false, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx, Callback_Tournament_getKnockOutMovie __cb)
    {
        return begin_getKnockOutMovie(id, index, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getKnockOutMovie(int id, int index, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getKnockOutMovie_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getKnockOutMovie_name, __cb);
        try
        {
            __result.__prepare(__getKnockOutMovie_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeInt(index);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CrossMovieView end_getKnockOutMovie(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getKnockOutMovie_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            CrossMovieView __ret;
            __ret = new CrossMovieView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getKnockOutMovie_async(AMI_Tournament_getKnockOutMovie __cb, int id, int index)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getKnockOutMovie_name);
            __r = begin_getKnockOutMovie(id, index, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getKnockOutMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getKnockOutMovie_async(AMI_Tournament_getKnockOutMovie __cb, int id, int index, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getKnockOutMovie_name);
            __r = begin_getKnockOutMovie(id, index, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getKnockOutMovie_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getKnockOutMovieList_name = "getKnockOutMovieList";

    public String getKnockOutMovieList(int id)
        throws NoteException
    {
        return getKnockOutMovieList(id, null, false);
    }

    public String getKnockOutMovieList(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getKnockOutMovieList(id, __ctx, true);
    }

    private String getKnockOutMovieList(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getKnockOutMovieList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getKnockOutMovieList");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getKnockOutMovieList(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getKnockOutMovieList(int id)
    {
        return begin_getKnockOutMovieList(id, null, false, null);
    }

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, java.util.Map<String, String> __ctx)
    {
        return begin_getKnockOutMovieList(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, Ice.Callback __cb)
    {
        return begin_getKnockOutMovieList(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getKnockOutMovieList(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, Callback_Tournament_getKnockOutMovieList __cb)
    {
        return begin_getKnockOutMovieList(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutMovieList(int id, java.util.Map<String, String> __ctx, Callback_Tournament_getKnockOutMovieList __cb)
    {
        return begin_getKnockOutMovieList(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getKnockOutMovieList(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getKnockOutMovieList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getKnockOutMovieList_name, __cb);
        try
        {
            __result.__prepare(__getKnockOutMovieList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getKnockOutMovieList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getKnockOutMovieList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getKnockOutMovieList_async(AMI_Tournament_getKnockOutMovieList __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getKnockOutMovieList_name);
            __r = begin_getKnockOutMovieList(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getKnockOutMovieList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getKnockOutMovieList_async(AMI_Tournament_getKnockOutMovieList __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getKnockOutMovieList_name);
            __r = begin_getKnockOutMovieList(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getKnockOutMovieList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getKnockOutView_name = "getKnockOutView";

    public String getKnockOutView()
    {
        return getKnockOutView(null, false);
    }

    public String getKnockOutView(java.util.Map<String, String> __ctx)
    {
        return getKnockOutView(__ctx, true);
    }

    private String getKnockOutView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getKnockOutView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getKnockOutView");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getKnockOutView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getKnockOutView()
    {
        return begin_getKnockOutView(null, false, null);
    }

    public Ice.AsyncResult begin_getKnockOutView(java.util.Map<String, String> __ctx)
    {
        return begin_getKnockOutView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getKnockOutView(Ice.Callback __cb)
    {
        return begin_getKnockOutView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getKnockOutView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutView(Callback_Tournament_getKnockOutView __cb)
    {
        return begin_getKnockOutView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getKnockOutView(java.util.Map<String, String> __ctx, Callback_Tournament_getKnockOutView __cb)
    {
        return begin_getKnockOutView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getKnockOutView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getKnockOutView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getKnockOutView_name, __cb);
        try
        {
            __result.__prepare(__getKnockOutView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getKnockOutView(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getKnockOutView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getKnockOutView_async(AMI_Tournament_getKnockOutView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getKnockOutView_name);
            __r = begin_getKnockOutView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getKnockOutView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getKnockOutView_async(AMI_Tournament_getKnockOutView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getKnockOutView_name);
            __r = begin_getKnockOutView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getKnockOutView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRankList_name = "getRankList";

    public String getRankList()
        throws NoteException
    {
        return getRankList(null, false);
    }

    public String getRankList(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRankList(__ctx, true);
    }

    private String getRankList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRankList", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRankList");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getRankList(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRankList()
    {
        return begin_getRankList(null, false, null);
    }

    public Ice.AsyncResult begin_getRankList(java.util.Map<String, String> __ctx)
    {
        return begin_getRankList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getRankList(Ice.Callback __cb)
    {
        return begin_getRankList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRankList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRankList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRankList(Callback_Tournament_getRankList __cb)
    {
        return begin_getRankList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRankList(java.util.Map<String, String> __ctx, Callback_Tournament_getRankList __cb)
    {
        return begin_getRankList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRankList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRankList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRankList_name, __cb);
        try
        {
            __result.__prepare(__getRankList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getRankList(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRankList_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getRankList_async(AMI_Tournament_getRankList __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRankList_name);
            __r = begin_getRankList(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRankList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getRankList_async(AMI_Tournament_getRankList __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRankList_name);
            __r = begin_getRankList(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRankList_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getScoreAndWinNum_name = "getScoreAndWinNum";

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     **/
    public String getScoreAndWinNum()
        throws NoteException
    {
        return getScoreAndWinNum(null, false);
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getScoreAndWinNum(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getScoreAndWinNum(__ctx, true);
    }

    private String getScoreAndWinNum(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getScoreAndWinNum", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getScoreAndWinNum");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getScoreAndWinNum(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum()
    {
        return begin_getScoreAndWinNum(null, false, null);
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(java.util.Map<String, String> __ctx)
    {
        return begin_getScoreAndWinNum(__ctx, true, null);
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(Ice.Callback __cb)
    {
        return begin_getScoreAndWinNum(null, false, __cb);
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScoreAndWinNum(__ctx, true, __cb);
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(Callback_Tournament_getScoreAndWinNum __cb)
    {
        return begin_getScoreAndWinNum(null, false, __cb);
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScoreAndWinNum(java.util.Map<String, String> __ctx, Callback_Tournament_getScoreAndWinNum __cb)
    {
        return begin_getScoreAndWinNum(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScoreAndWinNum(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScoreAndWinNum_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScoreAndWinNum_name, __cb);
        try
        {
            __result.__prepare(__getScoreAndWinNum_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getScoreAndWinNum(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getScoreAndWinNum_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public boolean getScoreAndWinNum_async(AMI_Tournament_getScoreAndWinNum __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getScoreAndWinNum_name);
            __r = begin_getScoreAndWinNum(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getScoreAndWinNum_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getScoreAndWinNum_async(AMI_Tournament_getScoreAndWinNum __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getScoreAndWinNum_name);
            __r = begin_getScoreAndWinNum(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getScoreAndWinNum_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getTournamentShopView_name = "getTournamentShopView";

    public String getTournamentShopView()
        throws NoteException
    {
        return getTournamentShopView(null, false);
    }

    public String getTournamentShopView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getTournamentShopView(__ctx, true);
    }

    private String getTournamentShopView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTournamentShopView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTournamentShopView");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getTournamentShopView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTournamentShopView()
    {
        return begin_getTournamentShopView(null, false, null);
    }

    public Ice.AsyncResult begin_getTournamentShopView(java.util.Map<String, String> __ctx)
    {
        return begin_getTournamentShopView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTournamentShopView(Ice.Callback __cb)
    {
        return begin_getTournamentShopView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTournamentShopView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTournamentShopView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTournamentShopView(Callback_Tournament_getTournamentShopView __cb)
    {
        return begin_getTournamentShopView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTournamentShopView(java.util.Map<String, String> __ctx, Callback_Tournament_getTournamentShopView __cb)
    {
        return begin_getTournamentShopView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTournamentShopView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTournamentShopView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTournamentShopView_name, __cb);
        try
        {
            __result.__prepare(__getTournamentShopView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getTournamentShopView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getTournamentShopView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getTournamentShopView_async(AMI_Tournament_getTournamentShopView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTournamentShopView_name);
            __r = begin_getTournamentShopView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTournamentShopView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getTournamentShopView_async(AMI_Tournament_getTournamentShopView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTournamentShopView_name);
            __r = begin_getTournamentShopView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTournamentShopView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getTournamentStatus_name = "getTournamentStatus";

    public String getTournamentStatus()
        throws NoteException
    {
        return getTournamentStatus(null, false);
    }

    public String getTournamentStatus(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getTournamentStatus(__ctx, true);
    }

    private String getTournamentStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTournamentStatus", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTournamentStatus");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.getTournamentStatus(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTournamentStatus()
    {
        return begin_getTournamentStatus(null, false, null);
    }

    public Ice.AsyncResult begin_getTournamentStatus(java.util.Map<String, String> __ctx)
    {
        return begin_getTournamentStatus(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTournamentStatus(Ice.Callback __cb)
    {
        return begin_getTournamentStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTournamentStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTournamentStatus(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTournamentStatus(Callback_Tournament_getTournamentStatus __cb)
    {
        return begin_getTournamentStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTournamentStatus(java.util.Map<String, String> __ctx, Callback_Tournament_getTournamentStatus __cb)
    {
        return begin_getTournamentStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTournamentStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTournamentStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTournamentStatus_name, __cb);
        try
        {
            __result.__prepare(__getTournamentStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getTournamentStatus(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getTournamentStatus_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getTournamentStatus_async(AMI_Tournament_getTournamentStatus __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTournamentStatus_name);
            __r = begin_getTournamentStatus(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTournamentStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getTournamentStatus_async(AMI_Tournament_getTournamentStatus __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTournamentStatus_name);
            __r = begin_getTournamentStatus(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTournamentStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openSetupFormation_name = "openSetupFormation";

    public String openSetupFormation()
        throws NoteException
    {
        return openSetupFormation(null, false);
    }

    public String openSetupFormation(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openSetupFormation(__ctx, true);
    }

    private String openSetupFormation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openSetupFormation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openSetupFormation");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.openSetupFormation(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_openSetupFormation()
    {
        return begin_openSetupFormation(null, false, null);
    }

    public Ice.AsyncResult begin_openSetupFormation(java.util.Map<String, String> __ctx)
    {
        return begin_openSetupFormation(__ctx, true, null);
    }

    public Ice.AsyncResult begin_openSetupFormation(Ice.Callback __cb)
    {
        return begin_openSetupFormation(null, false, __cb);
    }

    public Ice.AsyncResult begin_openSetupFormation(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openSetupFormation(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_openSetupFormation(Callback_Tournament_openSetupFormation __cb)
    {
        return begin_openSetupFormation(null, false, __cb);
    }

    public Ice.AsyncResult begin_openSetupFormation(java.util.Map<String, String> __ctx, Callback_Tournament_openSetupFormation __cb)
    {
        return begin_openSetupFormation(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openSetupFormation(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openSetupFormation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openSetupFormation_name, __cb);
        try
        {
            __result.__prepare(__openSetupFormation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_openSetupFormation(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openSetupFormation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean openSetupFormation_async(AMI_Tournament_openSetupFormation __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openSetupFormation_name);
            __r = begin_openSetupFormation(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openSetupFormation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean openSetupFormation_async(AMI_Tournament_openSetupFormation __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openSetupFormation_name);
            __r = begin_openSetupFormation(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openSetupFormation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openTournamentView_name = "openTournamentView";

    public String openTournamentView()
        throws NoteException
    {
        return openTournamentView(null, false);
    }

    public String openTournamentView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return openTournamentView(__ctx, true);
    }

    private String openTournamentView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openTournamentView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openTournamentView");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.openTournamentView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_openTournamentView()
    {
        return begin_openTournamentView(null, false, null);
    }

    public Ice.AsyncResult begin_openTournamentView(java.util.Map<String, String> __ctx)
    {
        return begin_openTournamentView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_openTournamentView(Ice.Callback __cb)
    {
        return begin_openTournamentView(null, false, __cb);
    }

    public Ice.AsyncResult begin_openTournamentView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openTournamentView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_openTournamentView(Callback_Tournament_openTournamentView __cb)
    {
        return begin_openTournamentView(null, false, __cb);
    }

    public Ice.AsyncResult begin_openTournamentView(java.util.Map<String, String> __ctx, Callback_Tournament_openTournamentView __cb)
    {
        return begin_openTournamentView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openTournamentView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openTournamentView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openTournamentView_name, __cb);
        try
        {
            __result.__prepare(__openTournamentView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_openTournamentView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __openTournamentView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean openTournamentView_async(AMI_Tournament_openTournamentView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openTournamentView_name);
            __r = begin_openTournamentView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openTournamentView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean openTournamentView_async(AMI_Tournament_openTournamentView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openTournamentView_name);
            __r = begin_openTournamentView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openTournamentView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __preSignup_name = "preSignup";

    public String preSignup()
        throws NoteException
    {
        return preSignup(null, false);
    }

    public String preSignup(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return preSignup(__ctx, true);
    }

    private String preSignup(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "preSignup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("preSignup");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.preSignup(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_preSignup()
    {
        return begin_preSignup(null, false, null);
    }

    public Ice.AsyncResult begin_preSignup(java.util.Map<String, String> __ctx)
    {
        return begin_preSignup(__ctx, true, null);
    }

    public Ice.AsyncResult begin_preSignup(Ice.Callback __cb)
    {
        return begin_preSignup(null, false, __cb);
    }

    public Ice.AsyncResult begin_preSignup(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_preSignup(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_preSignup(Callback_Tournament_preSignup __cb)
    {
        return begin_preSignup(null, false, __cb);
    }

    public Ice.AsyncResult begin_preSignup(java.util.Map<String, String> __ctx, Callback_Tournament_preSignup __cb)
    {
        return begin_preSignup(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_preSignup(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__preSignup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __preSignup_name, __cb);
        try
        {
            __result.__prepare(__preSignup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_preSignup(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __preSignup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean preSignup_async(AMI_Tournament_preSignup __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__preSignup_name);
            __r = begin_preSignup(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __preSignup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean preSignup_async(AMI_Tournament_preSignup __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__preSignup_name);
            __r = begin_preSignup(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __preSignup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __refreshPVPView_name = "refreshPVPView";

    public String refreshPVPView()
        throws NoteException
    {
        return refreshPVPView(null, false);
    }

    public String refreshPVPView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return refreshPVPView(__ctx, true);
    }

    private String refreshPVPView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refreshPVPView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("refreshPVPView");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.refreshPVPView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_refreshPVPView()
    {
        return begin_refreshPVPView(null, false, null);
    }

    public Ice.AsyncResult begin_refreshPVPView(java.util.Map<String, String> __ctx)
    {
        return begin_refreshPVPView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_refreshPVPView(Ice.Callback __cb)
    {
        return begin_refreshPVPView(null, false, __cb);
    }

    public Ice.AsyncResult begin_refreshPVPView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refreshPVPView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_refreshPVPView(Callback_Tournament_refreshPVPView __cb)
    {
        return begin_refreshPVPView(null, false, __cb);
    }

    public Ice.AsyncResult begin_refreshPVPView(java.util.Map<String, String> __ctx, Callback_Tournament_refreshPVPView __cb)
    {
        return begin_refreshPVPView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refreshPVPView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__refreshPVPView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refreshPVPView_name, __cb);
        try
        {
            __result.__prepare(__refreshPVPView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_refreshPVPView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __refreshPVPView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean refreshPVPView_async(AMI_Tournament_refreshPVPView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshPVPView_name);
            __r = begin_refreshPVPView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshPVPView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean refreshPVPView_async(AMI_Tournament_refreshPVPView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__refreshPVPView_name);
            __r = begin_refreshPVPView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __refreshPVPView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __setupFormation_name = "setupFormation";

    public void setupFormation()
        throws NoteException
    {
        setupFormation(null, false);
    }

    public void setupFormation(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        setupFormation(__ctx, true);
    }

    private void setupFormation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setupFormation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setupFormation");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    __del.setupFormation(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setupFormation()
    {
        return begin_setupFormation(null, false, null);
    }

    public Ice.AsyncResult begin_setupFormation(java.util.Map<String, String> __ctx)
    {
        return begin_setupFormation(__ctx, true, null);
    }

    public Ice.AsyncResult begin_setupFormation(Ice.Callback __cb)
    {
        return begin_setupFormation(null, false, __cb);
    }

    public Ice.AsyncResult begin_setupFormation(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setupFormation(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setupFormation(Callback_Tournament_setupFormation __cb)
    {
        return begin_setupFormation(null, false, __cb);
    }

    public Ice.AsyncResult begin_setupFormation(java.util.Map<String, String> __ctx, Callback_Tournament_setupFormation __cb)
    {
        return begin_setupFormation(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setupFormation(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setupFormation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setupFormation_name, __cb);
        try
        {
            __result.__prepare(__setupFormation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setupFormation(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __setupFormation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean setupFormation_async(AMI_Tournament_setupFormation __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setupFormation_name);
            __r = begin_setupFormation(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setupFormation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean setupFormation_async(AMI_Tournament_setupFormation __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__setupFormation_name);
            __r = begin_setupFormation(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __setupFormation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __signup_name = "signup";

    public String signup()
        throws NoteException
    {
        return signup(null, false);
    }

    public String signup(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return signup(__ctx, true);
    }

    private String signup(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "signup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("signup");
                    __delBase = __getDelegate(false);
                    _TournamentDel __del = (_TournamentDel)__delBase;
                    return __del.signup(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_signup()
    {
        return begin_signup(null, false, null);
    }

    public Ice.AsyncResult begin_signup(java.util.Map<String, String> __ctx)
    {
        return begin_signup(__ctx, true, null);
    }

    public Ice.AsyncResult begin_signup(Ice.Callback __cb)
    {
        return begin_signup(null, false, __cb);
    }

    public Ice.AsyncResult begin_signup(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_signup(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_signup(Callback_Tournament_signup __cb)
    {
        return begin_signup(null, false, __cb);
    }

    public Ice.AsyncResult begin_signup(java.util.Map<String, String> __ctx, Callback_Tournament_signup __cb)
    {
        return begin_signup(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_signup(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__signup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __signup_name, __cb);
        try
        {
            __result.__prepare(__signup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_signup(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __signup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean signup_async(AMI_Tournament_signup __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__signup_name);
            __r = begin_signup(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __signup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean signup_async(AMI_Tournament_signup __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__signup_name);
            __r = begin_signup(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __signup_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static TournamentPrx checkedCast(Ice.ObjectPrx __obj)
    {
        TournamentPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TournamentPrx)
            {
                __d = (TournamentPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    TournamentPrxHelper __h = new TournamentPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TournamentPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        TournamentPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TournamentPrx)
            {
                __d = (TournamentPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    TournamentPrxHelper __h = new TournamentPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TournamentPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TournamentPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    TournamentPrxHelper __h = new TournamentPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TournamentPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        TournamentPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    TournamentPrxHelper __h = new TournamentPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TournamentPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        TournamentPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TournamentPrx)
            {
                __d = (TournamentPrx)__obj;
            }
            else
            {
                TournamentPrxHelper __h = new TournamentPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static TournamentPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TournamentPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            TournamentPrxHelper __h = new TournamentPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Tournament"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _TournamentDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _TournamentDelD();
    }

    public static void __write(IceInternal.BasicStream __os, TournamentPrx v)
    {
        __os.writeProxy(v);
    }

    public static TournamentPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TournamentPrxHelper result = new TournamentPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
