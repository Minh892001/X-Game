// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Tournament.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class TournamentView implements java.lang.Cloneable, java.io.Serializable
{
    public int num;

    public StageIndex currentStageIndex;

    public String stageDesc;

    public int totalDays;

    public int lastDays;

    public String nextStageDate;

    public String nextStageDesc;

    public int qtDays;

    public int s32Days;

    public int s16Days;

    public int s8Days;

    public int s2Days;

    public int s1Days;

    public boolean canSetupFormation;

    public boolean qtFinished;

    public boolean isInKnockOut;

    public TournamentView()
    {
    }

    public TournamentView(int num, StageIndex currentStageIndex, String stageDesc, int totalDays, int lastDays, String nextStageDate, String nextStageDesc, int qtDays, int s32Days, int s16Days, int s8Days, int s2Days, int s1Days, boolean canSetupFormation, boolean qtFinished, boolean isInKnockOut)
    {
        this.num = num;
        this.currentStageIndex = currentStageIndex;
        this.stageDesc = stageDesc;
        this.totalDays = totalDays;
        this.lastDays = lastDays;
        this.nextStageDate = nextStageDate;
        this.nextStageDesc = nextStageDesc;
        this.qtDays = qtDays;
        this.s32Days = s32Days;
        this.s16Days = s16Days;
        this.s8Days = s8Days;
        this.s2Days = s2Days;
        this.s1Days = s1Days;
        this.canSetupFormation = canSetupFormation;
        this.qtFinished = qtFinished;
        this.isInKnockOut = isInKnockOut;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TournamentView _r = null;
        if(rhs instanceof TournamentView)
        {
            _r = (TournamentView)rhs;
        }

        if(_r != null)
        {
            if(num != _r.num)
            {
                return false;
            }
            if(currentStageIndex != _r.currentStageIndex)
            {
                if(currentStageIndex == null || _r.currentStageIndex == null || !currentStageIndex.equals(_r.currentStageIndex))
                {
                    return false;
                }
            }
            if(stageDesc != _r.stageDesc)
            {
                if(stageDesc == null || _r.stageDesc == null || !stageDesc.equals(_r.stageDesc))
                {
                    return false;
                }
            }
            if(totalDays != _r.totalDays)
            {
                return false;
            }
            if(lastDays != _r.lastDays)
            {
                return false;
            }
            if(nextStageDate != _r.nextStageDate)
            {
                if(nextStageDate == null || _r.nextStageDate == null || !nextStageDate.equals(_r.nextStageDate))
                {
                    return false;
                }
            }
            if(nextStageDesc != _r.nextStageDesc)
            {
                if(nextStageDesc == null || _r.nextStageDesc == null || !nextStageDesc.equals(_r.nextStageDesc))
                {
                    return false;
                }
            }
            if(qtDays != _r.qtDays)
            {
                return false;
            }
            if(s32Days != _r.s32Days)
            {
                return false;
            }
            if(s16Days != _r.s16Days)
            {
                return false;
            }
            if(s8Days != _r.s8Days)
            {
                return false;
            }
            if(s2Days != _r.s2Days)
            {
                return false;
            }
            if(s1Days != _r.s1Days)
            {
                return false;
            }
            if(canSetupFormation != _r.canSetupFormation)
            {
                return false;
            }
            if(qtFinished != _r.qtFinished)
            {
                return false;
            }
            if(isInKnockOut != _r.isInKnockOut)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::TournamentView");
        __h = IceInternal.HashUtil.hashAdd(__h, num);
        __h = IceInternal.HashUtil.hashAdd(__h, currentStageIndex);
        __h = IceInternal.HashUtil.hashAdd(__h, stageDesc);
        __h = IceInternal.HashUtil.hashAdd(__h, totalDays);
        __h = IceInternal.HashUtil.hashAdd(__h, lastDays);
        __h = IceInternal.HashUtil.hashAdd(__h, nextStageDate);
        __h = IceInternal.HashUtil.hashAdd(__h, nextStageDesc);
        __h = IceInternal.HashUtil.hashAdd(__h, qtDays);
        __h = IceInternal.HashUtil.hashAdd(__h, s32Days);
        __h = IceInternal.HashUtil.hashAdd(__h, s16Days);
        __h = IceInternal.HashUtil.hashAdd(__h, s8Days);
        __h = IceInternal.HashUtil.hashAdd(__h, s2Days);
        __h = IceInternal.HashUtil.hashAdd(__h, s1Days);
        __h = IceInternal.HashUtil.hashAdd(__h, canSetupFormation);
        __h = IceInternal.HashUtil.hashAdd(__h, qtFinished);
        __h = IceInternal.HashUtil.hashAdd(__h, isInKnockOut);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(num);
        currentStageIndex.__write(__os);
        __os.writeString(stageDesc);
        __os.writeInt(totalDays);
        __os.writeInt(lastDays);
        __os.writeString(nextStageDate);
        __os.writeString(nextStageDesc);
        __os.writeInt(qtDays);
        __os.writeInt(s32Days);
        __os.writeInt(s16Days);
        __os.writeInt(s8Days);
        __os.writeInt(s2Days);
        __os.writeInt(s1Days);
        __os.writeBool(canSetupFormation);
        __os.writeBool(qtFinished);
        __os.writeBool(isInKnockOut);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        num = __is.readInt();
        currentStageIndex = StageIndex.__read(__is);
        stageDesc = __is.readString();
        totalDays = __is.readInt();
        lastDays = __is.readInt();
        nextStageDate = __is.readString();
        nextStageDesc = __is.readString();
        qtDays = __is.readInt();
        s32Days = __is.readInt();
        s16Days = __is.readInt();
        s8Days = __is.readInt();
        s2Days = __is.readInt();
        s1Days = __is.readInt();
        canSetupFormation = __is.readBool();
        qtFinished = __is.readBool();
        isInKnockOut = __is.readBool();
    }

    public static final long serialVersionUID = -825772852L;
}
