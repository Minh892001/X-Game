// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Trader.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface TraderPrx extends Ice.ObjectPrx
{
    public String getTraderView()
        throws NoteException;

    public String getTraderView(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getTraderView();

    public Ice.AsyncResult begin_getTraderView(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getTraderView(Ice.Callback __cb);

    public Ice.AsyncResult begin_getTraderView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getTraderView(Callback_Trader_getTraderView __cb);

    public Ice.AsyncResult begin_getTraderView(java.util.Map<String, String> __ctx, Callback_Trader_getTraderView __cb);

    public String end_getTraderView(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getTraderView_async(AMI_Trader_getTraderView __cb);

    public boolean getTraderView_async(AMI_Trader_getTraderView __cb, java.util.Map<String, String> __ctx);

    public String callJinbiTrader()
        throws NotEnoughMoneyException,
               NoteException;

    public String callJinbiTrader(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_callJinbiTrader();

    public Ice.AsyncResult begin_callJinbiTrader(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_callJinbiTrader(Ice.Callback __cb);

    public Ice.AsyncResult begin_callJinbiTrader(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_callJinbiTrader(Callback_Trader_callJinbiTrader __cb);

    public Ice.AsyncResult begin_callJinbiTrader(java.util.Map<String, String> __ctx, Callback_Trader_callJinbiTrader __cb);

    public String end_callJinbiTrader(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean callJinbiTrader_async(AMI_Trader_callJinbiTrader __cb);

    public boolean callJinbiTrader_async(AMI_Trader_callJinbiTrader __cb, java.util.Map<String, String> __ctx);

    public String callYuanbaoTrader()
        throws NotEnoughYuanBaoException,
               NoteException;

    public String callYuanbaoTrader(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_callYuanbaoTrader();

    public Ice.AsyncResult begin_callYuanbaoTrader(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_callYuanbaoTrader(Ice.Callback __cb);

    public Ice.AsyncResult begin_callYuanbaoTrader(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_callYuanbaoTrader(Callback_Trader_callYuanbaoTrader __cb);

    public Ice.AsyncResult begin_callYuanbaoTrader(java.util.Map<String, String> __ctx, Callback_Trader_callYuanbaoTrader __cb);

    public String end_callYuanbaoTrader(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean callYuanbaoTrader_async(AMI_Trader_callYuanbaoTrader __cb);

    public boolean callYuanbaoTrader_async(AMI_Trader_callYuanbaoTrader __cb, java.util.Map<String, String> __ctx);

    public String callJinbiHero()
        throws NotEnoughMoneyException,
               NoteException;

    public String callJinbiHero(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_callJinbiHero();

    public Ice.AsyncResult begin_callJinbiHero(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_callJinbiHero(Ice.Callback __cb);

    public Ice.AsyncResult begin_callJinbiHero(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_callJinbiHero(Callback_Trader_callJinbiHero __cb);

    public Ice.AsyncResult begin_callJinbiHero(java.util.Map<String, String> __ctx, Callback_Trader_callJinbiHero __cb);

    public String end_callJinbiHero(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean callJinbiHero_async(AMI_Trader_callJinbiHero __cb);

    public boolean callJinbiHero_async(AMI_Trader_callJinbiHero __cb, java.util.Map<String, String> __ctx);

    public String callYuanbaoHero()
        throws NotEnoughYuanBaoException,
               NoteException;

    public String callYuanbaoHero(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_callYuanbaoHero();

    public Ice.AsyncResult begin_callYuanbaoHero(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_callYuanbaoHero(Ice.Callback __cb);

    public Ice.AsyncResult begin_callYuanbaoHero(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_callYuanbaoHero(Callback_Trader_callYuanbaoHero __cb);

    public Ice.AsyncResult begin_callYuanbaoHero(java.util.Map<String, String> __ctx, Callback_Trader_callYuanbaoHero __cb);

    public String end_callYuanbaoHero(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean callYuanbaoHero_async(AMI_Trader_callYuanbaoHero __cb);

    public boolean callYuanbaoHero_async(AMI_Trader_callYuanbaoHero __cb, java.util.Map<String, String> __ctx);

    public void buyItem(String id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public void buyItem(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyItem(String id);

    public Ice.AsyncResult begin_buyItem(String id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyItem(String id, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyItem(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyItem(String id, Callback_Trader_buyItem __cb);

    public Ice.AsyncResult begin_buyItem(String id, java.util.Map<String, String> __ctx, Callback_Trader_buyItem __cb);

    public void end_buyItem(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean buyItem_async(AMI_Trader_buyItem __cb, String id);

    public boolean buyItem_async(AMI_Trader_buyItem __cb, String id, java.util.Map<String, String> __ctx);

    public DuelReportView beginChallenge(String heroId)
        throws NoteException;

    public DuelReportView beginChallenge(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_beginChallenge(String heroId);

    public Ice.AsyncResult begin_beginChallenge(String heroId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_beginChallenge(String heroId, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginChallenge(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_beginChallenge(String heroId, Callback_Trader_beginChallenge __cb);

    public Ice.AsyncResult begin_beginChallenge(String heroId, java.util.Map<String, String> __ctx, Callback_Trader_beginChallenge __cb);

    public DuelReportView end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean beginChallenge_async(AMI_Trader_beginChallenge __cb, String heroId);

    public boolean beginChallenge_async(AMI_Trader_beginChallenge __cb, String heroId, java.util.Map<String, String> __ctx);

    public void endChallenge(DuelResult result)
        throws NoteException;

    public void endChallenge(DuelResult result, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_endChallenge(DuelResult result);

    public Ice.AsyncResult begin_endChallenge(DuelResult result, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_endChallenge(DuelResult result, Ice.Callback __cb);

    public Ice.AsyncResult begin_endChallenge(DuelResult result, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_endChallenge(DuelResult result, Callback_Trader_endChallenge __cb);

    public Ice.AsyncResult begin_endChallenge(DuelResult result, java.util.Map<String, String> __ctx, Callback_Trader_endChallenge __cb);

    public void end_endChallenge(Ice.AsyncResult __result)
        throws NoteException;

    public boolean endChallenge_async(AMI_Trader_endChallenge __cb, DuelResult result);

    public boolean endChallenge_async(AMI_Trader_endChallenge __cb, DuelResult result, java.util.Map<String, String> __ctx);

    public void buyHeroItem(String id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public void buyHeroItem(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyHeroItem(String id);

    public Ice.AsyncResult begin_buyHeroItem(String id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyHeroItem(String id, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyHeroItem(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyHeroItem(String id, Callback_Trader_buyHeroItem __cb);

    public Ice.AsyncResult begin_buyHeroItem(String id, java.util.Map<String, String> __ctx, Callback_Trader_buyHeroItem __cb);

    public void end_buyHeroItem(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean buyHeroItem_async(AMI_Trader_buyHeroItem __cb, String id);

    public boolean buyHeroItem_async(AMI_Trader_buyHeroItem __cb, String id, java.util.Map<String, String> __ctx);

    public String acceptConsolation();

    public String acceptConsolation(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_acceptConsolation();

    public Ice.AsyncResult begin_acceptConsolation(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_acceptConsolation(Ice.Callback __cb);

    public Ice.AsyncResult begin_acceptConsolation(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_acceptConsolation(Callback_Trader_acceptConsolation __cb);

    public Ice.AsyncResult begin_acceptConsolation(java.util.Map<String, String> __ctx, Callback_Trader_acceptConsolation __cb);

    public String end_acceptConsolation(Ice.AsyncResult __result);

    public boolean acceptConsolation_async(AMI_Trader_acceptConsolation __cb);

    public boolean acceptConsolation_async(AMI_Trader_acceptConsolation __cb, java.util.Map<String, String> __ctx);
}
