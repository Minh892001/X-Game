// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Trader.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class TraderPrxHelper extends Ice.ObjectPrxHelperBase implements TraderPrx
{
    private static final String __acceptConsolation_name = "acceptConsolation";

    public String acceptConsolation()
    {
        return acceptConsolation(null, false);
    }

    public String acceptConsolation(java.util.Map<String, String> __ctx)
    {
        return acceptConsolation(__ctx, true);
    }

    private String acceptConsolation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acceptConsolation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acceptConsolation");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    return __del.acceptConsolation(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acceptConsolation()
    {
        return begin_acceptConsolation(null, false, null);
    }

    public Ice.AsyncResult begin_acceptConsolation(java.util.Map<String, String> __ctx)
    {
        return begin_acceptConsolation(__ctx, true, null);
    }

    public Ice.AsyncResult begin_acceptConsolation(Ice.Callback __cb)
    {
        return begin_acceptConsolation(null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptConsolation(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acceptConsolation(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acceptConsolation(Callback_Trader_acceptConsolation __cb)
    {
        return begin_acceptConsolation(null, false, __cb);
    }

    public Ice.AsyncResult begin_acceptConsolation(java.util.Map<String, String> __ctx, Callback_Trader_acceptConsolation __cb)
    {
        return begin_acceptConsolation(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acceptConsolation(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acceptConsolation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acceptConsolation_name, __cb);
        try
        {
            __result.__prepare(__acceptConsolation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_acceptConsolation(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __acceptConsolation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean acceptConsolation_async(AMI_Trader_acceptConsolation __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptConsolation_name);
            __r = begin_acceptConsolation(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptConsolation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean acceptConsolation_async(AMI_Trader_acceptConsolation __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__acceptConsolation_name);
            __r = begin_acceptConsolation(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __acceptConsolation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __beginChallenge_name = "beginChallenge";

    public DuelReportView beginChallenge(String heroId)
        throws NoteException
    {
        return beginChallenge(heroId, null, false);
    }

    public DuelReportView beginChallenge(String heroId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginChallenge(heroId, __ctx, true);
    }

    private DuelReportView beginChallenge(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginChallenge");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    return __del.beginChallenge(heroId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_beginChallenge(String heroId)
    {
        return begin_beginChallenge(heroId, null, false, null);
    }

    public Ice.AsyncResult begin_beginChallenge(String heroId, java.util.Map<String, String> __ctx)
    {
        return begin_beginChallenge(heroId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_beginChallenge(String heroId, Ice.Callback __cb)
    {
        return begin_beginChallenge(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String heroId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginChallenge(heroId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String heroId, Callback_Trader_beginChallenge __cb)
    {
        return begin_beginChallenge(heroId, null, false, __cb);
    }

    public Ice.AsyncResult begin_beginChallenge(String heroId, java.util.Map<String, String> __ctx, Callback_Trader_beginChallenge __cb)
    {
        return begin_beginChallenge(heroId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginChallenge(String heroId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
        try
        {
            __result.__prepare(__beginChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(heroId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DuelReportView end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            DuelReportView __ret;
            __ret = new DuelReportView();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean beginChallenge_async(AMI_Trader_beginChallenge __cb, String heroId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(heroId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean beginChallenge_async(AMI_Trader_beginChallenge __cb, String heroId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(heroId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyHeroItem_name = "buyHeroItem";

    public void buyHeroItem(String id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyHeroItem(id, null, false);
    }

    public void buyHeroItem(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyHeroItem(id, __ctx, true);
    }

    private void buyHeroItem(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyHeroItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyHeroItem");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    __del.buyHeroItem(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyHeroItem(String id)
    {
        return begin_buyHeroItem(id, null, false, null);
    }

    public Ice.AsyncResult begin_buyHeroItem(String id, java.util.Map<String, String> __ctx)
    {
        return begin_buyHeroItem(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buyHeroItem(String id, Ice.Callback __cb)
    {
        return begin_buyHeroItem(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyHeroItem(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyHeroItem(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyHeroItem(String id, Callback_Trader_buyHeroItem __cb)
    {
        return begin_buyHeroItem(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyHeroItem(String id, java.util.Map<String, String> __ctx, Callback_Trader_buyHeroItem __cb)
    {
        return begin_buyHeroItem(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyHeroItem(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyHeroItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyHeroItem_name, __cb);
        try
        {
            __result.__prepare(__buyHeroItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyHeroItem(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyHeroItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyHeroItem_async(AMI_Trader_buyHeroItem __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyHeroItem_name);
            __r = begin_buyHeroItem(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyHeroItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyHeroItem_async(AMI_Trader_buyHeroItem __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyHeroItem_name);
            __r = begin_buyHeroItem(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyHeroItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyItem_name = "buyItem";

    public void buyItem(String id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyItem(id, null, false);
    }

    public void buyItem(String id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyItem(id, __ctx, true);
    }

    private void buyItem(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyItem", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyItem");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    __del.buyItem(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyItem(String id)
    {
        return begin_buyItem(id, null, false, null);
    }

    public Ice.AsyncResult begin_buyItem(String id, java.util.Map<String, String> __ctx)
    {
        return begin_buyItem(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buyItem(String id, Ice.Callback __cb)
    {
        return begin_buyItem(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyItem(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyItem(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyItem(String id, Callback_Trader_buyItem __cb)
    {
        return begin_buyItem(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyItem(String id, java.util.Map<String, String> __ctx, Callback_Trader_buyItem __cb)
    {
        return begin_buyItem(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyItem(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyItem_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyItem_name, __cb);
        try
        {
            __result.__prepare(__buyItem_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyItem(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyItem_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyItem_async(AMI_Trader_buyItem __cb, String id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyItem_name);
            __r = begin_buyItem(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyItem_async(AMI_Trader_buyItem __cb, String id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyItem_name);
            __r = begin_buyItem(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyItem_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __callJinbiHero_name = "callJinbiHero";

    public String callJinbiHero()
        throws NotEnoughMoneyException,
               NoteException
    {
        return callJinbiHero(null, false);
    }

    public String callJinbiHero(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return callJinbiHero(__ctx, true);
    }

    private String callJinbiHero(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "callJinbiHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("callJinbiHero");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    return __del.callJinbiHero(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_callJinbiHero()
    {
        return begin_callJinbiHero(null, false, null);
    }

    public Ice.AsyncResult begin_callJinbiHero(java.util.Map<String, String> __ctx)
    {
        return begin_callJinbiHero(__ctx, true, null);
    }

    public Ice.AsyncResult begin_callJinbiHero(Ice.Callback __cb)
    {
        return begin_callJinbiHero(null, false, __cb);
    }

    public Ice.AsyncResult begin_callJinbiHero(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_callJinbiHero(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_callJinbiHero(Callback_Trader_callJinbiHero __cb)
    {
        return begin_callJinbiHero(null, false, __cb);
    }

    public Ice.AsyncResult begin_callJinbiHero(java.util.Map<String, String> __ctx, Callback_Trader_callJinbiHero __cb)
    {
        return begin_callJinbiHero(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_callJinbiHero(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__callJinbiHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __callJinbiHero_name, __cb);
        try
        {
            __result.__prepare(__callJinbiHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_callJinbiHero(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __callJinbiHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean callJinbiHero_async(AMI_Trader_callJinbiHero __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__callJinbiHero_name);
            __r = begin_callJinbiHero(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __callJinbiHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean callJinbiHero_async(AMI_Trader_callJinbiHero __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__callJinbiHero_name);
            __r = begin_callJinbiHero(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __callJinbiHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __callJinbiTrader_name = "callJinbiTrader";

    public String callJinbiTrader()
        throws NotEnoughMoneyException,
               NoteException
    {
        return callJinbiTrader(null, false);
    }

    public String callJinbiTrader(java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException
    {
        return callJinbiTrader(__ctx, true);
    }

    private String callJinbiTrader(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "callJinbiTrader", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("callJinbiTrader");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    return __del.callJinbiTrader(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_callJinbiTrader()
    {
        return begin_callJinbiTrader(null, false, null);
    }

    public Ice.AsyncResult begin_callJinbiTrader(java.util.Map<String, String> __ctx)
    {
        return begin_callJinbiTrader(__ctx, true, null);
    }

    public Ice.AsyncResult begin_callJinbiTrader(Ice.Callback __cb)
    {
        return begin_callJinbiTrader(null, false, __cb);
    }

    public Ice.AsyncResult begin_callJinbiTrader(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_callJinbiTrader(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_callJinbiTrader(Callback_Trader_callJinbiTrader __cb)
    {
        return begin_callJinbiTrader(null, false, __cb);
    }

    public Ice.AsyncResult begin_callJinbiTrader(java.util.Map<String, String> __ctx, Callback_Trader_callJinbiTrader __cb)
    {
        return begin_callJinbiTrader(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_callJinbiTrader(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__callJinbiTrader_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __callJinbiTrader_name, __cb);
        try
        {
            __result.__prepare(__callJinbiTrader_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_callJinbiTrader(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __callJinbiTrader_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean callJinbiTrader_async(AMI_Trader_callJinbiTrader __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__callJinbiTrader_name);
            __r = begin_callJinbiTrader(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __callJinbiTrader_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean callJinbiTrader_async(AMI_Trader_callJinbiTrader __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__callJinbiTrader_name);
            __r = begin_callJinbiTrader(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __callJinbiTrader_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __callYuanbaoHero_name = "callYuanbaoHero";

    public String callYuanbaoHero()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return callYuanbaoHero(null, false);
    }

    public String callYuanbaoHero(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return callYuanbaoHero(__ctx, true);
    }

    private String callYuanbaoHero(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "callYuanbaoHero", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("callYuanbaoHero");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    return __del.callYuanbaoHero(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_callYuanbaoHero()
    {
        return begin_callYuanbaoHero(null, false, null);
    }

    public Ice.AsyncResult begin_callYuanbaoHero(java.util.Map<String, String> __ctx)
    {
        return begin_callYuanbaoHero(__ctx, true, null);
    }

    public Ice.AsyncResult begin_callYuanbaoHero(Ice.Callback __cb)
    {
        return begin_callYuanbaoHero(null, false, __cb);
    }

    public Ice.AsyncResult begin_callYuanbaoHero(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_callYuanbaoHero(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_callYuanbaoHero(Callback_Trader_callYuanbaoHero __cb)
    {
        return begin_callYuanbaoHero(null, false, __cb);
    }

    public Ice.AsyncResult begin_callYuanbaoHero(java.util.Map<String, String> __ctx, Callback_Trader_callYuanbaoHero __cb)
    {
        return begin_callYuanbaoHero(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_callYuanbaoHero(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__callYuanbaoHero_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __callYuanbaoHero_name, __cb);
        try
        {
            __result.__prepare(__callYuanbaoHero_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_callYuanbaoHero(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __callYuanbaoHero_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean callYuanbaoHero_async(AMI_Trader_callYuanbaoHero __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__callYuanbaoHero_name);
            __r = begin_callYuanbaoHero(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __callYuanbaoHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean callYuanbaoHero_async(AMI_Trader_callYuanbaoHero __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__callYuanbaoHero_name);
            __r = begin_callYuanbaoHero(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __callYuanbaoHero_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __callYuanbaoTrader_name = "callYuanbaoTrader";

    public String callYuanbaoTrader()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return callYuanbaoTrader(null, false);
    }

    public String callYuanbaoTrader(java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return callYuanbaoTrader(__ctx, true);
    }

    private String callYuanbaoTrader(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "callYuanbaoTrader", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("callYuanbaoTrader");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    return __del.callYuanbaoTrader(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_callYuanbaoTrader()
    {
        return begin_callYuanbaoTrader(null, false, null);
    }

    public Ice.AsyncResult begin_callYuanbaoTrader(java.util.Map<String, String> __ctx)
    {
        return begin_callYuanbaoTrader(__ctx, true, null);
    }

    public Ice.AsyncResult begin_callYuanbaoTrader(Ice.Callback __cb)
    {
        return begin_callYuanbaoTrader(null, false, __cb);
    }

    public Ice.AsyncResult begin_callYuanbaoTrader(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_callYuanbaoTrader(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_callYuanbaoTrader(Callback_Trader_callYuanbaoTrader __cb)
    {
        return begin_callYuanbaoTrader(null, false, __cb);
    }

    public Ice.AsyncResult begin_callYuanbaoTrader(java.util.Map<String, String> __ctx, Callback_Trader_callYuanbaoTrader __cb)
    {
        return begin_callYuanbaoTrader(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_callYuanbaoTrader(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__callYuanbaoTrader_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __callYuanbaoTrader_name, __cb);
        try
        {
            __result.__prepare(__callYuanbaoTrader_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_callYuanbaoTrader(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __callYuanbaoTrader_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean callYuanbaoTrader_async(AMI_Trader_callYuanbaoTrader __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__callYuanbaoTrader_name);
            __r = begin_callYuanbaoTrader(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __callYuanbaoTrader_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean callYuanbaoTrader_async(AMI_Trader_callYuanbaoTrader __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__callYuanbaoTrader_name);
            __r = begin_callYuanbaoTrader(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __callYuanbaoTrader_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallenge_name = "endChallenge";

    public void endChallenge(DuelResult result)
        throws NoteException
    {
        endChallenge(result, null, false);
    }

    public void endChallenge(DuelResult result, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        endChallenge(result, __ctx, true);
    }

    private void endChallenge(DuelResult result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallenge");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    __del.endChallenge(result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_endChallenge(DuelResult result)
    {
        return begin_endChallenge(result, null, false, null);
    }

    public Ice.AsyncResult begin_endChallenge(DuelResult result, java.util.Map<String, String> __ctx)
    {
        return begin_endChallenge(result, __ctx, true, null);
    }

    public Ice.AsyncResult begin_endChallenge(DuelResult result, Ice.Callback __cb)
    {
        return begin_endChallenge(result, null, false, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(DuelResult result, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallenge(result, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(DuelResult result, Callback_Trader_endChallenge __cb)
    {
        return begin_endChallenge(result, null, false, __cb);
    }

    public Ice.AsyncResult begin_endChallenge(DuelResult result, java.util.Map<String, String> __ctx, Callback_Trader_endChallenge __cb)
    {
        return begin_endChallenge(result, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallenge(DuelResult result, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
        try
        {
            __result.__prepare(__endChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            result.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_endChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean endChallenge_async(AMI_Trader_endChallenge __cb, DuelResult result)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(result, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean endChallenge_async(AMI_Trader_endChallenge __cb, DuelResult result, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(result, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getTraderView_name = "getTraderView";

    public String getTraderView()
        throws NoteException
    {
        return getTraderView(null, false);
    }

    public String getTraderView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getTraderView(__ctx, true);
    }

    private String getTraderView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTraderView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTraderView");
                    __delBase = __getDelegate(false);
                    _TraderDel __del = (_TraderDel)__delBase;
                    return __del.getTraderView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTraderView()
    {
        return begin_getTraderView(null, false, null);
    }

    public Ice.AsyncResult begin_getTraderView(java.util.Map<String, String> __ctx)
    {
        return begin_getTraderView(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTraderView(Ice.Callback __cb)
    {
        return begin_getTraderView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTraderView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTraderView(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTraderView(Callback_Trader_getTraderView __cb)
    {
        return begin_getTraderView(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTraderView(java.util.Map<String, String> __ctx, Callback_Trader_getTraderView __cb)
    {
        return begin_getTraderView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTraderView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTraderView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTraderView_name, __cb);
        try
        {
            __result.__prepare(__getTraderView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getTraderView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getTraderView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getTraderView_async(AMI_Trader_getTraderView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTraderView_name);
            __r = begin_getTraderView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTraderView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getTraderView_async(AMI_Trader_getTraderView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTraderView_name);
            __r = begin_getTraderView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTraderView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static TraderPrx checkedCast(Ice.ObjectPrx __obj)
    {
        TraderPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TraderPrx)
            {
                __d = (TraderPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    TraderPrxHelper __h = new TraderPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TraderPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        TraderPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TraderPrx)
            {
                __d = (TraderPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    TraderPrxHelper __h = new TraderPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TraderPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TraderPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    TraderPrxHelper __h = new TraderPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TraderPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        TraderPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    TraderPrxHelper __h = new TraderPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TraderPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        TraderPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TraderPrx)
            {
                __d = (TraderPrx)__obj;
            }
            else
            {
                TraderPrxHelper __h = new TraderPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static TraderPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TraderPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            TraderPrxHelper __h = new TraderPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Trader"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _TraderDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _TraderDelD();
    }

    public static void __write(IceInternal.BasicStream __os, TraderPrx v)
    {
        __os.writeProxy(v);
    }

    public static TraderPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TraderPrxHelper result = new TraderPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
