// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Treasure.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class TreasureGroup implements java.lang.Cloneable, java.io.Serializable
{
    public int id;

    public String[] huntHeros;

    public RecommendHero[] recommendHeros;

    public boolean isOpen;

    public int openLevel;

    public int openVipLevel;

    public boolean isDepart;

    public int remainMinute;

    public int progress;

    public boolean isCanGain;

    public int stage;

    public boolean isAllOver;

    public TreasureEvent[] events;

    public int speedPrice;

    public ItemView[] gainItems;

    public TreasureGroup()
    {
    }

    public TreasureGroup(int id, String[] huntHeros, RecommendHero[] recommendHeros, boolean isOpen, int openLevel, int openVipLevel, boolean isDepart, int remainMinute, int progress, boolean isCanGain, int stage, boolean isAllOver, TreasureEvent[] events, int speedPrice, ItemView[] gainItems)
    {
        this.id = id;
        this.huntHeros = huntHeros;
        this.recommendHeros = recommendHeros;
        this.isOpen = isOpen;
        this.openLevel = openLevel;
        this.openVipLevel = openVipLevel;
        this.isDepart = isDepart;
        this.remainMinute = remainMinute;
        this.progress = progress;
        this.isCanGain = isCanGain;
        this.stage = stage;
        this.isAllOver = isAllOver;
        this.events = events;
        this.speedPrice = speedPrice;
        this.gainItems = gainItems;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TreasureGroup _r = null;
        if(rhs instanceof TreasureGroup)
        {
            _r = (TreasureGroup)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(!java.util.Arrays.equals(huntHeros, _r.huntHeros))
            {
                return false;
            }
            if(!java.util.Arrays.equals(recommendHeros, _r.recommendHeros))
            {
                return false;
            }
            if(isOpen != _r.isOpen)
            {
                return false;
            }
            if(openLevel != _r.openLevel)
            {
                return false;
            }
            if(openVipLevel != _r.openVipLevel)
            {
                return false;
            }
            if(isDepart != _r.isDepart)
            {
                return false;
            }
            if(remainMinute != _r.remainMinute)
            {
                return false;
            }
            if(progress != _r.progress)
            {
                return false;
            }
            if(isCanGain != _r.isCanGain)
            {
                return false;
            }
            if(stage != _r.stage)
            {
                return false;
            }
            if(isAllOver != _r.isAllOver)
            {
                return false;
            }
            if(!java.util.Arrays.equals(events, _r.events))
            {
                return false;
            }
            if(speedPrice != _r.speedPrice)
            {
                return false;
            }
            if(!java.util.Arrays.equals(gainItems, _r.gainItems))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::TreasureGroup");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, huntHeros);
        __h = IceInternal.HashUtil.hashAdd(__h, recommendHeros);
        __h = IceInternal.HashUtil.hashAdd(__h, isOpen);
        __h = IceInternal.HashUtil.hashAdd(__h, openLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, openVipLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, isDepart);
        __h = IceInternal.HashUtil.hashAdd(__h, remainMinute);
        __h = IceInternal.HashUtil.hashAdd(__h, progress);
        __h = IceInternal.HashUtil.hashAdd(__h, isCanGain);
        __h = IceInternal.HashUtil.hashAdd(__h, stage);
        __h = IceInternal.HashUtil.hashAdd(__h, isAllOver);
        __h = IceInternal.HashUtil.hashAdd(__h, events);
        __h = IceInternal.HashUtil.hashAdd(__h, speedPrice);
        __h = IceInternal.HashUtil.hashAdd(__h, gainItems);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(id);
        StringSeqHelper.write(__os, huntHeros);
        RecommendHeroSeqHelper.write(__os, recommendHeros);
        __os.writeBool(isOpen);
        __os.writeInt(openLevel);
        __os.writeInt(openVipLevel);
        __os.writeBool(isDepart);
        __os.writeInt(remainMinute);
        __os.writeInt(progress);
        __os.writeBool(isCanGain);
        __os.writeInt(stage);
        __os.writeBool(isAllOver);
        TreasureEventSeqHelper.write(__os, events);
        __os.writeInt(speedPrice);
        ItemViewSeqHelper.write(__os, gainItems);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readInt();
        huntHeros = StringSeqHelper.read(__is);
        recommendHeros = RecommendHeroSeqHelper.read(__is);
        isOpen = __is.readBool();
        openLevel = __is.readInt();
        openVipLevel = __is.readInt();
        isDepart = __is.readBool();
        remainMinute = __is.readInt();
        progress = __is.readInt();
        isCanGain = __is.readBool();
        stage = __is.readInt();
        isAllOver = __is.readBool();
        events = TreasureEventSeqHelper.read(__is);
        speedPrice = __is.readInt();
        gainItems = ItemViewSeqHelper.read(__is);
    }

    public static final long serialVersionUID = 1411033907L;
}
