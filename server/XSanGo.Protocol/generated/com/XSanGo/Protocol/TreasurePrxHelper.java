// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Treasure.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

/**
 * 寻宝
 **/
public final class TreasurePrxHelper extends Ice.ObjectPrxHelperBase implements TreasurePrx
{
    private static final String __depart_name = "depart";

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     **/
    public String depart(int id, String heroIds)
        throws NoteException
    {
        return depart(id, heroIds, null, false);
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String depart(int id, String heroIds, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return depart(id, heroIds, __ctx, true);
    }

    private String depart(int id, String heroIds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "depart", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("depart");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.depart(id, heroIds, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_depart(int id, String heroIds)
    {
        return begin_depart(id, heroIds, null, false, null);
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_depart(int id, String heroIds, java.util.Map<String, String> __ctx)
    {
        return begin_depart(id, heroIds, __ctx, true, null);
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_depart(int id, String heroIds, Ice.Callback __cb)
    {
        return begin_depart(id, heroIds, null, false, __cb);
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_depart(int id, String heroIds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_depart(id, heroIds, __ctx, true, __cb);
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_depart(int id, String heroIds, Callback_Treasure_depart __cb)
    {
        return begin_depart(id, heroIds, null, false, __cb);
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_depart(int id, String heroIds, java.util.Map<String, String> __ctx, Callback_Treasure_depart __cb)
    {
        return begin_depart(id, heroIds, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_depart(int id, String heroIds, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__depart_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __depart_name, __cb);
        try
        {
            __result.__prepare(__depart_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(heroIds);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_depart(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __depart_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean depart_async(AMI_Treasure_depart __cb, int id, String heroIds)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__depart_name);
            __r = begin_depart(id, heroIds, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __depart_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 出发。heroIds-武将数据库ID用,分割 返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean depart_async(AMI_Treasure_depart __cb, int id, String heroIds, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__depart_name);
            __r = begin_depart(id, heroIds, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __depart_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __gain_name = "gain";

    /**
     * 收获，返回ItemViewSeq的lua
     **/
    public String gain(int id)
        throws NoteException
    {
        return gain(id, null, false);
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String gain(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return gain(id, __ctx, true);
    }

    private String gain(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "gain", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("gain");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.gain(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gain(int id)
    {
        return begin_gain(id, null, false, null);
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gain(int id, java.util.Map<String, String> __ctx)
    {
        return begin_gain(id, __ctx, true, null);
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gain(int id, Ice.Callback __cb)
    {
        return begin_gain(id, null, false, __cb);
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gain(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_gain(id, __ctx, true, __cb);
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_gain(int id, Callback_Treasure_gain __cb)
    {
        return begin_gain(id, null, false, __cb);
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_gain(int id, java.util.Map<String, String> __ctx, Callback_Treasure_gain __cb)
    {
        return begin_gain(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_gain(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__gain_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __gain_name, __cb);
        try
        {
            __result.__prepare(__gain_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_gain(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __gain_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean gain_async(AMI_Treasure_gain __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__gain_name);
            __r = begin_gain(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __gain_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 收获，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean gain_async(AMI_Treasure_gain __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__gain_name);
            __r = begin_gain(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __gain_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getAccidentFriend_name = "getAccidentFriend";

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     **/
    public String getAccidentFriend()
        throws NoteException
    {
        return getAccidentFriend(null, false);
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getAccidentFriend(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getAccidentFriend(__ctx, true);
    }

    private String getAccidentFriend(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAccidentFriend", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAccidentFriend");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.getAccidentFriend(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAccidentFriend()
    {
        return begin_getAccidentFriend(null, false, null);
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAccidentFriend(java.util.Map<String, String> __ctx)
    {
        return begin_getAccidentFriend(__ctx, true, null);
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAccidentFriend(Ice.Callback __cb)
    {
        return begin_getAccidentFriend(null, false, __cb);
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAccidentFriend(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAccidentFriend(__ctx, true, __cb);
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAccidentFriend(Callback_Treasure_getAccidentFriend __cb)
    {
        return begin_getAccidentFriend(null, false, __cb);
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAccidentFriend(java.util.Map<String, String> __ctx, Callback_Treasure_getAccidentFriend __cb)
    {
        return begin_getAccidentFriend(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAccidentFriend(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAccidentFriend_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAccidentFriend_name, __cb);
        try
        {
            __result.__prepare(__getAccidentFriend_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getAccidentFriend(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getAccidentFriend_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getAccidentFriend_async(AMI_Treasure_getAccidentFriend __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAccidentFriend_name);
            __r = begin_getAccidentFriend(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAccidentFriend_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取发生矿难的好友列表，返回TreasureFriendSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getAccidentFriend_async(AMI_Treasure_getAccidentFriend __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAccidentFriend_name);
            __r = begin_getAccidentFriend(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAccidentFriend_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getAccidentLog_name = "getAccidentLog";

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     **/
    public String getAccidentLog()
        throws NoteException
    {
        return getAccidentLog(null, false);
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getAccidentLog(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getAccidentLog(__ctx, true);
    }

    private String getAccidentLog(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAccidentLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAccidentLog");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.getAccidentLog(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAccidentLog()
    {
        return begin_getAccidentLog(null, false, null);
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAccidentLog(java.util.Map<String, String> __ctx)
    {
        return begin_getAccidentLog(__ctx, true, null);
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAccidentLog(Ice.Callback __cb)
    {
        return begin_getAccidentLog(null, false, __cb);
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAccidentLog(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAccidentLog(__ctx, true, __cb);
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAccidentLog(Callback_Treasure_getAccidentLog __cb)
    {
        return begin_getAccidentLog(null, false, __cb);
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAccidentLog(java.util.Map<String, String> __ctx, Callback_Treasure_getAccidentLog __cb)
    {
        return begin_getAccidentLog(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAccidentLog(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAccidentLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAccidentLog_name, __cb);
        try
        {
            __result.__prepare(__getAccidentLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getAccidentLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getAccidentLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getAccidentLog_async(AMI_Treasure_getAccidentLog __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAccidentLog_name);
            __r = begin_getAccidentLog(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAccidentLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取矿难记录，返回TreasureAccidentLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getAccidentLog_async(AMI_Treasure_getAccidentLog __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getAccidentLog_name);
            __r = begin_getAccidentLog(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getAccidentLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRescueFriend_name = "getRescueFriend";

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     **/
    public String getRescueFriend()
        throws NoteException
    {
        return getRescueFriend(null, false);
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getRescueFriend(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRescueFriend(__ctx, true);
    }

    private String getRescueFriend(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRescueFriend", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRescueFriend");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.getRescueFriend(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRescueFriend()
    {
        return begin_getRescueFriend(null, false, null);
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRescueFriend(java.util.Map<String, String> __ctx)
    {
        return begin_getRescueFriend(__ctx, true, null);
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRescueFriend(Ice.Callback __cb)
    {
        return begin_getRescueFriend(null, false, __cb);
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRescueFriend(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRescueFriend(__ctx, true, __cb);
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRescueFriend(Callback_Treasure_getRescueFriend __cb)
    {
        return begin_getRescueFriend(null, false, __cb);
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRescueFriend(java.util.Map<String, String> __ctx, Callback_Treasure_getRescueFriend __cb)
    {
        return begin_getRescueFriend(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRescueFriend(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRescueFriend_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRescueFriend_name, __cb);
        try
        {
            __result.__prepare(__getRescueFriend_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getRescueFriend(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRescueFriend_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getRescueFriend_async(AMI_Treasure_getRescueFriend __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRescueFriend_name);
            __r = begin_getRescueFriend(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRescueFriend_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 打开求援界面，返回TreasureRecourseView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRescueFriend_async(AMI_Treasure_getRescueFriend __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRescueFriend_name);
            __r = begin_getRescueFriend(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRescueFriend_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRescueLog_name = "getRescueLog";

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     **/
    public String getRescueLog()
        throws NoteException
    {
        return getRescueLog(null, false);
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getRescueLog(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getRescueLog(__ctx, true);
    }

    private String getRescueLog(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRescueLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRescueLog");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.getRescueLog(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRescueLog()
    {
        return begin_getRescueLog(null, false, null);
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRescueLog(java.util.Map<String, String> __ctx)
    {
        return begin_getRescueLog(__ctx, true, null);
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRescueLog(Ice.Callback __cb)
    {
        return begin_getRescueLog(null, false, __cb);
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRescueLog(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRescueLog(__ctx, true, __cb);
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRescueLog(Callback_Treasure_getRescueLog __cb)
    {
        return begin_getRescueLog(null, false, __cb);
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRescueLog(java.util.Map<String, String> __ctx, Callback_Treasure_getRescueLog __cb)
    {
        return begin_getRescueLog(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRescueLog(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRescueLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRescueLog_name, __cb);
        try
        {
            __result.__prepare(__getRescueLog_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getRescueLog(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getRescueLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getRescueLog_async(AMI_Treasure_getRescueLog __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRescueLog_name);
            __r = begin_getRescueLog(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRescueLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取援救记录，返回TreasureRescueLogSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getRescueLog_async(AMI_Treasure_getRescueLog __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getRescueLog_name);
            __r = begin_getRescueLog(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getRescueLog_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getTreasureView_name = "getTreasureView";

    /**
     * 获取寻宝view，返回TreasureView的lua
     **/
    public String getTreasureView()
        throws NoteException
    {
        return getTreasureView(null, false);
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getTreasureView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getTreasureView(__ctx, true);
    }

    private String getTreasureView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTreasureView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTreasureView");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.getTreasureView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTreasureView()
    {
        return begin_getTreasureView(null, false, null);
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTreasureView(java.util.Map<String, String> __ctx)
    {
        return begin_getTreasureView(__ctx, true, null);
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTreasureView(Ice.Callback __cb)
    {
        return begin_getTreasureView(null, false, __cb);
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTreasureView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTreasureView(__ctx, true, __cb);
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTreasureView(Callback_Treasure_getTreasureView __cb)
    {
        return begin_getTreasureView(null, false, __cb);
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTreasureView(java.util.Map<String, String> __ctx, Callback_Treasure_getTreasureView __cb)
    {
        return begin_getTreasureView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTreasureView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTreasureView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTreasureView_name, __cb);
        try
        {
            __result.__prepare(__getTreasureView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getTreasureView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getTreasureView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getTreasureView_async(AMI_Treasure_getTreasureView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTreasureView_name);
            __r = begin_getTreasureView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTreasureView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取寻宝view，返回TreasureView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getTreasureView_async(AMI_Treasure_getTreasureView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTreasureView_name);
            __r = begin_getTreasureView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTreasureView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __recall_name = "recall";

    /**
     * 召回
     **/
    public void recall(int id)
        throws NoteException
    {
        recall(id, null, false);
    }

    /**
     * 召回
     * @param __ctx The Context map to send with the invocation.
     **/
    public void recall(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        recall(id, __ctx, true);
    }

    private void recall(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "recall", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("recall");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    __del.recall(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 召回
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_recall(int id)
    {
        return begin_recall(id, null, false, null);
    }

    /**
     * 召回
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recall(int id, java.util.Map<String, String> __ctx)
    {
        return begin_recall(id, __ctx, true, null);
    }

    /**
     * 召回
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_recall(int id, Ice.Callback __cb)
    {
        return begin_recall(id, null, false, __cb);
    }

    /**
     * 召回
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recall(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recall(id, __ctx, true, __cb);
    }

    /**
     * 召回
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_recall(int id, Callback_Treasure_recall __cb)
    {
        return begin_recall(id, null, false, __cb);
    }

    /**
     * 召回
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recall(int id, java.util.Map<String, String> __ctx, Callback_Treasure_recall __cb)
    {
        return begin_recall(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recall(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recall_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recall_name, __cb);
        try
        {
            __result.__prepare(__recall_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_recall(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __recall_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 召回
     * @param __cb The callback object for the operation.
     **/
    public boolean recall_async(AMI_Treasure_recall __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__recall_name);
            __r = begin_recall(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __recall_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 召回
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean recall_async(AMI_Treasure_recall __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__recall_name);
            __r = begin_recall(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __recall_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __rescue_name = "rescue";

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     **/
    public String rescue(String friendId)
        throws NoteException
    {
        return rescue(friendId, null, false);
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String rescue(String friendId, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return rescue(friendId, __ctx, true);
    }

    private String rescue(String friendId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "rescue", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("rescue");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.rescue(friendId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rescue(String friendId)
    {
        return begin_rescue(friendId, null, false, null);
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rescue(String friendId, java.util.Map<String, String> __ctx)
    {
        return begin_rescue(friendId, __ctx, true, null);
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rescue(String friendId, Ice.Callback __cb)
    {
        return begin_rescue(friendId, null, false, __cb);
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rescue(String friendId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rescue(friendId, __ctx, true, __cb);
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rescue(String friendId, Callback_Treasure_rescue __cb)
    {
        return begin_rescue(friendId, null, false, __cb);
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rescue(String friendId, java.util.Map<String, String> __ctx, Callback_Treasure_rescue __cb)
    {
        return begin_rescue(friendId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rescue(String friendId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rescue_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rescue_name, __cb);
        try
        {
            __result.__prepare(__rescue_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(friendId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_rescue(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __rescue_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean rescue_async(AMI_Treasure_rescue __cb, String friendId)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rescue_name);
            __r = begin_rescue(friendId, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rescue_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 救援好友矿难，返回ItemViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean rescue_async(AMI_Treasure_rescue __cb, String friendId, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__rescue_name);
            __r = begin_rescue(friendId, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __rescue_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __saveRescueMsg_name = "saveRescueMsg";

    /**
     * 保存求援私信
     **/
    public void saveRescueMsg(String msg)
        throws NoteException
    {
        saveRescueMsg(msg, null, false);
    }

    /**
     * 保存求援私信
     * @param __ctx The Context map to send with the invocation.
     **/
    public void saveRescueMsg(String msg, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        saveRescueMsg(msg, __ctx, true);
    }

    private void saveRescueMsg(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveRescueMsg", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("saveRescueMsg");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    __del.saveRescueMsg(msg, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 保存求援私信
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveRescueMsg(String msg)
    {
        return begin_saveRescueMsg(msg, null, false, null);
    }

    /**
     * 保存求援私信
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveRescueMsg(String msg, java.util.Map<String, String> __ctx)
    {
        return begin_saveRescueMsg(msg, __ctx, true, null);
    }

    /**
     * 保存求援私信
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveRescueMsg(String msg, Ice.Callback __cb)
    {
        return begin_saveRescueMsg(msg, null, false, __cb);
    }

    /**
     * 保存求援私信
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveRescueMsg(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveRescueMsg(msg, __ctx, true, __cb);
    }

    /**
     * 保存求援私信
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_saveRescueMsg(String msg, Callback_Treasure_saveRescueMsg __cb)
    {
        return begin_saveRescueMsg(msg, null, false, __cb);
    }

    /**
     * 保存求援私信
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_saveRescueMsg(String msg, java.util.Map<String, String> __ctx, Callback_Treasure_saveRescueMsg __cb)
    {
        return begin_saveRescueMsg(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveRescueMsg(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveRescueMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveRescueMsg_name, __cb);
        try
        {
            __result.__prepare(__saveRescueMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(msg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_saveRescueMsg(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __saveRescueMsg_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 保存求援私信
     * @param __cb The callback object for the operation.
     **/
    public boolean saveRescueMsg_async(AMI_Treasure_saveRescueMsg __cb, String msg)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveRescueMsg_name);
            __r = begin_saveRescueMsg(msg, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveRescueMsg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 保存求援私信
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean saveRescueMsg_async(AMI_Treasure_saveRescueMsg __cb, String msg, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__saveRescueMsg_name);
            __r = begin_saveRescueMsg(msg, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __saveRescueMsg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __sendRescueMsg_name = "sendRescueMsg";

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     **/
    public void sendRescueMsg(String friendIds)
        throws NoteException
    {
        sendRescueMsg(friendIds, null, false);
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendRescueMsg(String friendIds, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        sendRescueMsg(friendIds, __ctx, true);
    }

    private void sendRescueMsg(String friendIds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendRescueMsg", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("sendRescueMsg");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    __del.sendRescueMsg(friendIds, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendRescueMsg(String friendIds)
    {
        return begin_sendRescueMsg(friendIds, null, false, null);
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendRescueMsg(String friendIds, java.util.Map<String, String> __ctx)
    {
        return begin_sendRescueMsg(friendIds, __ctx, true, null);
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendRescueMsg(String friendIds, Ice.Callback __cb)
    {
        return begin_sendRescueMsg(friendIds, null, false, __cb);
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendRescueMsg(String friendIds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendRescueMsg(friendIds, __ctx, true, __cb);
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_sendRescueMsg(String friendIds, Callback_Treasure_sendRescueMsg __cb)
    {
        return begin_sendRescueMsg(friendIds, null, false, __cb);
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_sendRescueMsg(String friendIds, java.util.Map<String, String> __ctx, Callback_Treasure_sendRescueMsg __cb)
    {
        return begin_sendRescueMsg(friendIds, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendRescueMsg(String friendIds, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendRescueMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendRescueMsg_name, __cb);
        try
        {
            __result.__prepare(__sendRescueMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(friendIds);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_sendRescueMsg(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __sendRescueMsg_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __cb The callback object for the operation.
     **/
    public boolean sendRescueMsg_async(AMI_Treasure_sendRescueMsg __cb, String friendIds)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendRescueMsg_name);
            __r = begin_sendRescueMsg(friendIds, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendRescueMsg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 向好友发送求援私信，friendIds多个用,分割
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean sendRescueMsg_async(AMI_Treasure_sendRescueMsg __cb, String friendIds, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__sendRescueMsg_name);
            __r = begin_sendRescueMsg(friendIds, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __sendRescueMsg_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __speed_name = "speed";

    /**
     * 加速,返回TreasureViewSeq的lua
     **/
    public String speed(int id)
        throws NoteException
    {
        return speed(id, null, false);
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String speed(int id, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return speed(id, __ctx, true);
    }

    private String speed(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "speed", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("speed");
                    __delBase = __getDelegate(false);
                    _TreasureDel __del = (_TreasureDel)__delBase;
                    return __del.speed(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_speed(int id)
    {
        return begin_speed(id, null, false, null);
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_speed(int id, java.util.Map<String, String> __ctx)
    {
        return begin_speed(id, __ctx, true, null);
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_speed(int id, Ice.Callback __cb)
    {
        return begin_speed(id, null, false, __cb);
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_speed(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_speed(id, __ctx, true, __cb);
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_speed(int id, Callback_Treasure_speed __cb)
    {
        return begin_speed(id, null, false, __cb);
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_speed(int id, java.util.Map<String, String> __ctx, Callback_Treasure_speed __cb)
    {
        return begin_speed(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_speed(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__speed_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __speed_name, __cb);
        try
        {
            __result.__prepare(__speed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_speed(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __speed_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean speed_async(AMI_Treasure_speed __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__speed_name);
            __r = begin_speed(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __speed_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 加速,返回TreasureViewSeq的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean speed_async(AMI_Treasure_speed __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__speed_name);
            __r = begin_speed(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __speed_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static TreasurePrx checkedCast(Ice.ObjectPrx __obj)
    {
        TreasurePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TreasurePrx)
            {
                __d = (TreasurePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    TreasurePrxHelper __h = new TreasurePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TreasurePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        TreasurePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TreasurePrx)
            {
                __d = (TreasurePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    TreasurePrxHelper __h = new TreasurePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TreasurePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TreasurePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    TreasurePrxHelper __h = new TreasurePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TreasurePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        TreasurePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    TreasurePrxHelper __h = new TreasurePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TreasurePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        TreasurePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TreasurePrx)
            {
                __d = (TreasurePrx)__obj;
            }
            else
            {
                TreasurePrxHelper __h = new TreasurePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static TreasurePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TreasurePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            TreasurePrxHelper __h = new TreasurePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Treasure"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _TreasureDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _TreasureDelD();
    }

    public static void __write(IceInternal.BasicStream __os, TreasurePrx v)
    {
        __os.writeProxy(v);
    }

    public static TreasurePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TreasurePrxHelper result = new TreasurePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
