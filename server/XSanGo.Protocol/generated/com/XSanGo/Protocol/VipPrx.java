// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Vip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface VipPrx extends Ice.ObjectPrx
{
    public void buyVipTraderItems(int id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public void buyVipTraderItems(int id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyVipTraderItems(int id);

    public Ice.AsyncResult begin_buyVipTraderItems(int id, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyVipTraderItems(int id, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyVipTraderItems(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyVipTraderItems(int id, Callback_Vip_buyVipTraderItems __cb);

    public Ice.AsyncResult begin_buyVipTraderItems(int id, java.util.Map<String, String> __ctx, Callback_Vip_buyVipTraderItems __cb);

    public void end_buyVipTraderItems(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    public boolean buyVipTraderItems_async(AMI_Vip_buyVipTraderItems __cb, int id);

    public boolean buyVipTraderItems_async(AMI_Vip_buyVipTraderItems __cb, int id, java.util.Map<String, String> __ctx);

    public String getVipTraderItems();

    public String getVipTraderItems(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getVipTraderItems();

    public Ice.AsyncResult begin_getVipTraderItems(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getVipTraderItems(Ice.Callback __cb);

    public Ice.AsyncResult begin_getVipTraderItems(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getVipTraderItems(Callback_Vip_getVipTraderItems __cb);

    public Ice.AsyncResult begin_getVipTraderItems(java.util.Map<String, String> __ctx, Callback_Vip_getVipTraderItems __cb);

    public String end_getVipTraderItems(Ice.AsyncResult __result);

    public boolean getVipTraderItems_async(AMI_Vip_getVipTraderItems __cb);

    public boolean getVipTraderItems_async(AMI_Vip_getVipTraderItems __cb, java.util.Map<String, String> __ctx);

    public String getGiftPackStatus();

    public String getGiftPackStatus(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getGiftPackStatus();

    public Ice.AsyncResult begin_getGiftPackStatus(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getGiftPackStatus(Ice.Callback __cb);

    public Ice.AsyncResult begin_getGiftPackStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getGiftPackStatus(Callback_Vip_getGiftPackStatus __cb);

    public Ice.AsyncResult begin_getGiftPackStatus(java.util.Map<String, String> __ctx, Callback_Vip_getGiftPackStatus __cb);

    public String end_getGiftPackStatus(Ice.AsyncResult __result);

    public boolean getGiftPackStatus_async(AMI_Vip_getGiftPackStatus __cb);

    public boolean getGiftPackStatus_async(AMI_Vip_getGiftPackStatus __cb, java.util.Map<String, String> __ctx);

    public void buyGiftPacks(int vipLevel)
        throws NotEnoughYuanBaoException,
               NoteException;

    public void buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException;

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel);

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, Callback_Vip_buyGiftPacks __cb);

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx, Callback_Vip_buyGiftPacks __cb);

    public void end_buyGiftPacks(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException;

    public boolean buyGiftPacks_async(AMI_Vip_buyGiftPacks __cb, int vipLevel);

    public boolean buyGiftPacks_async(AMI_Vip_buyGiftPacks __cb, int vipLevel, java.util.Map<String, String> __ctx);

    public String openTopupVIew();

    public String openTopupVIew(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openTopupVIew();

    public Ice.AsyncResult begin_openTopupVIew(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_openTopupVIew(Ice.Callback __cb);

    public Ice.AsyncResult begin_openTopupVIew(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_openTopupVIew(Callback_Vip_openTopupVIew __cb);

    public Ice.AsyncResult begin_openTopupVIew(java.util.Map<String, String> __ctx, Callback_Vip_openTopupVIew __cb);

    public String end_openTopupVIew(Ice.AsyncResult __result);

    public boolean openTopupVIew_async(AMI_Vip_openTopupVIew __cb);

    public boolean openTopupVIew_async(AMI_Vip_openTopupVIew __cb, java.util.Map<String, String> __ctx);

    public void checkChargeStatus(int chargeId, boolean chargeForFriend)
        throws NoteException;

    public void checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend);

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, Ice.Callback __cb);

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, Callback_Vip_checkChargeStatus __cb);

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx, Callback_Vip_checkChargeStatus __cb);

    public void end_checkChargeStatus(Ice.AsyncResult __result)
        throws NoteException;

    public boolean checkChargeStatus_async(AMI_Vip_checkChargeStatus __cb, int chargeId, boolean chargeForFriend);

    public boolean checkChargeStatus_async(AMI_Vip_checkChargeStatus __cb, int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx);

    public String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params)
        throws NoteException;

    public String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, Ice.Callback __cb);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, Callback_Vip_getChannelOrderIdFromPayCenter __cb);

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx, Callback_Vip_getChannelOrderIdFromPayCenter __cb);

    public String end_getChannelOrderIdFromPayCenter(Ice.AsyncResult __result)
        throws NoteException;

    public boolean getChannelOrderIdFromPayCenter_async(AMI_Vip_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String params);

    public boolean getChannelOrderIdFromPayCenter_async(AMI_Vip_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx);

    public void createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params)
        throws NoteException;

    public void createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, Ice.Callback __cb);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, Callback_Vip_createOrderForAppleAppStore __cb);

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx, Callback_Vip_createOrderForAppleAppStore __cb);

    public void end_createOrderForAppleAppStore(Ice.AsyncResult __result)
        throws NoteException;

    public boolean createOrderForAppleAppStore_async(AMI_Vip_createOrderForAppleAppStore __cb, int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params);

    public boolean createOrderForAppleAppStore_async(AMI_Vip_createOrderForAppleAppStore __cb, int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx);
}
