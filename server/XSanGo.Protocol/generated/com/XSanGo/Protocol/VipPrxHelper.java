// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Vip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class VipPrxHelper extends Ice.ObjectPrxHelperBase implements VipPrx
{
    private static final String __buyGiftPacks_name = "buyGiftPacks";

    public void buyGiftPacks(int vipLevel)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyGiftPacks(vipLevel, null, false);
    }

    public void buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyGiftPacks(vipLevel, __ctx, true);
    }

    private void buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyGiftPacks", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyGiftPacks");
                    __delBase = __getDelegate(false);
                    _VipDel __del = (_VipDel)__delBase;
                    __del.buyGiftPacks(vipLevel, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel)
    {
        return begin_buyGiftPacks(vipLevel, null, false, null);
    }

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx)
    {
        return begin_buyGiftPacks(vipLevel, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, Ice.Callback __cb)
    {
        return begin_buyGiftPacks(vipLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyGiftPacks(vipLevel, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, Callback_Vip_buyGiftPacks __cb)
    {
        return begin_buyGiftPacks(vipLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx, Callback_Vip_buyGiftPacks __cb)
    {
        return begin_buyGiftPacks(vipLevel, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyGiftPacks(int vipLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyGiftPacks_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyGiftPacks_name, __cb);
        try
        {
            __result.__prepare(__buyGiftPacks_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(vipLevel);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyGiftPacks(Ice.AsyncResult __result)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyGiftPacks_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyGiftPacks_async(AMI_Vip_buyGiftPacks __cb, int vipLevel)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyGiftPacks_name);
            __r = begin_buyGiftPacks(vipLevel, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyGiftPacks_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyGiftPacks_async(AMI_Vip_buyGiftPacks __cb, int vipLevel, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyGiftPacks_name);
            __r = begin_buyGiftPacks(vipLevel, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyGiftPacks_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyVipTraderItems_name = "buyVipTraderItems";

    public void buyVipTraderItems(int id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyVipTraderItems(id, null, false);
    }

    public void buyVipTraderItems(int id, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyVipTraderItems(id, __ctx, true);
    }

    private void buyVipTraderItems(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyVipTraderItems", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyVipTraderItems");
                    __delBase = __getDelegate(false);
                    _VipDel __del = (_VipDel)__delBase;
                    __del.buyVipTraderItems(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_buyVipTraderItems(int id)
    {
        return begin_buyVipTraderItems(id, null, false, null);
    }

    public Ice.AsyncResult begin_buyVipTraderItems(int id, java.util.Map<String, String> __ctx)
    {
        return begin_buyVipTraderItems(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_buyVipTraderItems(int id, Ice.Callback __cb)
    {
        return begin_buyVipTraderItems(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyVipTraderItems(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyVipTraderItems(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_buyVipTraderItems(int id, Callback_Vip_buyVipTraderItems __cb)
    {
        return begin_buyVipTraderItems(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_buyVipTraderItems(int id, java.util.Map<String, String> __ctx, Callback_Vip_buyVipTraderItems __cb)
    {
        return begin_buyVipTraderItems(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyVipTraderItems(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyVipTraderItems_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyVipTraderItems_name, __cb);
        try
        {
            __result.__prepare(__buyVipTraderItems_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_buyVipTraderItems(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyVipTraderItems_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NotEnoughMoneyException __ex)
                {
                    throw __ex;
                }
                catch(NotEnoughYuanBaoException __ex)
                {
                    throw __ex;
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean buyVipTraderItems_async(AMI_Vip_buyVipTraderItems __cb, int id)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyVipTraderItems_name);
            __r = begin_buyVipTraderItems(id, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyVipTraderItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean buyVipTraderItems_async(AMI_Vip_buyVipTraderItems __cb, int id, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyVipTraderItems_name);
            __r = begin_buyVipTraderItems(id, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyVipTraderItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __checkChargeStatus_name = "checkChargeStatus";

    public void checkChargeStatus(int chargeId, boolean chargeForFriend)
        throws NoteException
    {
        checkChargeStatus(chargeId, chargeForFriend, null, false);
    }

    public void checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        checkChargeStatus(chargeId, chargeForFriend, __ctx, true);
    }

    private void checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "checkChargeStatus", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("checkChargeStatus");
                    __delBase = __getDelegate(false);
                    _VipDel __del = (_VipDel)__delBase;
                    __del.checkChargeStatus(chargeId, chargeForFriend, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend)
    {
        return begin_checkChargeStatus(chargeId, chargeForFriend, null, false, null);
    }

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx)
    {
        return begin_checkChargeStatus(chargeId, chargeForFriend, __ctx, true, null);
    }

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, Ice.Callback __cb)
    {
        return begin_checkChargeStatus(chargeId, chargeForFriend, null, false, __cb);
    }

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_checkChargeStatus(chargeId, chargeForFriend, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, Callback_Vip_checkChargeStatus __cb)
    {
        return begin_checkChargeStatus(chargeId, chargeForFriend, null, false, __cb);
    }

    public Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx, Callback_Vip_checkChargeStatus __cb)
    {
        return begin_checkChargeStatus(chargeId, chargeForFriend, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_checkChargeStatus(int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__checkChargeStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __checkChargeStatus_name, __cb);
        try
        {
            __result.__prepare(__checkChargeStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(chargeId);
            __os.writeBool(chargeForFriend);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_checkChargeStatus(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __checkChargeStatus_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean checkChargeStatus_async(AMI_Vip_checkChargeStatus __cb, int chargeId, boolean chargeForFriend)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__checkChargeStatus_name);
            __r = begin_checkChargeStatus(chargeId, chargeForFriend, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __checkChargeStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean checkChargeStatus_async(AMI_Vip_checkChargeStatus __cb, int chargeId, boolean chargeForFriend, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__checkChargeStatus_name);
            __r = begin_checkChargeStatus(chargeId, chargeForFriend, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __checkChargeStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __createOrderForAppleAppStore_name = "createOrderForAppleAppStore";

    public void createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params)
        throws NoteException
    {
        createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, null, false);
    }

    public void createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, __ctx, true);
    }

    private void createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "createOrderForAppleAppStore", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("createOrderForAppleAppStore");
                    __delBase = __getDelegate(false);
                    _VipDel __del = (_VipDel)__delBase;
                    __del.createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params)
    {
        return begin_createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, null, false, null);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx)
    {
        return begin_createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, __ctx, true, null);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, Ice.Callback __cb)
    {
        return begin_createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, Callback_Vip_createOrderForAppleAppStore __cb)
    {
        return begin_createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx, Callback_Vip_createOrderForAppleAppStore __cb)
    {
        return begin_createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_createOrderForAppleAppStore(int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createOrderForAppleAppStore_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __createOrderForAppleAppStore_name, __cb);
        try
        {
            __result.__prepare(__createOrderForAppleAppStore_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(templateId);
            __os.writeString(appStoreOrderId);
            __os.writeInt(channel);
            __os.writeInt(appId);
            __os.writeString(itemId);
            __os.writeString(mac);
            __os.writeString(params);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_createOrderForAppleAppStore(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __createOrderForAppleAppStore_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean createOrderForAppleAppStore_async(AMI_Vip_createOrderForAppleAppStore __cb, int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__createOrderForAppleAppStore_name);
            __r = begin_createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __createOrderForAppleAppStore_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean createOrderForAppleAppStore_async(AMI_Vip_createOrderForAppleAppStore __cb, int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__createOrderForAppleAppStore_name);
            __r = begin_createOrderForAppleAppStore(templateId, appStoreOrderId, channel, appId, itemId, mac, params, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __createOrderForAppleAppStore_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getChannelOrderIdFromPayCenter_name = "getChannelOrderIdFromPayCenter";

    public String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params)
        throws NoteException
    {
        return getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, null, false);
    }

    public String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, __ctx, true);
    }

    private String getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getChannelOrderIdFromPayCenter", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getChannelOrderIdFromPayCenter");
                    __delBase = __getDelegate(false);
                    _VipDel __del = (_VipDel)__delBase;
                    return __del.getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, null, false, null);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, Ice.Callback __cb)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, Callback_Vip_getChannelOrderIdFromPayCenter __cb)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx, Callback_Vip_getChannelOrderIdFromPayCenter __cb)
    {
        return begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChannelOrderIdFromPayCenter(int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChannelOrderIdFromPayCenter_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChannelOrderIdFromPayCenter_name, __cb);
        try
        {
            __result.__prepare(__getChannelOrderIdFromPayCenter_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(channel);
            __os.writeInt(appId);
            __os.writeInt(money);
            __os.writeString(mac);
            __os.writeString(params);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getChannelOrderIdFromPayCenter(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getChannelOrderIdFromPayCenter_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getChannelOrderIdFromPayCenter_async(AMI_Vip_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String params)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChannelOrderIdFromPayCenter_name);
            __r = begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChannelOrderIdFromPayCenter_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getChannelOrderIdFromPayCenter_async(AMI_Vip_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String params, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getChannelOrderIdFromPayCenter_name);
            __r = begin_getChannelOrderIdFromPayCenter(channel, appId, money, mac, params, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getChannelOrderIdFromPayCenter_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getGiftPackStatus_name = "getGiftPackStatus";

    public String getGiftPackStatus()
    {
        return getGiftPackStatus(null, false);
    }

    public String getGiftPackStatus(java.util.Map<String, String> __ctx)
    {
        return getGiftPackStatus(__ctx, true);
    }

    private String getGiftPackStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGiftPackStatus", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGiftPackStatus");
                    __delBase = __getDelegate(false);
                    _VipDel __del = (_VipDel)__delBase;
                    return __del.getGiftPackStatus(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getGiftPackStatus()
    {
        return begin_getGiftPackStatus(null, false, null);
    }

    public Ice.AsyncResult begin_getGiftPackStatus(java.util.Map<String, String> __ctx)
    {
        return begin_getGiftPackStatus(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getGiftPackStatus(Ice.Callback __cb)
    {
        return begin_getGiftPackStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGiftPackStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGiftPackStatus(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGiftPackStatus(Callback_Vip_getGiftPackStatus __cb)
    {
        return begin_getGiftPackStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getGiftPackStatus(java.util.Map<String, String> __ctx, Callback_Vip_getGiftPackStatus __cb)
    {
        return begin_getGiftPackStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGiftPackStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGiftPackStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGiftPackStatus_name, __cb);
        try
        {
            __result.__prepare(__getGiftPackStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getGiftPackStatus(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGiftPackStatus_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getGiftPackStatus_async(AMI_Vip_getGiftPackStatus __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getGiftPackStatus_name);
            __r = begin_getGiftPackStatus(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getGiftPackStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getGiftPackStatus_async(AMI_Vip_getGiftPackStatus __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getGiftPackStatus_name);
            __r = begin_getGiftPackStatus(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getGiftPackStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getVipTraderItems_name = "getVipTraderItems";

    public String getVipTraderItems()
    {
        return getVipTraderItems(null, false);
    }

    public String getVipTraderItems(java.util.Map<String, String> __ctx)
    {
        return getVipTraderItems(__ctx, true);
    }

    private String getVipTraderItems(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getVipTraderItems", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getVipTraderItems");
                    __delBase = __getDelegate(false);
                    _VipDel __del = (_VipDel)__delBase;
                    return __del.getVipTraderItems(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getVipTraderItems()
    {
        return begin_getVipTraderItems(null, false, null);
    }

    public Ice.AsyncResult begin_getVipTraderItems(java.util.Map<String, String> __ctx)
    {
        return begin_getVipTraderItems(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getVipTraderItems(Ice.Callback __cb)
    {
        return begin_getVipTraderItems(null, false, __cb);
    }

    public Ice.AsyncResult begin_getVipTraderItems(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getVipTraderItems(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getVipTraderItems(Callback_Vip_getVipTraderItems __cb)
    {
        return begin_getVipTraderItems(null, false, __cb);
    }

    public Ice.AsyncResult begin_getVipTraderItems(java.util.Map<String, String> __ctx, Callback_Vip_getVipTraderItems __cb)
    {
        return begin_getVipTraderItems(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getVipTraderItems(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getVipTraderItems_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getVipTraderItems_name, __cb);
        try
        {
            __result.__prepare(__getVipTraderItems_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getVipTraderItems(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getVipTraderItems_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getVipTraderItems_async(AMI_Vip_getVipTraderItems __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getVipTraderItems_name);
            __r = begin_getVipTraderItems(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getVipTraderItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getVipTraderItems_async(AMI_Vip_getVipTraderItems __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getVipTraderItems_name);
            __r = begin_getVipTraderItems(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getVipTraderItems_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __openTopupVIew_name = "openTopupVIew";

    public String openTopupVIew()
    {
        return openTopupVIew(null, false);
    }

    public String openTopupVIew(java.util.Map<String, String> __ctx)
    {
        return openTopupVIew(__ctx, true);
    }

    private String openTopupVIew(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "openTopupVIew", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("openTopupVIew");
                    __delBase = __getDelegate(false);
                    _VipDel __del = (_VipDel)__delBase;
                    return __del.openTopupVIew(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_openTopupVIew()
    {
        return begin_openTopupVIew(null, false, null);
    }

    public Ice.AsyncResult begin_openTopupVIew(java.util.Map<String, String> __ctx)
    {
        return begin_openTopupVIew(__ctx, true, null);
    }

    public Ice.AsyncResult begin_openTopupVIew(Ice.Callback __cb)
    {
        return begin_openTopupVIew(null, false, __cb);
    }

    public Ice.AsyncResult begin_openTopupVIew(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openTopupVIew(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_openTopupVIew(Callback_Vip_openTopupVIew __cb)
    {
        return begin_openTopupVIew(null, false, __cb);
    }

    public Ice.AsyncResult begin_openTopupVIew(java.util.Map<String, String> __ctx, Callback_Vip_openTopupVIew __cb)
    {
        return begin_openTopupVIew(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openTopupVIew(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openTopupVIew_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openTopupVIew_name, __cb);
        try
        {
            __result.__prepare(__openTopupVIew_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_openTopupVIew(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __openTopupVIew_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean openTopupVIew_async(AMI_Vip_openTopupVIew __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openTopupVIew_name);
            __r = begin_openTopupVIew(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openTopupVIew_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean openTopupVIew_async(AMI_Vip_openTopupVIew __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__openTopupVIew_name);
            __r = begin_openTopupVIew(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __openTopupVIew_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static VipPrx checkedCast(Ice.ObjectPrx __obj)
    {
        VipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof VipPrx)
            {
                __d = (VipPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    VipPrxHelper __h = new VipPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static VipPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        VipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof VipPrx)
            {
                __d = (VipPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    VipPrxHelper __h = new VipPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static VipPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        VipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    VipPrxHelper __h = new VipPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static VipPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        VipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    VipPrxHelper __h = new VipPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static VipPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        VipPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof VipPrx)
            {
                __d = (VipPrx)__obj;
            }
            else
            {
                VipPrxHelper __h = new VipPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static VipPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        VipPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            VipPrxHelper __h = new VipPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Vip"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _VipDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _VipDelD();
    }

    public static void __write(IceInternal.BasicStream __os, VipPrx v)
    {
        __os.writeProxy(v);
    }

    public static VipPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            VipPrxHelper result = new VipPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
