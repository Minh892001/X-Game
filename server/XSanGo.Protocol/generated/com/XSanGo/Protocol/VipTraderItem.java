// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Vip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class VipTraderItem implements java.lang.Cloneable, java.io.Serializable
{
    public int id;

    public String itemId;

    public int count;

    public String name;

    public int coinType;

    public int price;

    public int vipLevel;

    public boolean isBought;

    public VipTraderItem()
    {
    }

    public VipTraderItem(int id, String itemId, int count, String name, int coinType, int price, int vipLevel, boolean isBought)
    {
        this.id = id;
        this.itemId = itemId;
        this.count = count;
        this.name = name;
        this.coinType = coinType;
        this.price = price;
        this.vipLevel = vipLevel;
        this.isBought = isBought;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        VipTraderItem _r = null;
        if(rhs instanceof VipTraderItem)
        {
            _r = (VipTraderItem)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(itemId != _r.itemId)
            {
                if(itemId == null || _r.itemId == null || !itemId.equals(_r.itemId))
                {
                    return false;
                }
            }
            if(count != _r.count)
            {
                return false;
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(coinType != _r.coinType)
            {
                return false;
            }
            if(price != _r.price)
            {
                return false;
            }
            if(vipLevel != _r.vipLevel)
            {
                return false;
            }
            if(isBought != _r.isBought)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::VipTraderItem");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, itemId);
        __h = IceInternal.HashUtil.hashAdd(__h, count);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, coinType);
        __h = IceInternal.HashUtil.hashAdd(__h, price);
        __h = IceInternal.HashUtil.hashAdd(__h, vipLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, isBought);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(id);
        __os.writeString(itemId);
        __os.writeInt(count);
        __os.writeString(name);
        __os.writeInt(coinType);
        __os.writeInt(price);
        __os.writeInt(vipLevel);
        __os.writeBool(isBought);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readInt();
        itemId = __is.readString();
        count = __is.readInt();
        name = __is.readString();
        coinType = __is.readInt();
        price = __is.readInt();
        vipLevel = __is.readInt();
        isBought = __is.readBool();
    }

    public static final long serialVersionUID = -257793455L;
}
