// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Copy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public class WarmupOpponentView implements java.lang.Cloneable, java.io.Serializable
{
    public String opponentName;

    public int opponentLevel;

    public int opponentVip;

    public String opponentIcon;

    public int sex;

    public PvpOpponentFormationView opponent;

    public WarmupOpponentView()
    {
    }

    public WarmupOpponentView(String opponentName, int opponentLevel, int opponentVip, String opponentIcon, int sex, PvpOpponentFormationView opponent)
    {
        this.opponentName = opponentName;
        this.opponentLevel = opponentLevel;
        this.opponentVip = opponentVip;
        this.opponentIcon = opponentIcon;
        this.sex = sex;
        this.opponent = opponent;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        WarmupOpponentView _r = null;
        if(rhs instanceof WarmupOpponentView)
        {
            _r = (WarmupOpponentView)rhs;
        }

        if(_r != null)
        {
            if(opponentName != _r.opponentName)
            {
                if(opponentName == null || _r.opponentName == null || !opponentName.equals(_r.opponentName))
                {
                    return false;
                }
            }
            if(opponentLevel != _r.opponentLevel)
            {
                return false;
            }
            if(opponentVip != _r.opponentVip)
            {
                return false;
            }
            if(opponentIcon != _r.opponentIcon)
            {
                if(opponentIcon == null || _r.opponentIcon == null || !opponentIcon.equals(_r.opponentIcon))
                {
                    return false;
                }
            }
            if(sex != _r.sex)
            {
                return false;
            }
            if(opponent != _r.opponent)
            {
                if(opponent == null || _r.opponent == null || !opponent.equals(_r.opponent))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::com::XSanGo::Protocol::WarmupOpponentView");
        __h = IceInternal.HashUtil.hashAdd(__h, opponentName);
        __h = IceInternal.HashUtil.hashAdd(__h, opponentLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, opponentVip);
        __h = IceInternal.HashUtil.hashAdd(__h, opponentIcon);
        __h = IceInternal.HashUtil.hashAdd(__h, sex);
        __h = IceInternal.HashUtil.hashAdd(__h, opponent);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(opponentName);
        __os.writeInt(opponentLevel);
        __os.writeInt(opponentVip);
        __os.writeString(opponentIcon);
        __os.writeInt(sex);
        opponent.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        opponentName = __is.readString();
        opponentLevel = __is.readInt();
        opponentVip = __is.readInt();
        opponentIcon = __is.readString();
        sex = __is.readInt();
        opponent = new PvpOpponentFormationView();
        opponent.__read(__is);
    }

    public static final long serialVersionUID = -1597320886L;
}
