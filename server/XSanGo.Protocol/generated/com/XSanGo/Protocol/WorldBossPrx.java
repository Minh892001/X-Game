// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `WorldBoss.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface WorldBossPrx extends Ice.ObjectPrx
{
    /**
     * 返回worldBossView的lua
     **/
    public String getWorldBossView()
        throws NoteException;

    /**
     * 返回worldBossView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getWorldBossView(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 返回worldBossView的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getWorldBossView();

    /**
     * 返回worldBossView的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getWorldBossView(java.util.Map<String, String> __ctx);

    /**
     * 返回worldBossView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getWorldBossView(Ice.Callback __cb);

    /**
     * 返回worldBossView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getWorldBossView(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 返回worldBossView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getWorldBossView(Callback_WorldBoss_getWorldBossView __cb);

    /**
     * 返回worldBossView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getWorldBossView(java.util.Map<String, String> __ctx, Callback_WorldBoss_getWorldBossView __cb);

    /**
     * 返回worldBossView的lua
     * @param __result The asynchronous result object.
     **/
    public String end_getWorldBossView(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getWorldBossView_async(AMI_WorldBoss_getWorldBossView __cb);

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getWorldBossView_async(AMI_WorldBoss_getWorldBossView __cb, java.util.Map<String, String> __ctx);

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     **/
    public String getHarmRank()
        throws NoteException;

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getHarmRank(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHarmRank();

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx);

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHarmRank(Ice.Callback __cb);

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHarmRank(Callback_WorldBoss_getHarmRank __cb);

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx, Callback_WorldBoss_getHarmRank __cb);

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __result The asynchronous result object.
     **/
    public String end_getHarmRank(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getHarmRank_async(AMI_WorldBoss_getHarmRank __cb);

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getHarmRank_async(AMI_WorldBoss_getHarmRank __cb, java.util.Map<String, String> __ctx);

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     **/
    public String getCountRank()
        throws NoteException;

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getCountRank(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCountRank();

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCountRank(java.util.Map<String, String> __ctx);

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCountRank(Ice.Callback __cb);

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCountRank(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCountRank(Callback_WorldBoss_getCountRank __cb);

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCountRank(java.util.Map<String, String> __ctx, Callback_WorldBoss_getCountRank __cb);

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __result The asynchronous result object.
     **/
    public String end_getCountRank(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getCountRank_async(AMI_WorldBoss_getCountRank __cb);

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCountRank_async(AMI_WorldBoss_getCountRank __cb, java.util.Map<String, String> __ctx);

    /**
     * 购买鼓舞
     **/
    public void buyInspire()
        throws NoteException;

    /**
     * 购买鼓舞
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyInspire(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 购买鼓舞
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyInspire();

    /**
     * 购买鼓舞
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyInspire(java.util.Map<String, String> __ctx);

    /**
     * 购买鼓舞
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyInspire(Ice.Callback __cb);

    /**
     * 购买鼓舞
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyInspire(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 购买鼓舞
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyInspire(Callback_WorldBoss_buyInspire __cb);

    /**
     * 购买鼓舞
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_buyInspire(java.util.Map<String, String> __ctx, Callback_WorldBoss_buyInspire __cb);

    /**
     * 购买鼓舞
     * @param __result The asynchronous result object.
     **/
    public void end_buyInspire(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     **/
    public boolean buyInspire_async(AMI_WorldBoss_buyInspire __cb);

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyInspire_async(AMI_WorldBoss_buyInspire __cb, java.util.Map<String, String> __ctx);

    /**
     * 清除CD
     **/
    public void clearCd()
        throws NoteException;

    /**
     * 清除CD
     * @param __ctx The Context map to send with the invocation.
     **/
    public void clearCd(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 清除CD
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCd();

    /**
     * 清除CD
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCd(java.util.Map<String, String> __ctx);

    /**
     * 清除CD
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCd(Ice.Callback __cb);

    /**
     * 清除CD
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCd(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 清除CD
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCd(Callback_WorldBoss_clearCd __cb);

    /**
     * 清除CD
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_clearCd(java.util.Map<String, String> __ctx, Callback_WorldBoss_clearCd __cb);

    /**
     * 清除CD
     * @param __result The asynchronous result object.
     **/
    public void end_clearCd(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     **/
    public boolean clearCd_async(AMI_WorldBoss_clearCd __cb);

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clearCd_async(AMI_WorldBoss_clearCd __cb, java.util.Map<String, String> __ctx);

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     **/
    public String beginChallenge()
        throws NoteException;

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String beginChallenge(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge();

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx);

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(Ice.Callback __cb);

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(Callback_WorldBoss_beginChallenge __cb);

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx, Callback_WorldBoss_beginChallenge __cb);

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __result The asynchronous result object.
     **/
    public String end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean beginChallenge_async(AMI_WorldBoss_beginChallenge __cb);

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginChallenge_async(AMI_WorldBoss_beginChallenge __cb, java.util.Map<String, String> __ctx);

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     **/
    public boolean endChallenge(int harm, int heroNum)
        throws NoteException;

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum);

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx);

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, Ice.Callback __cb);

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, Callback_WorldBoss_endChallenge __cb);

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx, Callback_WorldBoss_endChallenge __cb);

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __result The asynchronous result object.
     **/
    public boolean end_endChallenge(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallenge_async(AMI_WorldBoss_endChallenge __cb, int harm, int heroNum);

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge_async(AMI_WorldBoss_endChallenge __cb, int harm, int heroNum, java.util.Map<String, String> __ctx);

    /**
     * 领取尾刀奖励
     **/
    public void getTailAward(int hp)
        throws NoteException;

    /**
     * 领取尾刀奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void getTailAward(int hp, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 领取尾刀奖励
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp);

    /**
     * 领取尾刀奖励
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, java.util.Map<String, String> __ctx);

    /**
     * 领取尾刀奖励
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, Ice.Callback __cb);

    /**
     * 领取尾刀奖励
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 领取尾刀奖励
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, Callback_WorldBoss_getTailAward __cb);

    /**
     * 领取尾刀奖励
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, java.util.Map<String, String> __ctx, Callback_WorldBoss_getTailAward __cb);

    /**
     * 领取尾刀奖励
     * @param __result The asynchronous result object.
     **/
    public void end_getTailAward(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean getTailAward_async(AMI_WorldBoss_getTailAward __cb, int hp);

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getTailAward_async(AMI_WorldBoss_getTailAward __cb, int hp, java.util.Map<String, String> __ctx);

    /**
     * 托管
     **/
    public void trust()
        throws NoteException;

    /**
     * 托管
     * @param __ctx The Context map to send with the invocation.
     **/
    public void trust(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 托管
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_trust();

    /**
     * 托管
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_trust(java.util.Map<String, String> __ctx);

    /**
     * 托管
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_trust(Ice.Callback __cb);

    /**
     * 托管
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_trust(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 托管
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_trust(Callback_WorldBoss_trust __cb);

    /**
     * 托管
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_trust(java.util.Map<String, String> __ctx, Callback_WorldBoss_trust __cb);

    /**
     * 托管
     * @param __result The asynchronous result object.
     **/
    public void end_trust(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 托管
     * @param __cb The callback object for the operation.
     **/
    public boolean trust_async(AMI_WorldBoss_trust __cb);

    /**
     * 托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean trust_async(AMI_WorldBoss_trust __cb, java.util.Map<String, String> __ctx);

    /**
     * 取消托管
     **/
    public void cancelTrust()
        throws NoteException;

    /**
     * 取消托管
     * @param __ctx The Context map to send with the invocation.
     **/
    public void cancelTrust(java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 取消托管
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_cancelTrust();

    /**
     * 取消托管
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_cancelTrust(java.util.Map<String, String> __ctx);

    /**
     * 取消托管
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_cancelTrust(Ice.Callback __cb);

    /**
     * 取消托管
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_cancelTrust(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 取消托管
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_cancelTrust(Callback_WorldBoss_cancelTrust __cb);

    /**
     * 取消托管
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_cancelTrust(java.util.Map<String, String> __ctx, Callback_WorldBoss_cancelTrust __cb);

    /**
     * 取消托管
     * @param __result The asynchronous result object.
     **/
    public void end_cancelTrust(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     **/
    public boolean cancelTrust_async(AMI_WorldBoss_cancelTrust __cb);

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean cancelTrust_async(AMI_WorldBoss_cancelTrust __cb, java.util.Map<String, String> __ctx);
}
