// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `WorldBoss.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public final class WorldBossPrxHelper extends Ice.ObjectPrxHelperBase implements WorldBossPrx
{
    private static final String __beginChallenge_name = "beginChallenge";

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     **/
    public String beginChallenge()
        throws NoteException
    {
        return beginChallenge(null, false);
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String beginChallenge(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return beginChallenge(__ctx, true);
    }

    private String beginChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "beginChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("beginChallenge");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    return __del.beginChallenge(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge()
    {
        return begin_beginChallenge(null, false, null);
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx)
    {
        return begin_beginChallenge(__ctx, true, null);
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge(Ice.Callback __cb)
    {
        return begin_beginChallenge(null, false, __cb);
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_beginChallenge(__ctx, true, __cb);
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_beginChallenge(Callback_WorldBoss_beginChallenge __cb)
    {
        return begin_beginChallenge(null, false, __cb);
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx, Callback_WorldBoss_beginChallenge __cb)
    {
        return begin_beginChallenge(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_beginChallenge(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__beginChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
        try
        {
            __result.__prepare(__beginChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_beginChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __beginChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean beginChallenge_async(AMI_WorldBoss_beginChallenge __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean beginChallenge_async(AMI_WorldBoss_beginChallenge __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__beginChallenge_name);
            __r = begin_beginChallenge(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __beginChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __buyInspire_name = "buyInspire";

    /**
     * 购买鼓舞
     **/
    public void buyInspire()
        throws NoteException
    {
        buyInspire(null, false);
    }

    /**
     * 购买鼓舞
     * @param __ctx The Context map to send with the invocation.
     **/
    public void buyInspire(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        buyInspire(__ctx, true);
    }

    private void buyInspire(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "buyInspire", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("buyInspire");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    __del.buyInspire(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyInspire()
    {
        return begin_buyInspire(null, false, null);
    }

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyInspire(java.util.Map<String, String> __ctx)
    {
        return begin_buyInspire(__ctx, true, null);
    }

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyInspire(Ice.Callback __cb)
    {
        return begin_buyInspire(null, false, __cb);
    }

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyInspire(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_buyInspire(__ctx, true, __cb);
    }

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_buyInspire(Callback_WorldBoss_buyInspire __cb)
    {
        return begin_buyInspire(null, false, __cb);
    }

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_buyInspire(java.util.Map<String, String> __ctx, Callback_WorldBoss_buyInspire __cb)
    {
        return begin_buyInspire(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_buyInspire(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__buyInspire_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __buyInspire_name, __cb);
        try
        {
            __result.__prepare(__buyInspire_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_buyInspire(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __buyInspire_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     **/
    public boolean buyInspire_async(AMI_WorldBoss_buyInspire __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyInspire_name);
            __r = begin_buyInspire(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyInspire_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 购买鼓舞
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean buyInspire_async(AMI_WorldBoss_buyInspire __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__buyInspire_name);
            __r = begin_buyInspire(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __buyInspire_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __cancelTrust_name = "cancelTrust";

    /**
     * 取消托管
     **/
    public void cancelTrust()
        throws NoteException
    {
        cancelTrust(null, false);
    }

    /**
     * 取消托管
     * @param __ctx The Context map to send with the invocation.
     **/
    public void cancelTrust(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        cancelTrust(__ctx, true);
    }

    private void cancelTrust(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "cancelTrust", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("cancelTrust");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    __del.cancelTrust(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_cancelTrust()
    {
        return begin_cancelTrust(null, false, null);
    }

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_cancelTrust(java.util.Map<String, String> __ctx)
    {
        return begin_cancelTrust(__ctx, true, null);
    }

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_cancelTrust(Ice.Callback __cb)
    {
        return begin_cancelTrust(null, false, __cb);
    }

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_cancelTrust(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cancelTrust(__ctx, true, __cb);
    }

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_cancelTrust(Callback_WorldBoss_cancelTrust __cb)
    {
        return begin_cancelTrust(null, false, __cb);
    }

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_cancelTrust(java.util.Map<String, String> __ctx, Callback_WorldBoss_cancelTrust __cb)
    {
        return begin_cancelTrust(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_cancelTrust(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__cancelTrust_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __cancelTrust_name, __cb);
        try
        {
            __result.__prepare(__cancelTrust_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_cancelTrust(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __cancelTrust_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     **/
    public boolean cancelTrust_async(AMI_WorldBoss_cancelTrust __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__cancelTrust_name);
            __r = begin_cancelTrust(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __cancelTrust_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 取消托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean cancelTrust_async(AMI_WorldBoss_cancelTrust __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__cancelTrust_name);
            __r = begin_cancelTrust(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __cancelTrust_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __clearCd_name = "clearCd";

    /**
     * 清除CD
     **/
    public void clearCd()
        throws NoteException
    {
        clearCd(null, false);
    }

    /**
     * 清除CD
     * @param __ctx The Context map to send with the invocation.
     **/
    public void clearCd(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        clearCd(__ctx, true);
    }

    private void clearCd(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearCd", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("clearCd");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    __del.clearCd(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearCd()
    {
        return begin_clearCd(null, false, null);
    }

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearCd(java.util.Map<String, String> __ctx)
    {
        return begin_clearCd(__ctx, true, null);
    }

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearCd(Ice.Callback __cb)
    {
        return begin_clearCd(null, false, __cb);
    }

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearCd(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearCd(__ctx, true, __cb);
    }

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_clearCd(Callback_WorldBoss_clearCd __cb)
    {
        return begin_clearCd(null, false, __cb);
    }

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_clearCd(java.util.Map<String, String> __ctx, Callback_WorldBoss_clearCd __cb)
    {
        return begin_clearCd(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearCd(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearCd_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearCd_name, __cb);
        try
        {
            __result.__prepare(__clearCd_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_clearCd(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __clearCd_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     **/
    public boolean clearCd_async(AMI_WorldBoss_clearCd __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearCd_name);
            __r = begin_clearCd(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearCd_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 清除CD
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean clearCd_async(AMI_WorldBoss_clearCd __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__clearCd_name);
            __r = begin_clearCd(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __clearCd_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __endChallenge_name = "endChallenge";

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     **/
    public boolean endChallenge(int harm, int heroNum)
        throws NoteException
    {
        return endChallenge(harm, heroNum, null, false);
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return endChallenge(harm, heroNum, __ctx, true);
    }

    private boolean endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "endChallenge", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("endChallenge");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    return __del.endChallenge(harm, heroNum, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum)
    {
        return begin_endChallenge(harm, heroNum, null, false, null);
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx)
    {
        return begin_endChallenge(harm, heroNum, __ctx, true, null);
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, Ice.Callback __cb)
    {
        return begin_endChallenge(harm, heroNum, null, false, __cb);
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endChallenge(harm, heroNum, __ctx, true, __cb);
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, Callback_WorldBoss_endChallenge __cb)
    {
        return begin_endChallenge(harm, heroNum, null, false, __cb);
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx, Callback_WorldBoss_endChallenge __cb)
    {
        return begin_endChallenge(harm, heroNum, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_endChallenge(int harm, int heroNum, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endChallenge_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
        try
        {
            __result.__prepare(__endChallenge_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(harm);
            __os.writeInt(heroNum);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public boolean end_endChallenge(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __endChallenge_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     **/
    public boolean endChallenge_async(AMI_WorldBoss_endChallenge __cb, int harm, int heroNum)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(harm, heroNum, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean endChallenge_async(AMI_WorldBoss_endChallenge __cb, int harm, int heroNum, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__endChallenge_name);
            __r = begin_endChallenge(harm, heroNum, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __endChallenge_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getCountRank_name = "getCountRank";

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     **/
    public String getCountRank()
        throws NoteException
    {
        return getCountRank(null, false);
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getCountRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getCountRank(__ctx, true);
    }

    private String getCountRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCountRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCountRank");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    return __del.getCountRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCountRank()
    {
        return begin_getCountRank(null, false, null);
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCountRank(java.util.Map<String, String> __ctx)
    {
        return begin_getCountRank(__ctx, true, null);
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCountRank(Ice.Callback __cb)
    {
        return begin_getCountRank(null, false, __cb);
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCountRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCountRank(__ctx, true, __cb);
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCountRank(Callback_WorldBoss_getCountRank __cb)
    {
        return begin_getCountRank(null, false, __cb);
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCountRank(java.util.Map<String, String> __ctx, Callback_WorldBoss_getCountRank __cb)
    {
        return begin_getCountRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCountRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCountRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCountRank_name, __cb);
        try
        {
            __result.__prepare(__getCountRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getCountRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getCountRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getCountRank_async(AMI_WorldBoss_getCountRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCountRank_name);
            __r = begin_getCountRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCountRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getCountRank_async(AMI_WorldBoss_getCountRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getCountRank_name);
            __r = begin_getCountRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getCountRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getHarmRank_name = "getHarmRank";

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     **/
    public String getHarmRank()
        throws NoteException
    {
        return getHarmRank(null, false);
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getHarmRank(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getHarmRank(__ctx, true);
    }

    private String getHarmRank(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getHarmRank", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getHarmRank");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    return __del.getHarmRank(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHarmRank()
    {
        return begin_getHarmRank(null, false, null);
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx)
    {
        return begin_getHarmRank(__ctx, true, null);
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHarmRank(Ice.Callback __cb)
    {
        return begin_getHarmRank(null, false, __cb);
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getHarmRank(__ctx, true, __cb);
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getHarmRank(Callback_WorldBoss_getHarmRank __cb)
    {
        return begin_getHarmRank(null, false, __cb);
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx, Callback_WorldBoss_getHarmRank __cb)
    {
        return begin_getHarmRank(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getHarmRank(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getHarmRank_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getHarmRank_name, __cb);
        try
        {
            __result.__prepare(__getHarmRank_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getHarmRank(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getHarmRank_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getHarmRank_async(AMI_WorldBoss_getHarmRank __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHarmRank_name);
            __r = begin_getHarmRank(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHarmRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getHarmRank_async(AMI_WorldBoss_getHarmRank __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getHarmRank_name);
            __r = begin_getHarmRank(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getHarmRank_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getTailAward_name = "getTailAward";

    /**
     * 领取尾刀奖励
     **/
    public void getTailAward(int hp)
        throws NoteException
    {
        getTailAward(hp, null, false);
    }

    /**
     * 领取尾刀奖励
     * @param __ctx The Context map to send with the invocation.
     **/
    public void getTailAward(int hp, java.util.Map<String, String> __ctx)
        throws NoteException
    {
        getTailAward(hp, __ctx, true);
    }

    private void getTailAward(int hp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTailAward", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTailAward");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    __del.getTailAward(hp, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp)
    {
        return begin_getTailAward(hp, null, false, null);
    }

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, java.util.Map<String, String> __ctx)
    {
        return begin_getTailAward(hp, __ctx, true, null);
    }

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, Ice.Callback __cb)
    {
        return begin_getTailAward(hp, null, false, __cb);
    }

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTailAward(hp, __ctx, true, __cb);
    }

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, Callback_WorldBoss_getTailAward __cb)
    {
        return begin_getTailAward(hp, null, false, __cb);
    }

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTailAward(int hp, java.util.Map<String, String> __ctx, Callback_WorldBoss_getTailAward __cb)
    {
        return begin_getTailAward(hp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTailAward(int hp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTailAward_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTailAward_name, __cb);
        try
        {
            __result.__prepare(__getTailAward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(hp);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_getTailAward(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getTailAward_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     **/
    public boolean getTailAward_async(AMI_WorldBoss_getTailAward __cb, int hp)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTailAward_name);
            __r = begin_getTailAward(hp, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTailAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 领取尾刀奖励
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getTailAward_async(AMI_WorldBoss_getTailAward __cb, int hp, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getTailAward_name);
            __r = begin_getTailAward(hp, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getTailAward_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getWorldBossView_name = "getWorldBossView";

    /**
     * 返回worldBossView的lua
     **/
    public String getWorldBossView()
        throws NoteException
    {
        return getWorldBossView(null, false);
    }

    /**
     * 返回worldBossView的lua
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getWorldBossView(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        return getWorldBossView(__ctx, true);
    }

    private String getWorldBossView(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getWorldBossView", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getWorldBossView");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    return __del.getWorldBossView(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getWorldBossView()
    {
        return begin_getWorldBossView(null, false, null);
    }

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getWorldBossView(java.util.Map<String, String> __ctx)
    {
        return begin_getWorldBossView(__ctx, true, null);
    }

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getWorldBossView(Ice.Callback __cb)
    {
        return begin_getWorldBossView(null, false, __cb);
    }

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getWorldBossView(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getWorldBossView(__ctx, true, __cb);
    }

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getWorldBossView(Callback_WorldBoss_getWorldBossView __cb)
    {
        return begin_getWorldBossView(null, false, __cb);
    }

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getWorldBossView(java.util.Map<String, String> __ctx, Callback_WorldBoss_getWorldBossView __cb)
    {
        return begin_getWorldBossView(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getWorldBossView(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getWorldBossView_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getWorldBossView_name, __cb);
        try
        {
            __result.__prepare(__getWorldBossView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getWorldBossView(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __getWorldBossView_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     **/
    public boolean getWorldBossView_async(AMI_WorldBoss_getWorldBossView __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getWorldBossView_name);
            __r = begin_getWorldBossView(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getWorldBossView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 返回worldBossView的lua
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getWorldBossView_async(AMI_WorldBoss_getWorldBossView __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getWorldBossView_name);
            __r = begin_getWorldBossView(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getWorldBossView_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __trust_name = "trust";

    /**
     * 托管
     **/
    public void trust()
        throws NoteException
    {
        trust(null, false);
    }

    /**
     * 托管
     * @param __ctx The Context map to send with the invocation.
     **/
    public void trust(java.util.Map<String, String> __ctx)
        throws NoteException
    {
        trust(__ctx, true);
    }

    private void trust(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoteException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "trust", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("trust");
                    __delBase = __getDelegate(false);
                    _WorldBossDel __del = (_WorldBossDel)__delBase;
                    __del.trust(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 托管
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_trust()
    {
        return begin_trust(null, false, null);
    }

    /**
     * 托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_trust(java.util.Map<String, String> __ctx)
    {
        return begin_trust(__ctx, true, null);
    }

    /**
     * 托管
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_trust(Ice.Callback __cb)
    {
        return begin_trust(null, false, __cb);
    }

    /**
     * 托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_trust(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_trust(__ctx, true, __cb);
    }

    /**
     * 托管
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_trust(Callback_WorldBoss_trust __cb)
    {
        return begin_trust(null, false, __cb);
    }

    /**
     * 托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_trust(java.util.Map<String, String> __ctx, Callback_WorldBoss_trust __cb)
    {
        return begin_trust(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_trust(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__trust_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __trust_name, __cb);
        try
        {
            __result.__prepare(__trust_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_trust(Ice.AsyncResult __result)
        throws NoteException
    {
        Ice.AsyncResult.__check(__result, this, __trust_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(NoteException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * 托管
     * @param __cb The callback object for the operation.
     **/
    public boolean trust_async(AMI_WorldBoss_trust __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__trust_name);
            __r = begin_trust(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __trust_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * 托管
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean trust_async(AMI_WorldBoss_trust __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__trust_name);
            __r = begin_trust(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __trust_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static WorldBossPrx checkedCast(Ice.ObjectPrx __obj)
    {
        WorldBossPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof WorldBossPrx)
            {
                __d = (WorldBossPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    WorldBossPrxHelper __h = new WorldBossPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static WorldBossPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        WorldBossPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof WorldBossPrx)
            {
                __d = (WorldBossPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    WorldBossPrxHelper __h = new WorldBossPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static WorldBossPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        WorldBossPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    WorldBossPrxHelper __h = new WorldBossPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static WorldBossPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        WorldBossPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    WorldBossPrxHelper __h = new WorldBossPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static WorldBossPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        WorldBossPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof WorldBossPrx)
            {
                __d = (WorldBossPrx)__obj;
            }
            else
            {
                WorldBossPrxHelper __h = new WorldBossPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static WorldBossPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        WorldBossPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            WorldBossPrxHelper __h = new WorldBossPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::WorldBoss"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _WorldBossDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _WorldBossDelD();
    }

    public static void __write(IceInternal.BasicStream __os, WorldBossPrx v)
    {
        __os.writeProxy(v);
    }

    public static WorldBossPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            WorldBossPrxHelper result = new WorldBossPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
