// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Activity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _ActivityInfoDisp extends Ice.ObjectImpl implements ActivityInfo
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::ActivityInfo"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void acceptDayLoginReward(int day)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptDayLoginReward(day, null);
    }

    public final void acceptDayforverLoginReward(int day)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptDayforverLoginReward(day, null);
    }

    public final void acceptFirstJiaReward(int level)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptFirstJiaReward(level, null);
    }

    public final void acceptFundReward(int level)
        throws NoteException
    {
        acceptFundReward(level, null);
    }

    public final int acceptJunLing(int id)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return acceptJunLing(id, null);
    }

    public final void acceptLevelReward(int level)
        throws NotEnoughMoneyException,
               NoteException
    {
        acceptLevelReward(level, null);
    }

    public final void acceptOpenServerActiveReward(int active, int nodeId)
        throws NoteException
    {
        acceptOpenServerActiveReward(active, nodeId, null);
    }

    public final void acceptPowerReward(int power)
        throws NoteException
    {
        acceptPowerReward(power, null);
    }

    /**
     * 接受奖励，return ItemView
     **/
    public final void acceptResourceBack(String date, int type, int slot)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        acceptResourceBack(date, type, slot, null);
    }

    /**
     * 一键找回
     **/
    public final void acceptResourceBackOneKey(String date)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        acceptResourceBackOneKey(date, null);
    }

    /**
     * 活动列表 lua格式activityInfoAll
     **/
    public final String activityList()
        throws NoteException
    {
        return activityList(null);
    }

    /**
     * 开始答题 id,id,id
     **/
    public final String beginAnswer()
        throws NoteException
    {
        return beginAnswer(null);
    }

    /**
     * 聚宝盆一键购买
     **/
    public final void buyAllCornucopia()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyAllCornucopia(null);
    }

    /**
     * 聚宝盆购买单项物品
     **/
    public final void buyCornucopia(int id)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyCornucopia(id, null);
    }

    public final void buyFund()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyFund(null);
    }

    /**
     * 购买奖杯,return:最新奖杯数量
     **/
    public final int buyTrophy()
        throws NoteException
    {
        return buyTrophy(null);
    }

    public final String buysale(int activeId, int day)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buysale(activeId, day, null);
    }

    /**
     * 点击活动列表的 我要做VIP按钮 返回是否可作答
     **/
    public final boolean clickMakeVip()
    {
        return clickMakeVip(null);
    }

    /**
     * 兑换物品,成功返回1，兑换失败返回0
     **/
    public final String doExchangeItems(String exchangeNo, int itemType)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return doExchangeItems(exchangeNo, itemType, null);
    }

    public final String doFortuneWheel()
        throws NoteException
    {
        return doFortuneWheel(null);
    }

    public final String doFortuneWheelFor10()
        throws NoteException
    {
        return doFortuneWheelFor10(null);
    }

    /**
     * 结束答题返回增加的VIP经验 格式：id,answer;id,answer
     **/
    public final int endAnswer(String str)
        throws NoteException
    {
        return endAnswer(str, null);
    }

    /**
     * 押注，平局countryId传-1
     **/
    public final int footballBet(int id, int countryId, int num)
        throws NoteException
    {
        return footballBet(id, countryId, num, null);
    }

    /**
     * 获取竞猜日志,return:FootballBetLogSeq的lua
     **/
    public final String footballBetLogs()
        throws NoteException
    {
        return footballBetLogs(null);
    }

    /**
     * 商店兑换
     **/
    public final int footballExchange(int id, int num)
        throws NoteException
    {
        return footballExchange(id, num, null);
    }

    /**
     * 球队排行榜,return:IntIntPairSeq的lua
     **/
    public final String footballRank()
        throws NoteException
    {
        return footballRank(null);
    }

    /**
     * 一键领取聚宝盆物品
     **/
    public final void getAllCornucopia()
        throws NoteException
    {
        getAllCornucopia(null);
    }

    /**
     * 获取copy日充值活动信息，返回SummationActivityView的lua
     **/
    public final String getBigDayChargeView()
        throws NoteException
    {
        return getBigDayChargeView(null);
    }

    /**
     * 获取copy日消费活动信息，返回SummationActivityView的lua
     **/
    public final String getBigDayConsumeView()
        throws NoteException
    {
        return getBigDayConsumeView(null);
    }

    public final String getBigSummationActivityViewForCharge()
        throws NoteException
    {
        return getBigSummationActivityViewForCharge(null);
    }

    public final String getBigSummationActivityViewForConsume()
        throws NoteException
    {
        return getBigSummationActivityViewForConsume(null);
    }

    /**
     * 领取聚宝盆普通物品
     **/
    public final void getCornucopia(int id)
        throws NoteException
    {
        getCornucopia(id, null);
    }

    /**
     * 获取聚宝盆view，返回CornucopiaView的lua
     **/
    public final String getCornucopiaView()
        throws NoteException
    {
        return getCornucopiaView(null);
    }

    /**
     * 获取对应国家的所有比赛,return:FootballMatchSeq的lua
     **/
    public final String getCountryMatch(int countryId)
        throws NoteException
    {
        return getCountryMatch(countryId, null);
    }

    /**
     * 获取日充值活动信息，返回SummationActivityView的lua
     **/
    public final String getDayChargeView()
        throws NoteException
    {
        return getDayChargeView(null);
    }

    /**
     * 获取日消费活动信息，返回SummationActivityView的lua
     **/
    public final String getDayConsumeView()
        throws NoteException
    {
        return getDayConsumeView(null);
    }

    public final String getDayLoginRewardView()
        throws NoteException
    {
        return getDayLoginRewardView(null);
    }

    public final String getDayforverLoginRewardView()
        throws NoteException
    {
        return getDayforverLoginRewardView(null);
    }

    /**
     * 获取兑换列表
     **/
    public final String getExchangeItems(int itemType)
        throws NoteException
    {
        return getExchangeItems(itemType, null);
    }

    public final String getFirstJiaRewardView()
        throws NoteException
    {
        return getFirstJiaRewardView(null);
    }

    /**
     * 商店物品return:FootballShopSeq的lua
     **/
    public final String getFootballShops()
        throws NoteException
    {
        return getFootballShops(null);
    }

    /**
     * 欧洲杯活动主界面数据,return:FootballView的lua
     **/
    public final String getFootballView()
        throws NoteException
    {
        return getFootballView(null);
    }

    public final String getFortuneWheelView()
        throws NoteException
    {
        return getFortuneWheelView(null);
    }

    public final String getFundView()
        throws NoteException
    {
        return getFundView(null);
    }

    /**
     * 升级奖励领取礼包 giftId:礼包Id
     **/
    public final boolean getGift(int giftId)
        throws NoteException
    {
        return getGift(giftId, null);
    }

    /**
     * 获取邀请好友活动信息，返回InviteActivityView的lua
     **/
    public final String getInviteActivityView()
        throws NoteException
    {
        return getInviteActivityView(null);
    }

    public final String getLevelRewardView()
        throws NoteException
    {
        return getLevelRewardView(null);
    }

    /**
     * 领取等级福利
     **/
    public final int getLevelWeal()
        throws NoteException
    {
        return getLevelWeal(null);
    }

    public final String getOpenServerActiveView()
        throws NoteException
    {
        return getOpenServerActiveView(null);
    }

    public final String getPowerRewardView()
        throws NoteException
    {
        return getPowerRewardView(null);
    }

    /**
     * 请求资源找回界面, return ResourceBackView
     **/
    public final String getResourceBackView()
        throws NoteException
    {
        return getResourceBackView(null);
    }

    /**
     * 百步穿杨 积分领奖 return  ShootAwardInfoSeq
     **/
    public final String getScoreReward(int score)
        throws NoteException
    {
        return getScoreReward(score, null);
    }

    /**
     * 获取秒杀活动信息 返回SeckillActivityView的lua
     **/
    public final String getSeckillView()
        throws NoteException
    {
        return getSeckillView(null);
    }

    public final String getSendJunLingView()
        throws NoteException
    {
        return getSendJunLingView(null);
    }

    public final String getSummationActivityViewForCharge()
        throws NoteException
    {
        return getSummationActivityViewForCharge(null);
    }

    public final String getSummationActivityViewForConsume()
        throws NoteException
    {
        return getSummationActivityViewForConsume(null);
    }

    /**
     * 领取聚宝盆超值礼包
     **/
    public final void getSupperCornucopia()
        throws NoteException
    {
        getSupperCornucopia(null);
    }

    /**
     * 大富温主界面, 返回 GridPageView
     **/
    public final String gridPageView()
        throws NoteException
    {
        return gridPageView(null);
    }

    /**
     * 累计获得的奖励
     **/
    public final String historyAward()
        throws NoteException
    {
        return historyAward(null);
    }

    /**
     * 排行奖励界面, 返回 RankPageView
     **/
    public final String lettoryRankView()
        throws NoteException
    {
        return lettoryRankView(null);
    }

    /**
     * 神秘商店购买, 返回 LettoryShopView
     **/
    public final String lettoryshopBuy(int id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return lettoryshopBuy(id, null);
    }

    /**
     * 神秘商店界面, 返回 LettoryShopView
     **/
    public final String lettoryshopView()
        throws NoteException
    {
        return lettoryshopView(null);
    }

    /**
     * 等级福利信息, 返回 LevelWealView
     **/
    public final LevelWealView levelWealInfo()
        throws NoteException
    {
        return levelWealInfo(null);
    }

    /**
     * 大富温巡回圈数奖励界面, 返回 LotteryCycleView
     **/
    public final String lotteryCycleView()
        throws NoteException
    {
        return lotteryCycleView(null);
    }

    /**
     * 大富温排行界面, 返回 LotteryScoreRankView
     **/
    public final String lotteryScoreRankView()
        throws NoteException
    {
        return lotteryScoreRankView(null);
    }

    /**
     * 百步穿杨积分排名, 返回 MarksmanScoreRankView
     **/
    public final String openMarksmanScoreRankView()
        throws NoteException
    {
        return openMarksmanScoreRankView(null);
    }

    /**
     * 百步穿杨积分排名奖励, 返回 MarksmanScoreRewardView
     **/
    public final String openMarksmanScoreRewardView()
        throws NoteException
    {
        return openMarksmanScoreRewardView(null);
    }

    /**
     * 百步穿杨, 返回 MarksmanView systemType 1:普通  2:超级百步
     **/
    public final String openMarksmanView(int systemType)
        throws NoteException
    {
        return openMarksmanView(systemType, null);
    }

    public final void receiveApiReward(int actId, int targetCount)
        throws NoteException
    {
        receiveApiReward(actId, targetCount, null);
    }

    /**
     * 领取copy日充值奖励
     **/
    public final void receiveBigDayCharge(int threshold)
        throws NoteException
    {
        receiveBigDayCharge(threshold, null);
    }

    /**
     * 领取copy日消费奖励
     **/
    public final void receiveBigDayConsume(int threshold)
        throws NoteException
    {
        receiveBigDayConsume(threshold, null);
    }

    public final void receiveBigRewardForSumCharge(int threshold)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveBigRewardForSumCharge(threshold, null);
    }

    public final void receiveBigRewardForSumConsume(int threshold)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveBigRewardForSumConsume(threshold, null);
    }

    /**
     * 领取日充值奖励
     **/
    public final void receiveDayCharge(int threshold)
        throws NoteException
    {
        receiveDayCharge(threshold, null);
    }

    /**
     * 领取日消费奖励
     **/
    public final void receiveDayConsume(int threshold)
        throws NoteException
    {
        receiveDayConsume(threshold, null);
    }

    /**
     * 领取邀请好友奖励
     **/
    public final void receiveRewardForInvite(int threshoId)
        throws NoteException
    {
        receiveRewardForInvite(threshoId, null);
    }

    public final void receiveRewardForSumCharge(int threshold)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveRewardForSumCharge(threshold, null);
    }

    public final void receiveRewardForSumConsume(int threshold)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        receiveRewardForSumConsume(threshold, null);
    }

    /**
     * 秒杀物品
     **/
    public final void seckillItem(int id)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        seckillItem(id, null);
    }

    /**
     * 分享    ShareSub
     **/
    public final String share(int id)
        throws NoteException
    {
        return share(id, null);
    }

    /**
     * 分享活动主界面, 返回 ShareView
     **/
    public final String sharePageView()
        throws NoteException
    {
        return sharePageView(null);
    }

    /**
     * 百步穿杨射击, 返回 MarksmanView  1:普通 2:超级百步
     **/
    public final String shootReward(int shootType, int systemType)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return shootReward(shootType, systemType, null);
    }

    /**
     * 是否显示我的中奖记录
     **/
    public final void showMyRecord(boolean show)
        throws NoteException
    {
        showMyRecord(show, null);
    }

    /**
     * 摇骰子, 返回 RoleBaseSub  type:0：普通 1：遥控
     **/
    public final String throwBall(int type, int point)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return throwBall(type, point, null);
    }

    /**
     * 升级奖励活动内容信息 lua格式UpActivityInfoViewSeq
     **/
    public final String upActivityInfoList()
        throws NoteException
    {
        return upActivityInfoList(null);
    }

    public static Ice.DispatchStatus ___activityList(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.activityList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___upActivityInfoList(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.upActivityInfoList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getGift(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int giftId;
        giftId = __is.readInt();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.getGift(giftId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___clickMakeVip(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        boolean __ret = __obj.clickMakeVip(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___beginAnswer(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.beginAnswer(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endAnswer(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String str;
        str = __is.readString();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.endAnswer(str, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getSummationActivityViewForCharge(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getSummationActivityViewForCharge(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveRewardForSumCharge(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshold;
        threshold = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveRewardForSumCharge(threshold, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getSummationActivityViewForConsume(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getSummationActivityViewForConsume(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveRewardForSumConsume(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshold;
        threshold = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveRewardForSumConsume(threshold, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getInviteActivityView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getInviteActivityView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveRewardForInvite(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshoId;
        threshoId = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveRewardForInvite(threshoId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFundView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFundView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptFundReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int level;
        level = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.acceptFundReward(level, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyFund(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyFund(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getLevelRewardView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getLevelRewardView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptLevelReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int level;
        level = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.acceptLevelReward(level, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFirstJiaRewardView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFirstJiaRewardView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptFirstJiaReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int level;
        level = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.acceptFirstJiaReward(level, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getDayLoginRewardView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getDayLoginRewardView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptDayLoginReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int day;
        day = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.acceptDayLoginReward(day, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getDayforverLoginRewardView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getDayforverLoginRewardView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptDayforverLoginReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int day;
        day = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.acceptDayforverLoginReward(day, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getOpenServerActiveView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getOpenServerActiveView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptOpenServerActiveReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int active;
        int nodeId;
        active = __is.readInt();
        nodeId = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.acceptOpenServerActiveReward(active, nodeId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buysale(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int activeId;
        int day;
        activeId = __is.readInt();
        day = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.buysale(activeId, day, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getSendJunLingView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getSendJunLingView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptJunLing(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.acceptJunLing(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getPowerRewardView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getPowerRewardView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptPowerReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int power;
        power = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.acceptPowerReward(power, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getSeckillView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getSeckillView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___seckillItem(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.seckillItem(id, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getDayChargeView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getDayChargeView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveDayCharge(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshold;
        threshold = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveDayCharge(threshold, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getDayConsumeView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getDayConsumeView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveDayConsume(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshold;
        threshold = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveDayConsume(threshold, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getBigDayChargeView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getBigDayChargeView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveBigDayCharge(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshold;
        threshold = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveBigDayCharge(threshold, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getBigDayConsumeView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getBigDayConsumeView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveBigDayConsume(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshold;
        threshold = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveBigDayConsume(threshold, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getBigSummationActivityViewForCharge(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getBigSummationActivityViewForCharge(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveBigRewardForSumCharge(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshold;
        threshold = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveBigRewardForSumCharge(threshold, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getBigSummationActivityViewForConsume(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getBigSummationActivityViewForConsume(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveBigRewardForSumConsume(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int threshold;
        threshold = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveBigRewardForSumConsume(threshold, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFortuneWheelView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFortuneWheelView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___doFortuneWheel(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.doFortuneWheel(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___doFortuneWheelFor10(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.doFortuneWheelFor10(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getCornucopiaView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getCornucopiaView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyAllCornucopia(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyAllCornucopia(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyCornucopia(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.buyCornucopia(id, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getSupperCornucopia(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.getSupperCornucopia(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getCornucopia(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.getCornucopia(id, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getAllCornucopia(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.getAllCornucopia(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getExchangeItems(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int itemType;
        itemType = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getExchangeItems(itemType, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___doExchangeItems(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String exchangeNo;
        int itemType;
        exchangeNo = __is.readString();
        itemType = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.doExchangeItems(exchangeNo, itemType, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___levelWealInfo(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            LevelWealView __ret = __obj.levelWealInfo(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getLevelWeal(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            int __ret = __obj.getLevelWeal(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___openMarksmanView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int systemType;
        systemType = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.openMarksmanView(systemType, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___shootReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int shootType;
        int systemType;
        shootType = __is.readInt();
        systemType = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.shootReward(shootType, systemType, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getScoreReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int score;
        score = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getScoreReward(score, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___openMarksmanScoreRankView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.openMarksmanScoreRankView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___openMarksmanScoreRewardView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.openMarksmanScoreRewardView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___showMyRecord(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean show;
        show = __is.readBool();
        __inS.endReadParams();
        try
        {
            __obj.showMyRecord(show, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___historyAward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.historyAward(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveApiReward(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int actId;
        int targetCount;
        actId = __is.readInt();
        targetCount = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveApiReward(actId, targetCount, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___gridPageView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.gridPageView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lettoryshopView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.lettoryshopView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lettoryshopBuy(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.lettoryshopBuy(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___throwBall(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        int point;
        type = __is.readInt();
        point = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.throwBall(type, point, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lettoryRankView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.lettoryRankView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lotteryScoreRankView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.lotteryScoreRankView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lotteryCycleView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.lotteryCycleView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___sharePageView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.sharePageView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___share(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.share(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getResourceBackView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getResourceBackView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptResourceBack(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String date;
        int type;
        int slot;
        date = __is.readString();
        type = __is.readInt();
        slot = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.acceptResourceBack(date, type, slot, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptResourceBackOneKey(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String date;
        date = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.acceptResourceBackOneKey(date, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFootballView(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFootballView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getCountryMatch(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int countryId;
        countryId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getCountryMatch(countryId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyTrophy(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            int __ret = __obj.buyTrophy(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___footballBet(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int countryId;
        int num;
        id = __is.readInt();
        countryId = __is.readInt();
        num = __is.readInt();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.footballBet(id, countryId, num, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFootballShops(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFootballShops(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___footballExchange(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int num;
        id = __is.readInt();
        num = __is.readInt();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.footballExchange(id, num, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___footballRank(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.footballRank(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___footballBetLogs(ActivityInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.footballBetLogs(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "acceptDayLoginReward",
        "acceptDayforverLoginReward",
        "acceptFirstJiaReward",
        "acceptFundReward",
        "acceptJunLing",
        "acceptLevelReward",
        "acceptOpenServerActiveReward",
        "acceptPowerReward",
        "acceptResourceBack",
        "acceptResourceBackOneKey",
        "activityList",
        "beginAnswer",
        "buyAllCornucopia",
        "buyCornucopia",
        "buyFund",
        "buyTrophy",
        "buysale",
        "clickMakeVip",
        "doExchangeItems",
        "doFortuneWheel",
        "doFortuneWheelFor10",
        "endAnswer",
        "footballBet",
        "footballBetLogs",
        "footballExchange",
        "footballRank",
        "getAllCornucopia",
        "getBigDayChargeView",
        "getBigDayConsumeView",
        "getBigSummationActivityViewForCharge",
        "getBigSummationActivityViewForConsume",
        "getCornucopia",
        "getCornucopiaView",
        "getCountryMatch",
        "getDayChargeView",
        "getDayConsumeView",
        "getDayLoginRewardView",
        "getDayforverLoginRewardView",
        "getExchangeItems",
        "getFirstJiaRewardView",
        "getFootballShops",
        "getFootballView",
        "getFortuneWheelView",
        "getFundView",
        "getGift",
        "getInviteActivityView",
        "getLevelRewardView",
        "getLevelWeal",
        "getOpenServerActiveView",
        "getPowerRewardView",
        "getResourceBackView",
        "getScoreReward",
        "getSeckillView",
        "getSendJunLingView",
        "getSummationActivityViewForCharge",
        "getSummationActivityViewForConsume",
        "getSupperCornucopia",
        "gridPageView",
        "historyAward",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "lettoryRankView",
        "lettoryshopBuy",
        "lettoryshopView",
        "levelWealInfo",
        "lotteryCycleView",
        "lotteryScoreRankView",
        "openMarksmanScoreRankView",
        "openMarksmanScoreRewardView",
        "openMarksmanView",
        "receiveApiReward",
        "receiveBigDayCharge",
        "receiveBigDayConsume",
        "receiveBigRewardForSumCharge",
        "receiveBigRewardForSumConsume",
        "receiveDayCharge",
        "receiveDayConsume",
        "receiveRewardForInvite",
        "receiveRewardForSumCharge",
        "receiveRewardForSumConsume",
        "seckillItem",
        "share",
        "sharePageView",
        "shootReward",
        "showMyRecord",
        "throwBall",
        "upActivityInfoList"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___acceptDayLoginReward(this, in, __current);
            }
            case 1:
            {
                return ___acceptDayforverLoginReward(this, in, __current);
            }
            case 2:
            {
                return ___acceptFirstJiaReward(this, in, __current);
            }
            case 3:
            {
                return ___acceptFundReward(this, in, __current);
            }
            case 4:
            {
                return ___acceptJunLing(this, in, __current);
            }
            case 5:
            {
                return ___acceptLevelReward(this, in, __current);
            }
            case 6:
            {
                return ___acceptOpenServerActiveReward(this, in, __current);
            }
            case 7:
            {
                return ___acceptPowerReward(this, in, __current);
            }
            case 8:
            {
                return ___acceptResourceBack(this, in, __current);
            }
            case 9:
            {
                return ___acceptResourceBackOneKey(this, in, __current);
            }
            case 10:
            {
                return ___activityList(this, in, __current);
            }
            case 11:
            {
                return ___beginAnswer(this, in, __current);
            }
            case 12:
            {
                return ___buyAllCornucopia(this, in, __current);
            }
            case 13:
            {
                return ___buyCornucopia(this, in, __current);
            }
            case 14:
            {
                return ___buyFund(this, in, __current);
            }
            case 15:
            {
                return ___buyTrophy(this, in, __current);
            }
            case 16:
            {
                return ___buysale(this, in, __current);
            }
            case 17:
            {
                return ___clickMakeVip(this, in, __current);
            }
            case 18:
            {
                return ___doExchangeItems(this, in, __current);
            }
            case 19:
            {
                return ___doFortuneWheel(this, in, __current);
            }
            case 20:
            {
                return ___doFortuneWheelFor10(this, in, __current);
            }
            case 21:
            {
                return ___endAnswer(this, in, __current);
            }
            case 22:
            {
                return ___footballBet(this, in, __current);
            }
            case 23:
            {
                return ___footballBetLogs(this, in, __current);
            }
            case 24:
            {
                return ___footballExchange(this, in, __current);
            }
            case 25:
            {
                return ___footballRank(this, in, __current);
            }
            case 26:
            {
                return ___getAllCornucopia(this, in, __current);
            }
            case 27:
            {
                return ___getBigDayChargeView(this, in, __current);
            }
            case 28:
            {
                return ___getBigDayConsumeView(this, in, __current);
            }
            case 29:
            {
                return ___getBigSummationActivityViewForCharge(this, in, __current);
            }
            case 30:
            {
                return ___getBigSummationActivityViewForConsume(this, in, __current);
            }
            case 31:
            {
                return ___getCornucopia(this, in, __current);
            }
            case 32:
            {
                return ___getCornucopiaView(this, in, __current);
            }
            case 33:
            {
                return ___getCountryMatch(this, in, __current);
            }
            case 34:
            {
                return ___getDayChargeView(this, in, __current);
            }
            case 35:
            {
                return ___getDayConsumeView(this, in, __current);
            }
            case 36:
            {
                return ___getDayLoginRewardView(this, in, __current);
            }
            case 37:
            {
                return ___getDayforverLoginRewardView(this, in, __current);
            }
            case 38:
            {
                return ___getExchangeItems(this, in, __current);
            }
            case 39:
            {
                return ___getFirstJiaRewardView(this, in, __current);
            }
            case 40:
            {
                return ___getFootballShops(this, in, __current);
            }
            case 41:
            {
                return ___getFootballView(this, in, __current);
            }
            case 42:
            {
                return ___getFortuneWheelView(this, in, __current);
            }
            case 43:
            {
                return ___getFundView(this, in, __current);
            }
            case 44:
            {
                return ___getGift(this, in, __current);
            }
            case 45:
            {
                return ___getInviteActivityView(this, in, __current);
            }
            case 46:
            {
                return ___getLevelRewardView(this, in, __current);
            }
            case 47:
            {
                return ___getLevelWeal(this, in, __current);
            }
            case 48:
            {
                return ___getOpenServerActiveView(this, in, __current);
            }
            case 49:
            {
                return ___getPowerRewardView(this, in, __current);
            }
            case 50:
            {
                return ___getResourceBackView(this, in, __current);
            }
            case 51:
            {
                return ___getScoreReward(this, in, __current);
            }
            case 52:
            {
                return ___getSeckillView(this, in, __current);
            }
            case 53:
            {
                return ___getSendJunLingView(this, in, __current);
            }
            case 54:
            {
                return ___getSummationActivityViewForCharge(this, in, __current);
            }
            case 55:
            {
                return ___getSummationActivityViewForConsume(this, in, __current);
            }
            case 56:
            {
                return ___getSupperCornucopia(this, in, __current);
            }
            case 57:
            {
                return ___gridPageView(this, in, __current);
            }
            case 58:
            {
                return ___historyAward(this, in, __current);
            }
            case 59:
            {
                return ___ice_id(this, in, __current);
            }
            case 60:
            {
                return ___ice_ids(this, in, __current);
            }
            case 61:
            {
                return ___ice_isA(this, in, __current);
            }
            case 62:
            {
                return ___ice_ping(this, in, __current);
            }
            case 63:
            {
                return ___lettoryRankView(this, in, __current);
            }
            case 64:
            {
                return ___lettoryshopBuy(this, in, __current);
            }
            case 65:
            {
                return ___lettoryshopView(this, in, __current);
            }
            case 66:
            {
                return ___levelWealInfo(this, in, __current);
            }
            case 67:
            {
                return ___lotteryCycleView(this, in, __current);
            }
            case 68:
            {
                return ___lotteryScoreRankView(this, in, __current);
            }
            case 69:
            {
                return ___openMarksmanScoreRankView(this, in, __current);
            }
            case 70:
            {
                return ___openMarksmanScoreRewardView(this, in, __current);
            }
            case 71:
            {
                return ___openMarksmanView(this, in, __current);
            }
            case 72:
            {
                return ___receiveApiReward(this, in, __current);
            }
            case 73:
            {
                return ___receiveBigDayCharge(this, in, __current);
            }
            case 74:
            {
                return ___receiveBigDayConsume(this, in, __current);
            }
            case 75:
            {
                return ___receiveBigRewardForSumCharge(this, in, __current);
            }
            case 76:
            {
                return ___receiveBigRewardForSumConsume(this, in, __current);
            }
            case 77:
            {
                return ___receiveDayCharge(this, in, __current);
            }
            case 78:
            {
                return ___receiveDayConsume(this, in, __current);
            }
            case 79:
            {
                return ___receiveRewardForInvite(this, in, __current);
            }
            case 80:
            {
                return ___receiveRewardForSumCharge(this, in, __current);
            }
            case 81:
            {
                return ___receiveRewardForSumConsume(this, in, __current);
            }
            case 82:
            {
                return ___seckillItem(this, in, __current);
            }
            case 83:
            {
                return ___share(this, in, __current);
            }
            case 84:
            {
                return ___sharePageView(this, in, __current);
            }
            case 85:
            {
                return ___shootReward(this, in, __current);
            }
            case 86:
            {
                return ___showMyRecord(this, in, __current);
            }
            case 87:
            {
                return ___throwBall(this, in, __current);
            }
            case 88:
            {
                return ___upActivityInfoList(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
