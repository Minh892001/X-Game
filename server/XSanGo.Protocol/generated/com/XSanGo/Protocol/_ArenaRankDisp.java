// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ArenaRank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _ArenaRankDisp extends Ice.ObjectImpl implements ArenaRank
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::ArenaRank"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void beginChallenge_async(AMD_ArenaRank_beginChallenge __cb, String targetId, String formationId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        beginChallenge_async(__cb, targetId, formationId, null);
    }

    public final void beginRevenge_async(AMD_ArenaRank_beginRevenge __cb, String targetId, String formationId)
        throws NoteException
    {
        beginRevenge_async(__cb, targetId, formationId, null);
    }

    public final void buyChallenge()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyChallenge(null);
    }

    /**
     * 购买跨服竞技场挑战次数
     **/
    public final void buyCrossChallenge()
        throws NoteException
    {
        buyCrossChallenge(null);
    }

    public final void challenge_async(AMD_ArenaRank_challenge __cb, String targetId, String formationId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        challenge_async(__cb, targetId, formationId, null);
    }

    public final void clearCD()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        clearCD(null);
    }

    /**
     * 清除跨服竞技场CD
     **/
    public final void clearCrossCD()
        throws NoteException
    {
        clearCrossCD(null);
    }

    /**
     * 跨服竞技场挑战
     * @param __cb The callback object for the operation.
     **/
    public final void crossFight_async(AMD_ArenaRank_crossFight __cb, String rivalId)
        throws NoteException
    {
        crossFight_async(__cb, rivalId, null);
    }

    /**
     * 跨服竞技场复仇
     * @param __cb The callback object for the operation.
     **/
    public final void crossRevenge_async(AMD_ArenaRank_crossRevenge __cb, String rivalId)
        throws NoteException
    {
        crossRevenge_async(__cb, rivalId, null);
    }

    public final void endChallenge_async(AMD_ArenaRank_endChallenge __cb, String targetId, int resFlag, byte remainHero)
        throws NoteException
    {
        endChallenge_async(__cb, targetId, resFlag, remainHero, null);
    }

    public final void endRevenge_async(AMD_ArenaRank_endRevenge __cb, String targetId, int resFlag, byte remainHero)
        throws NoteException
    {
        endRevenge_async(__cb, targetId, resFlag, remainHero, null);
    }

    /**
     * 进入跨服竞技场，return OwnRank的lua
     * @param __cb The callback object for the operation.
     **/
    public final void enterCrossArena_async(AMD_ArenaRank_enterCrossArena __cb)
        throws NoteException
    {
        enterCrossArena_async(__cb, null);
    }

    public final String exchangeItem(int storId)
        throws NoteException
    {
        return exchangeItem(storId, null);
    }

    /**
     * 查看跨服竞技场战报
     * @param __cb The callback object for the operation.
     **/
    public final void getCrossMovie_async(AMD_ArenaRank_getCrossMovie __cb, String id)
        throws NoteException
    {
        getCrossMovie_async(__cb, id, null);
    }

    /**
     * 获取跨服竞技场排行榜，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getCrossRank_async(AMD_ArenaRank_getCrossRank __cb)
        throws NoteException
    {
        getCrossRank_async(__cb, null);
    }

    /**
     * 获取跨服竞技场战报 return ArenaReportViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getCrossReport_async(AMD_ArenaRank_getCrossReport __cb)
        throws NoteException
    {
        getCrossReport_async(__cb, null);
    }

    public final void getFightMovie_async(AMD_ArenaRank_getFightMovie __cb, String id)
        throws NoteException
    {
        getFightMovie_async(__cb, id, null);
    }

    public final String refMallList()
        throws NoteException
    {
        return refMallList(null);
    }

    /**
     * 刷新跨服竞技场对手，return RivalRankSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public final void refreshCrossRival_async(AMD_ArenaRank_refreshCrossRival __cb)
        throws NoteException
    {
        refreshCrossRival_async(__cb, null);
    }

    public final void revenge_async(AMD_ArenaRank_revenge __cb, String targetId, String formationId)
        throws NoteException
    {
        revenge_async(__cb, targetId, formationId, null);
    }

    public final void robFightReport_async(AMD_ArenaRank_robFightReport __cb)
        throws NoteException
    {
        robFightReport_async(__cb, null);
    }

    /**
     * 保存跨服竞技场阵容
     * @param __cb The callback object for the operation.
     **/
    public final void saveBattle_async(AMD_ArenaRank_saveBattle __cb)
        throws NoteException
    {
        saveBattle_async(__cb, null);
    }

    public final void saveGuard(String guardId)
        throws NoteException
    {
        saveGuard(guardId, null);
    }

    public final void selHundredRank_async(AMD_ArenaRank_selHundredRank __cb)
        throws NoteException
    {
        selHundredRank_async(__cb, null);
    }

    public final String selMallList()
        throws NoteException
    {
        return selMallList(null);
    }

    public final void selectRank_async(AMD_ArenaRank_selectRank __cb)
        throws NoteException
    {
        selectRank_async(__cb, null);
    }

    public final void selectRivalRank_async(AMD_ArenaRank_selectRivalRank __cb)
        throws NoteException
    {
        selectRivalRank_async(__cb, null);
    }

    /**
     * 设置个性签名
     **/
    public final void setSignature(String signature)
        throws NoteException
    {
        setSignature(signature, null);
    }

    public final void setSneer(int sneerId, String sneerStr)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        setSneer(sneerId, sneerStr, null);
    }

    public final void strutReport(String reportId, int channelType, String targetId, String content)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        strutReport(reportId, channelType, targetId, content, null);
    }

    public final void uploadFightMovie(String id, FightMovieView movie)
        throws NoteException
    {
        uploadFightMovie(id, movie, null);
    }

    public static Ice.DispatchStatus ___selectRank(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_selectRank __cb = new _AMD_ArenaRank_selectRank(__inS);
        try
        {
            __obj.selectRank_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___selectRivalRank(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_selectRivalRank __cb = new _AMD_ArenaRank_selectRivalRank(__inS);
        try
        {
            __obj.selectRivalRank_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___saveGuard(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String guardId;
        guardId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.saveGuard(guardId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setSneer(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int sneerId;
        String sneerStr;
        sneerId = __is.readInt();
        sneerStr = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.setSneer(sneerId, sneerStr, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyChallenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyChallenge(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___selHundredRank(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_selHundredRank __cb = new _AMD_ArenaRank_selHundredRank(__inS);
        try
        {
            __obj.selHundredRank_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___selMallList(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.selMallList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___refMallList(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.refMallList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___exchangeItem(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int storId;
        storId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.exchangeItem(storId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___robFightReport(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_robFightReport __cb = new _AMD_ArenaRank_robFightReport(__inS);
        try
        {
            __obj.robFightReport_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___beginRevenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        String formationId;
        targetId = __is.readString();
        formationId = __is.readString();
        __inS.endReadParams();
        AMD_ArenaRank_beginRevenge __cb = new _AMD_ArenaRank_beginRevenge(__inS);
        try
        {
            __obj.beginRevenge_async(__cb, targetId, formationId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___endRevenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        int resFlag;
        byte remainHero;
        targetId = __is.readString();
        resFlag = __is.readInt();
        remainHero = __is.readByte();
        __inS.endReadParams();
        AMD_ArenaRank_endRevenge __cb = new _AMD_ArenaRank_endRevenge(__inS);
        try
        {
            __obj.endRevenge_async(__cb, targetId, resFlag, remainHero, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___revenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        String formationId;
        targetId = __is.readString();
        formationId = __is.readString();
        __inS.endReadParams();
        AMD_ArenaRank_revenge __cb = new _AMD_ArenaRank_revenge(__inS);
        try
        {
            __obj.revenge_async(__cb, targetId, formationId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___strutReport(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String reportId;
        int channelType;
        String targetId;
        String content;
        reportId = __is.readString();
        channelType = __is.readInt();
        targetId = __is.readString();
        content = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.strutReport(reportId, channelType, targetId, content, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoFactionException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoGroupException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___beginChallenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        String formationId;
        targetId = __is.readString();
        formationId = __is.readString();
        __inS.endReadParams();
        AMD_ArenaRank_beginChallenge __cb = new _AMD_ArenaRank_beginChallenge(__inS);
        try
        {
            __obj.beginChallenge_async(__cb, targetId, formationId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___endChallenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        int resFlag;
        byte remainHero;
        targetId = __is.readString();
        resFlag = __is.readInt();
        remainHero = __is.readByte();
        __inS.endReadParams();
        AMD_ArenaRank_endChallenge __cb = new _AMD_ArenaRank_endChallenge(__inS);
        try
        {
            __obj.endChallenge_async(__cb, targetId, resFlag, remainHero, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___challenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        String formationId;
        targetId = __is.readString();
        formationId = __is.readString();
        __inS.endReadParams();
        AMD_ArenaRank_challenge __cb = new _AMD_ArenaRank_challenge(__inS);
        try
        {
            __obj.challenge_async(__cb, targetId, formationId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___clearCD(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.clearCD(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___uploadFightMovie(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        FightMovieView movie;
        id = __is.readString();
        movie = new FightMovieView();
        movie.__read(__is);
        __inS.endReadParams();
        try
        {
            __obj.uploadFightMovie(id, movie, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFightMovie(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        id = __is.readString();
        __inS.endReadParams();
        AMD_ArenaRank_getFightMovie __cb = new _AMD_ArenaRank_getFightMovie(__inS);
        try
        {
            __obj.getFightMovie_async(__cb, id, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___enterCrossArena(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_enterCrossArena __cb = new _AMD_ArenaRank_enterCrossArena(__inS);
        try
        {
            __obj.enterCrossArena_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___refreshCrossRival(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_refreshCrossRival __cb = new _AMD_ArenaRank_refreshCrossRival(__inS);
        try
        {
            __obj.refreshCrossRival_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getCrossRank(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_getCrossRank __cb = new _AMD_ArenaRank_getCrossRank(__inS);
        try
        {
            __obj.getCrossRank_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___setSignature(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String signature;
        signature = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.setSignature(signature, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___saveBattle(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_saveBattle __cb = new _AMD_ArenaRank_saveBattle(__inS);
        try
        {
            __obj.saveBattle_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___buyCrossChallenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyCrossChallenge(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getCrossReport(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_ArenaRank_getCrossReport __cb = new _AMD_ArenaRank_getCrossReport(__inS);
        try
        {
            __obj.getCrossReport_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___crossFight(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String rivalId;
        rivalId = __is.readString();
        __inS.endReadParams();
        AMD_ArenaRank_crossFight __cb = new _AMD_ArenaRank_crossFight(__inS);
        try
        {
            __obj.crossFight_async(__cb, rivalId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___crossRevenge(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String rivalId;
        rivalId = __is.readString();
        __inS.endReadParams();
        AMD_ArenaRank_crossRevenge __cb = new _AMD_ArenaRank_crossRevenge(__inS);
        try
        {
            __obj.crossRevenge_async(__cb, rivalId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getCrossMovie(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        id = __is.readString();
        __inS.endReadParams();
        AMD_ArenaRank_getCrossMovie __cb = new _AMD_ArenaRank_getCrossMovie(__inS);
        try
        {
            __obj.getCrossMovie_async(__cb, id, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___clearCrossCD(ArenaRank __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.clearCrossCD(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "beginChallenge",
        "beginRevenge",
        "buyChallenge",
        "buyCrossChallenge",
        "challenge",
        "clearCD",
        "clearCrossCD",
        "crossFight",
        "crossRevenge",
        "endChallenge",
        "endRevenge",
        "enterCrossArena",
        "exchangeItem",
        "getCrossMovie",
        "getCrossRank",
        "getCrossReport",
        "getFightMovie",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "refMallList",
        "refreshCrossRival",
        "revenge",
        "robFightReport",
        "saveBattle",
        "saveGuard",
        "selHundredRank",
        "selMallList",
        "selectRank",
        "selectRivalRank",
        "setSignature",
        "setSneer",
        "strutReport",
        "uploadFightMovie"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___beginChallenge(this, in, __current);
            }
            case 1:
            {
                return ___beginRevenge(this, in, __current);
            }
            case 2:
            {
                return ___buyChallenge(this, in, __current);
            }
            case 3:
            {
                return ___buyCrossChallenge(this, in, __current);
            }
            case 4:
            {
                return ___challenge(this, in, __current);
            }
            case 5:
            {
                return ___clearCD(this, in, __current);
            }
            case 6:
            {
                return ___clearCrossCD(this, in, __current);
            }
            case 7:
            {
                return ___crossFight(this, in, __current);
            }
            case 8:
            {
                return ___crossRevenge(this, in, __current);
            }
            case 9:
            {
                return ___endChallenge(this, in, __current);
            }
            case 10:
            {
                return ___endRevenge(this, in, __current);
            }
            case 11:
            {
                return ___enterCrossArena(this, in, __current);
            }
            case 12:
            {
                return ___exchangeItem(this, in, __current);
            }
            case 13:
            {
                return ___getCrossMovie(this, in, __current);
            }
            case 14:
            {
                return ___getCrossRank(this, in, __current);
            }
            case 15:
            {
                return ___getCrossReport(this, in, __current);
            }
            case 16:
            {
                return ___getFightMovie(this, in, __current);
            }
            case 17:
            {
                return ___ice_id(this, in, __current);
            }
            case 18:
            {
                return ___ice_ids(this, in, __current);
            }
            case 19:
            {
                return ___ice_isA(this, in, __current);
            }
            case 20:
            {
                return ___ice_ping(this, in, __current);
            }
            case 21:
            {
                return ___refMallList(this, in, __current);
            }
            case 22:
            {
                return ___refreshCrossRival(this, in, __current);
            }
            case 23:
            {
                return ___revenge(this, in, __current);
            }
            case 24:
            {
                return ___robFightReport(this, in, __current);
            }
            case 25:
            {
                return ___saveBattle(this, in, __current);
            }
            case 26:
            {
                return ___saveGuard(this, in, __current);
            }
            case 27:
            {
                return ___selHundredRank(this, in, __current);
            }
            case 28:
            {
                return ___selMallList(this, in, __current);
            }
            case 29:
            {
                return ___selectRank(this, in, __current);
            }
            case 30:
            {
                return ___selectRivalRank(this, in, __current);
            }
            case 31:
            {
                return ___setSignature(this, in, __current);
            }
            case 32:
            {
                return ___setSneer(this, in, __current);
            }
            case 33:
            {
                return ___strutReport(this, in, __current);
            }
            case 34:
            {
                return ___uploadFightMovie(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
