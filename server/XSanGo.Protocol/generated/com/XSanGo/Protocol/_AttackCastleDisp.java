// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AttackCastle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _AttackCastleDisp extends Ice.ObjectImpl implements AttackCastle
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::AttackCastle"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final String acceptRewards(int castleNodeId, int startCount)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return acceptRewards(castleNodeId, startCount, null);
    }

    public final CastleNodeView beginAttackCastle(int castleNodeId)
        throws NoteException
    {
        return beginAttackCastle(castleNodeId, null);
    }

    public final String clearLevel()
        throws NoteException
    {
        return clearLevel(null);
    }

    public final String endAttackCastle(int castleNodeId, byte remainHero)
        throws NoteException
    {
        return endAttackCastle(castleNodeId, remainHero, null);
    }

    public final String exchangeItem(int itemId)
        throws NoteException
    {
        return exchangeItem(itemId, null);
    }

    public final void exitAttackCastle(int castleNodeId)
        throws NoteException
    {
        exitAttackCastle(castleNodeId, null);
    }

    public final void getCastleOpponentView_async(AMD_AttackCastle_getCastleOpponentView __cb, int castleNodeId)
        throws NoteException
    {
        getCastleOpponentView_async(__cb, castleNodeId, null);
    }

    public final void refresh_async(AMD_AttackCastle_refresh __cb, int castleNodeId)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        refresh_async(__cb, castleNodeId, null);
    }

    public final String refreshShopList()
        throws NoteException
    {
        return refreshShopList(null);
    }

    public final String requestAttackCastles()
        throws NoteException
    {
        return requestAttackCastles(null);
    }

    public final String resetAttackCastles()
        throws NoteException
    {
        return resetAttackCastles(null);
    }

    public final String shopRewardList()
        throws NoteException
    {
        return shopRewardList(null);
    }

    public static Ice.DispatchStatus ___requestAttackCastles(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.requestAttackCastles(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___resetAttackCastles(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.resetAttackCastles(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getCastleOpponentView(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int castleNodeId;
        castleNodeId = __is.readInt();
        __inS.endReadParams();
        AMD_AttackCastle_getCastleOpponentView __cb = new _AMD_AttackCastle_getCastleOpponentView(__inS);
        try
        {
            __obj.getCastleOpponentView_async(__cb, castleNodeId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___beginAttackCastle(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int castleNodeId;
        castleNodeId = __is.readInt();
        __inS.endReadParams();
        try
        {
            CastleNodeView __ret = __obj.beginAttackCastle(castleNodeId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___exitAttackCastle(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int castleNodeId;
        castleNodeId = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.exitAttackCastle(castleNodeId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endAttackCastle(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int castleNodeId;
        byte remainHero;
        castleNodeId = __is.readInt();
        remainHero = __is.readByte();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.endAttackCastle(castleNodeId, remainHero, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___acceptRewards(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int castleNodeId;
        int startCount;
        castleNodeId = __is.readInt();
        startCount = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.acceptRewards(castleNodeId, startCount, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___shopRewardList(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.shopRewardList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___refreshShopList(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.refreshShopList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___exchangeItem(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int itemId;
        itemId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.exchangeItem(itemId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___clearLevel(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.clearLevel(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___refresh(AttackCastle __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int castleNodeId;
        castleNodeId = __is.readInt();
        __inS.endReadParams();
        AMD_AttackCastle_refresh __cb = new _AMD_AttackCastle_refresh(__inS);
        try
        {
            __obj.refresh_async(__cb, castleNodeId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "acceptRewards",
        "beginAttackCastle",
        "clearLevel",
        "endAttackCastle",
        "exchangeItem",
        "exitAttackCastle",
        "getCastleOpponentView",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "refresh",
        "refreshShopList",
        "requestAttackCastles",
        "resetAttackCastles",
        "shopRewardList"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___acceptRewards(this, in, __current);
            }
            case 1:
            {
                return ___beginAttackCastle(this, in, __current);
            }
            case 2:
            {
                return ___clearLevel(this, in, __current);
            }
            case 3:
            {
                return ___endAttackCastle(this, in, __current);
            }
            case 4:
            {
                return ___exchangeItem(this, in, __current);
            }
            case 5:
            {
                return ___exitAttackCastle(this, in, __current);
            }
            case 6:
            {
                return ___getCastleOpponentView(this, in, __current);
            }
            case 7:
            {
                return ___ice_id(this, in, __current);
            }
            case 8:
            {
                return ___ice_ids(this, in, __current);
            }
            case 9:
            {
                return ___ice_isA(this, in, __current);
            }
            case 10:
            {
                return ___ice_ping(this, in, __current);
            }
            case 11:
            {
                return ___refresh(this, in, __current);
            }
            case 12:
            {
                return ___refreshShopList(this, in, __current);
            }
            case 13:
            {
                return ___requestAttackCastles(this, in, __current);
            }
            case 14:
            {
                return ___resetAttackCastles(this, in, __current);
            }
            case 15:
            {
                return ___shopRewardList(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
