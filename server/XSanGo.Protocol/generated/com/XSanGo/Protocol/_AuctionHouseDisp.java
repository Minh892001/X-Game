// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AuctionHouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _AuctionHouseDisp extends Ice.ObjectImpl implements AuctionHouse
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::AuctionHouse"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final AuctionBuyResView buy(String id, int type)
        throws NoteException
    {
        return buy(id, type, null);
    }

    public final long buyAuctionShop(int id)
        throws NoteException
    {
        return buyAuctionShop(id, null);
    }

    public final void cancelAuction(String id)
        throws NoteException
    {
        cancelAuction(id, null);
    }

    public final long exchange(long price)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return exchange(price, null);
    }

    public final String getAuctionHouseItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException
    {
        return getAuctionHouseItems(startIndex, count, type, key, quality, direction, null);
    }

    public final String getAuctionShops()
        throws NoteException
    {
        return getAuctionShops(null);
    }

    public final String getMyBidItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException
    {
        return getMyBidItems(startIndex, count, type, key, quality, direction, null);
    }

    public final String getMySellItems(int startIndex, int count, int type, String key, int quality, int direction)
        throws NoteException
    {
        return getMySellItems(startIndex, count, type, key, quality, direction, null);
    }

    public final String refreshAuctionShop()
        throws NoteException
    {
        return refreshAuctionShop(null);
    }

    public final void sell(String id, int num, long price, long fixedPrice)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        sell(id, num, price, fixedPrice, null);
    }

    public static Ice.DispatchStatus ___exchange(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        long price;
        price = __is.readLong();
        __inS.endReadParams();
        try
        {
            long __ret = __obj.exchange(price, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getAuctionHouseItems(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int startIndex;
        int count;
        int type;
        String key;
        int quality;
        int direction;
        startIndex = __is.readInt();
        count = __is.readInt();
        type = __is.readInt();
        key = __is.readString();
        quality = __is.readInt();
        direction = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getAuctionHouseItems(startIndex, count, type, key, quality, direction, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getMyBidItems(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int startIndex;
        int count;
        int type;
        String key;
        int quality;
        int direction;
        startIndex = __is.readInt();
        count = __is.readInt();
        type = __is.readInt();
        key = __is.readString();
        quality = __is.readInt();
        direction = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getMyBidItems(startIndex, count, type, key, quality, direction, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getMySellItems(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int startIndex;
        int count;
        int type;
        String key;
        int quality;
        int direction;
        startIndex = __is.readInt();
        count = __is.readInt();
        type = __is.readInt();
        key = __is.readString();
        quality = __is.readInt();
        direction = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getMySellItems(startIndex, count, type, key, quality, direction, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___sell(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        int num;
        long price;
        long fixedPrice;
        id = __is.readString();
        num = __is.readInt();
        price = __is.readLong();
        fixedPrice = __is.readLong();
        __inS.endReadParams();
        try
        {
            __obj.sell(id, num, price, fixedPrice, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buy(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        int type;
        id = __is.readString();
        type = __is.readInt();
        __inS.endReadParams();
        try
        {
            AuctionBuyResView __ret = __obj.buy(id, type, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___cancelAuction(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        id = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.cancelAuction(id, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getAuctionShops(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getAuctionShops(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___refreshAuctionShop(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.refreshAuctionShop(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyAuctionShop(AuctionHouse __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            long __ret = __obj.buyAuctionShop(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "buy",
        "buyAuctionShop",
        "cancelAuction",
        "exchange",
        "getAuctionHouseItems",
        "getAuctionShops",
        "getMyBidItems",
        "getMySellItems",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "refreshAuctionShop",
        "sell"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___buy(this, in, __current);
            }
            case 1:
            {
                return ___buyAuctionShop(this, in, __current);
            }
            case 2:
            {
                return ___cancelAuction(this, in, __current);
            }
            case 3:
            {
                return ___exchange(this, in, __current);
            }
            case 4:
            {
                return ___getAuctionHouseItems(this, in, __current);
            }
            case 5:
            {
                return ___getAuctionShops(this, in, __current);
            }
            case 6:
            {
                return ___getMyBidItems(this, in, __current);
            }
            case 7:
            {
                return ___getMySellItems(this, in, __current);
            }
            case 8:
            {
                return ___ice_id(this, in, __current);
            }
            case 9:
            {
                return ___ice_ids(this, in, __current);
            }
            case 10:
            {
                return ___ice_isA(this, in, __current);
            }
            case 11:
            {
                return ___ice_ping(this, in, __current);
            }
            case 12:
            {
                return ___refreshAuctionShop(this, in, __current);
            }
            case 13:
            {
                return ___sell(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
