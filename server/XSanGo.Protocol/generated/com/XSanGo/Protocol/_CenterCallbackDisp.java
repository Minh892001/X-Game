// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Center.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _CenterCallbackDisp extends Ice.ObjectImpl implements CenterCallback
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::CenterCallback"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void addRole(String account, String roleId, String roleName)
    {
        addRole(account, roleId, roleName, null);
    }

    public final void beginUseCDK_async(AMD_CenterCallback_beginUseCDK __cb, String account, String cdk, int roleLevel, String factionName)
        throws NoteException
    {
        beginUseCDK_async(__cb, account, cdk, roleLevel, factionName, null);
    }

    public final void createOrderForAppleAppStore_async(AMD_CenterCallback_createOrderForAppleAppStore __cb, String appStoreOrderId, int channel, int appId, int money, String itemId, String mac, String username, String roleid, String params)
        throws NoteException
    {
        createOrderForAppleAppStore_async(__cb, appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, null);
    }

    public final void endUseCDK_async(AMD_CenterCallback_endUseCDK __cb, String cdk)
    {
        endUseCDK_async(__cb, cdk, null);
    }

    public final void frozenAccount(String account, String remark)
    {
        frozenAccount(account, remark, null);
    }

    public final void getChannelOrderIdFromPayCenter_async(AMD_CenterCallback_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String username, String roleid, String parmas)
        throws NoteException
    {
        getChannelOrderIdFromPayCenter_async(__cb, channel, appId, money, mac, username, roleid, parmas, null);
    }

    public final void newMaxLevel(String account, String roleId, String roleName, int newLevel)
    {
        newMaxLevel(account, roleId, roleName, newLevel, null);
    }

    public final void sendAlarmSMS(AlarmType type, String smsText)
    {
        sendAlarmSMS(type, smsText, null);
    }

    public static Ice.DispatchStatus ___addRole(CenterCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String roleId;
        String roleName;
        account = __is.readString();
        roleId = __is.readString();
        roleName = __is.readString();
        __inS.endReadParams();
        __obj.addRole(account, roleId, roleName, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___newMaxLevel(CenterCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String roleId;
        String roleName;
        int newLevel;
        account = __is.readString();
        roleId = __is.readString();
        roleName = __is.readString();
        newLevel = __is.readInt();
        __inS.endReadParams();
        __obj.newMaxLevel(account, roleId, roleName, newLevel, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___frozenAccount(CenterCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String remark;
        account = __is.readString();
        remark = __is.readString();
        __inS.endReadParams();
        __obj.frozenAccount(account, remark, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___beginUseCDK(CenterCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String cdk;
        int roleLevel;
        String factionName;
        account = __is.readString();
        cdk = __is.readString();
        roleLevel = __is.readInt();
        factionName = __is.readString();
        __inS.endReadParams();
        AMD_CenterCallback_beginUseCDK __cb = new _AMD_CenterCallback_beginUseCDK(__inS);
        try
        {
            __obj.beginUseCDK_async(__cb, account, cdk, roleLevel, factionName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___endUseCDK(CenterCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String cdk;
        cdk = __is.readString();
        __inS.endReadParams();
        AMD_CenterCallback_endUseCDK __cb = new _AMD_CenterCallback_endUseCDK(__inS);
        try
        {
            __obj.endUseCDK_async(__cb, cdk, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getChannelOrderIdFromPayCenter(CenterCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int channel;
        int appId;
        int money;
        String mac;
        String username;
        String roleid;
        String parmas;
        channel = __is.readInt();
        appId = __is.readInt();
        money = __is.readInt();
        mac = __is.readString();
        username = __is.readString();
        roleid = __is.readString();
        parmas = __is.readString();
        __inS.endReadParams();
        AMD_CenterCallback_getChannelOrderIdFromPayCenter __cb = new _AMD_CenterCallback_getChannelOrderIdFromPayCenter(__inS);
        try
        {
            __obj.getChannelOrderIdFromPayCenter_async(__cb, channel, appId, money, mac, username, roleid, parmas, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___createOrderForAppleAppStore(CenterCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appStoreOrderId;
        int channel;
        int appId;
        int money;
        String itemId;
        String mac;
        String username;
        String roleid;
        String params;
        appStoreOrderId = __is.readString();
        channel = __is.readInt();
        appId = __is.readInt();
        money = __is.readInt();
        itemId = __is.readString();
        mac = __is.readString();
        username = __is.readString();
        roleid = __is.readString();
        params = __is.readString();
        __inS.endReadParams();
        AMD_CenterCallback_createOrderForAppleAppStore __cb = new _AMD_CenterCallback_createOrderForAppleAppStore(__inS);
        try
        {
            __obj.createOrderForAppleAppStore_async(__cb, appStoreOrderId, channel, appId, money, itemId, mac, username, roleid, params, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendAlarmSMS(CenterCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        AlarmType type;
        String smsText;
        type = AlarmType.__read(__is);
        smsText = __is.readString();
        __inS.endReadParams();
        __obj.sendAlarmSMS(type, smsText, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "addRole",
        "beginUseCDK",
        "createOrderForAppleAppStore",
        "endUseCDK",
        "frozenAccount",
        "getChannelOrderIdFromPayCenter",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "newMaxLevel",
        "sendAlarmSMS"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___addRole(this, in, __current);
            }
            case 1:
            {
                return ___beginUseCDK(this, in, __current);
            }
            case 2:
            {
                return ___createOrderForAppleAppStore(this, in, __current);
            }
            case 3:
            {
                return ___endUseCDK(this, in, __current);
            }
            case 4:
            {
                return ___frozenAccount(this, in, __current);
            }
            case 5:
            {
                return ___getChannelOrderIdFromPayCenter(this, in, __current);
            }
            case 6:
            {
                return ___ice_id(this, in, __current);
            }
            case 7:
            {
                return ___ice_ids(this, in, __current);
            }
            case 8:
            {
                return ___ice_isA(this, in, __current);
            }
            case 9:
            {
                return ___ice_ping(this, in, __current);
            }
            case 10:
            {
                return ___newMaxLevel(this, in, __current);
            }
            case 11:
            {
                return ___sendAlarmSMS(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
