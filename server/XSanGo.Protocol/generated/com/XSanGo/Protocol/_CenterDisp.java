// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Center.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _CenterDisp extends Ice.ObjectImpl implements Center
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Center"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void charge_async(AMD_Center_charge __cb, String roleId, int yuan, CustomChargeParams params, String orderId, String currency)
    {
        charge_async(__cb, roleId, yuan, params, orderId, currency, null);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public final void deleteItem_async(AMD_Center_deleteItem __cb, String roleId, String itemId, int num)
    {
        deleteItem_async(__cb, roleId, itemId, num, null);
    }

    public final void executeGroovyScript(String script)
        throws NoteException
    {
        executeGroovyScript(script, null);
    }

    public final void findRoleViewList_async(AMD_Center_findRoleViewList __cb, String accountName)
    {
        findRoleViewList_async(__cb, accountName, null);
    }

    public final void findRoleViewListById_async(AMD_Center_findRoleViewListById __cb, String roleId)
    {
        findRoleViewListById_async(__cb, roleId, null);
    }

    public final void findRoleViewListByRole_async(AMD_Center_findRoleViewListByRole __cb, String roleName)
    {
        findRoleViewListByRole_async(__cb, roleName, null);
    }

    /**
     * 根据账号模糊查询
     * @param __cb The callback object for the operation.
     **/
    public final void findRoleViewListBySimpleAccount_async(AMD_Center_findRoleViewListBySimpleAccount __cb, String account)
    {
        findRoleViewListBySimpleAccount_async(__cb, account, null);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public final void findRoleViewListBySimpleRole_async(AMD_Center_findRoleViewListBySimpleRole __cb, String roleName)
    {
        findRoleViewListBySimpleRole_async(__cb, roleName, null);
    }

    /**
     * 根据金额获取充值选项
     * @param __cb The callback object for the operation.
     **/
    public final void getChargeItem_async(AMD_Center_getChargeItem __cb, int yuan)
    {
        getChargeItem_async(__cb, yuan, null);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     **/
    public final GmFactionView[] getFactionList(String factionName)
        throws NoteException
    {
        return getFactionList(factionName, null);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public final void getFactionMemberList_async(AMD_Center_getFactionMemberList __cb, String factionName)
        throws NoteException
    {
        getFactionMemberList_async(__cb, factionName, null);
    }

    public final IntString[] getHeroSkillConfig()
        throws NoteException
    {
        return getHeroSkillConfig(null);
    }

    public final String[] getItemConfig()
        throws NoteException
    {
        return getItemConfig(null);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     **/
    public final void getPayLog_async(AMD_Center_getPayLog __cb, String roleName)
        throws NoteException
    {
        getPayLog_async(__cb, roleName, null);
    }

    public final IntString[] getPlayerSkillConfig()
        throws NoteException
    {
        return getPlayerSkillConfig(null);
    }

    public final String[] getPropertyConfig()
        throws NoteException
    {
        return getPropertyConfig(null);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     **/
    public final void getRankList_async(AMD_Center_getRankList __cb, int type)
        throws NoteException
    {
        getRankList_async(__cb, type, null);
    }

    public final void getRecentMessages_async(AMD_Center_getRecentMessages __cb)
    {
        getRecentMessages_async(__cb, null);
    }

    public final IntString[] getRelationConfig()
        throws NoteException
    {
        return getRelationConfig(null);
    }

    /**
     * 获取角色相关数据
     * @param __cb The callback object for the operation.
     **/
    public final void getRoleDB_async(AMD_Center_getRoleDB __cb, String roleId)
        throws NoteException
    {
        getRoleDB_async(__cb, roleId, null);
    }

    public final void kick(String account, String roleId)
    {
        kick(account, roleId, null);
    }

    public final ServerDetail ping()
    {
        return ping(null);
    }

    /**
     * 查询物品数量
     * @param __cb The callback object for the operation.
     **/
    public final void queryItemNum_async(AMD_Center_queryItemNum __cb, String roleName, String itemId)
    {
        queryItemNum_async(__cb, roleName, itemId, null);
    }

    /**
     * 根据CDK查询玩家信息
     * @param __cb The callback object for the operation.
     **/
    public final void queryRoleByCDK_async(AMD_Center_queryRoleByCDK __cb, String cdk)
        throws NoteException
    {
        queryRoleByCDK_async(__cb, cdk, null);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     **/
    public final void saveRoleData_async(AMD_Center_saveRoleData __cb, int serverId, byte[] data, String roleId)
        throws NoteException
    {
        saveRoleData_async(__cb, serverId, data, roleId, null);
    }

    public final void sendMail_async(AMD_Center_sendMail __cb, String targetName, String title, String body, Property[] attach, String senderName)
        throws NoteException
    {
        sendMail_async(__cb, targetName, title, body, attach, senderName, null);
    }

    public final void sendMailByRoleId_async(AMD_Center_sendMailByRoleId __cb, String roleId, String title, String body, Property[] attach, String senderName)
        throws NoteException
    {
        sendMailByRoleId_async(__cb, roleId, title, body, attach, senderName, null);
    }

    public final void sendServerMail(String title, String body, Property[] attach, String conditionParams, String senderName)
        throws NoteException
    {
        sendServerMail(title, body, attach, conditionParams, senderName, null);
    }

    public final void sendTocken(int id, String account, String tocken, DeviceInfo device)
        throws NoteException
    {
        sendTocken(id, account, tocken, device, null);
    }

    public final void setCallback(CenterCallbackPrx cb)
    {
        setCallback(cb, null);
    }

    public final void silence_async(AMD_Center_silence __cb, String roleId, String releaseTime)
    {
        silence_async(__cb, roleId, releaseTime, null);
    }

    public final void systemAnnounce(String announce)
    {
        systemAnnounce(announce, null);
    }

    public static Ice.DispatchStatus ___setCallback(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        CenterCallbackPrx cb;
        cb = CenterCallbackPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.setCallback(cb, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___ping(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        ServerDetail __ret = __obj.ping(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendTocken(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        String account;
        String tocken;
        DeviceInfoHolder device = new DeviceInfoHolder();
        id = __is.readInt();
        account = __is.readString();
        tocken = __is.readString();
        __is.readObject(device);
        __is.readPendingObjects();
        __inS.endReadParams();
        try
        {
            __obj.sendTocken(id, account, tocken, device.value, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___findRoleViewList(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String accountName;
        accountName = __is.readString();
        __inS.endReadParams();
        AMD_Center_findRoleViewList __cb = new _AMD_Center_findRoleViewList(__inS);
        try
        {
            __obj.findRoleViewList_async(__cb, accountName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___findRoleViewListByRole(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleName;
        roleName = __is.readString();
        __inS.endReadParams();
        AMD_Center_findRoleViewListByRole __cb = new _AMD_Center_findRoleViewListByRole(__inS);
        try
        {
            __obj.findRoleViewListByRole_async(__cb, roleName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___findRoleViewListById(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Center_findRoleViewListById __cb = new _AMD_Center_findRoleViewListById(__inS);
        try
        {
            __obj.findRoleViewListById_async(__cb, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getRecentMessages(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Center_getRecentMessages __cb = new _AMD_Center_getRecentMessages(__inS);
        try
        {
            __obj.getRecentMessages_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___silence(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        String releaseTime;
        roleId = __is.readString();
        releaseTime = __is.readString();
        __inS.endReadParams();
        AMD_Center_silence __cb = new _AMD_Center_silence(__inS);
        try
        {
            __obj.silence_async(__cb, roleId, releaseTime, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___systemAnnounce(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String announce;
        announce = __is.readString();
        __inS.endReadParams();
        __obj.systemAnnounce(announce, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___kick(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String roleId;
        account = __is.readString();
        roleId = __is.readString();
        __inS.endReadParams();
        __obj.kick(account, roleId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___charge(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        int yuan;
        CustomChargeParams params;
        String orderId;
        String currency;
        roleId = __is.readString();
        yuan = __is.readInt();
        params = new CustomChargeParams();
        params.__read(__is);
        orderId = __is.readString();
        currency = __is.readString();
        __inS.endReadParams();
        AMD_Center_charge __cb = new _AMD_Center_charge(__inS);
        try
        {
            __obj.charge_async(__cb, roleId, yuan, params, orderId, currency, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getItemConfig(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String[] __ret = __obj.getItemConfig(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            StringSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getPropertyConfig(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String[] __ret = __obj.getPropertyConfig(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            StringSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getPlayerSkillConfig(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            IntString[] __ret = __obj.getPlayerSkillConfig(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            IntStringSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getHeroSkillConfig(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            IntString[] __ret = __obj.getHeroSkillConfig(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            IntStringSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getRelationConfig(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            IntString[] __ret = __obj.getRelationConfig(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            IntStringSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___sendServerMail(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String title;
        String body;
        Property[] attach;
        String conditionParams;
        String senderName;
        title = __is.readString();
        body = __is.readString();
        attach = PropertySeqHelper.read(__is);
        conditionParams = __is.readString();
        senderName = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.sendServerMail(title, body, attach, conditionParams, senderName, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___sendMail(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetName;
        String title;
        String body;
        Property[] attach;
        String senderName;
        targetName = __is.readString();
        title = __is.readString();
        body = __is.readString();
        attach = PropertySeqHelper.read(__is);
        senderName = __is.readString();
        __inS.endReadParams();
        AMD_Center_sendMail __cb = new _AMD_Center_sendMail(__inS);
        try
        {
            __obj.sendMail_async(__cb, targetName, title, body, attach, senderName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendMailByRoleId(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        String title;
        String body;
        Property[] attach;
        String senderName;
        roleId = __is.readString();
        title = __is.readString();
        body = __is.readString();
        attach = PropertySeqHelper.read(__is);
        senderName = __is.readString();
        __inS.endReadParams();
        AMD_Center_sendMailByRoleId __cb = new _AMD_Center_sendMailByRoleId(__inS);
        try
        {
            __obj.sendMailByRoleId_async(__cb, roleId, title, body, attach, senderName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___executeGroovyScript(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String script;
        script = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.executeGroovyScript(script, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___queryRoleByCDK(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String cdk;
        cdk = __is.readString();
        __inS.endReadParams();
        AMD_Center_queryRoleByCDK __cb = new _AMD_Center_queryRoleByCDK(__inS);
        try
        {
            __obj.queryRoleByCDK_async(__cb, cdk, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getFactionList(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String factionName;
        factionName = __is.readString();
        __inS.endReadParams();
        try
        {
            GmFactionView[] __ret = __obj.getFactionList(factionName, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            GmFactionViewSeqHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFactionMemberList(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String factionName;
        factionName = __is.readString();
        __inS.endReadParams();
        AMD_Center_getFactionMemberList __cb = new _AMD_Center_getFactionMemberList(__inS);
        try
        {
            __obj.getFactionMemberList_async(__cb, factionName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getRankList(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        type = __is.readInt();
        __inS.endReadParams();
        AMD_Center_getRankList __cb = new _AMD_Center_getRankList(__inS);
        try
        {
            __obj.getRankList_async(__cb, type, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getPayLog(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleName;
        roleName = __is.readString();
        __inS.endReadParams();
        AMD_Center_getPayLog __cb = new _AMD_Center_getPayLog(__inS);
        try
        {
            __obj.getPayLog_async(__cb, roleName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getChargeItem(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int yuan;
        yuan = __is.readInt();
        __inS.endReadParams();
        AMD_Center_getChargeItem __cb = new _AMD_Center_getChargeItem(__inS);
        try
        {
            __obj.getChargeItem_async(__cb, yuan, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryItemNum(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleName;
        String itemId;
        roleName = __is.readString();
        itemId = __is.readString();
        __inS.endReadParams();
        AMD_Center_queryItemNum __cb = new _AMD_Center_queryItemNum(__inS);
        try
        {
            __obj.queryItemNum_async(__cb, roleName, itemId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___deleteItem(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        String itemId;
        int num;
        roleId = __is.readString();
        itemId = __is.readString();
        num = __is.readInt();
        __inS.endReadParams();
        AMD_Center_deleteItem __cb = new _AMD_Center_deleteItem(__inS);
        try
        {
            __obj.deleteItem_async(__cb, roleId, itemId, num, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getRoleDB(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Center_getRoleDB __cb = new _AMD_Center_getRoleDB(__inS);
        try
        {
            __obj.getRoleDB_async(__cb, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___saveRoleData(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        byte[] data;
        String roleId;
        serverId = __is.readInt();
        data = ByteSeqHelper.read(__is);
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Center_saveRoleData __cb = new _AMD_Center_saveRoleData(__inS);
        try
        {
            __obj.saveRoleData_async(__cb, serverId, data, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___findRoleViewListBySimpleRole(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleName;
        roleName = __is.readString();
        __inS.endReadParams();
        AMD_Center_findRoleViewListBySimpleRole __cb = new _AMD_Center_findRoleViewListBySimpleRole(__inS);
        try
        {
            __obj.findRoleViewListBySimpleRole_async(__cb, roleName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___findRoleViewListBySimpleAccount(Center __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        account = __is.readString();
        __inS.endReadParams();
        AMD_Center_findRoleViewListBySimpleAccount __cb = new _AMD_Center_findRoleViewListBySimpleAccount(__inS);
        try
        {
            __obj.findRoleViewListBySimpleAccount_async(__cb, account, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "charge",
        "deleteItem",
        "executeGroovyScript",
        "findRoleViewList",
        "findRoleViewListById",
        "findRoleViewListByRole",
        "findRoleViewListBySimpleAccount",
        "findRoleViewListBySimpleRole",
        "getChargeItem",
        "getFactionList",
        "getFactionMemberList",
        "getHeroSkillConfig",
        "getItemConfig",
        "getPayLog",
        "getPlayerSkillConfig",
        "getPropertyConfig",
        "getRankList",
        "getRecentMessages",
        "getRelationConfig",
        "getRoleDB",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "kick",
        "ping",
        "queryItemNum",
        "queryRoleByCDK",
        "saveRoleData",
        "sendMail",
        "sendMailByRoleId",
        "sendServerMail",
        "sendTocken",
        "setCallback",
        "silence",
        "systemAnnounce"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___charge(this, in, __current);
            }
            case 1:
            {
                return ___deleteItem(this, in, __current);
            }
            case 2:
            {
                return ___executeGroovyScript(this, in, __current);
            }
            case 3:
            {
                return ___findRoleViewList(this, in, __current);
            }
            case 4:
            {
                return ___findRoleViewListById(this, in, __current);
            }
            case 5:
            {
                return ___findRoleViewListByRole(this, in, __current);
            }
            case 6:
            {
                return ___findRoleViewListBySimpleAccount(this, in, __current);
            }
            case 7:
            {
                return ___findRoleViewListBySimpleRole(this, in, __current);
            }
            case 8:
            {
                return ___getChargeItem(this, in, __current);
            }
            case 9:
            {
                return ___getFactionList(this, in, __current);
            }
            case 10:
            {
                return ___getFactionMemberList(this, in, __current);
            }
            case 11:
            {
                return ___getHeroSkillConfig(this, in, __current);
            }
            case 12:
            {
                return ___getItemConfig(this, in, __current);
            }
            case 13:
            {
                return ___getPayLog(this, in, __current);
            }
            case 14:
            {
                return ___getPlayerSkillConfig(this, in, __current);
            }
            case 15:
            {
                return ___getPropertyConfig(this, in, __current);
            }
            case 16:
            {
                return ___getRankList(this, in, __current);
            }
            case 17:
            {
                return ___getRecentMessages(this, in, __current);
            }
            case 18:
            {
                return ___getRelationConfig(this, in, __current);
            }
            case 19:
            {
                return ___getRoleDB(this, in, __current);
            }
            case 20:
            {
                return ___ice_id(this, in, __current);
            }
            case 21:
            {
                return ___ice_ids(this, in, __current);
            }
            case 22:
            {
                return ___ice_isA(this, in, __current);
            }
            case 23:
            {
                return ___ice_ping(this, in, __current);
            }
            case 24:
            {
                return ___kick(this, in, __current);
            }
            case 25:
            {
                return ___ping(this, in, __current);
            }
            case 26:
            {
                return ___queryItemNum(this, in, __current);
            }
            case 27:
            {
                return ___queryRoleByCDK(this, in, __current);
            }
            case 28:
            {
                return ___saveRoleData(this, in, __current);
            }
            case 29:
            {
                return ___sendMail(this, in, __current);
            }
            case 30:
            {
                return ___sendMailByRoleId(this, in, __current);
            }
            case 31:
            {
                return ___sendServerMail(this, in, __current);
            }
            case 32:
            {
                return ___sendTocken(this, in, __current);
            }
            case 33:
            {
                return ___setCallback(this, in, __current);
            }
            case 34:
            {
                return ___silence(this, in, __current);
            }
            case 35:
            {
                return ___systemAnnounce(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
