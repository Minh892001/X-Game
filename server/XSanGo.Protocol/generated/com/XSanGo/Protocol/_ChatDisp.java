// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _ChatDisp extends Ice.ObjectImpl implements Chat
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Chat"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final PvpOpponentFormationView beginChallenge(String targetId, String formationId)
        throws NoteException
    {
        return beginChallenge(targetId, formationId, null);
    }

    public final String endChallenge(String targetId, int resFlag, byte remainHero)
        throws NoteException
    {
        return endChallenge(targetId, resFlag, remainHero, null);
    }

    public final byte[] getAttachObject(int id)
        throws NoteException
    {
        return getAttachObject(id, null);
    }

    public final void saveSet(String set)
        throws NoteException
    {
        saveSet(set, null);
    }

    public final void saveSetColor(int type, String userColor)
        throws NoteException
    {
        saveSetColor(type, userColor, null);
    }

    public final String selSet()
        throws NoteException
    {
        return selSet(null);
    }

    public final void selectChallenge_async(AMD_Chat_selectChallenge __cb, String targetId)
        throws NoteException
    {
        selectChallenge_async(__cb, targetId, null);
    }

    public final void selectOfflineMess()
        throws NoteException
    {
        selectOfflineMess(null);
    }

    public final void speak(String msg)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        speak(msg, null);
    }

    public final void speakAction(String msg, String targetId)
        throws NoFactionException,
               NoGroupException,
               NoteException
    {
        speakAction(msg, targetId, null);
    }

    public final void speakTo_async(AMD_Chat_speakTo __cb, String targetId, String msg)
        throws NoteException
    {
        speakTo_async(__cb, targetId, msg, null);
    }

    public final ItemView viewEquip(String itemId)
        throws NoteException
    {
        return viewEquip(itemId, null);
    }

    public final HeroView viewHero(String heroId)
        throws NoteException
    {
        return viewHero(heroId, null);
    }

    public final ItemView viewItem(String itemId)
        throws NoteException
    {
        return viewItem(itemId, null);
    }

    public final void voteForbidSpeak_async(AMD_Chat_voteForbidSpeak __cb, int type, String targetID)
        throws NoteException
    {
        voteForbidSpeak_async(__cb, type, targetID, null);
    }

    public static Ice.DispatchStatus ___speak(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String msg;
        msg = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.speak(msg, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoFactionException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoGroupException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___speakAction(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String msg;
        String targetId;
        msg = __is.readString();
        targetId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.speakAction(msg, targetId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoFactionException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoGroupException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___speakTo(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        String msg;
        targetId = __is.readString();
        msg = __is.readString();
        __inS.endReadParams();
        AMD_Chat_speakTo __cb = new _AMD_Chat_speakTo(__inS);
        try
        {
            __obj.speakTo_async(__cb, targetId, msg, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getAttachObject(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            byte[] __ret = __obj.getAttachObject(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___selSet(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.selSet(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___saveSet(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String set;
        set = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.saveSet(set, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___saveSetColor(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        String userColor;
        type = __is.readInt();
        userColor = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.saveSetColor(type, userColor, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___viewEquip(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String itemId;
        itemId = __is.readString();
        __inS.endReadParams();
        try
        {
            ItemView __ret = __obj.viewEquip(itemId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___viewItem(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String itemId;
        itemId = __is.readString();
        __inS.endReadParams();
        try
        {
            ItemView __ret = __obj.viewItem(itemId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___viewHero(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        heroId = __is.readString();
        __inS.endReadParams();
        try
        {
            HeroView __ret = __obj.viewHero(heroId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___selectOfflineMess(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.selectOfflineMess(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___selectChallenge(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        targetId = __is.readString();
        __inS.endReadParams();
        AMD_Chat_selectChallenge __cb = new _AMD_Chat_selectChallenge(__inS);
        try
        {
            __obj.selectChallenge_async(__cb, targetId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___beginChallenge(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        String formationId;
        targetId = __is.readString();
        formationId = __is.readString();
        __inS.endReadParams();
        try
        {
            PvpOpponentFormationView __ret = __obj.beginChallenge(targetId, formationId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endChallenge(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        int resFlag;
        byte remainHero;
        targetId = __is.readString();
        resFlag = __is.readInt();
        remainHero = __is.readByte();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.endChallenge(targetId, resFlag, remainHero, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___voteForbidSpeak(Chat __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        String targetID;
        type = __is.readInt();
        targetID = __is.readString();
        __inS.endReadParams();
        AMD_Chat_voteForbidSpeak __cb = new _AMD_Chat_voteForbidSpeak(__inS);
        try
        {
            __obj.voteForbidSpeak_async(__cb, type, targetID, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "beginChallenge",
        "endChallenge",
        "getAttachObject",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "saveSet",
        "saveSetColor",
        "selSet",
        "selectChallenge",
        "selectOfflineMess",
        "speak",
        "speakAction",
        "speakTo",
        "viewEquip",
        "viewHero",
        "viewItem",
        "voteForbidSpeak"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___beginChallenge(this, in, __current);
            }
            case 1:
            {
                return ___endChallenge(this, in, __current);
            }
            case 2:
            {
                return ___getAttachObject(this, in, __current);
            }
            case 3:
            {
                return ___ice_id(this, in, __current);
            }
            case 4:
            {
                return ___ice_ids(this, in, __current);
            }
            case 5:
            {
                return ___ice_isA(this, in, __current);
            }
            case 6:
            {
                return ___ice_ping(this, in, __current);
            }
            case 7:
            {
                return ___saveSet(this, in, __current);
            }
            case 8:
            {
                return ___saveSetColor(this, in, __current);
            }
            case 9:
            {
                return ___selSet(this, in, __current);
            }
            case 10:
            {
                return ___selectChallenge(this, in, __current);
            }
            case 11:
            {
                return ___selectOfflineMess(this, in, __current);
            }
            case 12:
            {
                return ___speak(this, in, __current);
            }
            case 13:
            {
                return ___speakAction(this, in, __current);
            }
            case 14:
            {
                return ___speakTo(this, in, __current);
            }
            case 15:
            {
                return ___viewEquip(this, in, __current);
            }
            case 16:
            {
                return ___viewHero(this, in, __current);
            }
            case 17:
            {
                return ___viewItem(this, in, __current);
            }
            case 18:
            {
                return ___voteForbidSpeak(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
