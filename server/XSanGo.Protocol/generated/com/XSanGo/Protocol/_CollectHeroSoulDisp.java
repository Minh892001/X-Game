// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CollectHeroSoul.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _CollectHeroSoulDisp extends Ice.ObjectImpl implements CollectHeroSoul
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::CollectHeroSoul"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void doCollectHeroSoul_async(AMD_CollectHeroSoul_doCollectHeroSoul __cb, int cType, int consumeType)
        throws NotEnoughMoneyException,
               NoteException
    {
        doCollectHeroSoul_async(__cb, cType, consumeType, null);
    }

    public final void doRefresh_async(AMD_CollectHeroSoul_doRefresh __cb, int cType)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        doRefresh_async(__cb, cType, null);
    }

    public final void reqCollectHeroSoul_async(AMD_CollectHeroSoul_reqCollectHeroSoul __cb)
        throws NoteException
    {
        reqCollectHeroSoul_async(__cb, null);
    }

    public static Ice.DispatchStatus ___reqCollectHeroSoul(CollectHeroSoul __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_CollectHeroSoul_reqCollectHeroSoul __cb = new _AMD_CollectHeroSoul_reqCollectHeroSoul(__inS);
        try
        {
            __obj.reqCollectHeroSoul_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___doCollectHeroSoul(CollectHeroSoul __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int cType;
        int consumeType;
        cType = __is.readInt();
        consumeType = __is.readInt();
        __inS.endReadParams();
        AMD_CollectHeroSoul_doCollectHeroSoul __cb = new _AMD_CollectHeroSoul_doCollectHeroSoul(__inS);
        try
        {
            __obj.doCollectHeroSoul_async(__cb, cType, consumeType, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___doRefresh(CollectHeroSoul __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int cType;
        cType = __is.readInt();
        __inS.endReadParams();
        AMD_CollectHeroSoul_doRefresh __cb = new _AMD_CollectHeroSoul_doRefresh(__inS);
        try
        {
            __obj.doRefresh_async(__cb, cType, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "doCollectHeroSoul",
        "doRefresh",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "reqCollectHeroSoul"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___doCollectHeroSoul(this, in, __current);
            }
            case 1:
            {
                return ___doRefresh(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___reqCollectHeroSoul(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
