// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Copy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _CopyDisp extends Ice.ObjectImpl implements Copy
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Copy"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 自动挑战TA
     * @param __cb The callback object for the operation.
     **/
    public final void autoChallengeTa_async(AMD_Copy_autoChallengeTa __cb, int copyId)
        throws NoteException
    {
        autoChallengeTa_async(__cb, copyId, null);
    }

    public final CopyChallengeResultView beginChallenge(String formationId, int copyId)
        throws NotEnoughException,
               NoteException
    {
        return beginChallenge(formationId, copyId, null);
    }

    /**
     * 挑战TA
     * @param __cb The callback object for the operation.
     **/
    public final void beginChallengeTa_async(AMD_Copy_beginChallengeTa __cb, int copyId)
        throws NoteException
    {
        beginChallengeTa_async(__cb, copyId, null);
    }

    public final String beginWarmup()
        throws NoteException
    {
        return beginWarmup(null);
    }

    public final void buyChallengeChance(int copyId)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyChallengeChance(copyId, null);
    }

    public final IntIntPair[] buyChapterChallengeChance(int chapterId)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return buyChapterChallengeChance(chapterId, null);
    }

    /**
     * 购买互动次数
     **/
    public final void buyHuDong(int copyId)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyHuDong(copyId, null);
    }

    public final void buyMilitaryOrder()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyMilitaryOrder(null);
    }

    public final void buySuccess(ItemView[] items)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buySuccess(items, null);
    }

    public final int calculateStar(byte remainHero, byte killNum, float minTime, float maxTime)
        throws NoteException
    {
        return calculateStar(remainHero, killNum, minTime, maxTime, null);
    }

    public final String cancelWarmup(boolean first)
        throws NoteException
    {
        return cancelWarmup(first, null);
    }

    public final String clear(int copyTemplateId, int count)
        throws NotEnoughException,
               NoteException
    {
        return clear(copyTemplateId, count, null);
    }

    public final String employCaptured()
        throws NotEnoughMoneyException
    {
        return employCaptured(null);
    }

    public final void endChallenge_async(AMD_Copy_endChallenge __cb)
        throws NoteException
    {
        endChallenge_async(__cb, null);
    }

    /**
     * 挑战TA结束 resFlag:0-失败，1-胜利 返回：resFlag
     **/
    public final ChallengeTaResult endChallengeTa(int resFlag)
        throws NoteException
    {
        return endChallengeTa(resFlag, null);
    }

    public final byte endWarmup(byte remainHero)
        throws NoteException
    {
        return endWarmup(remainHero, null);
    }

    public final void failChallenge()
        throws NoteException
    {
        failChallenge(null);
    }

    public final void getBigCopyView_async(AMD_Copy_getBigCopyView __cb)
    {
        getBigCopyView_async(__cb, null);
    }

    public final BuyMilitaryOrderView getBuyMilitaryOrderView()
        throws NoteException
    {
        return getBuyMilitaryOrderView(null);
    }

    public final ChapterRewardView getChapterRewardView(int chapterId)
    {
        return getChapterRewardView(chapterId, null);
    }

    public final String getCopyChallengeInfo(String idStr)
    {
        return getCopyChallengeInfo(idStr, null);
    }

    /**
     * 打开互动界面 返回HuDongView的lua格式
     **/
    public final String getHuDongView(int copyId)
        throws NoteException
    {
        return getHuDongView(copyId, null);
    }

    public final IntIntPair getMyOccupy()
        throws NoteException
    {
        return getMyOccupy(null);
    }

    public final void getSmallCopyView_async(AMD_Copy_getSmallCopyView __cb, int copyId)
    {
        getSmallCopyView_async(__cb, copyId, null);
    }

    public final void getSmallCopyViewWithWarmup_async(AMD_Copy_getSmallCopyViewWithWarmup __cb, int copyId)
        throws NoteException
    {
        getSmallCopyViewWithWarmup_async(__cb, copyId, null);
    }

    public final int getYuanbaoPrice(ItemView[] items)
        throws NoteException
    {
        return getYuanbaoPrice(items, null);
    }

    /**
     * 放弃占领
     **/
    public final void giveCopy(int copyId)
        throws NoteException
    {
        giveCopy(copyId, null);
    }

    public final void hallOfFameList_async(AMD_Copy_hallOfFameList __cb)
    {
        hallOfFameList_async(__cb, null);
    }

    public final int killCaptured()
    {
        return killCaptured(null);
    }

    /**
     * 征收
     **/
    public final int levyCopy(int copyId)
        throws NoteException
    {
        return levyCopy(copyId, null);
    }

    /**
     * 我的占领列表 返回CopyOccupySeq的lua
     **/
    public final String myOccupyList()
        throws NoteException
    {
        return myOccupyList(null);
    }

    public final void receiveChapterReward(int chapterId, int level)
        throws NoteException
    {
        receiveChapterReward(chapterId, level, null);
    }

    public final void releaseCaptured()
    {
        releaseCaptured(null);
    }

    /**
     * 膜拜TA
     **/
    public final int worshipTa(int copyId)
        throws NoteException
    {
        return worshipTa(copyId, null);
    }

    public static Ice.DispatchStatus ___getBigCopyView(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Copy_getBigCopyView __cb = new _AMD_Copy_getBigCopyView(__inS);
        try
        {
            __obj.getBigCopyView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getSmallCopyView(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        AMD_Copy_getSmallCopyView __cb = new _AMD_Copy_getSmallCopyView(__inS);
        try
        {
            __obj.getSmallCopyView_async(__cb, copyId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getSmallCopyViewWithWarmup(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        AMD_Copy_getSmallCopyViewWithWarmup __cb = new _AMD_Copy_getSmallCopyViewWithWarmup(__inS);
        try
        {
            __obj.getSmallCopyViewWithWarmup_async(__cb, copyId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___beginWarmup(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.beginWarmup(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endWarmup(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte remainHero;
        remainHero = __is.readByte();
        __inS.endReadParams();
        try
        {
            byte __ret = __obj.endWarmup(remainHero, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___beginChallenge(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String formationId;
        int copyId;
        formationId = __is.readString();
        copyId = __is.readInt();
        __inS.endReadParams();
        try
        {
            CopyChallengeResultView __ret = __obj.beginChallenge(formationId, copyId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___calculateStar(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte remainHero;
        byte killNum;
        float minTime;
        float maxTime;
        remainHero = __is.readByte();
        killNum = __is.readByte();
        minTime = __is.readFloat();
        maxTime = __is.readFloat();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.calculateStar(remainHero, killNum, minTime, maxTime, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endChallenge(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Copy_endChallenge __cb = new _AMD_Copy_endChallenge(__inS);
        try
        {
            __obj.endChallenge_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___failChallenge(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.failChallenge(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getYuanbaoPrice(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ItemView[] items;
        items = ItemViewSeqHelper.read(__is);
        __inS.endReadParams();
        try
        {
            int __ret = __obj.getYuanbaoPrice(items, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buySuccess(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ItemView[] items;
        items = ItemViewSeqHelper.read(__is);
        __inS.endReadParams();
        try
        {
            __obj.buySuccess(items, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyChallengeChance(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.buyChallengeChance(copyId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyChapterChallengeChance(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int chapterId;
        chapterId = __is.readInt();
        __inS.endReadParams();
        try
        {
            IntIntPair[] __ret = __obj.buyChapterChallengeChance(chapterId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            IntIntPairSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___clear(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyTemplateId;
        int count;
        copyTemplateId = __is.readInt();
        count = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.clear(copyTemplateId, count, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getChapterRewardView(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int chapterId;
        chapterId = __is.readInt();
        __inS.endReadParams();
        ChapterRewardView __ret = __obj.getChapterRewardView(chapterId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __ret.__write(__os);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___receiveChapterReward(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int chapterId;
        int level;
        chapterId = __is.readInt();
        level = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.receiveChapterReward(chapterId, level, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___releaseCaptured(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.releaseCaptured(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___killCaptured(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        int __ret = __obj.killCaptured(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___employCaptured(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.employCaptured(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getCopyChallengeInfo(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String idStr;
        idStr = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.getCopyChallengeInfo(idStr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___hallOfFameList(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Copy_hallOfFameList __cb = new _AMD_Copy_hallOfFameList(__inS);
        try
        {
            __obj.hallOfFameList_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getHuDongView(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getHuDongView(copyId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___beginChallengeTa(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        AMD_Copy_beginChallengeTa __cb = new _AMD_Copy_beginChallengeTa(__inS);
        try
        {
            __obj.beginChallengeTa_async(__cb, copyId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___autoChallengeTa(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        AMD_Copy_autoChallengeTa __cb = new _AMD_Copy_autoChallengeTa(__inS);
        try
        {
            __obj.autoChallengeTa_async(__cb, copyId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___endChallengeTa(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int resFlag;
        resFlag = __is.readInt();
        __inS.endReadParams();
        try
        {
            ChallengeTaResult __ret = __obj.endChallengeTa(resFlag, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___worshipTa(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.worshipTa(copyId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyHuDong(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.buyHuDong(copyId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getMyOccupy(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            IntIntPair __ret = __obj.getMyOccupy(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getBuyMilitaryOrderView(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            BuyMilitaryOrderView __ret = __obj.getBuyMilitaryOrderView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyMilitaryOrder(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyMilitaryOrder(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___cancelWarmup(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean first;
        first = __is.readBool();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.cancelWarmup(first, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___levyCopy(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.levyCopy(copyId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___myOccupyList(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.myOccupyList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___giveCopy(Copy __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.giveCopy(copyId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "autoChallengeTa",
        "beginChallenge",
        "beginChallengeTa",
        "beginWarmup",
        "buyChallengeChance",
        "buyChapterChallengeChance",
        "buyHuDong",
        "buyMilitaryOrder",
        "buySuccess",
        "calculateStar",
        "cancelWarmup",
        "clear",
        "employCaptured",
        "endChallenge",
        "endChallengeTa",
        "endWarmup",
        "failChallenge",
        "getBigCopyView",
        "getBuyMilitaryOrderView",
        "getChapterRewardView",
        "getCopyChallengeInfo",
        "getHuDongView",
        "getMyOccupy",
        "getSmallCopyView",
        "getSmallCopyViewWithWarmup",
        "getYuanbaoPrice",
        "giveCopy",
        "hallOfFameList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "killCaptured",
        "levyCopy",
        "myOccupyList",
        "receiveChapterReward",
        "releaseCaptured",
        "worshipTa"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___autoChallengeTa(this, in, __current);
            }
            case 1:
            {
                return ___beginChallenge(this, in, __current);
            }
            case 2:
            {
                return ___beginChallengeTa(this, in, __current);
            }
            case 3:
            {
                return ___beginWarmup(this, in, __current);
            }
            case 4:
            {
                return ___buyChallengeChance(this, in, __current);
            }
            case 5:
            {
                return ___buyChapterChallengeChance(this, in, __current);
            }
            case 6:
            {
                return ___buyHuDong(this, in, __current);
            }
            case 7:
            {
                return ___buyMilitaryOrder(this, in, __current);
            }
            case 8:
            {
                return ___buySuccess(this, in, __current);
            }
            case 9:
            {
                return ___calculateStar(this, in, __current);
            }
            case 10:
            {
                return ___cancelWarmup(this, in, __current);
            }
            case 11:
            {
                return ___clear(this, in, __current);
            }
            case 12:
            {
                return ___employCaptured(this, in, __current);
            }
            case 13:
            {
                return ___endChallenge(this, in, __current);
            }
            case 14:
            {
                return ___endChallengeTa(this, in, __current);
            }
            case 15:
            {
                return ___endWarmup(this, in, __current);
            }
            case 16:
            {
                return ___failChallenge(this, in, __current);
            }
            case 17:
            {
                return ___getBigCopyView(this, in, __current);
            }
            case 18:
            {
                return ___getBuyMilitaryOrderView(this, in, __current);
            }
            case 19:
            {
                return ___getChapterRewardView(this, in, __current);
            }
            case 20:
            {
                return ___getCopyChallengeInfo(this, in, __current);
            }
            case 21:
            {
                return ___getHuDongView(this, in, __current);
            }
            case 22:
            {
                return ___getMyOccupy(this, in, __current);
            }
            case 23:
            {
                return ___getSmallCopyView(this, in, __current);
            }
            case 24:
            {
                return ___getSmallCopyViewWithWarmup(this, in, __current);
            }
            case 25:
            {
                return ___getYuanbaoPrice(this, in, __current);
            }
            case 26:
            {
                return ___giveCopy(this, in, __current);
            }
            case 27:
            {
                return ___hallOfFameList(this, in, __current);
            }
            case 28:
            {
                return ___ice_id(this, in, __current);
            }
            case 29:
            {
                return ___ice_ids(this, in, __current);
            }
            case 30:
            {
                return ___ice_isA(this, in, __current);
            }
            case 31:
            {
                return ___ice_ping(this, in, __current);
            }
            case 32:
            {
                return ___killCaptured(this, in, __current);
            }
            case 33:
            {
                return ___levyCopy(this, in, __current);
            }
            case 34:
            {
                return ___myOccupyList(this, in, __current);
            }
            case 35:
            {
                return ___receiveChapterReward(this, in, __current);
            }
            case 36:
            {
                return ___releaseCaptured(this, in, __current);
            }
            case 37:
            {
                return ___worshipTa(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
