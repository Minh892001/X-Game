// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CrossServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _CrossServerCallbackDisp extends Ice.ObjectImpl implements CrossServerCallback
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::CrossServerCallback"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 报名
     **/
    public final void apply(CrossRoleView roleView, PvpOpponentFormationView pvpView)
        throws NoteException
    {
        apply(roleView, pvpView, null);
    }

    /**
     * 押注(敬酒)
     **/
    public final void crossBet(String winRoleId)
        throws NoteException
    {
        crossBet(winRoleId, null);
    }

    /**
     * 结束挑战
     **/
    public final String endChallenge(CrossRoleView myRoleView, boolean isWin, String rivalRoleId)
        throws NoteException
    {
        return endChallenge(myRoleView, isWin, rivalRoleId, null);
    }

    /**
     * 获取排行榜
     **/
    public final CrossRankView getCrossRank(String roleId)
        throws NoteException
    {
        return getCrossRank(roleId, null);
    }

    /**
     * 获取自己排名和积分
     **/
    public final IntIntPair getMyRankScore(String roleId)
        throws NoteException
    {
        return getMyRankScore(roleId, null);
    }

    /**
     * 获取玩家阵容
     **/
    public final PvpOpponentFormationView getRoleFormationView(String roleId)
        throws NoteException
    {
        return getRoleFormationView(roleId, null);
    }

    /**
     * 获取淘汰赛对阵表
     **/
    public final CrossScheduleView[] getSchedule()
        throws NoteException
    {
        return getSchedule(null);
    }

    /**
     * 播放淘汰赛战报,index从0开始
     **/
    public final CrossMovieView getScheduleMovieData(int id, int index)
        throws NoteException
    {
        return getScheduleMovieData(id, index, null);
    }

    /**
     * 获取淘汰赛对阵战报条数，return胜利者ID数组
     **/
    public final String[] getScheduleMovieList(int id)
        throws NoteException
    {
        return getScheduleMovieList(id, null);
    }

    /**
     * 获取服务器时间
     **/
    public final long getServerTime()
    {
        return getServerTime(null);
    }

    /**
     * 是否报名
     **/
    public final boolean isApply(String roleId)
        throws NoteException
    {
        return isApply(roleId, null);
    }

    /**
     * 是否晋级32强
     **/
    public final boolean isInRank(String roleId)
        throws NoteException
    {
        return isInRank(roleId, null);
    }

    /**
     * 是否淘汰
     **/
    public final boolean isOut(String roleId)
        throws NoteException
    {
        return isOut(roleId, null);
    }

    /**
     * 匹配对手
     **/
    public final CrossRivalView[] matchRival(String roleId)
        throws NoteException
    {
        return matchRival(roleId, null);
    }

    /**
     * 刷新对手
     **/
    public final CrossRivalView[] refreshRival(String roleId)
        throws NoteException
    {
        return refreshRival(roleId, null);
    }

    /**
     * 保存部队阵容
     **/
    public final void saveBattle(CrossRoleView roleView, PvpOpponentFormationView pvpView)
        throws NoteException
    {
        saveBattle(roleView, pvpView, null);
    }

    public static Ice.DispatchStatus ___apply(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        CrossRoleView roleView;
        PvpOpponentFormationView pvpView;
        roleView = new CrossRoleView();
        roleView.__read(__is);
        pvpView = new PvpOpponentFormationView();
        pvpView.__read(__is);
        __inS.endReadParams();
        try
        {
            __obj.apply(roleView, pvpView, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getCrossRank(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            CrossRankView __ret = __obj.getCrossRank(roleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getMyRankScore(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            IntIntPair __ret = __obj.getMyRankScore(roleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___saveBattle(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        CrossRoleView roleView;
        PvpOpponentFormationView pvpView;
        roleView = new CrossRoleView();
        roleView.__read(__is);
        pvpView = new PvpOpponentFormationView();
        pvpView.__read(__is);
        __inS.endReadParams();
        try
        {
            __obj.saveBattle(roleView, pvpView, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___matchRival(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            CrossRivalView[] __ret = __obj.matchRival(roleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            CrossRivalViewSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___refreshRival(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            CrossRivalView[] __ret = __obj.refreshRival(roleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            CrossRivalViewSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endChallenge(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        CrossRoleView myRoleView;
        boolean isWin;
        String rivalRoleId;
        myRoleView = new CrossRoleView();
        myRoleView.__read(__is);
        isWin = __is.readBool();
        rivalRoleId = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.endChallenge(myRoleView, isWin, rivalRoleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getSchedule(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            CrossScheduleView[] __ret = __obj.getSchedule(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            CrossScheduleViewSeqHelper.write(__os, __ret);
            __os.writePendingObjects();
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getScheduleMovieList(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            String[] __ret = __obj.getScheduleMovieList(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            StringSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getScheduleMovieData(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int index;
        id = __is.readInt();
        index = __is.readInt();
        __inS.endReadParams();
        try
        {
            CrossMovieView __ret = __obj.getScheduleMovieData(id, index, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___crossBet(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String winRoleId;
        winRoleId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.crossBet(winRoleId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getRoleFormationView(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            PvpOpponentFormationView __ret = __obj.getRoleFormationView(roleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getServerTime(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        long __ret = __obj.getServerTime(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeLong(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___isInRank(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.isInRank(roleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___isApply(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.isApply(roleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___isOut(CrossServerCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.isOut(roleId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "apply",
        "crossBet",
        "endChallenge",
        "getCrossRank",
        "getMyRankScore",
        "getRoleFormationView",
        "getSchedule",
        "getScheduleMovieData",
        "getScheduleMovieList",
        "getServerTime",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isApply",
        "isInRank",
        "isOut",
        "matchRival",
        "refreshRival",
        "saveBattle"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___apply(this, in, __current);
            }
            case 1:
            {
                return ___crossBet(this, in, __current);
            }
            case 2:
            {
                return ___endChallenge(this, in, __current);
            }
            case 3:
            {
                return ___getCrossRank(this, in, __current);
            }
            case 4:
            {
                return ___getMyRankScore(this, in, __current);
            }
            case 5:
            {
                return ___getRoleFormationView(this, in, __current);
            }
            case 6:
            {
                return ___getSchedule(this, in, __current);
            }
            case 7:
            {
                return ___getScheduleMovieData(this, in, __current);
            }
            case 8:
            {
                return ___getScheduleMovieList(this, in, __current);
            }
            case 9:
            {
                return ___getServerTime(this, in, __current);
            }
            case 10:
            {
                return ___ice_id(this, in, __current);
            }
            case 11:
            {
                return ___ice_ids(this, in, __current);
            }
            case 12:
            {
                return ___ice_isA(this, in, __current);
            }
            case 13:
            {
                return ___ice_ping(this, in, __current);
            }
            case 14:
            {
                return ___isApply(this, in, __current);
            }
            case 15:
            {
                return ___isInRank(this, in, __current);
            }
            case 16:
            {
                return ___isOut(this, in, __current);
            }
            case 17:
            {
                return ___matchRival(this, in, __current);
            }
            case 18:
            {
                return ___refreshRival(this, in, __current);
            }
            case 19:
            {
                return ___saveBattle(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
