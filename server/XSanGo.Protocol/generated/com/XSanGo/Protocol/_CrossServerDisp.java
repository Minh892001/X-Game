// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CrossServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _CrossServerDisp extends Ice.ObjectImpl implements CrossServer
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::CrossServer"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 获取机器人信息
     * @param __cb The callback object for the operation.
     **/
    public final void getRobot_async(AMD_CrossServer_getRobot __cb, int num)
    {
        getRobot_async(__cb, num, null);
    }

    /**
     * 竞猜结果
     **/
    public final void guessResult(int id, String winRoleId)
    {
        guessResult(id, winRoleId, null);
    }

    public final boolean ping(long time)
    {
        return ping(time, null);
    }

    /**
     * 发放各阶段奖励
     * @param __cb The callback object for the operation.
     **/
    public final void sendCrossAward_async(AMD_CrossServer_sendCrossAward __cb, int rank, String[] roleIds)
    {
        sendCrossAward_async(__cb, rank, roleIds, null);
    }

    /**
     * 发放积分奖励
     * @param __cb The callback object for the operation.
     **/
    public final void sendScoreAward_async(AMD_CrossServer_sendScoreAward __cb, int score, String roleId)
    {
        sendScoreAward_async(__cb, score, roleId, null);
    }

    /**
     * 发送比武大会脚本
     * @param __cb The callback object for the operation.
     **/
    public final void sendScript_async(AMD_CrossServer_sendScript __cb, byte[] data)
    {
        sendScript_async(__cb, data, null);
    }

    public final void setCallback(CrossServerCallbackPrx cb)
    {
        setCallback(cb, null);
    }

    public static Ice.DispatchStatus ___ping(CrossServer __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        long time;
        time = __is.readLong();
        __inS.endReadParams();
        boolean __ret = __obj.ping(time, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setCallback(CrossServer __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        CrossServerCallbackPrx cb;
        cb = CrossServerCallbackPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.setCallback(cb, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___guessResult(CrossServer __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        String winRoleId;
        id = __is.readInt();
        winRoleId = __is.readString();
        __inS.endReadParams();
        __obj.guessResult(id, winRoleId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getRobot(CrossServer __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int num;
        num = __is.readInt();
        __inS.endReadParams();
        AMD_CrossServer_getRobot __cb = new _AMD_CrossServer_getRobot(__inS);
        try
        {
            __obj.getRobot_async(__cb, num, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendCrossAward(CrossServer __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int rank;
        String[] roleIds;
        rank = __is.readInt();
        roleIds = StringSeqHelper.read(__is);
        __inS.endReadParams();
        AMD_CrossServer_sendCrossAward __cb = new _AMD_CrossServer_sendCrossAward(__inS);
        try
        {
            __obj.sendCrossAward_async(__cb, rank, roleIds, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendScoreAward(CrossServer __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int score;
        String roleId;
        score = __is.readInt();
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_CrossServer_sendScoreAward __cb = new _AMD_CrossServer_sendScoreAward(__inS);
        try
        {
            __obj.sendScoreAward_async(__cb, score, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendScript(CrossServer __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte[] data;
        data = ByteSeqHelper.read(__is);
        __inS.endReadParams();
        AMD_CrossServer_sendScript __cb = new _AMD_CrossServer_sendScript(__inS);
        try
        {
            __obj.sendScript_async(__cb, data, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "getRobot",
        "guessResult",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "ping",
        "sendCrossAward",
        "sendScoreAward",
        "sendScript",
        "setCallback"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getRobot(this, in, __current);
            }
            case 1:
            {
                return ___guessResult(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___ping(this, in, __current);
            }
            case 7:
            {
                return ___sendCrossAward(this, in, __current);
            }
            case 8:
            {
                return ___sendScoreAward(this, in, __current);
            }
            case 9:
            {
                return ___sendScript(this, in, __current);
            }
            case 10:
            {
                return ___setCallback(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
