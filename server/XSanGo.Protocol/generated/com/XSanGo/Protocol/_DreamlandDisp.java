// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Dreamland.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _DreamlandDisp extends Ice.ObjectImpl implements Dreamland
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Dreamland"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 战斗开始 返回战报编号
     **/
    public final String beginDreamland(int sceneId)
        throws NoteException
    {
        return beginDreamland(sceneId, null);
    }

    /**
     * 购买每日挑战次数
     **/
    public final int buyChallengeNum()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return buyChallengeNum(null);
    }

    /**
     * 商店物品兑换 (IntString)
     **/
    public final String buyDreamlandShopItem(int id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyDreamlandShopItem(id, null);
    }

    /**
     * 领取星数奖励(IntStringSeq)
     **/
    public final String drawStarAward(int star)
        throws NoteException
    {
        return drawStarAward(star, null);
    }

    /**
     * 星数奖励界面(DreamlandAwardView)
     **/
    public final String dreamlandAwardPage()
        throws NoteException
    {
        return dreamlandAwardPage(null);
    }

    /**
     * 幻境主界面数据(DreamlandShow)
     **/
    public final String dreamlandPage(int groupId)
        throws NoteException
    {
        return dreamlandPage(groupId, null);
    }

    /**
     * 商店刷新 (DreamlandShopItemView)
     **/
    public final String dreamlandRefreshShop()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return dreamlandRefreshShop(null);
    }

    /**
     * 商店界面(DreamlandShopItemView)
     **/
    public final String dreamlandShopPage()
        throws NoteException
    {
        return dreamlandShopPage(null);
    }

    /**
     * 扫荡(DreamlandSweepResult)
     **/
    public final String dreamlandSweep(int sceneId)
        throws NoteException
    {
        return dreamlandSweep(sceneId, null);
    }

    /**
     * 幻境关卡组切换(DreamlandShow)
     **/
    public final String dreamlandSwitchSceneGroup(int groupId, boolean isFront)
        throws NoteException
    {
        return dreamlandSwitchSceneGroup(groupId, isFront, null);
    }

    /**
     * 战斗结束 返回星级 (DreamlandSceneAwardResult)
     **/
    public final String endDreamland(int sceneId, byte remainHero)
        throws NoteException
    {
        return endDreamland(sceneId, remainHero, null);
    }

    /**
     * 排行(DreamlandRankView)
     **/
    public final String lookDreamlandRank()
        throws NoteException
    {
        return lookDreamlandRank(null);
    }

    public static Ice.DispatchStatus ___dreamlandPage(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int groupId;
        groupId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.dreamlandPage(groupId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___dreamlandSwitchSceneGroup(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int groupId;
        boolean isFront;
        groupId = __is.readInt();
        isFront = __is.readBool();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.dreamlandSwitchSceneGroup(groupId, isFront, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___beginDreamland(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int sceneId;
        sceneId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.beginDreamland(sceneId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endDreamland(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int sceneId;
        byte remainHero;
        sceneId = __is.readInt();
        remainHero = __is.readByte();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.endDreamland(sceneId, remainHero, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___dreamlandSweep(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int sceneId;
        sceneId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.dreamlandSweep(sceneId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lookDreamlandRank(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.lookDreamlandRank(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___dreamlandAwardPage(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.dreamlandAwardPage(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___drawStarAward(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int star;
        star = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.drawStarAward(star, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___dreamlandShopPage(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.dreamlandShopPage(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___dreamlandRefreshShop(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.dreamlandRefreshShop(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyDreamlandShopItem(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.buyDreamlandShopItem(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyChallengeNum(Dreamland __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            int __ret = __obj.buyChallengeNum(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "beginDreamland",
        "buyChallengeNum",
        "buyDreamlandShopItem",
        "drawStarAward",
        "dreamlandAwardPage",
        "dreamlandPage",
        "dreamlandRefreshShop",
        "dreamlandShopPage",
        "dreamlandSweep",
        "dreamlandSwitchSceneGroup",
        "endDreamland",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "lookDreamlandRank"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___beginDreamland(this, in, __current);
            }
            case 1:
            {
                return ___buyChallengeNum(this, in, __current);
            }
            case 2:
            {
                return ___buyDreamlandShopItem(this, in, __current);
            }
            case 3:
            {
                return ___drawStarAward(this, in, __current);
            }
            case 4:
            {
                return ___dreamlandAwardPage(this, in, __current);
            }
            case 5:
            {
                return ___dreamlandPage(this, in, __current);
            }
            case 6:
            {
                return ___dreamlandRefreshShop(this, in, __current);
            }
            case 7:
            {
                return ___dreamlandShopPage(this, in, __current);
            }
            case 8:
            {
                return ___dreamlandSweep(this, in, __current);
            }
            case 9:
            {
                return ___dreamlandSwitchSceneGroup(this, in, __current);
            }
            case 10:
            {
                return ___endDreamland(this, in, __current);
            }
            case 11:
            {
                return ___ice_id(this, in, __current);
            }
            case 12:
            {
                return ___ice_ids(this, in, __current);
            }
            case 13:
            {
                return ___ice_isA(this, in, __current);
            }
            case 14:
            {
                return ___ice_ping(this, in, __current);
            }
            case 15:
            {
                return ___lookDreamlandRank(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
