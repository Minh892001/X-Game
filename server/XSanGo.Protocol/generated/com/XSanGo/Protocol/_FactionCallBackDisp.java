// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _FactionCallBackDisp extends Ice.ObjectImpl implements FactionCallBack
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::FactionCallBack"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 挖宝时间通知
     **/
    public final void diggingTreasureTimeNotify(int time)
    {
        diggingTreasureTimeNotify(time, null);
    }

    /**
     * 公会战连杀通知播放特效
     **/
    public final void factionBattleEvenkillNotify()
    {
        factionBattleEvenkillNotify(null);
    }

    /**
     * 公会战事件通知  第一个参数：抹去给定据点事件（大于0有效），第二个参数：新增事件的据点（大于0有效），第三个参数：新增事件的图标
     **/
    public final void factionBattleEventNotify(int strongholdId, int addStrongholdId, String eventIcon)
    {
        factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, null);
    }

    /**
     * 公会战消息通知
     **/
    public final void factionBattleMessageNotify(String message)
    {
        factionBattleMessageNotify(message, null);
    }

    /**
     * 公会战排行结果通知
     **/
    public final void factionBattleRankResultNotify(String result)
    {
        factionBattleRankResultNotify(result, null);
    }

    /**
     * 公会战公会资源变更通知 各数值为当前最终数值 徽章+粮草
     **/
    public final void factionBattleResourceNotify(int badge, int forage)
    {
        factionBattleResourceNotify(badge, forage, null);
    }

    /**
     * 公会战斗结果通知
     **/
    public final void factionBattleResultNotify(String result)
    {
        factionBattleResultNotify(result, null);
    }

    /**
     * 锦囊获取消息通知
     **/
    public final void gainKitsMessageNotify(String content, String icon)
    {
        gainKitsMessageNotify(content, icon, null);
    }

    /**
     * 锦囊变更通知包
     **/
    public final void kitsChangeNotify(String views)
    {
        kitsChangeNotify(views, null);
    }

    /**
     * 行军冷却解封通知
     **/
    public final void openMarchCoolingNotify()
    {
        openMarchCoolingNotify(null);
    }

    /**
     * 行军时间通知
     **/
    public final void strongholdMarchingTimeNotify(int time)
    {
        strongholdMarchingTimeNotify(time, null);
    }

    /**
     * 据点角色列表动态刷新
     **/
    public final void strongholdRoleListChangeNotify(String result)
    {
        strongholdRoleListChangeNotify(result, null);
    }

    /**
     * 据点状态通知
     **/
    public final void strongholdStateNotify(String stateMsg)
    {
        strongholdStateNotify(stateMsg, null);
    }

    public static Ice.DispatchStatus ___strongholdStateNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String stateMsg;
        stateMsg = __is.readString();
        __inS.endReadParams();
        __obj.strongholdStateNotify(stateMsg, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___factionBattleRankResultNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String result;
        result = __is.readString();
        __inS.endReadParams();
        __obj.factionBattleRankResultNotify(result, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___strongholdRoleListChangeNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String result;
        result = __is.readString();
        __inS.endReadParams();
        __obj.strongholdRoleListChangeNotify(result, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___strongholdMarchingTimeNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int time;
        time = __is.readInt();
        __inS.endReadParams();
        __obj.strongholdMarchingTimeNotify(time, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___diggingTreasureTimeNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int time;
        time = __is.readInt();
        __inS.endReadParams();
        __obj.diggingTreasureTimeNotify(time, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___gainKitsMessageNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String content;
        String icon;
        content = __is.readString();
        icon = __is.readString();
        __inS.endReadParams();
        __obj.gainKitsMessageNotify(content, icon, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___kitsChangeNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String views;
        views = __is.readString();
        __inS.endReadParams();
        __obj.kitsChangeNotify(views, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___factionBattleMessageNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String message;
        message = __is.readString();
        __inS.endReadParams();
        __obj.factionBattleMessageNotify(message, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___factionBattleResourceNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int badge;
        int forage;
        badge = __is.readInt();
        forage = __is.readInt();
        __inS.endReadParams();
        __obj.factionBattleResourceNotify(badge, forage, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___factionBattleEventNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int strongholdId;
        int addStrongholdId;
        String eventIcon;
        strongholdId = __is.readInt();
        addStrongholdId = __is.readInt();
        eventIcon = __is.readString();
        __inS.endReadParams();
        __obj.factionBattleEventNotify(strongholdId, addStrongholdId, eventIcon, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___factionBattleResultNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String result;
        result = __is.readString();
        __inS.endReadParams();
        __obj.factionBattleResultNotify(result, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___factionBattleEvenkillNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.factionBattleEvenkillNotify(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___openMarchCoolingNotify(FactionCallBack __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.openMarchCoolingNotify(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "diggingTreasureTimeNotify",
        "factionBattleEvenkillNotify",
        "factionBattleEventNotify",
        "factionBattleMessageNotify",
        "factionBattleRankResultNotify",
        "factionBattleResourceNotify",
        "factionBattleResultNotify",
        "gainKitsMessageNotify",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "kitsChangeNotify",
        "openMarchCoolingNotify",
        "strongholdMarchingTimeNotify",
        "strongholdRoleListChangeNotify",
        "strongholdStateNotify"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___diggingTreasureTimeNotify(this, in, __current);
            }
            case 1:
            {
                return ___factionBattleEvenkillNotify(this, in, __current);
            }
            case 2:
            {
                return ___factionBattleEventNotify(this, in, __current);
            }
            case 3:
            {
                return ___factionBattleMessageNotify(this, in, __current);
            }
            case 4:
            {
                return ___factionBattleRankResultNotify(this, in, __current);
            }
            case 5:
            {
                return ___factionBattleResourceNotify(this, in, __current);
            }
            case 6:
            {
                return ___factionBattleResultNotify(this, in, __current);
            }
            case 7:
            {
                return ___gainKitsMessageNotify(this, in, __current);
            }
            case 8:
            {
                return ___ice_id(this, in, __current);
            }
            case 9:
            {
                return ___ice_ids(this, in, __current);
            }
            case 10:
            {
                return ___ice_isA(this, in, __current);
            }
            case 11:
            {
                return ___ice_ping(this, in, __current);
            }
            case 12:
            {
                return ___kitsChangeNotify(this, in, __current);
            }
            case 13:
            {
                return ___openMarchCoolingNotify(this, in, __current);
            }
            case 14:
            {
                return ___strongholdMarchingTimeNotify(this, in, __current);
            }
            case 15:
            {
                return ___strongholdRoleListChangeNotify(this, in, __current);
            }
            case 16:
            {
                return ___strongholdStateNotify(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
