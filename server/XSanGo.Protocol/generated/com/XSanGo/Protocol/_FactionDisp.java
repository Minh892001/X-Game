// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _FactionDisp extends Ice.ObjectImpl implements Faction
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Faction"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void applyFor(String factionId)
        throws NoteException
    {
        applyFor(factionId, null);
    }

    /**
     * 公会战报名
     **/
    public final void applyGvg()
        throws NoteException
    {
        applyGvg(null);
    }

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     **/
    public final void applyItem(int id, int type)
        throws NoteException
    {
        applyItem(id, type, null);
    }

    public final void approveJoin_async(AMD_Faction_approveJoin __cb, String applyId)
        throws NoteException
    {
        approveJoin_async(__cb, applyId, null);
    }

    /**
     * 开始挑战副本 返回FactionCopyResultView
     **/
    public final FactionCopyResultView beginChallenge()
        throws NoteException
    {
        return beginChallenge(null);
    }

    /**
     * 公会战开始战斗，返回战报ID
     **/
    public final String beginGvg()
        throws NoteException
    {
        return beginGvg(null);
    }

    /**
     * 购买公会商品
     **/
    public final void buyFactionShop(int id)
        throws NoteException
    {
        buyFactionShop(id, null);
    }

    /**
     * 行军冷却
     **/
    public final void buyMarchingCooling()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyMarchingCooling(null);
    }

    public final void cancelApplication(String factionId)
    {
        cancelApplication(factionId, null);
    }

    /**
     * 更换阵营
     **/
    public final String changeFactionBattleCamp()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return changeFactionBattleCamp(null);
    }

    /**
     * 清除捐献CD
     **/
    public final void clearDonateCD()
        throws NoteException
    {
        clearDonateCD(null);
    }

    /**
     * 关闭开启的副本
     **/
    public final void closeFactionCopy()
        throws NoteException
    {
        closeFactionCopy(null);
    }

    public final void createFaction_async(AMD_Faction_createFaction __cb, String name, String icon)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        createFaction_async(__cb, name, icon, null);
    }

    public final void deleteMember(String roleId)
        throws NoteException
    {
        deleteMember(roleId, null);
    }

    /**
     * 索要物品。type=0-索要 1-取消
     **/
    public final void demandItem(String itemId, int type)
        throws NoteException
    {
        demandItem(itemId, type, null);
    }

    public final void denyJoin(String applyId)
    {
        denyJoin(applyId, null);
    }

    /**
     * 挖宝
     **/
    public final String diggingTreasure()
        throws NoteException
    {
        return diggingTreasure(null);
    }

    /**
     * 退出公会
     **/
    public final void divorce()
        throws NoteException
    {
        divorce(null);
    }

    /**
     * 公会科技捐献type=0微章1元宝
     **/
    public final void donateTechnology(int id, int type)
        throws NoteException
    {
        donateTechnology(id, type, null);
    }

    /**
     * 公会捐赠 num-捐赠数量
     **/
    public final void donation(int num)
        throws NoteException
    {
        donation(num, null);
    }

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     **/
    public final void endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood)
        throws NoteException
    {
        endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, null);
    }

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     **/
    public final String endGvg(boolean isWin, int heroNum)
        throws NoteException
    {
        return endGvg(isWin, heroNum, null);
    }

    /**
     * 报名公会战
     **/
    public final String enrollFactionBattle()
        throws NoteException
    {
        return enrollFactionBattle(null);
    }

    /**
     * 进入公会战
     **/
    public final String enterFactionBattle()
        throws NoteException
    {
        return enterFactionBattle(null);
    }

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     **/
    public final void factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay)
        throws NoteException
    {
        factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, null);
    }

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     **/
    public final String factionCopyInfo()
        throws NoteException
    {
        return factionCopyInfo(null);
    }

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     **/
    public final String factionCopyList()
        throws NoteException
    {
        return factionCopyList(null);
    }

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public final void findFaction_async(AMD_Faction_findFaction __cb, String idOrName)
        throws NoteException
    {
        findFaction_async(__cb, idOrName, null);
    }

    /**
     * 获取仓库物品申请在我前面的人数
     **/
    public final int getBeforePeople(String itemId)
        throws NoteException
    {
        return getBeforePeople(itemId, null);
    }

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     **/
    public final String getFactionAllotLog()
        throws NoteException
    {
        return getFactionAllotLog(null);
    }

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     **/
    public final String getFactionHistorys()
    {
        return getFactionHistorys(null);
    }

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getFactionInfo_async(AMD_Faction_getFactionInfo __cb, String id)
    {
        getFactionInfo_async(__cb, id, null);
    }

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     **/
    public final void getFactionList_async(AMD_Faction_getFactionList __cb, int orderBy)
    {
        getFactionList_async(__cb, orderBy, null);
    }

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     **/
    public final String getFactionMailLog()
        throws NoteException
    {
        return getFactionMailLog(null);
    }

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     **/
    public final String getFactionRank()
        throws NoteException
    {
        return getFactionRank(null);
    }

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     **/
    public final String getFactionShops()
        throws NoteException
    {
        return getFactionShops(null);
    }

    /**
     * 获取公会战信息，返回GvgView的lua
     **/
    public final String getGvgInfo()
        throws NoteException
    {
        return getGvgInfo(null);
    }

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getHarmRank_async(AMD_Faction_getHarmRank __cb)
        throws NoteException
    {
        getHarmRank_async(__cb, null);
    }

    public final void getJoinRequestList_async(AMD_Faction_getJoinRequestList __cb)
        throws NoteException
    {
        getJoinRequestList_async(__cb, null);
    }

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getMemberRank_async(AMD_Faction_getMemberRank __cb)
        throws NoteException
    {
        getMemberRank_async(__cb, null);
    }

    public final void getMyFaction_async(AMD_Faction_getMyFaction __cb)
        throws NoteException
    {
        getMyFaction_async(__cb, null);
    }

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     **/
    public final String getPurchaseLog()
        throws NoteException
    {
        return getPurchaseLog(null);
    }

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     **/
    public final String getRecruitCount(int type)
        throws NoteException
    {
        return getRecruitCount(type, null);
    }

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getRivalFormation_async(AMD_Faction_getRivalFormation __cb, String roleId)
        throws NoteException
    {
        getRivalFormation_async(__cb, roleId, null);
    }

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getTechnologyDonateLog_async(AMD_Faction_getTechnologyDonateLog __cb)
        throws NoteException
    {
        getTechnologyDonateLog_async(__cb, null);
    }

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getWarehouseItemQueue_async(AMD_Faction_getWarehouseItemQueue __cb, int id)
        throws NoteException
    {
        getWarehouseItemQueue_async(__cb, id, null);
    }

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     **/
    public final void invite_async(AMD_Faction_invite __cb, boolean isFree, String roleId)
        throws NoteException
    {
        invite_async(__cb, isFree, roleId, null);
    }

    /**
     * 离开公会战
     **/
    public final void leaveFactionBattle()
        throws NoteException
    {
        leaveFactionBattle(null);
    }

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     **/
    public final String lookFactionBattleLog(byte logType)
        throws NoteException
    {
        return lookFactionBattleLog(logType, null);
    }

    /**
     * 查看战况回放
     **/
    public final PvpMovieView lookFactionBattleMovieView()
        throws NoteException
    {
        return lookFactionBattleMovieView(null);
    }

    /**
     * 公会战个人排行榜信息
     **/
    public final String lookFactionBattlePersonalRank()
        throws NoteException
    {
        return lookFactionBattlePersonalRank(null);
    }

    /**
     * 公会战排行榜信息
     **/
    public final String lookFactionBattleRank()
        throws NoteException
    {
        return lookFactionBattleRank(null);
    }

    /**
     * 行军
     **/
    public final String marching(boolean isUseKits, int strongholdId)
        throws NoteException
    {
        return marching(isUseKits, strongholdId, null);
    }

    /**
     * 公会战界面
     **/
    public final String openFactionBattle()
        throws NoteException
    {
        return openFactionBattle(null);
    }

    /**
     * 开启副本 返回还可开启的次数
     **/
    public final int openFactionCopy(int copyId)
        throws NoteException
    {
        return openFactionCopy(copyId, null);
    }

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     **/
    public final String openOviStore()
        throws NoteException
    {
        return openOviStore(null);
    }

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     **/
    public final String openStorehouse()
        throws NoteException
    {
        return openStorehouse(null);
    }

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     **/
    public final String openWarehouse()
        throws NoteException
    {
        return openWarehouse(null);
    }

    /**
     * 商铺购买物品
     **/
    public final void oviStoreBuy(String itemId, int num)
        throws NoteException
    {
        oviStoreBuy(itemId, num, null);
    }

    /**
     * 招贤
     **/
    public final boolean recruit(boolean isFree)
        throws NoteException
    {
        return recruit(isFree, null);
    }

    /**
     * 公会改名
     **/
    public final void rename(String newName)
        throws NoteException
    {
        rename(newName, null);
    }

    /**
     * 战斗结果确定（复活 假象而已）
     **/
    public final void resultConfirm()
        throws NoteException
    {
        resultConfirm(null);
    }

    /**
     * 公会战死亡复活
     **/
    public final void reviveGvg()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        reviveGvg(null);
    }

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     **/
    public final void selectRival_async(AMD_Faction_selectRival __cb, int index)
        throws NoteException
    {
        selectRival_async(__cb, index, null);
    }

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     **/
    public final int sendFactionMail(int type, String title, String content)
        throws NoteException
    {
        return sendFactionMail(type, title, content, null);
    }

    /**
     * 设置成普通会员
     **/
    public final void setCommon(String targetId)
        throws NoteException
    {
        setCommon(targetId, null);
    }

    /**
     * 设置推荐科技
     **/
    public final int setRecommendTechnology(int id)
        throws NoteException
    {
        return setRecommendTechnology(id, null);
    }

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     **/
    public final void startBattle_async(AMD_Faction_startBattle __cb, byte type)
        throws NoteException
    {
        startBattle_async(__cb, type, null);
    }

    /**
     * 栈房购置物品
     **/
    public final void storehousePurchase(String itemId, int num)
        throws NoteException
    {
        storehousePurchase(itemId, num, null);
    }

    /**
     * 研究公会科技
     **/
    public final void studyTechnology(int id)
        throws NoteException
    {
        studyTechnology(id, null);
    }

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     **/
    public final String technologyList()
        throws NoteException
    {
        return technologyList(null);
    }

    /**
     * 转让公会(升为会长)
     **/
    public final void transferFaction(String targetId)
        throws NoteException
    {
        transferFaction(targetId, null);
    }

    /**
     * 升为长老
     **/
    public final void upElder(String targetId)
        throws NoteException
    {
        upElder(targetId, null);
    }

    /**
     * 修改公会公告
     **/
    public final void updateNotice(String newNotice)
        throws NoteException
    {
        updateNotice(newNotice, null);
    }

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     **/
    public final String useKits(int kitsId)
        throws NoteException
    {
        return useKits(kitsId, null);
    }

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     **/
    public final void warehouseAllot_async(AMD_Faction_warehouseAllot __cb, String roleId, String itemId, int num)
        throws NoteException
    {
        warehouseAllot_async(__cb, roleId, itemId, num, null);
    }

    public static Ice.DispatchStatus ___createFaction(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String name;
        String icon;
        name = __is.readString();
        icon = __is.readString();
        __inS.endReadParams();
        AMD_Faction_createFaction __cb = new _AMD_Faction_createFaction(__inS);
        try
        {
            __obj.createFaction_async(__cb, name, icon, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getFactionList(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int orderBy;
        orderBy = __is.readInt();
        __inS.endReadParams();
        AMD_Faction_getFactionList __cb = new _AMD_Faction_getFactionList(__inS);
        try
        {
            __obj.getFactionList_async(__cb, orderBy, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___applyFor(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String factionId;
        factionId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.applyFor(factionId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___cancelApplication(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String factionId;
        factionId = __is.readString();
        __inS.endReadParams();
        __obj.cancelApplication(factionId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getMyFaction(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Faction_getMyFaction __cb = new _AMD_Faction_getMyFaction(__inS);
        try
        {
            __obj.getMyFaction_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getJoinRequestList(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Faction_getJoinRequestList __cb = new _AMD_Faction_getJoinRequestList(__inS);
        try
        {
            __obj.getJoinRequestList_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___approveJoin(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String applyId;
        applyId = __is.readString();
        __inS.endReadParams();
        AMD_Faction_approveJoin __cb = new _AMD_Faction_approveJoin(__inS);
        try
        {
            __obj.approveJoin_async(__cb, applyId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___denyJoin(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String applyId;
        applyId = __is.readString();
        __inS.endReadParams();
        __obj.denyJoin(applyId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___divorce(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.divorce(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___deleteMember(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.deleteMember(roleId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___updateNotice(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String newNotice;
        newNotice = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.updateNotice(newNotice, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___findFaction(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String idOrName;
        idOrName = __is.readString();
        __inS.endReadParams();
        AMD_Faction_findFaction __cb = new _AMD_Faction_findFaction(__inS);
        try
        {
            __obj.findFaction_async(__cb, idOrName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___transferFaction(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        targetId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.transferFaction(targetId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___upElder(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        targetId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.upElder(targetId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setCommon(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        targetId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.setCommon(targetId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___factionConfig(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String icon;
        String qq;
        String notice;
        int joinType;
        int joinLevel;
        int joinVip;
        String manifesto;
        int deleteDay;
        icon = __is.readString();
        qq = __is.readString();
        notice = __is.readString();
        joinType = __is.readInt();
        joinLevel = __is.readInt();
        joinVip = __is.readInt();
        manifesto = __is.readString();
        deleteDay = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.factionConfig(icon, qq, notice, joinType, joinLevel, joinVip, manifesto, deleteDay, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFactionHistorys(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.getFactionHistorys(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___donation(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int num;
        num = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.donation(num, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___rename(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String newName;
        newName = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.rename(newName, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___factionCopyList(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.factionCopyList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___openFactionCopy(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int copyId;
        copyId = __is.readInt();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.openFactionCopy(copyId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___closeFactionCopy(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.closeFactionCopy(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___factionCopyInfo(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.factionCopyInfo(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___beginChallenge(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            FactionCopyResultView __ret = __obj.beginChallenge(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endChallenge(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MonsterView[] monsterViews;
        boolean isKill;
        boolean isHurtBlood;
        int dropBlood;
        monsterViews = MonsterViewSeqHelper.read(__is);
        isKill = __is.readBool();
        isHurtBlood = __is.readBool();
        dropBlood = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.endChallenge(monsterViews, isKill, isHurtBlood, dropBlood, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFactionShops(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFactionShops(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyFactionShop(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.buyFactionShop(id, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getGvgInfo(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getGvgInfo(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___applyGvg(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.applyGvg(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___selectRival(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int index;
        index = __is.readInt();
        __inS.endReadParams();
        AMD_Faction_selectRival __cb = new _AMD_Faction_selectRival(__inS);
        try
        {
            __obj.selectRival_async(__cb, index, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getMemberRank(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Faction_getMemberRank __cb = new _AMD_Faction_getMemberRank(__inS);
        try
        {
            __obj.getMemberRank_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getFactionRank(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFactionRank(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getRivalFormation(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Faction_getRivalFormation __cb = new _AMD_Faction_getRivalFormation(__inS);
        try
        {
            __obj.getRivalFormation_async(__cb, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___beginGvg(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.beginGvg(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endGvg(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean isWin;
        int heroNum;
        isWin = __is.readBool();
        heroNum = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.endGvg(isWin, heroNum, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___reviveGvg(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.reviveGvg(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getHarmRank(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Faction_getHarmRank __cb = new _AMD_Faction_getHarmRank(__inS);
        try
        {
            __obj.getHarmRank_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendFactionMail(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        String title;
        String content;
        type = __is.readInt();
        title = __is.readString();
        content = __is.readString();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.sendFactionMail(type, title, content, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFactionMailLog(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFactionMailLog(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___openWarehouse(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.openWarehouse(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___warehouseAllot(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        String itemId;
        int num;
        roleId = __is.readString();
        itemId = __is.readString();
        num = __is.readInt();
        __inS.endReadParams();
        AMD_Faction_warehouseAllot __cb = new _AMD_Faction_warehouseAllot(__inS);
        try
        {
            __obj.warehouseAllot_async(__cb, roleId, itemId, num, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___openStorehouse(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.openStorehouse(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___storehousePurchase(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String itemId;
        int num;
        itemId = __is.readString();
        num = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.storehousePurchase(itemId, num, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___openOviStore(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.openOviStore(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___oviStoreBuy(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String itemId;
        int num;
        itemId = __is.readString();
        num = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.oviStoreBuy(itemId, num, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___technologyList(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.technologyList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setRecommendTechnology(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.setRecommendTechnology(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___donateTechnology(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int type;
        id = __is.readInt();
        type = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.donateTechnology(id, type, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___clearDonateCD(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.clearDonateCD(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___studyTechnology(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.studyTechnology(id, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___openFactionBattle(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.openFactionBattle(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___enrollFactionBattle(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.enrollFactionBattle(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___changeFactionBattleCamp(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.changeFactionBattleCamp(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___enterFactionBattle(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.enterFactionBattle(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___leaveFactionBattle(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.leaveFactionBattle(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lookFactionBattleRank(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.lookFactionBattleRank(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lookFactionBattlePersonalRank(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.lookFactionBattlePersonalRank(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___marching(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean isUseKits;
        int strongholdId;
        isUseKits = __is.readBool();
        strongholdId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.marching(isUseKits, strongholdId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyMarchingCooling(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyMarchingCooling(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___diggingTreasure(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.diggingTreasure(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___useKits(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int kitsId;
        kitsId = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.useKits(kitsId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___startBattle(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte type;
        type = __is.readByte();
        __inS.endReadParams();
        AMD_Faction_startBattle __cb = new _AMD_Faction_startBattle(__inS);
        try
        {
            __obj.startBattle_async(__cb, type, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___resultConfirm(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.resultConfirm(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lookFactionBattleMovieView(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            PvpMovieView __ret = __obj.lookFactionBattleMovieView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___lookFactionBattleLog(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte logType;
        logType = __is.readByte();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.lookFactionBattleLog(logType, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFactionAllotLog(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFactionAllotLog(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getTechnologyDonateLog(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Faction_getTechnologyDonateLog __cb = new _AMD_Faction_getTechnologyDonateLog(__inS);
        try
        {
            __obj.getTechnologyDonateLog_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getPurchaseLog(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getPurchaseLog(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getWarehouseItemQueue(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        AMD_Faction_getWarehouseItemQueue __cb = new _AMD_Faction_getWarehouseItemQueue(__inS);
        try
        {
            __obj.getWarehouseItemQueue_async(__cb, id, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___demandItem(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String itemId;
        int type;
        itemId = __is.readString();
        type = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.demandItem(itemId, type, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___applyItem(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int type;
        id = __is.readInt();
        type = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.applyItem(id, type, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getBeforePeople(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String itemId;
        itemId = __is.readString();
        __inS.endReadParams();
        try
        {
            int __ret = __obj.getBeforePeople(itemId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___recruit(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean isFree;
        isFree = __is.readBool();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.recruit(isFree, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___invite(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean isFree;
        String roleId;
        isFree = __is.readBool();
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Faction_invite __cb = new _AMD_Faction_invite(__inS);
        try
        {
            __obj.invite_async(__cb, isFree, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getRecruitCount(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        type = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getRecruitCount(type, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getFactionInfo(Faction __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        id = __is.readString();
        __inS.endReadParams();
        AMD_Faction_getFactionInfo __cb = new _AMD_Faction_getFactionInfo(__inS);
        try
        {
            __obj.getFactionInfo_async(__cb, id, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "applyFor",
        "applyGvg",
        "applyItem",
        "approveJoin",
        "beginChallenge",
        "beginGvg",
        "buyFactionShop",
        "buyMarchingCooling",
        "cancelApplication",
        "changeFactionBattleCamp",
        "clearDonateCD",
        "closeFactionCopy",
        "createFaction",
        "deleteMember",
        "demandItem",
        "denyJoin",
        "diggingTreasure",
        "divorce",
        "donateTechnology",
        "donation",
        "endChallenge",
        "endGvg",
        "enrollFactionBattle",
        "enterFactionBattle",
        "factionConfig",
        "factionCopyInfo",
        "factionCopyList",
        "findFaction",
        "getBeforePeople",
        "getFactionAllotLog",
        "getFactionHistorys",
        "getFactionInfo",
        "getFactionList",
        "getFactionMailLog",
        "getFactionRank",
        "getFactionShops",
        "getGvgInfo",
        "getHarmRank",
        "getJoinRequestList",
        "getMemberRank",
        "getMyFaction",
        "getPurchaseLog",
        "getRecruitCount",
        "getRivalFormation",
        "getTechnologyDonateLog",
        "getWarehouseItemQueue",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "invite",
        "leaveFactionBattle",
        "lookFactionBattleLog",
        "lookFactionBattleMovieView",
        "lookFactionBattlePersonalRank",
        "lookFactionBattleRank",
        "marching",
        "openFactionBattle",
        "openFactionCopy",
        "openOviStore",
        "openStorehouse",
        "openWarehouse",
        "oviStoreBuy",
        "recruit",
        "rename",
        "resultConfirm",
        "reviveGvg",
        "selectRival",
        "sendFactionMail",
        "setCommon",
        "setRecommendTechnology",
        "startBattle",
        "storehousePurchase",
        "studyTechnology",
        "technologyList",
        "transferFaction",
        "upElder",
        "updateNotice",
        "useKits",
        "warehouseAllot"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___applyFor(this, in, __current);
            }
            case 1:
            {
                return ___applyGvg(this, in, __current);
            }
            case 2:
            {
                return ___applyItem(this, in, __current);
            }
            case 3:
            {
                return ___approveJoin(this, in, __current);
            }
            case 4:
            {
                return ___beginChallenge(this, in, __current);
            }
            case 5:
            {
                return ___beginGvg(this, in, __current);
            }
            case 6:
            {
                return ___buyFactionShop(this, in, __current);
            }
            case 7:
            {
                return ___buyMarchingCooling(this, in, __current);
            }
            case 8:
            {
                return ___cancelApplication(this, in, __current);
            }
            case 9:
            {
                return ___changeFactionBattleCamp(this, in, __current);
            }
            case 10:
            {
                return ___clearDonateCD(this, in, __current);
            }
            case 11:
            {
                return ___closeFactionCopy(this, in, __current);
            }
            case 12:
            {
                return ___createFaction(this, in, __current);
            }
            case 13:
            {
                return ___deleteMember(this, in, __current);
            }
            case 14:
            {
                return ___demandItem(this, in, __current);
            }
            case 15:
            {
                return ___denyJoin(this, in, __current);
            }
            case 16:
            {
                return ___diggingTreasure(this, in, __current);
            }
            case 17:
            {
                return ___divorce(this, in, __current);
            }
            case 18:
            {
                return ___donateTechnology(this, in, __current);
            }
            case 19:
            {
                return ___donation(this, in, __current);
            }
            case 20:
            {
                return ___endChallenge(this, in, __current);
            }
            case 21:
            {
                return ___endGvg(this, in, __current);
            }
            case 22:
            {
                return ___enrollFactionBattle(this, in, __current);
            }
            case 23:
            {
                return ___enterFactionBattle(this, in, __current);
            }
            case 24:
            {
                return ___factionConfig(this, in, __current);
            }
            case 25:
            {
                return ___factionCopyInfo(this, in, __current);
            }
            case 26:
            {
                return ___factionCopyList(this, in, __current);
            }
            case 27:
            {
                return ___findFaction(this, in, __current);
            }
            case 28:
            {
                return ___getBeforePeople(this, in, __current);
            }
            case 29:
            {
                return ___getFactionAllotLog(this, in, __current);
            }
            case 30:
            {
                return ___getFactionHistorys(this, in, __current);
            }
            case 31:
            {
                return ___getFactionInfo(this, in, __current);
            }
            case 32:
            {
                return ___getFactionList(this, in, __current);
            }
            case 33:
            {
                return ___getFactionMailLog(this, in, __current);
            }
            case 34:
            {
                return ___getFactionRank(this, in, __current);
            }
            case 35:
            {
                return ___getFactionShops(this, in, __current);
            }
            case 36:
            {
                return ___getGvgInfo(this, in, __current);
            }
            case 37:
            {
                return ___getHarmRank(this, in, __current);
            }
            case 38:
            {
                return ___getJoinRequestList(this, in, __current);
            }
            case 39:
            {
                return ___getMemberRank(this, in, __current);
            }
            case 40:
            {
                return ___getMyFaction(this, in, __current);
            }
            case 41:
            {
                return ___getPurchaseLog(this, in, __current);
            }
            case 42:
            {
                return ___getRecruitCount(this, in, __current);
            }
            case 43:
            {
                return ___getRivalFormation(this, in, __current);
            }
            case 44:
            {
                return ___getTechnologyDonateLog(this, in, __current);
            }
            case 45:
            {
                return ___getWarehouseItemQueue(this, in, __current);
            }
            case 46:
            {
                return ___ice_id(this, in, __current);
            }
            case 47:
            {
                return ___ice_ids(this, in, __current);
            }
            case 48:
            {
                return ___ice_isA(this, in, __current);
            }
            case 49:
            {
                return ___ice_ping(this, in, __current);
            }
            case 50:
            {
                return ___invite(this, in, __current);
            }
            case 51:
            {
                return ___leaveFactionBattle(this, in, __current);
            }
            case 52:
            {
                return ___lookFactionBattleLog(this, in, __current);
            }
            case 53:
            {
                return ___lookFactionBattleMovieView(this, in, __current);
            }
            case 54:
            {
                return ___lookFactionBattlePersonalRank(this, in, __current);
            }
            case 55:
            {
                return ___lookFactionBattleRank(this, in, __current);
            }
            case 56:
            {
                return ___marching(this, in, __current);
            }
            case 57:
            {
                return ___openFactionBattle(this, in, __current);
            }
            case 58:
            {
                return ___openFactionCopy(this, in, __current);
            }
            case 59:
            {
                return ___openOviStore(this, in, __current);
            }
            case 60:
            {
                return ___openStorehouse(this, in, __current);
            }
            case 61:
            {
                return ___openWarehouse(this, in, __current);
            }
            case 62:
            {
                return ___oviStoreBuy(this, in, __current);
            }
            case 63:
            {
                return ___recruit(this, in, __current);
            }
            case 64:
            {
                return ___rename(this, in, __current);
            }
            case 65:
            {
                return ___resultConfirm(this, in, __current);
            }
            case 66:
            {
                return ___reviveGvg(this, in, __current);
            }
            case 67:
            {
                return ___selectRival(this, in, __current);
            }
            case 68:
            {
                return ___sendFactionMail(this, in, __current);
            }
            case 69:
            {
                return ___setCommon(this, in, __current);
            }
            case 70:
            {
                return ___setRecommendTechnology(this, in, __current);
            }
            case 71:
            {
                return ___startBattle(this, in, __current);
            }
            case 72:
            {
                return ___storehousePurchase(this, in, __current);
            }
            case 73:
            {
                return ___studyTechnology(this, in, __current);
            }
            case 74:
            {
                return ___technologyList(this, in, __current);
            }
            case 75:
            {
                return ___transferFaction(this, in, __current);
            }
            case 76:
            {
                return ___upElder(this, in, __current);
            }
            case 77:
            {
                return ___updateNotice(this, in, __current);
            }
            case 78:
            {
                return ___useKits(this, in, __current);
            }
            case 79:
            {
                return ___warehouseAllot(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
