// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Faction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface _FactionOperationsNC
{
    void createFaction_async(AMD_Faction_createFaction __cb, String name, String icon)
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 获取帮派列表，返回FactionListViewSeq的lua orderBy=0-人数 1-等级 2-随机
     * @param __cb The callback object for the operation.
     **/
    void getFactionList_async(AMD_Faction_getFactionList __cb, int orderBy);

    void applyFor(String factionId)
        throws NoteException;

    void cancelApplication(String factionId);

    void getMyFaction_async(AMD_Faction_getMyFaction __cb)
        throws NoteException;

    void getJoinRequestList_async(AMD_Faction_getJoinRequestList __cb)
        throws NoteException;

    void approveJoin_async(AMD_Faction_approveJoin __cb, String applyId)
        throws NoteException;

    void denyJoin(String applyId);

    /**
     * 退出公会
     **/
    void divorce()
        throws NoteException;

    void deleteMember(String roleId)
        throws NoteException;

    /**
     * 修改公会公告
     **/
    void updateNotice(String newNotice)
        throws NoteException;

    /**
     * 查找公会 返回FactionListViewSeq的lua
     * @param __cb The callback object for the operation.
     **/
    void findFaction_async(AMD_Faction_findFaction __cb, String idOrName)
        throws NoteException;

    /**
     * 转让公会(升为会长)
     **/
    void transferFaction(String targetId)
        throws NoteException;

    /**
     * 升为长老
     **/
    void upElder(String targetId)
        throws NoteException;

    /**
     * 设置成普通会员
     **/
    void setCommon(String targetId)
        throws NoteException;

    /**
     * 公会设置 joinType 0-直接加入 1-验证加入 2-拒绝加入
     **/
    void factionConfig(String icon, String qq, String notice, int joinType, int joinLevel, int joinVip, String manifesto, int deleteDay)
        throws NoteException;

    /**
     * 查看公会动态(历史记录) 返回FactionHistoryViewSeq的lua
     **/
    String getFactionHistorys();

    /**
     * 公会捐赠 num-捐赠数量
     **/
    void donation(int num)
        throws NoteException;

    /**
     * 公会改名
     **/
    void rename(String newName)
        throws NoteException;

    /**
     * 打开副本列表界面 返回IntIntPair,first-已开启的副本ID,second-可开启副本次数
     **/
    String factionCopyList()
        throws NoteException;

    /**
     * 开启副本 返回还可开启的次数
     **/
    int openFactionCopy(int copyId)
        throws NoteException;

    /**
     * 关闭开启的副本
     **/
    void closeFactionCopy()
        throws NoteException;

    /**
     * 副本进度等信息 返回FactionCopyInfoView的lua
     **/
    String factionCopyInfo()
        throws NoteException;

    /**
     * 开始挑战副本 返回FactionCopyResultView
     **/
    FactionCopyResultView beginChallenge()
        throws NoteException;

    /**
     * 结束挑战副本 需要告诉服务器所有怪物的血量和怒气、是否击杀小怪、是否触发boss掉血量、总掉血量
     **/
    void endChallenge(MonsterView[] monsterViews, boolean isKill, boolean isHurtBlood, int dropBlood)
        throws NoteException;

    /**
     * 获取公会商店商品，返回FactionShopView的lua
     **/
    String getFactionShops()
        throws NoteException;

    /**
     * 购买公会商品
     **/
    void buyFactionShop(int id)
        throws NoteException;

    /**
     * 获取公会战信息，返回GvgView的lua
     **/
    String getGvgInfo()
        throws NoteException;

    /**
     * 公会战报名
     **/
    void applyGvg()
        throws NoteException;

    /**
     * 选择对手，返回RivalView数组的lua
     * @param __cb The callback object for the operation.
     **/
    void selectRival_async(AMD_Faction_selectRival __cb, int index)
        throws NoteException;

    /**
     * 获取公会战个人排行榜，返回MemberRankView的lua
     * @param __cb The callback object for the operation.
     **/
    void getMemberRank_async(AMD_Faction_getMemberRank __cb)
        throws NoteException;

    /**
     * 获取公会战公会排行榜，返回FactionRankView的lua
     **/
    String getFactionRank()
        throws NoteException;

    /**
     * 获取部队阵容，返回GvgChallengeView的lua
     * @param __cb The callback object for the operation.
     **/
    void getRivalFormation_async(AMD_Faction_getRivalFormation __cb, String roleId)
        throws NoteException;

    /**
     * 公会战开始战斗，返回战报ID
     **/
    String beginGvg()
        throws NoteException;

    /**
     * 公会战结束战斗，heroNum-剩余武将数量，返回IntIntPair的lua
     * IntIntPair：first-星级，second-增加荣誉
     **/
    String endGvg(boolean isWin, int heroNum)
        throws NoteException;

    /**
     * 公会战死亡复活
     **/
    void reviveGvg()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException;

    /**
     * 伤害排行榜，返回CopyHarmRankView数组的lua
     * @param __cb The callback object for the operation.
     **/
    void getHarmRank_async(AMD_Faction_getHarmRank __cb)
        throws NoteException;

    /**
     * 发送公会邮件返回还可发送次数，type=0-所有,1-会长长老,2-普通人员
     **/
    int sendFactionMail(int type, String title, String content)
        throws NoteException;

    /**
     * 当日公会邮件发送记录，返回FactionMailLogSeq的lua
     **/
    String getFactionMailLog()
        throws NoteException;

    /**
     * 打开仓库界面，返回FactionWarehouseView的lua
     **/
    String openWarehouse()
        throws NoteException;

    /**
     * 仓库分配物品
     * @param __cb The callback object for the operation.
     **/
    void warehouseAllot_async(AMD_Faction_warehouseAllot __cb, String roleId, String itemId, int num)
        throws NoteException;

    /**
     * 打开栈房界面，返回FactionStorehouseView的lua
     **/
    String openStorehouse()
        throws NoteException;

    /**
     * 栈房购置物品
     **/
    void storehousePurchase(String itemId, int num)
        throws NoteException;

    /**
     * 打开商铺界面，返回FactionOviStoreView的lua
     **/
    String openOviStore()
        throws NoteException;

    /**
     * 商铺购买物品
     **/
    void oviStoreBuy(String itemId, int num)
        throws NoteException;

    /**
     * 公会科技列表,返回FactionTechnologyView的lua
     **/
    String technologyList()
        throws NoteException;

    /**
     * 设置推荐科技
     **/
    int setRecommendTechnology(int id)
        throws NoteException;

    /**
     * 公会科技捐献type=0微章1元宝
     **/
    void donateTechnology(int id, int type)
        throws NoteException;

    /**
     * 清除捐献CD
     **/
    void clearDonateCD()
        throws NoteException;

    /**
     * 研究公会科技
     **/
    void studyTechnology(int id)
        throws NoteException;

    /**
     * 公会战界面
     **/
    String openFactionBattle()
        throws NoteException;

    /**
     * 报名公会战
     **/
    String enrollFactionBattle()
        throws NoteException;

    /**
     * 更换阵营
     **/
    String changeFactionBattleCamp()
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 进入公会战
     **/
    String enterFactionBattle()
        throws NoteException;

    /**
     * 离开公会战
     **/
    void leaveFactionBattle()
        throws NoteException;

    /**
     * 公会战排行榜信息
     **/
    String lookFactionBattleRank()
        throws NoteException;

    /**
     * 公会战个人排行榜信息
     **/
    String lookFactionBattlePersonalRank()
        throws NoteException;

    /**
     * 行军
     **/
    String marching(boolean isUseKits, int strongholdId)
        throws NoteException;

    /**
     * 行军冷却
     **/
    void buyMarchingCooling()
        throws NotEnoughYuanBaoException,
               NoteException;

    /**
     * 挖宝
     **/
    String diggingTreasure()
        throws NoteException;

    /**
     * 使用锦囊 返回为空无消息提示 否则需要消息提示
     **/
    String useKits(int kitsId)
        throws NoteException;

    /**
     * 开打  type=0守方 1攻方
     * @param __cb The callback object for the operation.
     **/
    void startBattle_async(AMD_Faction_startBattle __cb, byte type)
        throws NoteException;

    /**
     * 战斗结果确定（复活 假象而已）
     **/
    void resultConfirm()
        throws NoteException;

    /**
     * 查看战况回放
     **/
    PvpMovieView lookFactionBattleMovieView()
        throws NoteException;

    /**
     * 查看公会战日志 logType=0 战斗日志，1挖宝
     **/
    String lookFactionBattleLog(byte logType)
        throws NoteException;

    /**
     * 获取公会仓库分配日志，返回FactionAllotLog[]的lua
     **/
    String getFactionAllotLog()
        throws NoteException;

    /**
     * 获取科技捐赠日志，返回TechnologyDonateView的lua
     * @param __cb The callback object for the operation.
     **/
    void getTechnologyDonateLog_async(AMD_Faction_getTechnologyDonateLog __cb)
        throws NoteException;

    /**
     * 获取栈房购置日志，返回PurchaseLogSeq的lua
     **/
    String getPurchaseLog()
        throws NoteException;

    /**
     * 获取仓库物品的申请队列，返回TechnologyDonateLogSeq的lua
     * @param __cb The callback object for the operation.
     **/
    void getWarehouseItemQueue_async(AMD_Faction_getWarehouseItemQueue __cb, int id)
        throws NoteException;

    /**
     * 索要物品。type=0-索要 1-取消
     **/
    void demandItem(String itemId, int type)
        throws NoteException;

    /**
     * 申请物品，进入队列排队。type=0-申请 1-取消
     **/
    void applyItem(int id, int type)
        throws NoteException;

    /**
     * 获取仓库物品申请在我前面的人数
     **/
    int getBeforePeople(String itemId)
        throws NoteException;

    /**
     * 招贤
     **/
    boolean recruit(boolean isFree)
        throws NoteException;

    /**
     * 邀请
     * @param __cb The callback object for the operation.
     **/
    void invite_async(AMD_Faction_invite __cb, boolean isFree, String roleId)
        throws NoteException;

    /**
     * 获取招贤、邀请次数。0-招贤1-邀请return:IntIntPair
     **/
    String getRecruitCount(int type)
        throws NoteException;

    /**
     * 获取公会信息，返回FactionView的lua
     * @param __cb The callback object for the operation.
     **/
    void getFactionInfo_async(AMD_Faction_getFactionInfo __cb, String id);
}
