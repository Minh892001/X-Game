// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Formation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _FormationDisp extends Ice.ObjectImpl implements Formation
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Formation"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void clearFormation(String formationId)
        throws NoteException
    {
        clearFormation(formationId, null);
    }

    public final FormationView[] getFormationList()
    {
        return getFormationList(null);
    }

    public final void setFormationBuff(String formationId, String bookId)
    {
        setFormationBuff(formationId, bookId, null);
    }

    public final void setFormationPosition(String formationId, byte postion, String heroId)
        throws NoteException
    {
        setFormationPosition(formationId, postion, heroId, null);
    }

    public final void setFormationSkill(String formationId, byte pos, int skillId)
    {
        setFormationSkill(formationId, pos, skillId, null);
    }

    public static Ice.DispatchStatus ___getFormationList(Formation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        FormationView[] __ret = __obj.getFormationList(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FormationViewSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setFormationBuff(Formation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String formationId;
        String bookId;
        formationId = __is.readString();
        bookId = __is.readString();
        __inS.endReadParams();
        __obj.setFormationBuff(formationId, bookId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setFormationPosition(Formation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String formationId;
        byte postion;
        String heroId;
        formationId = __is.readString();
        postion = __is.readByte();
        heroId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.setFormationPosition(formationId, postion, heroId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setFormationSkill(Formation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String formationId;
        byte pos;
        int skillId;
        formationId = __is.readString();
        pos = __is.readByte();
        skillId = __is.readInt();
        __inS.endReadParams();
        __obj.setFormationSkill(formationId, pos, skillId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___clearFormation(Formation __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String formationId;
        formationId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.clearFormation(formationId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "clearFormation",
        "getFormationList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setFormationBuff",
        "setFormationPosition",
        "setFormationSkill"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___clearFormation(this, in, __current);
            }
            case 1:
            {
                return ___getFormationList(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___setFormationBuff(this, in, __current);
            }
            case 7:
            {
                return ___setFormationPosition(this, in, __current);
            }
            case 8:
            {
                return ___setFormationSkill(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
