// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Center.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _GmDisp extends Ice.ObjectImpl implements Gm
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Gm"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void addSycee_async(AMD_Gm_addSycee __cb, int serverId, String roleName, int sycee)
        throws NoteException
    {
        addSycee_async(__cb, serverId, roleName, sycee, null);
    }

    /**
     * 添加vip经验
     * @param __cb The callback object for the operation.
     **/
    public final void addVipExp_async(AMD_Gm_addVipExp __cb, int serverId, String roleName, int exp)
        throws NoteException
    {
        addVipExp_async(__cb, serverId, roleName, exp, null);
    }

    /**
     * 增加大转盘次数 wheelType=0幸运转盘 1豪华转盘
     * @param __cb The callback object for the operation.
     **/
    public final void addWheelCount_async(AMD_Gm_addWheelCount __cb, int serverId, String roleId, int count, int wheelType)
        throws NoteException
    {
        addWheelCount_async(__cb, serverId, roleId, count, wheelType, null);
    }

    public final void deleteCDK_async(AMD_Gm_deleteCDK __cb, String category)
        throws NoteException
    {
        deleteCDK_async(__cb, category, null);
    }

    /**
     * 删除物品
     * @param __cb The callback object for the operation.
     **/
    public final void deleteItem_async(AMD_Gm_deleteItem __cb, int serverId, String roleId, String itemId, int num)
    {
        deleteItem_async(__cb, serverId, roleId, itemId, num, null);
    }

    /**
     * 下载角色二进制数据存档
     * @param __cb The callback object for the operation.
     **/
    public final void download_async(AMD_Gm_download __cb, int serverId, String roleId)
        throws NoteException
    {
        download_async(__cb, serverId, roleId, null);
    }

    public final void editChannel_async(AMD_Gm_editChannel __cb, int id, String name, String orderUrl)
        throws NoteException
    {
        editChannel_async(__cb, id, name, orderUrl, null);
    }

    public final void editGameServer_async(AMD_Gm_editGameServer __cb, int id, String name, int showId, String gateIp, boolean isNew, boolean cpShowOnly, boolean cpEnterOnly, int onlineLimit, int targetId)
        throws NoteException
    {
        editGameServer_async(__cb, id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, null);
    }

    public final void executeGroovyCombineScript_async(AMD_Gm_executeGroovyCombineScript __cb, int serverId)
        throws NoteException
    {
        executeGroovyCombineScript_async(__cb, serverId, null);
    }

    public final void executeGroovyScript_async(AMD_Gm_executeGroovyScript __cb, int serverId, String script)
        throws NoteException
    {
        executeGroovyScript_async(__cb, serverId, script, null);
    }

    /**
     * 根据roleName模糊查询
     * @param __cb The callback object for the operation.
     **/
    public final void findFuzzyRoleViewList_async(AMD_Gm_findFuzzyRoleViewList __cb, int serverId, String accountName, String roleName)
        throws NoteException
    {
        findFuzzyRoleViewList_async(__cb, serverId, accountName, roleName, null);
    }

    public final void findRoleViewList_async(AMD_Gm_findRoleViewList __cb, int serverId, String accountName, String roleName, String roleId)
        throws NoteException
    {
        findRoleViewList_async(__cb, serverId, accountName, roleName, roleId, null);
    }

    public final void fobidenChat_async(AMD_Gm_fobidenChat __cb, int serverId, String roleId, String releaseTime)
        throws NoteException
    {
        fobidenChat_async(__cb, serverId, roleId, releaseTime, null);
    }

    public final void forzenAccount_async(AMD_Gm_forzenAccount __cb, String account, String releaseTime)
        throws NoteException
    {
        forzenAccount_async(__cb, account, releaseTime, null);
    }

    public final void generateCDK_async(AMD_Gm_generateCDK __cb, String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark, Property[] content)
        throws NoteException
    {
        generateCDK_async(__cb, name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, null);
    }

    public final String getChannelConfig()
        throws NoteException
    {
        return getChannelConfig(null);
    }

    public final WhiteList[] getCurrentWhiteList()
        throws NoteException
    {
        return getCurrentWhiteList(null);
    }

    /**
     * 查找公会列表，通过factionName模糊查找
     * @param __cb The callback object for the operation.
     **/
    public final void getFactionList_async(AMD_Gm_getFactionList __cb, int serverId, String factionName)
        throws NoteException
    {
        getFactionList_async(__cb, serverId, factionName, null);
    }

    /**
     * 获取公会所有成员
     * @param __cb The callback object for the operation.
     **/
    public final void getFactionMemberList_async(AMD_Gm_getFactionMemberList __cb, int serverId, String factionName)
        throws NoteException
    {
        getFactionMemberList_async(__cb, serverId, factionName, null);
    }

    public final GuideConfig getGuideConfig()
        throws NoteException
    {
        return getGuideConfig(null);
    }

    public final void getHeroSkillConfig_async(AMD_Gm_getHeroSkillConfig __cb)
        throws NoteException
    {
        getHeroSkillConfig_async(__cb, null);
    }

    public final void getItemConfig_async(AMD_Gm_getItemConfig __cb)
        throws NoteException
    {
        getItemConfig_async(__cb, null);
    }

    /**
     * 充值记录查询
     * @param __cb The callback object for the operation.
     **/
    public final void getPayLog_async(AMD_Gm_getPayLog __cb, int serverId, String roleName)
        throws NoteException
    {
        getPayLog_async(__cb, serverId, roleName, null);
    }

    public final void getPlayerSkillConfig_async(AMD_Gm_getPlayerSkillConfig __cb)
        throws NoteException
    {
        getPlayerSkillConfig_async(__cb, null);
    }

    public final void getPropertyConfig_async(AMD_Gm_getPropertyConfig __cb)
        throws NoteException
    {
        getPropertyConfig_async(__cb, null);
    }

    /**
     * 获取排行榜 type-0部队 1-公会 2-大神
     * @param __cb The callback object for the operation.
     **/
    public final void getRankList_async(AMD_Gm_getRankList __cb, int serverId, int type)
        throws NoteException
    {
        getRankList_async(__cb, serverId, type, null);
    }

    public final void getRelationConfig_async(AMD_Gm_getRelationConfig __cb)
        throws NoteException
    {
        getRelationConfig_async(__cb, null);
    }

    public final void getServerItemConfig_async(AMD_Gm_getServerItemConfig __cb, int serverId)
        throws NoteException
    {
        getServerItemConfig_async(__cb, serverId, null);
    }

    /**
     * 导入role数据
     * @param __cb The callback object for the operation.
     **/
    public final void importRole_async(AMD_Gm_importRole __cb, int serverId, byte[] data, String roleId)
        throws NoteException
    {
        importRole_async(__cb, serverId, data, roleId, null);
    }

    public final void kickRole_async(AMD_Gm_kickRole __cb, int serverId, String account, String roleId)
        throws NoteException
    {
        kickRole_async(__cb, serverId, account, roleId, null);
    }

    public final void loadCDK_async(AMD_Gm_loadCDK __cb, String category)
        throws NoteException
    {
        loadCDK_async(__cb, category, null);
    }

    public final void mockCharge_async(AMD_Gm_mockCharge __cb, String account, String roleId, int channelId, int serverId, int cent)
        throws NoteException
    {
        mockCharge_async(__cb, account, roleId, channelId, serverId, cent, null);
    }

    public final GameServerView[] ping()
    {
        return ping(null);
    }

    /**
     * 根据CDK查询具体信息
     * @param __cb The callback object for the operation.
     **/
    public final void queryCdkByCDK_async(AMD_Gm_queryCdkByCDK __cb, int serverId, String cdk)
        throws NoteException
    {
        queryCdkByCDK_async(__cb, serverId, cdk, null);
    }

    public final void reloadScript_async(AMD_Gm_reloadScript __cb, int serverId, ScriptReloadConfig config)
        throws NoteException
    {
        reloadScript_async(__cb, serverId, config, null);
    }

    public final void sendAnnounce_async(AMD_Gm_sendAnnounce __cb, int serverId, String content)
        throws NoteException
    {
        sendAnnounce_async(__cb, serverId, content, null);
    }

    public final void sendSystemMail_async(AMD_Gm_sendSystemMail __cb, int serverId, String roleId, String roleName, String title, String content, Property[] attach, String sendName)
        throws NoteException
    {
        sendSystemMail_async(__cb, serverId, roleId, roleName, title, content, attach, sendName, null);
    }

    public final void sendSystemServerMail_async(AMD_Gm_sendSystemServerMail __cb, int serverId, String title, String content, Property[] attach, String conditionParams, String senderName)
        throws NoteException
    {
        sendSystemServerMail_async(__cb, serverId, title, content, attach, conditionParams, senderName, null);
    }

    public final void setGuideConfig(GuideConfig config)
        throws NoteException
    {
        setGuideConfig(config, null);
    }

    public final void setRecommendServer_async(AMD_Gm_setRecommendServer __cb, int serverId)
        throws NoteException
    {
        setRecommendServer_async(__cb, serverId, null);
    }

    public final void setVipLevel_async(AMD_Gm_setVipLevel __cb, int serverId, String roleName, int vip)
        throws NoteException
    {
        setVipLevel_async(__cb, serverId, roleName, vip, null);
    }

    public final void setWhiteList_async(AMD_Gm_setWhiteList __cb, WhiteList param)
        throws NoteException
    {
        setWhiteList_async(__cb, param, null);
    }

    /**
     * 调整指定难度副本到指定关卡
     * @param __cb The callback object for the operation.
     **/
    public final void skipCopy_async(AMD_Gm_skipCopy __cb, int serverId, String roleId, int diff, int copyId)
        throws NoteException
    {
        skipCopy_async(__cb, serverId, roleId, diff, copyId, null);
    }

    public final void unforzenAccount_async(AMD_Gm_unforzenAccount __cb, String account)
        throws NoteException
    {
        unforzenAccount_async(__cb, account, null);
    }

    public final void updateCDK_async(AMD_Gm_updateCDK __cb, String name, String category, int number, int[] channels, int[] servers, int minLevel, int maxLevel, String factionName, int chargeMoney, String beginTime, String endTime, String remark)
        throws NoteException
    {
        updateCDK_async(__cb, name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, null);
    }

    public final void uploadLoginAnnounce_async(AMD_Gm_uploadLoginAnnounce __cb, byte[] file)
        throws NoteException
    {
        uploadLoginAnnounce_async(__cb, file, null);
    }

    public static Ice.DispatchStatus ___getItemConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Gm_getItemConfig __cb = new _AMD_Gm_getItemConfig(__inS);
        try
        {
            __obj.getItemConfig_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getServerItemConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        serverId = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_getServerItemConfig __cb = new _AMD_Gm_getServerItemConfig(__inS);
        try
        {
            __obj.getServerItemConfig_async(__cb, serverId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getPropertyConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Gm_getPropertyConfig __cb = new _AMD_Gm_getPropertyConfig(__inS);
        try
        {
            __obj.getPropertyConfig_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getPlayerSkillConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Gm_getPlayerSkillConfig __cb = new _AMD_Gm_getPlayerSkillConfig(__inS);
        try
        {
            __obj.getPlayerSkillConfig_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getHeroSkillConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Gm_getHeroSkillConfig __cb = new _AMD_Gm_getHeroSkillConfig(__inS);
        try
        {
            __obj.getHeroSkillConfig_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getRelationConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Gm_getRelationConfig __cb = new _AMD_Gm_getRelationConfig(__inS);
        try
        {
            __obj.getRelationConfig_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getChannelConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getChannelConfig(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___ping(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        GameServerView[] __ret = __obj.ping(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        GameServerViewSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___findRoleViewList(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String accountName;
        String roleName;
        String roleId;
        serverId = __is.readInt();
        accountName = __is.readString();
        roleName = __is.readString();
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Gm_findRoleViewList __cb = new _AMD_Gm_findRoleViewList(__inS);
        try
        {
            __obj.findRoleViewList_async(__cb, serverId, accountName, roleName, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendSystemMail(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleId;
        String roleName;
        String title;
        String content;
        Property[] attach;
        String sendName;
        serverId = __is.readInt();
        roleId = __is.readString();
        roleName = __is.readString();
        title = __is.readString();
        content = __is.readString();
        attach = PropertySeqHelper.read(__is);
        sendName = __is.readString();
        __inS.endReadParams();
        AMD_Gm_sendSystemMail __cb = new _AMD_Gm_sendSystemMail(__inS);
        try
        {
            __obj.sendSystemMail_async(__cb, serverId, roleId, roleName, title, content, attach, sendName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendSystemServerMail(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String title;
        String content;
        Property[] attach;
        String conditionParams;
        String senderName;
        serverId = __is.readInt();
        title = __is.readString();
        content = __is.readString();
        attach = PropertySeqHelper.read(__is);
        conditionParams = __is.readString();
        senderName = __is.readString();
        __inS.endReadParams();
        AMD_Gm_sendSystemServerMail __cb = new _AMD_Gm_sendSystemServerMail(__inS);
        try
        {
            __obj.sendSystemServerMail_async(__cb, serverId, title, content, attach, conditionParams, senderName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___executeGroovyScript(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String script;
        serverId = __is.readInt();
        script = __is.readString();
        __inS.endReadParams();
        AMD_Gm_executeGroovyScript __cb = new _AMD_Gm_executeGroovyScript(__inS);
        try
        {
            __obj.executeGroovyScript_async(__cb, serverId, script, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___executeGroovyCombineScript(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        serverId = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_executeGroovyCombineScript __cb = new _AMD_Gm_executeGroovyCombineScript(__inS);
        try
        {
            __obj.executeGroovyCombineScript_async(__cb, serverId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___setVipLevel(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleName;
        int vip;
        serverId = __is.readInt();
        roleName = __is.readString();
        vip = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_setVipLevel __cb = new _AMD_Gm_setVipLevel(__inS);
        try
        {
            __obj.setVipLevel_async(__cb, serverId, roleName, vip, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___generateCDK(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String name;
        String category;
        int number;
        int[] channels;
        int[] servers;
        int minLevel;
        int maxLevel;
        String factionName;
        int chargeMoney;
        String beginTime;
        String endTime;
        String remark;
        Property[] content;
        name = __is.readString();
        category = __is.readString();
        number = __is.readInt();
        channels = IntSeqHelper.read(__is);
        servers = IntSeqHelper.read(__is);
        minLevel = __is.readInt();
        maxLevel = __is.readInt();
        factionName = __is.readString();
        chargeMoney = __is.readInt();
        beginTime = __is.readString();
        endTime = __is.readString();
        remark = __is.readString();
        content = PropertySeqHelper.read(__is);
        __inS.endReadParams();
        AMD_Gm_generateCDK __cb = new _AMD_Gm_generateCDK(__inS);
        try
        {
            __obj.generateCDK_async(__cb, name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, content, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___updateCDK(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String name;
        String category;
        int number;
        int[] channels;
        int[] servers;
        int minLevel;
        int maxLevel;
        String factionName;
        int chargeMoney;
        String beginTime;
        String endTime;
        String remark;
        name = __is.readString();
        category = __is.readString();
        number = __is.readInt();
        channels = IntSeqHelper.read(__is);
        servers = IntSeqHelper.read(__is);
        minLevel = __is.readInt();
        maxLevel = __is.readInt();
        factionName = __is.readString();
        chargeMoney = __is.readInt();
        beginTime = __is.readString();
        endTime = __is.readString();
        remark = __is.readString();
        __inS.endReadParams();
        AMD_Gm_updateCDK __cb = new _AMD_Gm_updateCDK(__inS);
        try
        {
            __obj.updateCDK_async(__cb, name, category, number, channels, servers, minLevel, maxLevel, factionName, chargeMoney, beginTime, endTime, remark, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___loadCDK(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String category;
        category = __is.readString();
        __inS.endReadParams();
        AMD_Gm_loadCDK __cb = new _AMD_Gm_loadCDK(__inS);
        try
        {
            __obj.loadCDK_async(__cb, category, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___deleteCDK(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String category;
        category = __is.readString();
        __inS.endReadParams();
        AMD_Gm_deleteCDK __cb = new _AMD_Gm_deleteCDK(__inS);
        try
        {
            __obj.deleteCDK_async(__cb, category, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendAnnounce(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String content;
        serverId = __is.readInt();
        content = __is.readString();
        __inS.endReadParams();
        AMD_Gm_sendAnnounce __cb = new _AMD_Gm_sendAnnounce(__inS);
        try
        {
            __obj.sendAnnounce_async(__cb, serverId, content, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___kickRole(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String account;
        String roleId;
        serverId = __is.readInt();
        account = __is.readString();
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Gm_kickRole __cb = new _AMD_Gm_kickRole(__inS);
        try
        {
            __obj.kickRole_async(__cb, serverId, account, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___fobidenChat(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleId;
        String releaseTime;
        serverId = __is.readInt();
        roleId = __is.readString();
        releaseTime = __is.readString();
        __inS.endReadParams();
        AMD_Gm_fobidenChat __cb = new _AMD_Gm_fobidenChat(__inS);
        try
        {
            __obj.fobidenChat_async(__cb, serverId, roleId, releaseTime, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___forzenAccount(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String releaseTime;
        account = __is.readString();
        releaseTime = __is.readString();
        __inS.endReadParams();
        AMD_Gm_forzenAccount __cb = new _AMD_Gm_forzenAccount(__inS);
        try
        {
            __obj.forzenAccount_async(__cb, account, releaseTime, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___unforzenAccount(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        account = __is.readString();
        __inS.endReadParams();
        AMD_Gm_unforzenAccount __cb = new _AMD_Gm_unforzenAccount(__inS);
        try
        {
            __obj.unforzenAccount_async(__cb, account, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getFactionList(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String factionName;
        serverId = __is.readInt();
        factionName = __is.readString();
        __inS.endReadParams();
        AMD_Gm_getFactionList __cb = new _AMD_Gm_getFactionList(__inS);
        try
        {
            __obj.getFactionList_async(__cb, serverId, factionName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getFactionMemberList(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String factionName;
        serverId = __is.readInt();
        factionName = __is.readString();
        __inS.endReadParams();
        AMD_Gm_getFactionMemberList __cb = new _AMD_Gm_getFactionMemberList(__inS);
        try
        {
            __obj.getFactionMemberList_async(__cb, serverId, factionName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getRankList(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        int type;
        serverId = __is.readInt();
        type = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_getRankList __cb = new _AMD_Gm_getRankList(__inS);
        try
        {
            __obj.getRankList_async(__cb, serverId, type, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getPayLog(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleName;
        serverId = __is.readInt();
        roleName = __is.readString();
        __inS.endReadParams();
        AMD_Gm_getPayLog __cb = new _AMD_Gm_getPayLog(__inS);
        try
        {
            __obj.getPayLog_async(__cb, serverId, roleName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___mockCharge(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String roleId;
        int channelId;
        int serverId;
        int cent;
        account = __is.readString();
        roleId = __is.readString();
        channelId = __is.readInt();
        serverId = __is.readInt();
        cent = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_mockCharge __cb = new _AMD_Gm_mockCharge(__inS);
        try
        {
            __obj.mockCharge_async(__cb, account, roleId, channelId, serverId, cent, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___editGameServer(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        String name;
        int showId;
        String gateIp;
        boolean isNew;
        boolean cpShowOnly;
        boolean cpEnterOnly;
        int onlineLimit;
        int targetId;
        id = __is.readInt();
        name = __is.readString();
        showId = __is.readInt();
        gateIp = __is.readString();
        isNew = __is.readBool();
        cpShowOnly = __is.readBool();
        cpEnterOnly = __is.readBool();
        onlineLimit = __is.readInt();
        targetId = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_editGameServer __cb = new _AMD_Gm_editGameServer(__inS);
        try
        {
            __obj.editGameServer_async(__cb, id, name, showId, gateIp, isNew, cpShowOnly, cpEnterOnly, onlineLimit, targetId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___editChannel(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        String name;
        String orderUrl;
        id = __is.readInt();
        name = __is.readString();
        orderUrl = __is.readString();
        __inS.endReadParams();
        AMD_Gm_editChannel __cb = new _AMD_Gm_editChannel(__inS);
        try
        {
            __obj.editChannel_async(__cb, id, name, orderUrl, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___uploadLoginAnnounce(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte[] file;
        file = ByteSeqHelper.read(__is);
        __inS.endReadParams();
        AMD_Gm_uploadLoginAnnounce __cb = new _AMD_Gm_uploadLoginAnnounce(__inS);
        try
        {
            __obj.uploadLoginAnnounce_async(__cb, file, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___setRecommendServer(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        serverId = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_setRecommendServer __cb = new _AMD_Gm_setRecommendServer(__inS);
        try
        {
            __obj.setRecommendServer_async(__cb, serverId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getCurrentWhiteList(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            WhiteList[] __ret = __obj.getCurrentWhiteList(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            WhiteListSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setWhiteList(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        WhiteList param;
        param = new WhiteList();
        param.__read(__is);
        __inS.endReadParams();
        AMD_Gm_setWhiteList __cb = new _AMD_Gm_setWhiteList(__inS);
        try
        {
            __obj.setWhiteList_async(__cb, param, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getGuideConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            GuideConfig __ret = __obj.getGuideConfig(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setGuideConfig(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        GuideConfig config;
        config = new GuideConfig();
        config.__read(__is);
        __inS.endReadParams();
        try
        {
            __obj.setGuideConfig(config, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___reloadScript(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        ScriptReloadConfig config;
        serverId = __is.readInt();
        config = new ScriptReloadConfig();
        config.__read(__is);
        __inS.endReadParams();
        AMD_Gm_reloadScript __cb = new _AMD_Gm_reloadScript(__inS);
        try
        {
            __obj.reloadScript_async(__cb, serverId, config, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___deleteItem(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleId;
        String itemId;
        int num;
        serverId = __is.readInt();
        roleId = __is.readString();
        itemId = __is.readString();
        num = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_deleteItem __cb = new _AMD_Gm_deleteItem(__inS);
        try
        {
            __obj.deleteItem_async(__cb, serverId, roleId, itemId, num, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___addSycee(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleName;
        int sycee;
        serverId = __is.readInt();
        roleName = __is.readString();
        sycee = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_addSycee __cb = new _AMD_Gm_addSycee(__inS);
        try
        {
            __obj.addSycee_async(__cb, serverId, roleName, sycee, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___addVipExp(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleName;
        int exp;
        serverId = __is.readInt();
        roleName = __is.readString();
        exp = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_addVipExp __cb = new _AMD_Gm_addVipExp(__inS);
        try
        {
            __obj.addVipExp_async(__cb, serverId, roleName, exp, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___skipCopy(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleId;
        int diff;
        int copyId;
        serverId = __is.readInt();
        roleId = __is.readString();
        diff = __is.readInt();
        copyId = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_skipCopy __cb = new _AMD_Gm_skipCopy(__inS);
        try
        {
            __obj.skipCopy_async(__cb, serverId, roleId, diff, copyId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___addWheelCount(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleId;
        int count;
        int wheelType;
        serverId = __is.readInt();
        roleId = __is.readString();
        count = __is.readInt();
        wheelType = __is.readInt();
        __inS.endReadParams();
        AMD_Gm_addWheelCount __cb = new _AMD_Gm_addWheelCount(__inS);
        try
        {
            __obj.addWheelCount_async(__cb, serverId, roleId, count, wheelType, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___download(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String roleId;
        serverId = __is.readInt();
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Gm_download __cb = new _AMD_Gm_download(__inS);
        try
        {
            __obj.download_async(__cb, serverId, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___importRole(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        byte[] data;
        String roleId;
        serverId = __is.readInt();
        data = ByteSeqHelper.read(__is);
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Gm_importRole __cb = new _AMD_Gm_importRole(__inS);
        try
        {
            __obj.importRole_async(__cb, serverId, data, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___findFuzzyRoleViewList(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String accountName;
        String roleName;
        serverId = __is.readInt();
        accountName = __is.readString();
        roleName = __is.readString();
        __inS.endReadParams();
        AMD_Gm_findFuzzyRoleViewList __cb = new _AMD_Gm_findFuzzyRoleViewList(__inS);
        try
        {
            __obj.findFuzzyRoleViewList_async(__cb, serverId, accountName, roleName, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryCdkByCDK(Gm __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        String cdk;
        serverId = __is.readInt();
        cdk = __is.readString();
        __inS.endReadParams();
        AMD_Gm_queryCdkByCDK __cb = new _AMD_Gm_queryCdkByCDK(__inS);
        try
        {
            __obj.queryCdkByCDK_async(__cb, serverId, cdk, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "addSycee",
        "addVipExp",
        "addWheelCount",
        "deleteCDK",
        "deleteItem",
        "download",
        "editChannel",
        "editGameServer",
        "executeGroovyCombineScript",
        "executeGroovyScript",
        "findFuzzyRoleViewList",
        "findRoleViewList",
        "fobidenChat",
        "forzenAccount",
        "generateCDK",
        "getChannelConfig",
        "getCurrentWhiteList",
        "getFactionList",
        "getFactionMemberList",
        "getGuideConfig",
        "getHeroSkillConfig",
        "getItemConfig",
        "getPayLog",
        "getPlayerSkillConfig",
        "getPropertyConfig",
        "getRankList",
        "getRelationConfig",
        "getServerItemConfig",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "importRole",
        "kickRole",
        "loadCDK",
        "mockCharge",
        "ping",
        "queryCdkByCDK",
        "reloadScript",
        "sendAnnounce",
        "sendSystemMail",
        "sendSystemServerMail",
        "setGuideConfig",
        "setRecommendServer",
        "setVipLevel",
        "setWhiteList",
        "skipCopy",
        "unforzenAccount",
        "updateCDK",
        "uploadLoginAnnounce"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___addSycee(this, in, __current);
            }
            case 1:
            {
                return ___addVipExp(this, in, __current);
            }
            case 2:
            {
                return ___addWheelCount(this, in, __current);
            }
            case 3:
            {
                return ___deleteCDK(this, in, __current);
            }
            case 4:
            {
                return ___deleteItem(this, in, __current);
            }
            case 5:
            {
                return ___download(this, in, __current);
            }
            case 6:
            {
                return ___editChannel(this, in, __current);
            }
            case 7:
            {
                return ___editGameServer(this, in, __current);
            }
            case 8:
            {
                return ___executeGroovyCombineScript(this, in, __current);
            }
            case 9:
            {
                return ___executeGroovyScript(this, in, __current);
            }
            case 10:
            {
                return ___findFuzzyRoleViewList(this, in, __current);
            }
            case 11:
            {
                return ___findRoleViewList(this, in, __current);
            }
            case 12:
            {
                return ___fobidenChat(this, in, __current);
            }
            case 13:
            {
                return ___forzenAccount(this, in, __current);
            }
            case 14:
            {
                return ___generateCDK(this, in, __current);
            }
            case 15:
            {
                return ___getChannelConfig(this, in, __current);
            }
            case 16:
            {
                return ___getCurrentWhiteList(this, in, __current);
            }
            case 17:
            {
                return ___getFactionList(this, in, __current);
            }
            case 18:
            {
                return ___getFactionMemberList(this, in, __current);
            }
            case 19:
            {
                return ___getGuideConfig(this, in, __current);
            }
            case 20:
            {
                return ___getHeroSkillConfig(this, in, __current);
            }
            case 21:
            {
                return ___getItemConfig(this, in, __current);
            }
            case 22:
            {
                return ___getPayLog(this, in, __current);
            }
            case 23:
            {
                return ___getPlayerSkillConfig(this, in, __current);
            }
            case 24:
            {
                return ___getPropertyConfig(this, in, __current);
            }
            case 25:
            {
                return ___getRankList(this, in, __current);
            }
            case 26:
            {
                return ___getRelationConfig(this, in, __current);
            }
            case 27:
            {
                return ___getServerItemConfig(this, in, __current);
            }
            case 28:
            {
                return ___ice_id(this, in, __current);
            }
            case 29:
            {
                return ___ice_ids(this, in, __current);
            }
            case 30:
            {
                return ___ice_isA(this, in, __current);
            }
            case 31:
            {
                return ___ice_ping(this, in, __current);
            }
            case 32:
            {
                return ___importRole(this, in, __current);
            }
            case 33:
            {
                return ___kickRole(this, in, __current);
            }
            case 34:
            {
                return ___loadCDK(this, in, __current);
            }
            case 35:
            {
                return ___mockCharge(this, in, __current);
            }
            case 36:
            {
                return ___ping(this, in, __current);
            }
            case 37:
            {
                return ___queryCdkByCDK(this, in, __current);
            }
            case 38:
            {
                return ___reloadScript(this, in, __current);
            }
            case 39:
            {
                return ___sendAnnounce(this, in, __current);
            }
            case 40:
            {
                return ___sendSystemMail(this, in, __current);
            }
            case 41:
            {
                return ___sendSystemServerMail(this, in, __current);
            }
            case 42:
            {
                return ___setGuideConfig(this, in, __current);
            }
            case 43:
            {
                return ___setRecommendServer(this, in, __current);
            }
            case 44:
            {
                return ___setVipLevel(this, in, __current);
            }
            case 45:
            {
                return ___setWhiteList(this, in, __current);
            }
            case 46:
            {
                return ___skipCopy(this, in, __current);
            }
            case 47:
            {
                return ___unforzenAccount(this, in, __current);
            }
            case 48:
            {
                return ___updateCDK(this, in, __current);
            }
            case 49:
            {
                return ___uploadLoginAnnounce(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
