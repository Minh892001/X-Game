// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Haoqingbao.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _HaoqingbaoDisp extends Ice.ObjectImpl implements Haoqingbao
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Haoqingbao"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void charge()
        throws NoteException
    {
        charge(null);
    }

    public final void checkout_async(AMD_Haoqingbao_checkout __cb, int num)
        throws NoteException
    {
        checkout_async(__cb, num, null);
    }

    public final void claimRedPacket(String roleId, String packetId)
        throws NoteException
    {
        claimRedPacket(roleId, packetId, null);
    }

    public final void getRedPacketDetail_async(AMD_Haoqingbao_getRedPacketDetail __cb, String packetId)
        throws NoteException
    {
        getRedPacketDetail_async(__cb, packetId, null);
    }

    public final void myRedPacket_async(AMD_Haoqingbao_myRedPacket __cb)
        throws NoteException
    {
        myRedPacket_async(__cb, null);
    }

    public final void openHaoqingbao_async(AMD_Haoqingbao_openHaoqingbao __cb)
        throws NoteException
    {
        openHaoqingbao_async(__cb, null);
    }

    public final String preRecvRedPacket(String packetId)
        throws NoteException
    {
        return preRecvRedPacket(packetId, null);
    }

    public final void rankList_async(AMD_Haoqingbao_rankList __cb, int type)
        throws NoteException
    {
        rankList_async(__cb, type, null);
    }

    public final String recvRedPacket(String packetId)
        throws NoteException
    {
        return recvRedPacket(packetId, null);
    }

    public final void sendRedPacket_async(AMD_Haoqingbao_sendRedPacket __cb, int type, int minLevel, int minVipLevel, int range, int minFriendPoint, int totalYuanbaoNum, int packetNum, String msg)
        throws NoteException
    {
        sendRedPacket_async(__cb, type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, null);
    }

    public static Ice.DispatchStatus ___openHaoqingbao(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Haoqingbao_openHaoqingbao __cb = new _AMD_Haoqingbao_openHaoqingbao(__inS);
        try
        {
            __obj.openHaoqingbao_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendRedPacket(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        int minLevel;
        int minVipLevel;
        int range;
        int minFriendPoint;
        int totalYuanbaoNum;
        int packetNum;
        String msg;
        type = __is.readInt();
        minLevel = __is.readInt();
        minVipLevel = __is.readInt();
        range = __is.readInt();
        minFriendPoint = __is.readInt();
        totalYuanbaoNum = __is.readInt();
        packetNum = __is.readInt();
        msg = __is.readString();
        __inS.endReadParams();
        AMD_Haoqingbao_sendRedPacket __cb = new _AMD_Haoqingbao_sendRedPacket(__inS);
        try
        {
            __obj.sendRedPacket_async(__cb, type, minLevel, minVipLevel, range, minFriendPoint, totalYuanbaoNum, packetNum, msg, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___recvRedPacket(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String packetId;
        packetId = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.recvRedPacket(packetId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___rankList(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        type = __is.readInt();
        __inS.endReadParams();
        AMD_Haoqingbao_rankList __cb = new _AMD_Haoqingbao_rankList(__inS);
        try
        {
            __obj.rankList_async(__cb, type, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getRedPacketDetail(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String packetId;
        packetId = __is.readString();
        __inS.endReadParams();
        AMD_Haoqingbao_getRedPacketDetail __cb = new _AMD_Haoqingbao_getRedPacketDetail(__inS);
        try
        {
            __obj.getRedPacketDetail_async(__cb, packetId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___myRedPacket(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Haoqingbao_myRedPacket __cb = new _AMD_Haoqingbao_myRedPacket(__inS);
        try
        {
            __obj.myRedPacket_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___checkout(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int num;
        num = __is.readInt();
        __inS.endReadParams();
        AMD_Haoqingbao_checkout __cb = new _AMD_Haoqingbao_checkout(__inS);
        try
        {
            __obj.checkout_async(__cb, num, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___charge(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.charge(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___preRecvRedPacket(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String packetId;
        packetId = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.preRecvRedPacket(packetId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___claimRedPacket(Haoqingbao __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        String packetId;
        roleId = __is.readString();
        packetId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.claimRedPacket(roleId, packetId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "charge",
        "checkout",
        "claimRedPacket",
        "getRedPacketDetail",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "myRedPacket",
        "openHaoqingbao",
        "preRecvRedPacket",
        "rankList",
        "recvRedPacket",
        "sendRedPacket"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___charge(this, in, __current);
            }
            case 1:
            {
                return ___checkout(this, in, __current);
            }
            case 2:
            {
                return ___claimRedPacket(this, in, __current);
            }
            case 3:
            {
                return ___getRedPacketDetail(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
            case 8:
            {
                return ___myRedPacket(this, in, __current);
            }
            case 9:
            {
                return ___openHaoqingbao(this, in, __current);
            }
            case 10:
            {
                return ___preRecvRedPacket(this, in, __current);
            }
            case 11:
            {
                return ___rankList(this, in, __current);
            }
            case 12:
            {
                return ___recvRedPacket(this, in, __current);
            }
            case 13:
            {
                return ___sendRedPacket(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
