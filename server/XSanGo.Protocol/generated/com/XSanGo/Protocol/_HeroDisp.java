// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Hero.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _HeroDisp extends Ice.ObjectImpl implements Hero
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Hero"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void activeHeroRelation(String heroId, int orignalRelationId, int level)
        throws NotEnoughMoneyException,
               NoteException
    {
        activeHeroRelation(heroId, orignalRelationId, level, null);
    }

    public final void buyHeroSkillPoint()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyHeroSkillPoint(null);
    }

    /**
     * 获取武将修炼数据，返回HeroPracticeViewSeq的lua
     **/
    public final String getHeroPracticeList(String heroId)
        throws NoteException
    {
        return getHeroPracticeList(heroId, null);
    }

    public final HeroSkillPointView getHeroSkillView()
    {
        return getHeroSkillView(null);
    }

    public final int getSkillPointInterval()
    {
        return getSkillPointInterval(null);
    }

    public final ItemView[] heroColorUp(String heroId)
        throws NotEnoughMoneyException,
               NoteException
    {
        return heroColorUp(heroId, null);
    }

    public final void heroSkillLevelUp(String heroId, int skillId, int upLevel)
        throws NotEnoughMoneyException,
               NoteException
    {
        heroSkillLevelUp(heroId, skillId, upLevel, null);
    }

    public final void heroStarUp(String heroId)
        throws NotEnoughMoneyException,
               NoteException
    {
        heroStarUp(heroId, null);
    }

    /**
     * 修炼，itemIds：逗号分隔的将魂ID
     **/
    public final void practice(String heroId, int id, String itemIds)
        throws NoteException
    {
        practice(heroId, id, itemIds, null);
    }

    public final void removeHeroEquip(String heroId, String equipId)
        throws NoteException
    {
        removeHeroEquip(heroId, equipId, null);
    }

    /**
     * 重置随从  当前武将id、随从位置
     **/
    public final AttendantView resetAttendant(String heroId, byte pos)
        throws NoteException
    {
        return resetAttendant(heroId, pos, null);
    }

    /**
     * 重置修炼属性，返回HeroPracticeViewSeq的lua
     **/
    public final String resetPractice(String heroId, int id)
        throws NoteException
    {
        return resetPractice(heroId, id, null);
    }

    public final void setHeroAttendant(String heroId, byte pos, String attendantId)
        throws NoteException
    {
        setHeroAttendant(heroId, pos, attendantId, null);
    }

    public final void setHeroEquip(String heroId, String equipId)
        throws NoteException
    {
        setHeroEquip(heroId, equipId, null);
    }

    public final HeroView summonHero(int templateId)
        throws NotEnoughMoneyException,
               NoteException
    {
        return summonHero(templateId, null);
    }

    public static Ice.DispatchStatus ___heroStarUp(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        heroId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.heroStarUp(heroId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___heroColorUp(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        heroId = __is.readString();
        __inS.endReadParams();
        try
        {
            ItemView[] __ret = __obj.heroColorUp(heroId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            ItemViewSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setHeroEquip(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        String equipId;
        heroId = __is.readString();
        equipId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.setHeroEquip(heroId, equipId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___removeHeroEquip(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        String equipId;
        heroId = __is.readString();
        equipId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.removeHeroEquip(heroId, equipId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setHeroAttendant(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        byte pos;
        String attendantId;
        heroId = __is.readString();
        pos = __is.readByte();
        attendantId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.setHeroAttendant(heroId, pos, attendantId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___summonHero(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int templateId;
        templateId = __is.readInt();
        __inS.endReadParams();
        try
        {
            HeroView __ret = __obj.summonHero(templateId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getSkillPointInterval(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        int __ret = __obj.getSkillPointInterval(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getHeroSkillView(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        HeroSkillPointView __ret = __obj.getHeroSkillView(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __ret.__write(__os);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___buyHeroSkillPoint(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyHeroSkillPoint(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___heroSkillLevelUp(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        int skillId;
        int upLevel;
        heroId = __is.readString();
        skillId = __is.readInt();
        upLevel = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.heroSkillLevelUp(heroId, skillId, upLevel, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___activeHeroRelation(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        int orignalRelationId;
        int level;
        heroId = __is.readString();
        orignalRelationId = __is.readInt();
        level = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.activeHeroRelation(heroId, orignalRelationId, level, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getHeroPracticeList(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        heroId = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getHeroPracticeList(heroId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___resetPractice(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        int id;
        heroId = __is.readString();
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.resetPractice(heroId, id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___practice(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        int id;
        String itemIds;
        heroId = __is.readString();
        id = __is.readInt();
        itemIds = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.practice(heroId, id, itemIds, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___resetAttendant(Hero __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String heroId;
        byte pos;
        heroId = __is.readString();
        pos = __is.readByte();
        __inS.endReadParams();
        try
        {
            AttendantView __ret = __obj.resetAttendant(heroId, pos, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "activeHeroRelation",
        "buyHeroSkillPoint",
        "getHeroPracticeList",
        "getHeroSkillView",
        "getSkillPointInterval",
        "heroColorUp",
        "heroSkillLevelUp",
        "heroStarUp",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "practice",
        "removeHeroEquip",
        "resetAttendant",
        "resetPractice",
        "setHeroAttendant",
        "setHeroEquip",
        "summonHero"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___activeHeroRelation(this, in, __current);
            }
            case 1:
            {
                return ___buyHeroSkillPoint(this, in, __current);
            }
            case 2:
            {
                return ___getHeroPracticeList(this, in, __current);
            }
            case 3:
            {
                return ___getHeroSkillView(this, in, __current);
            }
            case 4:
            {
                return ___getSkillPointInterval(this, in, __current);
            }
            case 5:
            {
                return ___heroColorUp(this, in, __current);
            }
            case 6:
            {
                return ___heroSkillLevelUp(this, in, __current);
            }
            case 7:
            {
                return ___heroStarUp(this, in, __current);
            }
            case 8:
            {
                return ___ice_id(this, in, __current);
            }
            case 9:
            {
                return ___ice_ids(this, in, __current);
            }
            case 10:
            {
                return ___ice_isA(this, in, __current);
            }
            case 11:
            {
                return ___ice_ping(this, in, __current);
            }
            case 12:
            {
                return ___practice(this, in, __current);
            }
            case 13:
            {
                return ___removeHeroEquip(this, in, __current);
            }
            case 14:
            {
                return ___resetAttendant(this, in, __current);
            }
            case 15:
            {
                return ___resetPractice(this, in, __current);
            }
            case 16:
            {
                return ___setHeroAttendant(this, in, __current);
            }
            case 17:
            {
                return ___setHeroEquip(this, in, __current);
            }
            case 18:
            {
                return ___summonHero(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
