// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Item.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _ItemDisp extends Ice.ObjectImpl implements Item
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Item"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 阵法进阶,id用英文逗号分隔
     **/
    public final void advancedFormationBuff(String ids)
        throws NoteException
    {
        advancedFormationBuff(ids, null);
    }

    public final void drawCompositeChestItem(int itemIndex, String itemId)
        throws NoteException
    {
        drawCompositeChestItem(itemIndex, itemId, null);
    }

    public final ItemView levelUpFormationBuff(String id, String[] idArray)
        throws NoteException
    {
        return levelUpFormationBuff(id, idArray, null);
    }

    public final void sale(String id, int count)
        throws NoteException
    {
        sale(id, count, null);
    }

    /**
     * 切换阵法进阶类型,type对应脚本里面值
     **/
    public final void selectAdvancedType(int type)
        throws NoteException
    {
        selectAdvancedType(type, null);
    }

    public final ItemView[] useChestItem(String id, int count)
        throws NotEnoughMoneyException,
               NoteException
    {
        return useChestItem(id, count, null);
    }

    public final void useItem(String id, int count, String params)
        throws NoteException
    {
        useItem(id, count, params, null);
    }

    public static Ice.DispatchStatus ___levelUpFormationBuff(Item __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        String[] idArray;
        id = __is.readString();
        idArray = StringSeqHelper.read(__is);
        __inS.endReadParams();
        try
        {
            ItemView __ret = __obj.levelUpFormationBuff(id, idArray, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __ret.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___sale(Item __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        int count;
        id = __is.readString();
        count = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.sale(id, count, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___useItem(Item __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        int count;
        String params;
        id = __is.readString();
        count = __is.readInt();
        params = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.useItem(id, count, params, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___useChestItem(Item __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        int count;
        id = __is.readString();
        count = __is.readInt();
        __inS.endReadParams();
        try
        {
            ItemView[] __ret = __obj.useChestItem(id, count, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            ItemViewSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___drawCompositeChestItem(Item __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int itemIndex;
        String itemId;
        itemIndex = __is.readInt();
        itemId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.drawCompositeChestItem(itemIndex, itemId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___selectAdvancedType(Item __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        type = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.selectAdvancedType(type, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___advancedFormationBuff(Item __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String ids;
        ids = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.advancedFormationBuff(ids, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "advancedFormationBuff",
        "drawCompositeChestItem",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "levelUpFormationBuff",
        "sale",
        "selectAdvancedType",
        "useChestItem",
        "useItem"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___advancedFormationBuff(this, in, __current);
            }
            case 1:
            {
                return ___drawCompositeChestItem(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___levelUpFormationBuff(this, in, __current);
            }
            case 7:
            {
                return ___sale(this, in, __current);
            }
            case 8:
            {
                return ___selectAdvancedType(this, in, __current);
            }
            case 9:
            {
                return ___useChestItem(this, in, __current);
            }
            case 10:
            {
                return ___useItem(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
