// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Ladder.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _LadderDisp extends Ice.ObjectImpl implements Ladder
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Ladder"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 自动战报 return：LadderAutoFightResult的lua
     * @param __cb The callback object for the operation.
     **/
    public final void autoFight_async(AMD_Ladder_autoFight __cb)
        throws NoteException
    {
        autoFight_async(__cb, null);
    }

    public final void beginFight_async(AMD_Ladder_beginFight __cb, String formationId)
        throws NoteException
    {
        beginFight_async(__cb, formationId, null);
    }

    public final void buyChallenge()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyChallenge(null);
    }

    public final String endFight(String rivalId, int resFlag, byte remainHero)
        throws NoteException
    {
        return endFight(rivalId, resFlag, remainHero, null);
    }

    public final void reward(int rewardId)
        throws NoteException
    {
        reward(rewardId, null);
    }

    public final void saveGurard(String guardId)
        throws NoteException
    {
        saveGurard(guardId, null);
    }

    public final void selectLadder_async(AMD_Ladder_selectLadder __cb)
        throws NoteException
    {
        selectLadder_async(__cb, null);
    }

    public final void showRankList_async(AMD_Ladder_showRankList __cb)
        throws NoteException
    {
        showRankList_async(__cb, null);
    }

    public static Ice.DispatchStatus ___selectLadder(Ladder __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Ladder_selectLadder __cb = new _AMD_Ladder_selectLadder(__inS);
        try
        {
            __obj.selectLadder_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___showRankList(Ladder __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Ladder_showRankList __cb = new _AMD_Ladder_showRankList(__inS);
        try
        {
            __obj.showRankList_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___saveGurard(Ladder __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String guardId;
        guardId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.saveGurard(guardId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyChallenge(Ladder __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyChallenge(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___beginFight(Ladder __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String formationId;
        formationId = __is.readString();
        __inS.endReadParams();
        AMD_Ladder_beginFight __cb = new _AMD_Ladder_beginFight(__inS);
        try
        {
            __obj.beginFight_async(__cb, formationId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___endFight(Ladder __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String rivalId;
        int resFlag;
        byte remainHero;
        rivalId = __is.readString();
        resFlag = __is.readInt();
        remainHero = __is.readByte();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.endFight(rivalId, resFlag, remainHero, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___reward(Ladder __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int rewardId;
        rewardId = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.reward(rewardId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___autoFight(Ladder __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Ladder_autoFight __cb = new _AMD_Ladder_autoFight(__inS);
        try
        {
            __obj.autoFight_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "autoFight",
        "beginFight",
        "buyChallenge",
        "endFight",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "reward",
        "saveGurard",
        "selectLadder",
        "showRankList"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___autoFight(this, in, __current);
            }
            case 1:
            {
                return ___beginFight(this, in, __current);
            }
            case 2:
            {
                return ___buyChallenge(this, in, __current);
            }
            case 3:
            {
                return ___endFight(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
            case 8:
            {
                return ___reward(this, in, __current);
            }
            case 9:
            {
                return ___saveGurard(this, in, __current);
            }
            case 10:
            {
                return ___selectLadder(this, in, __current);
            }
            case 11:
            {
                return ___showRankList(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
