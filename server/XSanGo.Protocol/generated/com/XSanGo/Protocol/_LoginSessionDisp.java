// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LoginSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _LoginSessionDisp extends Ice.ObjectImpl implements LoginSession
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::com::XSanGo::Protocol::LoginSession"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[2];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[2];
    }

    public static String ice_staticId()
    {
        return __ids[2];
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     **/
    public final void destroy()
    {
        destroy(null);
    }

    public final void login_async(AMD_LoginSession_login __cb, String account, String password)
        throws NoteException
    {
        login_async(__cb, account, password, null);
    }

    public final void register_async(AMD_LoginSession_register __cb, String account, String password)
        throws NoteException
    {
        register_async(__cb, account, password, null);
    }

    public final void selectServer_async(AMD_LoginSession_selectServer __cb, int serverId)
        throws NoteException
    {
        selectServer_async(__cb, serverId, null);
    }

    public final void setCallback(LoginCallbackPrx cb, String macAddress, int packageId)
    {
        setCallback(cb, macAddress, packageId, null);
    }

    public static Ice.DispatchStatus ___setCallback(LoginSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        LoginCallbackPrx cb;
        String macAddress;
        int packageId;
        cb = LoginCallbackPrxHelper.__read(__is);
        macAddress = __is.readString();
        packageId = __is.readInt();
        __inS.endReadParams();
        __obj.setCallback(cb, macAddress, packageId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___register(LoginSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String password;
        account = __is.readString();
        password = __is.readString();
        __inS.endReadParams();
        AMD_LoginSession_register __cb = new _AMD_LoginSession_register(__inS);
        try
        {
            __obj.register_async(__cb, account, password, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___login(LoginSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String account;
        String password;
        account = __is.readString();
        password = __is.readString();
        __inS.endReadParams();
        AMD_LoginSession_login __cb = new _AMD_LoginSession_login(__inS);
        try
        {
            __obj.login_async(__cb, account, password, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___selectServer(LoginSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int serverId;
        serverId = __is.readInt();
        __inS.endReadParams();
        AMD_LoginSession_selectServer __cb = new _AMD_LoginSession_selectServer(__inS);
        try
        {
            __obj.selectServer_async(__cb, serverId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "destroy",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "login",
        "register",
        "selectServer",
        "setCallback"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return Glacier2._SessionDisp.___destroy(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___login(this, in, __current);
            }
            case 6:
            {
                return ___register(this, in, __current);
            }
            case 7:
            {
                return ___selectServer(this, in, __current);
            }
            case 8:
            {
                return ___setCallback(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
