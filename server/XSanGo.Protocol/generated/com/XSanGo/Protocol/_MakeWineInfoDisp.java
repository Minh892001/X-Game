// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `MakeWine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _MakeWineInfoDisp extends Ice.ObjectImpl implements MakeWineInfo
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::MakeWineInfo"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 兑换 id:编号, num:多少组
     **/
    public final void exchange(int id, int num)
        throws NoteException
    {
        exchange(id, num, null);
    }

    /**
     * 兑换界面 MakeWineExchangeView
     **/
    public final String exchangeView()
        throws NoteException
    {
        return exchangeView(null);
    }

    /**
     * 酿酒 id:目标ID,   type: 0:酿酒一瓶, 1:全部酿酒,酿完该种类的酒  return MakeResult
     **/
    public final String make(int id, int type)
        throws NotEnoughException,
               NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return make(id, type, null);
    }

    /**
     * 酿酒界面, 返回 MakeWineView
     **/
    public final String makeWineView()
        throws NoteException
    {
        return makeWineView(null);
    }

    /**
     * 定时 领取材料  MaterialView
     **/
    public final String receiveMaterial()
        throws NoteException
    {
        return receiveMaterial(null);
    }

    /**
     * 定时 积分奖励 return ScoreAwardView
     **/
    public final String receiveScoreAward()
        throws NoteException
    {
        return receiveScoreAward(null);
    }

    /**
     * 领取分享奖励 condition 0:全部   1: 只看好友 return 2:我的分享 ,   startIndex:分页起始记录     MakeWineShareView
     * @param __cb The callback object for the operation.
     **/
    public final void receiveShare_async(AMD_MakeWineInfo_receiveShare __cb, String id, int condition, int startIndex)
        throws NoteException
    {
        receiveShare_async(__cb, id, condition, startIndex, null);
    }

    /**
     * 查看积分榜 return MakeWineScoreRank
     **/
    public final String scoreRank()
        throws NoteException
    {
        return scoreRank(null);
    }

    /**
     * 查看排名奖励 return MakeWineScoreRankAward
     **/
    public final String scoreRankAward()
        throws NoteException
    {
        return scoreRankAward(null);
    }

    /**
     * 查看 日志信息 1:酿造   2:领取分享  3:兑换
     * 酿酒日志：【05-06 17：30：59】,酿造【果酒×10】，【酿造积分+10】，【兑换积分+10】
     * 领取日志：【05-06 17：30：59】,玩家【玩家ID】领取你分享的【葡萄酒X2】，【分享积分+10】
     * 兑换日志：【05-06 17：30：59】,兑换【紫武器宝箱X1】，花费【100兑换积分】
     **/
    public final String seeLog(int type)
        throws NoteException
    {
        return seeLog(type, null);
    }

    /**
     * 分享 id:目标 , count:多少组
     **/
    public final void share(int id, int count)
        throws NoteException
    {
        share(id, count, null);
    }

    public final void shareView_async(AMD_MakeWineInfo_shareView __cb, int condition, int startIndex)
        throws NoteException
    {
        shareView_async(__cb, condition, startIndex, null);
    }

    /**
     * 置顶  id:记录ID
     * @param __cb The callback object for the operation.
     **/
    public final void topUp_async(AMD_MakeWineInfo_topUp __cb, String id)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        topUp_async(__cb, id, null);
    }

    /**
     * 查看 酒的详情和奖励 return MakeWineAwardInfoSeq
     **/
    public final String wineInfoView()
        throws NoteException
    {
        return wineInfoView(null);
    }

    public static Ice.DispatchStatus ___makeWineView(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.makeWineView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveMaterial(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.receiveMaterial(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveScoreAward(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.receiveScoreAward(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___make(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int type;
        id = __is.readInt();
        type = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.make(id, type, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___shareView(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int condition;
        int startIndex;
        condition = __is.readInt();
        startIndex = __is.readInt();
        __inS.endReadParams();
        AMD_MakeWineInfo_shareView __cb = new _AMD_MakeWineInfo_shareView(__inS);
        try
        {
            __obj.shareView_async(__cb, condition, startIndex, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___share(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int count;
        id = __is.readInt();
        count = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.share(id, count, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___receiveShare(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        int condition;
        int startIndex;
        id = __is.readString();
        condition = __is.readInt();
        startIndex = __is.readInt();
        __inS.endReadParams();
        AMD_MakeWineInfo_receiveShare __cb = new _AMD_MakeWineInfo_receiveShare(__inS);
        try
        {
            __obj.receiveShare_async(__cb, id, condition, startIndex, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___topUp(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        id = __is.readString();
        __inS.endReadParams();
        AMD_MakeWineInfo_topUp __cb = new _AMD_MakeWineInfo_topUp(__inS);
        try
        {
            __obj.topUp_async(__cb, id, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___exchangeView(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.exchangeView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___exchange(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int num;
        id = __is.readInt();
        num = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.exchange(id, num, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___scoreRank(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.scoreRank(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___scoreRankAward(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.scoreRankAward(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___wineInfoView(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.wineInfoView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___seeLog(MakeWineInfo __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        type = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.seeLog(type, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "exchange",
        "exchangeView",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "make",
        "makeWineView",
        "receiveMaterial",
        "receiveScoreAward",
        "receiveShare",
        "scoreRank",
        "scoreRankAward",
        "seeLog",
        "share",
        "shareView",
        "topUp",
        "wineInfoView"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___exchange(this, in, __current);
            }
            case 1:
            {
                return ___exchangeView(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___make(this, in, __current);
            }
            case 7:
            {
                return ___makeWineView(this, in, __current);
            }
            case 8:
            {
                return ___receiveMaterial(this, in, __current);
            }
            case 9:
            {
                return ___receiveScoreAward(this, in, __current);
            }
            case 10:
            {
                return ___receiveShare(this, in, __current);
            }
            case 11:
            {
                return ___scoreRank(this, in, __current);
            }
            case 12:
            {
                return ___scoreRankAward(this, in, __current);
            }
            case 13:
            {
                return ___seeLog(this, in, __current);
            }
            case 14:
            {
                return ___share(this, in, __current);
            }
            case 15:
            {
                return ___shareView(this, in, __current);
            }
            case 16:
            {
                return ___topUp(this, in, __current);
            }
            case 17:
            {
                return ___wineInfoView(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
