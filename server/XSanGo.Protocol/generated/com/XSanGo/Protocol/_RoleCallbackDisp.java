// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Role.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _RoleCallbackDisp extends Ice.ObjectImpl implements RoleCallback
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::RoleCallback"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void factionCopyState(String roleName, String icon, int vipLevel)
    {
        factionCopyState(roleName, icon, vipLevel, null);
    }

    public final void heroChange(HeroView view)
    {
        heroChange(view, null);
    }

    public final void itemChange(ItemView view)
    {
        itemChange(view, null);
    }

    public final void loginRankList(LoadingRankList listShow)
    {
        loginRankList(listShow, null);
    }

    public final void pushMsgs(String msgs)
    {
        pushMsgs(msgs, null);
    }

    public final void rolePropertyChange(Property pro)
    {
        rolePropertyChange(pro, null);
    }

    public final void showAchieves(int[] achieves)
    {
        showAchieves(achieves, null);
    }

    public final void showRedPointOnMajorUI(MajorUIRedPointNote[] points)
    {
        showRedPointOnMajorUI(points, null);
    }

    public final void showRenameUI()
    {
        showRenameUI(null);
    }

    public final void showTips(String tips)
    {
        showTips(tips, null);
    }

    public final void strPropertyChange(String code, String value)
    {
        strPropertyChange(code, value, null);
    }

    public static Ice.DispatchStatus ___showRenameUI(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.showRenameUI(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___rolePropertyChange(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Property pro;
        pro = new Property();
        pro.__read(__is);
        __inS.endReadParams();
        __obj.rolePropertyChange(pro, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___strPropertyChange(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String code;
        String value;
        code = __is.readString();
        value = __is.readString();
        __inS.endReadParams();
        __obj.strPropertyChange(code, value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___heroChange(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        HeroView view;
        view = new HeroView();
        view.__read(__is);
        __inS.endReadParams();
        __obj.heroChange(view, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___itemChange(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ItemView view;
        view = new ItemView();
        view.__read(__is);
        __inS.endReadParams();
        __obj.itemChange(view, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___showRedPointOnMajorUI(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MajorUIRedPointNote[] points;
        points = MajorUIRedPointNoteSeqHelper.read(__is);
        __inS.endReadParams();
        __obj.showRedPointOnMajorUI(points, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___showTips(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String tips;
        tips = __is.readString();
        __inS.endReadParams();
        __obj.showTips(tips, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___showAchieves(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int[] achieves;
        achieves = IntSeqHelper.read(__is);
        __inS.endReadParams();
        __obj.showAchieves(achieves, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___pushMsgs(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String msgs;
        msgs = __is.readString();
        __inS.endReadParams();
        __obj.pushMsgs(msgs, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___loginRankList(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        LoadingRankList listShow;
        listShow = new LoadingRankList();
        listShow.__read(__is);
        __inS.endReadParams();
        __obj.loginRankList(listShow, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___factionCopyState(RoleCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleName;
        String icon;
        int vipLevel;
        roleName = __is.readString();
        icon = __is.readString();
        vipLevel = __is.readInt();
        __inS.endReadParams();
        __obj.factionCopyState(roleName, icon, vipLevel, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "factionCopyState",
        "heroChange",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "itemChange",
        "loginRankList",
        "pushMsgs",
        "rolePropertyChange",
        "showAchieves",
        "showRedPointOnMajorUI",
        "showRenameUI",
        "showTips",
        "strPropertyChange"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___factionCopyState(this, in, __current);
            }
            case 1:
            {
                return ___heroChange(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___itemChange(this, in, __current);
            }
            case 7:
            {
                return ___loginRankList(this, in, __current);
            }
            case 8:
            {
                return ___pushMsgs(this, in, __current);
            }
            case 9:
            {
                return ___rolePropertyChange(this, in, __current);
            }
            case 10:
            {
                return ___showAchieves(this, in, __current);
            }
            case 11:
            {
                return ___showRedPointOnMajorUI(this, in, __current);
            }
            case 12:
            {
                return ___showRenameUI(this, in, __current);
            }
            case 13:
            {
                return ___showTips(this, in, __current);
            }
            case 14:
            {
                return ___strPropertyChange(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
