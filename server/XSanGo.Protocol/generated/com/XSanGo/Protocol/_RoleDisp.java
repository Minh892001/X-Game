// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Role.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _RoleDisp extends Ice.ObjectImpl implements Role
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Role"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void completeGuide(int guideId)
    {
        completeGuide(guideId, null);
    }

    public final ActivityAnnounceView[] getActivityAnnounce()
    {
        return getActivityAnnounce(null);
    }

    /**
     * 获取双倍卡剩余秒数,返回IntIntPairSeq的lua,0-经验 1-掉落
     **/
    public final String getDoubleCardTime()
        throws NoteException
    {
        return getDoubleCardTime(null);
    }

    public final DuelSkillTemplateView[] getDuelStrategyConfig()
        throws NoteException
    {
        return getDuelStrategyConfig(null);
    }

    public final void getOtherPlayInfo_async(AMD_Role_getOtherPlayInfo __cb, String targetId)
        throws NoteException
    {
        getOtherPlayInfo_async(__cb, targetId, null);
    }

    public final String getReportView(String reportId)
        throws NoteException
    {
        return getReportView(reportId, null);
    }

    public final void getRoleHeros_async(AMD_Role_getRoleHeros __cb, String roleId)
        throws NoteException
    {
        getRoleHeros_async(__cb, roleId, null);
    }

    public final void getRoleViewList_async(AMD_Role_getRoleViewList __cb)
        throws NoteException
    {
        getRoleViewList_async(__cb, null);
    }

    public final String[] getServerOpenTime()
    {
        return getServerOpenTime(null);
    }

    public final void levelUp()
        throws NoteException
    {
        levelUp(null);
    }

    public final SceneDuelView[] openCeremony(int id)
        throws NoteException
    {
        return openCeremony(id, null);
    }

    public final void randomName_async(AMD_Role_randomName __cb, int sex)
    {
        randomName_async(__cb, sex, null);
    }

    public final boolean readActivityAnnounce(int id)
    {
        return readActivityAnnounce(id, null);
    }

    public final void rename_async(AMD_Role_rename __cb, String name)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        rename_async(__cb, name, null);
    }

    public final void resetRole_async(AMD_Role_resetRole __cb)
        throws NoteException
    {
        resetRole_async(__cb, null);
    }

    public final void salary()
        throws NoteException
    {
        salary(null);
    }

    public final void setHeadBorder(String border)
        throws NoteException
    {
        setHeadBorder(border, null);
    }

    public final void setHeadImage(String img)
        throws NoteException
    {
        setHeadImage(img, null);
    }

    public final String setRoleCallback(RoleCallbackPrx cb)
        throws NoteException
    {
        return setRoleCallback(cb, null);
    }

    public final void setSexAndName_async(AMD_Role_setSexAndName __cb, int sex, String name, String inviteCode)
        throws NoteException
    {
        setSexAndName_async(__cb, sex, name, inviteCode, null);
    }

    public final void shareWeixin()
        throws NoteException
    {
        shareWeixin(null);
    }

    public final void xsgPing()
        throws NoteException
    {
        xsgPing(null);
    }

    public static Ice.DispatchStatus ___setRoleCallback(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        RoleCallbackPrx cb;
        cb = RoleCallbackPrxHelper.__read(__is);
        __inS.endReadParams();
        try
        {
            String __ret = __obj.setRoleCallback(cb, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getServerOpenTime(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String[] __ret = __obj.getServerOpenTime(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        StringSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getRoleViewList(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Role_getRoleViewList __cb = new _AMD_Role_getRoleViewList(__inS);
        try
        {
            __obj.getRoleViewList_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___randomName(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int sex;
        sex = __is.readInt();
        __inS.endReadParams();
        AMD_Role_randomName __cb = new _AMD_Role_randomName(__inS);
        try
        {
            __obj.randomName_async(__cb, sex, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___setSexAndName(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int sex;
        String name;
        String inviteCode;
        sex = __is.readInt();
        name = __is.readString();
        inviteCode = __is.readString();
        __inS.endReadParams();
        AMD_Role_setSexAndName __cb = new _AMD_Role_setSexAndName(__inS);
        try
        {
            __obj.setSexAndName_async(__cb, sex, name, inviteCode, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___rename(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String name;
        name = __is.readString();
        __inS.endReadParams();
        AMD_Role_rename __cb = new _AMD_Role_rename(__inS);
        try
        {
            __obj.rename_async(__cb, name, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___levelUp(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.levelUp(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___readActivityAnnounce(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        boolean __ret = __obj.readActivityAnnounce(id, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___salary(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.salary(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getOtherPlayInfo(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        targetId = __is.readString();
        __inS.endReadParams();
        AMD_Role_getOtherPlayInfo __cb = new _AMD_Role_getOtherPlayInfo(__inS);
        try
        {
            __obj.getOtherPlayInfo_async(__cb, targetId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___setHeadImage(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String img;
        img = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.setHeadImage(img, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setHeadBorder(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String border;
        border = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.setHeadBorder(border, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getReportView(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String reportId;
        reportId = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.getReportView(reportId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___completeGuide(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int guideId;
        guideId = __is.readInt();
        __inS.endReadParams();
        __obj.completeGuide(guideId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___openCeremony(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            SceneDuelView[] __ret = __obj.openCeremony(id, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            SceneDuelViewSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getDuelStrategyConfig(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            DuelSkillTemplateView[] __ret = __obj.getDuelStrategyConfig(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            DuelSkillTemplateViewSeqHelper.write(__os, __ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___xsgPing(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.xsgPing(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___resetRole(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Role_resetRole __cb = new _AMD_Role_resetRole(__inS);
        try
        {
            __obj.resetRole_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getActivityAnnounce(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        ActivityAnnounceView[] __ret = __obj.getActivityAnnounce(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        ActivityAnnounceViewSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getDoubleCardTime(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getDoubleCardTime(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___shareWeixin(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.shareWeixin(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getRoleHeros(Role __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roleId;
        roleId = __is.readString();
        __inS.endReadParams();
        AMD_Role_getRoleHeros __cb = new _AMD_Role_getRoleHeros(__inS);
        try
        {
            __obj.getRoleHeros_async(__cb, roleId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "completeGuide",
        "getActivityAnnounce",
        "getDoubleCardTime",
        "getDuelStrategyConfig",
        "getOtherPlayInfo",
        "getReportView",
        "getRoleHeros",
        "getRoleViewList",
        "getServerOpenTime",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "levelUp",
        "openCeremony",
        "randomName",
        "readActivityAnnounce",
        "rename",
        "resetRole",
        "salary",
        "setHeadBorder",
        "setHeadImage",
        "setRoleCallback",
        "setSexAndName",
        "shareWeixin",
        "xsgPing"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___completeGuide(this, in, __current);
            }
            case 1:
            {
                return ___getActivityAnnounce(this, in, __current);
            }
            case 2:
            {
                return ___getDoubleCardTime(this, in, __current);
            }
            case 3:
            {
                return ___getDuelStrategyConfig(this, in, __current);
            }
            case 4:
            {
                return ___getOtherPlayInfo(this, in, __current);
            }
            case 5:
            {
                return ___getReportView(this, in, __current);
            }
            case 6:
            {
                return ___getRoleHeros(this, in, __current);
            }
            case 7:
            {
                return ___getRoleViewList(this, in, __current);
            }
            case 8:
            {
                return ___getServerOpenTime(this, in, __current);
            }
            case 9:
            {
                return ___ice_id(this, in, __current);
            }
            case 10:
            {
                return ___ice_ids(this, in, __current);
            }
            case 11:
            {
                return ___ice_isA(this, in, __current);
            }
            case 12:
            {
                return ___ice_ping(this, in, __current);
            }
            case 13:
            {
                return ___levelUp(this, in, __current);
            }
            case 14:
            {
                return ___openCeremony(this, in, __current);
            }
            case 15:
            {
                return ___randomName(this, in, __current);
            }
            case 16:
            {
                return ___readActivityAnnounce(this, in, __current);
            }
            case 17:
            {
                return ___rename(this, in, __current);
            }
            case 18:
            {
                return ___resetRole(this, in, __current);
            }
            case 19:
            {
                return ___salary(this, in, __current);
            }
            case 20:
            {
                return ___setHeadBorder(this, in, __current);
            }
            case 21:
            {
                return ___setHeadImage(this, in, __current);
            }
            case 22:
            {
                return ___setRoleCallback(this, in, __current);
            }
            case 23:
            {
                return ___setSexAndName(this, in, __current);
            }
            case 24:
            {
                return ___shareWeixin(this, in, __current);
            }
            case 25:
            {
                return ___xsgPing(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
