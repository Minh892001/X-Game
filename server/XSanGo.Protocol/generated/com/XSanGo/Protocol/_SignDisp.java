// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Sign.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _SignDisp extends Ice.ObjectImpl implements Sign
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Sign"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final int autoResign()
        throws NotEnoughYuanBaoException,
               NoteException
    {
        return autoResign(null);
    }

    public final void broadcastLastLottery()
    {
        broadcastLastLottery(null);
    }

    public final void cdkey_async(AMD_Sign_cdkey __cb, String cdkeyCode)
        throws NoteException
    {
        cdkey_async(__cb, cdkeyCode, null);
    }

    public final void collectGiftPack(int count)
        throws NoteException
    {
        collectGiftPack(count, null);
    }

    public final void inviteCode_async(AMD_Sign_inviteCode __cb, String code)
        throws NoteException
    {
        inviteCode_async(__cb, code, null);
    }

    public final void openTheSignView_async(AMD_Sign_openTheSignView __cb)
    {
        openTheSignView_async(__cb, null);
    }

    public final void reqLottery_async(AMD_Sign_reqLottery __cb)
        throws NoteException
    {
        reqLottery_async(__cb, null);
    }

    public final void roulette_async(AMD_Sign_roulette __cb)
        throws NotEnoughMoneyException
    {
        roulette_async(__cb, null);
    }

    public final void signIn(String itemId)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        signIn(itemId, null);
    }

    public static Ice.DispatchStatus ___openTheSignView(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sign_openTheSignView __cb = new _AMD_Sign_openTheSignView(__inS);
        try
        {
            __obj.openTheSignView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___signIn(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String itemId;
        itemId = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.signIn(itemId, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___autoResign(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            int __ret = __obj.autoResign(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___collectGiftPack(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int count;
        count = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.collectGiftPack(count, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___reqLottery(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sign_reqLottery __cb = new _AMD_Sign_reqLottery(__inS);
        try
        {
            __obj.reqLottery_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___roulette(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sign_roulette __cb = new _AMD_Sign_roulette(__inS);
        try
        {
            __obj.roulette_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___cdkey(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String cdkeyCode;
        cdkeyCode = __is.readString();
        __inS.endReadParams();
        AMD_Sign_cdkey __cb = new _AMD_Sign_cdkey(__inS);
        try
        {
            __obj.cdkey_async(__cb, cdkeyCode, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___inviteCode(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String code;
        code = __is.readString();
        __inS.endReadParams();
        AMD_Sign_inviteCode __cb = new _AMD_Sign_inviteCode(__inS);
        try
        {
            __obj.inviteCode_async(__cb, code, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___broadcastLastLottery(Sign __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.broadcastLastLottery(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "autoResign",
        "broadcastLastLottery",
        "cdkey",
        "collectGiftPack",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "inviteCode",
        "openTheSignView",
        "reqLottery",
        "roulette",
        "signIn"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___autoResign(this, in, __current);
            }
            case 1:
            {
                return ___broadcastLastLottery(this, in, __current);
            }
            case 2:
            {
                return ___cdkey(this, in, __current);
            }
            case 3:
            {
                return ___collectGiftPack(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
            case 8:
            {
                return ___inviteCode(this, in, __current);
            }
            case 9:
            {
                return ___openTheSignView(this, in, __current);
            }
            case 10:
            {
                return ___reqLottery(this, in, __current);
            }
            case 11:
            {
                return ___roulette(this, in, __current);
            }
            case 12:
            {
                return ___signIn(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
