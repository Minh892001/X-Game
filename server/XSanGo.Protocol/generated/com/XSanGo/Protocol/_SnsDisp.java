// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Sns.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _SnsDisp extends Ice.ObjectImpl implements Sns
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Sns"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void accept(String player)
        throws NoteException
    {
        accept(player, null);
    }

    public final void acceptJunLing_async(AMD_Sns_acceptJunLing __cb, String targetId)
        throws NoteException
    {
        acceptJunLing_async(__cb, targetId, null);
    }

    public final void addBlacklist(String targetPlayer)
        throws NoteException
    {
        addBlacklist(targetPlayer, null);
    }

    public final void addFoe(String targetPlayer)
        throws NoteException
    {
        addFoe(targetPlayer, null);
    }

    public final void applyForFriend(String targetPlayer)
        throws NoteException
    {
        applyForFriend(targetPlayer, null);
    }

    public final void changeMorePlayers_async(AMD_Sns_changeMorePlayers __cb)
        throws NoteException
    {
        changeMorePlayers_async(__cb, null);
    }

    public final void cleanBlacklist()
    {
        cleanBlacklist(null);
    }

    public final void cleanFoes()
    {
        cleanFoes(null);
    }

    public final void queryAllBlacklist_async(AMD_Sns_queryAllBlacklist __cb)
    {
        queryAllBlacklist_async(__cb, null);
    }

    public final void queryAllFoes_async(AMD_Sns_queryAllFoes __cb)
    {
        queryAllFoes_async(__cb, null);
    }

    public final void queryAllFreinds_async(AMD_Sns_queryAllFreinds __cb)
    {
        queryAllFreinds_async(__cb, null);
    }

    public final void queryAllFreindsView_async(AMD_Sns_queryAllFreindsView __cb)
    {
        queryAllFreindsView_async(__cb, null);
    }

    public final void queryBattleRecordView_async(AMD_Sns_queryBattleRecordView __cb)
        throws NoteException
    {
        queryBattleRecordView_async(__cb, null);
    }

    public final void queryPlayersLike_async(AMD_Sns_queryPlayersLike __cb, int type, String partOfNickname)
    {
        queryPlayersLike_async(__cb, type, partOfNickname, null);
    }

    public final void refuse(String player)
    {
        refuse(player, null);
    }

    public final void removeBlacklist(String targetPlayer)
    {
        removeBlacklist(targetPlayer, null);
    }

    public final void removeFoe(String targetPlayer)
    {
        removeFoe(targetPlayer, null);
    }

    public final void removeFriend(String targetPlayer)
    {
        removeFriend(targetPlayer, null);
    }

    public final void sendJunLing_async(AMD_Sns_sendJunLing __cb, String targetId)
        throws NoteException
    {
        sendJunLing_async(__cb, targetId, null);
    }

    public final void untreatedFriendApplyings_async(AMD_Sns_untreatedFriendApplyings __cb)
    {
        untreatedFriendApplyings_async(__cb, null);
    }

    public static Ice.DispatchStatus ___applyForFriend(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetPlayer;
        targetPlayer = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.applyForFriend(targetPlayer, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___accept(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String player;
        player = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.accept(player, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___refuse(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String player;
        player = __is.readString();
        __inS.endReadParams();
        __obj.refuse(player, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___removeFriend(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetPlayer;
        targetPlayer = __is.readString();
        __inS.endReadParams();
        __obj.removeFriend(targetPlayer, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___untreatedFriendApplyings(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sns_untreatedFriendApplyings __cb = new _AMD_Sns_untreatedFriendApplyings(__inS);
        try
        {
            __obj.untreatedFriendApplyings_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___addFoe(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetPlayer;
        targetPlayer = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.addFoe(targetPlayer, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___removeFoe(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetPlayer;
        targetPlayer = __is.readString();
        __inS.endReadParams();
        __obj.removeFoe(targetPlayer, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___cleanFoes(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.cleanFoes(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___addBlacklist(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetPlayer;
        targetPlayer = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.addBlacklist(targetPlayer, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___removeBlacklist(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetPlayer;
        targetPlayer = __is.readString();
        __inS.endReadParams();
        __obj.removeBlacklist(targetPlayer, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___cleanBlacklist(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.cleanBlacklist(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryAllFreinds(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sns_queryAllFreinds __cb = new _AMD_Sns_queryAllFreinds(__inS);
        try
        {
            __obj.queryAllFreinds_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryAllFreindsView(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sns_queryAllFreindsView __cb = new _AMD_Sns_queryAllFreindsView(__inS);
        try
        {
            __obj.queryAllFreindsView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryPlayersLike(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        String partOfNickname;
        type = __is.readInt();
        partOfNickname = __is.readString();
        __inS.endReadParams();
        AMD_Sns_queryPlayersLike __cb = new _AMD_Sns_queryPlayersLike(__inS);
        try
        {
            __obj.queryPlayersLike_async(__cb, type, partOfNickname, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___changeMorePlayers(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sns_changeMorePlayers __cb = new _AMD_Sns_changeMorePlayers(__inS);
        try
        {
            __obj.changeMorePlayers_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryAllFoes(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sns_queryAllFoes __cb = new _AMD_Sns_queryAllFoes(__inS);
        try
        {
            __obj.queryAllFoes_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryAllBlacklist(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sns_queryAllBlacklist __cb = new _AMD_Sns_queryAllBlacklist(__inS);
        try
        {
            __obj.queryAllBlacklist_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___sendJunLing(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        targetId = __is.readString();
        __inS.endReadParams();
        AMD_Sns_sendJunLing __cb = new _AMD_Sns_sendJunLing(__inS);
        try
        {
            __obj.sendJunLing_async(__cb, targetId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___acceptJunLing(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String targetId;
        targetId = __is.readString();
        __inS.endReadParams();
        AMD_Sns_acceptJunLing __cb = new _AMD_Sns_acceptJunLing(__inS);
        try
        {
            __obj.acceptJunLing_async(__cb, targetId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryBattleRecordView(Sns __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Sns_queryBattleRecordView __cb = new _AMD_Sns_queryBattleRecordView(__inS);
        try
        {
            __obj.queryBattleRecordView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "accept",
        "acceptJunLing",
        "addBlacklist",
        "addFoe",
        "applyForFriend",
        "changeMorePlayers",
        "cleanBlacklist",
        "cleanFoes",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryAllBlacklist",
        "queryAllFoes",
        "queryAllFreinds",
        "queryAllFreindsView",
        "queryBattleRecordView",
        "queryPlayersLike",
        "refuse",
        "removeBlacklist",
        "removeFoe",
        "removeFriend",
        "sendJunLing",
        "untreatedFriendApplyings"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___accept(this, in, __current);
            }
            case 1:
            {
                return ___acceptJunLing(this, in, __current);
            }
            case 2:
            {
                return ___addBlacklist(this, in, __current);
            }
            case 3:
            {
                return ___addFoe(this, in, __current);
            }
            case 4:
            {
                return ___applyForFriend(this, in, __current);
            }
            case 5:
            {
                return ___changeMorePlayers(this, in, __current);
            }
            case 6:
            {
                return ___cleanBlacklist(this, in, __current);
            }
            case 7:
            {
                return ___cleanFoes(this, in, __current);
            }
            case 8:
            {
                return ___ice_id(this, in, __current);
            }
            case 9:
            {
                return ___ice_ids(this, in, __current);
            }
            case 10:
            {
                return ___ice_isA(this, in, __current);
            }
            case 11:
            {
                return ___ice_ping(this, in, __current);
            }
            case 12:
            {
                return ___queryAllBlacklist(this, in, __current);
            }
            case 13:
            {
                return ___queryAllFoes(this, in, __current);
            }
            case 14:
            {
                return ___queryAllFreinds(this, in, __current);
            }
            case 15:
            {
                return ___queryAllFreindsView(this, in, __current);
            }
            case 16:
            {
                return ___queryBattleRecordView(this, in, __current);
            }
            case 17:
            {
                return ___queryPlayersLike(this, in, __current);
            }
            case 18:
            {
                return ___refuse(this, in, __current);
            }
            case 19:
            {
                return ___removeBlacklist(this, in, __current);
            }
            case 20:
            {
                return ___removeFoe(this, in, __current);
            }
            case 21:
            {
                return ___removeFriend(this, in, __current);
            }
            case 22:
            {
                return ___sendJunLing(this, in, __current);
            }
            case 23:
            {
                return ___untreatedFriendApplyings(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
