// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Tournament.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _TournamentDisp extends Ice.ObjectImpl implements Tournament
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Tournament"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void beginFightWith_async(AMD_Tournament_beginFightWith __cb, String opponentId)
        throws NoteException
    {
        beginFightWith_async(__cb, opponentId, null);
    }

    public final void bet_async(AMD_Tournament_bet __cb, int stage, int id, String roleId, int num)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        bet_async(__cb, stage, id, roleId, num, null);
    }

    public final int buyFightCount()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyFightCount(null);
    }

    public final int buyRefreshCount()
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        return buyRefreshCount(null);
    }

    public final String buyShopItem(String id, int num)
        throws NoteException
    {
        return buyShopItem(id, num, null);
    }

    public final String endFightWith(String opponentId, int flag, int remainHeroCount, int power)
        throws NoteException
    {
        return endFightWith(opponentId, flag, remainHeroCount, power, null);
    }

    public final void enterPVPView_async(AMD_Tournament_enterPVPView __cb)
        throws NoteException
    {
        enterPVPView_async(__cb, null);
    }

    public final void enterTournament_async(AMD_Tournament_enterTournament __cb)
        throws NoteException
    {
        enterTournament_async(__cb, null);
    }

    public final void fightWith_async(AMD_Tournament_fightWith __cb, String opponentId)
        throws NoteException
    {
        fightWith_async(__cb, opponentId, null);
    }

    public final void getBetView_async(AMD_Tournament_getBetView __cb)
        throws NoteException
    {
        getBetView_async(__cb, null);
    }

    public final void getFightMovieByRecordId_async(AMD_Tournament_getFightMovieByRecordId __cb, String recordId)
        throws NoteException
    {
        getFightMovieByRecordId_async(__cb, recordId, null);
    }

    public final String getFightRecords()
        throws NoteException
    {
        return getFightRecords(null);
    }

    public final void getKnockOutMovie_async(AMD_Tournament_getKnockOutMovie __cb, int id, int index)
        throws NoteException
    {
        getKnockOutMovie_async(__cb, id, index, null);
    }

    public final void getKnockOutMovieList_async(AMD_Tournament_getKnockOutMovieList __cb, int id)
        throws NoteException
    {
        getKnockOutMovieList_async(__cb, id, null);
    }

    public final void getKnockOutView_async(AMD_Tournament_getKnockOutView __cb)
    {
        getKnockOutView_async(__cb, null);
    }

    public final void getRankList_async(AMD_Tournament_getRankList __cb)
        throws NoteException
    {
        getRankList_async(__cb, null);
    }

    /**
     * 获取自己积分和当日胜利次数 return IntIntPair
     * @param __cb The callback object for the operation.
     **/
    public final void getScoreAndWinNum_async(AMD_Tournament_getScoreAndWinNum __cb)
        throws NoteException
    {
        getScoreAndWinNum_async(__cb, null);
    }

    public final String getTournamentShopView()
        throws NoteException
    {
        return getTournamentShopView(null);
    }

    public final String getTournamentStatus()
        throws NoteException
    {
        return getTournamentStatus(null);
    }

    public final String openSetupFormation()
        throws NoteException
    {
        return openSetupFormation(null);
    }

    public final void openTournamentView_async(AMD_Tournament_openTournamentView __cb)
        throws NoteException
    {
        openTournamentView_async(__cb, null);
    }

    public final String preSignup()
        throws NoteException
    {
        return preSignup(null);
    }

    public final void refreshPVPView_async(AMD_Tournament_refreshPVPView __cb)
        throws NoteException
    {
        refreshPVPView_async(__cb, null);
    }

    public final void setupFormation_async(AMD_Tournament_setupFormation __cb)
        throws NoteException
    {
        setupFormation_async(__cb, null);
    }

    public final void signup_async(AMD_Tournament_signup __cb)
        throws NoteException
    {
        signup_async(__cb, null);
    }

    public static Ice.DispatchStatus ___enterTournament(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_enterTournament __cb = new _AMD_Tournament_enterTournament(__inS);
        try
        {
            __obj.enterTournament_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___openTournamentView(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_openTournamentView __cb = new _AMD_Tournament_openTournamentView(__inS);
        try
        {
            __obj.openTournamentView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___preSignup(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.preSignup(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___signup(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_signup __cb = new _AMD_Tournament_signup(__inS);
        try
        {
            __obj.signup_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___buyRefreshCount(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            int __ret = __obj.buyRefreshCount(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyFightCount(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            int __ret = __obj.buyFightCount(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___enterPVPView(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_enterPVPView __cb = new _AMD_Tournament_enterPVPView(__inS);
        try
        {
            __obj.enterPVPView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___refreshPVPView(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_refreshPVPView __cb = new _AMD_Tournament_refreshPVPView(__inS);
        try
        {
            __obj.refreshPVPView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___beginFightWith(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String opponentId;
        opponentId = __is.readString();
        __inS.endReadParams();
        AMD_Tournament_beginFightWith __cb = new _AMD_Tournament_beginFightWith(__inS);
        try
        {
            __obj.beginFightWith_async(__cb, opponentId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___endFightWith(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String opponentId;
        int flag;
        int remainHeroCount;
        int power;
        opponentId = __is.readString();
        flag = __is.readInt();
        remainHeroCount = __is.readInt();
        power = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.endFightWith(opponentId, flag, remainHeroCount, power, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___fightWith(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String opponentId;
        opponentId = __is.readString();
        __inS.endReadParams();
        AMD_Tournament_fightWith __cb = new _AMD_Tournament_fightWith(__inS);
        try
        {
            __obj.fightWith_async(__cb, opponentId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___openSetupFormation(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.openSetupFormation(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___setupFormation(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_setupFormation __cb = new _AMD_Tournament_setupFormation(__inS);
        try
        {
            __obj.setupFormation_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getFightRecords(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getFightRecords(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getRankList(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_getRankList __cb = new _AMD_Tournament_getRankList(__inS);
        try
        {
            __obj.getRankList_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getFightMovieByRecordId(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String recordId;
        recordId = __is.readString();
        __inS.endReadParams();
        AMD_Tournament_getFightMovieByRecordId __cb = new _AMD_Tournament_getFightMovieByRecordId(__inS);
        try
        {
            __obj.getFightMovieByRecordId_async(__cb, recordId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getKnockOutView(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_getKnockOutView __cb = new _AMD_Tournament_getKnockOutView(__inS);
        try
        {
            __obj.getKnockOutView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getKnockOutMovieList(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        AMD_Tournament_getKnockOutMovieList __cb = new _AMD_Tournament_getKnockOutMovieList(__inS);
        try
        {
            __obj.getKnockOutMovieList_async(__cb, id, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getKnockOutMovie(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        int index;
        id = __is.readInt();
        index = __is.readInt();
        __inS.endReadParams();
        AMD_Tournament_getKnockOutMovie __cb = new _AMD_Tournament_getKnockOutMovie(__inS);
        try
        {
            __obj.getKnockOutMovie_async(__cb, id, index, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getBetView(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_getBetView __cb = new _AMD_Tournament_getBetView(__inS);
        try
        {
            __obj.getBetView_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___bet(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int stage;
        int id;
        String roleId;
        int num;
        stage = __is.readInt();
        id = __is.readInt();
        roleId = __is.readString();
        num = __is.readInt();
        __inS.endReadParams();
        AMD_Tournament_bet __cb = new _AMD_Tournament_bet(__inS);
        try
        {
            __obj.bet_async(__cb, stage, id, roleId, num, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getTournamentStatus(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getTournamentStatus(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getScoreAndWinNum(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_Tournament_getScoreAndWinNum __cb = new _AMD_Tournament_getScoreAndWinNum(__inS);
        try
        {
            __obj.getScoreAndWinNum_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getTournamentShopView(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getTournamentShopView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___buyShopItem(Tournament __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        int num;
        id = __is.readString();
        num = __is.readInt();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.buyShopItem(id, num, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "beginFightWith",
        "bet",
        "buyFightCount",
        "buyRefreshCount",
        "buyShopItem",
        "endFightWith",
        "enterPVPView",
        "enterTournament",
        "fightWith",
        "getBetView",
        "getFightMovieByRecordId",
        "getFightRecords",
        "getKnockOutMovie",
        "getKnockOutMovieList",
        "getKnockOutView",
        "getRankList",
        "getScoreAndWinNum",
        "getTournamentShopView",
        "getTournamentStatus",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "openSetupFormation",
        "openTournamentView",
        "preSignup",
        "refreshPVPView",
        "setupFormation",
        "signup"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___beginFightWith(this, in, __current);
            }
            case 1:
            {
                return ___bet(this, in, __current);
            }
            case 2:
            {
                return ___buyFightCount(this, in, __current);
            }
            case 3:
            {
                return ___buyRefreshCount(this, in, __current);
            }
            case 4:
            {
                return ___buyShopItem(this, in, __current);
            }
            case 5:
            {
                return ___endFightWith(this, in, __current);
            }
            case 6:
            {
                return ___enterPVPView(this, in, __current);
            }
            case 7:
            {
                return ___enterTournament(this, in, __current);
            }
            case 8:
            {
                return ___fightWith(this, in, __current);
            }
            case 9:
            {
                return ___getBetView(this, in, __current);
            }
            case 10:
            {
                return ___getFightMovieByRecordId(this, in, __current);
            }
            case 11:
            {
                return ___getFightRecords(this, in, __current);
            }
            case 12:
            {
                return ___getKnockOutMovie(this, in, __current);
            }
            case 13:
            {
                return ___getKnockOutMovieList(this, in, __current);
            }
            case 14:
            {
                return ___getKnockOutView(this, in, __current);
            }
            case 15:
            {
                return ___getRankList(this, in, __current);
            }
            case 16:
            {
                return ___getScoreAndWinNum(this, in, __current);
            }
            case 17:
            {
                return ___getTournamentShopView(this, in, __current);
            }
            case 18:
            {
                return ___getTournamentStatus(this, in, __current);
            }
            case 19:
            {
                return ___ice_id(this, in, __current);
            }
            case 20:
            {
                return ___ice_ids(this, in, __current);
            }
            case 21:
            {
                return ___ice_isA(this, in, __current);
            }
            case 22:
            {
                return ___ice_ping(this, in, __current);
            }
            case 23:
            {
                return ___openSetupFormation(this, in, __current);
            }
            case 24:
            {
                return ___openTournamentView(this, in, __current);
            }
            case 25:
            {
                return ___preSignup(this, in, __current);
            }
            case 26:
            {
                return ___refreshPVPView(this, in, __current);
            }
            case 27:
            {
                return ___setupFormation(this, in, __current);
            }
            case 28:
            {
                return ___signup(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
