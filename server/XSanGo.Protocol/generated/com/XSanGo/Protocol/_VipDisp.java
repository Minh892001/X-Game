// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Vip.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _VipDisp extends Ice.ObjectImpl implements Vip
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::Vip"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void buyGiftPacks(int vipLevel)
        throws NotEnoughYuanBaoException,
               NoteException
    {
        buyGiftPacks(vipLevel, null);
    }

    public final void buyVipTraderItems(int id)
        throws NotEnoughMoneyException,
               NotEnoughYuanBaoException,
               NoteException
    {
        buyVipTraderItems(id, null);
    }

    public final void checkChargeStatus(int chargeId, boolean chargeForFriend)
        throws NoteException
    {
        checkChargeStatus(chargeId, chargeForFriend, null);
    }

    public final void createOrderForAppleAppStore_async(AMD_Vip_createOrderForAppleAppStore __cb, int templateId, String appStoreOrderId, int channel, int appId, String itemId, String mac, String params)
        throws NoteException
    {
        createOrderForAppleAppStore_async(__cb, templateId, appStoreOrderId, channel, appId, itemId, mac, params, null);
    }

    public final void getChannelOrderIdFromPayCenter_async(AMD_Vip_getChannelOrderIdFromPayCenter __cb, int channel, int appId, int money, String mac, String params)
        throws NoteException
    {
        getChannelOrderIdFromPayCenter_async(__cb, channel, appId, money, mac, params, null);
    }

    public final String getGiftPackStatus()
    {
        return getGiftPackStatus(null);
    }

    public final String getVipTraderItems()
    {
        return getVipTraderItems(null);
    }

    public final String openTopupVIew()
    {
        return openTopupVIew(null);
    }

    public static Ice.DispatchStatus ___buyVipTraderItems(Vip __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int id;
        id = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.buyVipTraderItems(id, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughMoneyException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getVipTraderItems(Vip __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.getVipTraderItems(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getGiftPackStatus(Vip __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.getGiftPackStatus(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___buyGiftPacks(Vip __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int vipLevel;
        vipLevel = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.buyGiftPacks(vipLevel, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NotEnoughYuanBaoException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___openTopupVIew(Vip __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.openTopupVIew(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___checkChargeStatus(Vip __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int chargeId;
        boolean chargeForFriend;
        chargeId = __is.readInt();
        chargeForFriend = __is.readBool();
        __inS.endReadParams();
        try
        {
            __obj.checkChargeStatus(chargeId, chargeForFriend, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getChannelOrderIdFromPayCenter(Vip __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int channel;
        int appId;
        int money;
        String mac;
        String params;
        channel = __is.readInt();
        appId = __is.readInt();
        money = __is.readInt();
        mac = __is.readString();
        params = __is.readString();
        __inS.endReadParams();
        AMD_Vip_getChannelOrderIdFromPayCenter __cb = new _AMD_Vip_getChannelOrderIdFromPayCenter(__inS);
        try
        {
            __obj.getChannelOrderIdFromPayCenter_async(__cb, channel, appId, money, mac, params, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___createOrderForAppleAppStore(Vip __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int templateId;
        String appStoreOrderId;
        int channel;
        int appId;
        String itemId;
        String mac;
        String params;
        templateId = __is.readInt();
        appStoreOrderId = __is.readString();
        channel = __is.readInt();
        appId = __is.readInt();
        itemId = __is.readString();
        mac = __is.readString();
        params = __is.readString();
        __inS.endReadParams();
        AMD_Vip_createOrderForAppleAppStore __cb = new _AMD_Vip_createOrderForAppleAppStore(__inS);
        try
        {
            __obj.createOrderForAppleAppStore_async(__cb, templateId, appStoreOrderId, channel, appId, itemId, mac, params, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "buyGiftPacks",
        "buyVipTraderItems",
        "checkChargeStatus",
        "createOrderForAppleAppStore",
        "getChannelOrderIdFromPayCenter",
        "getGiftPackStatus",
        "getVipTraderItems",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "openTopupVIew"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___buyGiftPacks(this, in, __current);
            }
            case 1:
            {
                return ___buyVipTraderItems(this, in, __current);
            }
            case 2:
            {
                return ___checkChargeStatus(this, in, __current);
            }
            case 3:
            {
                return ___createOrderForAppleAppStore(this, in, __current);
            }
            case 4:
            {
                return ___getChannelOrderIdFromPayCenter(this, in, __current);
            }
            case 5:
            {
                return ___getGiftPackStatus(this, in, __current);
            }
            case 6:
            {
                return ___getVipTraderItems(this, in, __current);
            }
            case 7:
            {
                return ___ice_id(this, in, __current);
            }
            case 8:
            {
                return ___ice_ids(this, in, __current);
            }
            case 9:
            {
                return ___ice_isA(this, in, __current);
            }
            case 10:
            {
                return ___ice_ping(this, in, __current);
            }
            case 11:
            {
                return ___openTopupVIew(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
