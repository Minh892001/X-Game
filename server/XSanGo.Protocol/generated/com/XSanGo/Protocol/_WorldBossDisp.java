// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `WorldBoss.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public abstract class _WorldBossDisp extends Ice.ObjectImpl implements WorldBoss
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::XSanGo::Protocol::WorldBoss"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 开始挑战，返回WorldBossChallengeView的lua
     **/
    public final String beginChallenge()
        throws NoteException
    {
        return beginChallenge(null);
    }

    /**
     * 购买鼓舞
     **/
    public final void buyInspire()
        throws NoteException
    {
        buyInspire(null);
    }

    /**
     * 取消托管
     **/
    public final void cancelTrust()
        throws NoteException
    {
        cancelTrust(null);
    }

    /**
     * 清除CD
     **/
    public final void clearCd()
        throws NoteException
    {
        clearCd(null);
    }

    /**
     * 结束挑战传入真实伤害，返回false表示挑战无效
     **/
    public final boolean endChallenge(int harm, int heroNum)
        throws NoteException
    {
        return endChallenge(harm, heroNum, null);
    }

    /**
     * 获取伤害上榜排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getCountRank_async(AMD_WorldBoss_getCountRank __cb)
        throws NoteException
    {
        getCountRank_async(__cb, null);
    }

    /**
     * 获取伤害排名，返回WorldBossRankView的lua
     * @param __cb The callback object for the operation.
     **/
    public final void getHarmRank_async(AMD_WorldBoss_getHarmRank __cb)
        throws NoteException
    {
        getHarmRank_async(__cb, null);
    }

    /**
     * 领取尾刀奖励
     **/
    public final void getTailAward(int hp)
        throws NoteException
    {
        getTailAward(hp, null);
    }

    /**
     * 返回worldBossView的lua
     **/
    public final String getWorldBossView()
        throws NoteException
    {
        return getWorldBossView(null);
    }

    /**
     * 托管
     **/
    public final void trust()
        throws NoteException
    {
        trust(null);
    }

    public static Ice.DispatchStatus ___getWorldBossView(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.getWorldBossView(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getHarmRank(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_WorldBoss_getHarmRank __cb = new _AMD_WorldBoss_getHarmRank(__inS);
        try
        {
            __obj.getHarmRank_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___getCountRank(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        AMD_WorldBoss_getCountRank __cb = new _AMD_WorldBoss_getCountRank(__inS);
        try
        {
            __obj.getCountRank_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___buyInspire(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.buyInspire(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___clearCd(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.clearCd(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___beginChallenge(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            String __ret = __obj.beginChallenge(__current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___endChallenge(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int harm;
        int heroNum;
        harm = __is.readInt();
        heroNum = __is.readInt();
        __inS.endReadParams();
        try
        {
            boolean __ret = __obj.endChallenge(harm, heroNum, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getTailAward(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int hp;
        hp = __is.readInt();
        __inS.endReadParams();
        try
        {
            __obj.getTailAward(hp, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___trust(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.trust(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___cancelTrust(WorldBoss __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        try
        {
            __obj.cancelTrust(__current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(NoteException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "beginChallenge",
        "buyInspire",
        "cancelTrust",
        "clearCd",
        "endChallenge",
        "getCountRank",
        "getHarmRank",
        "getTailAward",
        "getWorldBossView",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "trust"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___beginChallenge(this, in, __current);
            }
            case 1:
            {
                return ___buyInspire(this, in, __current);
            }
            case 2:
            {
                return ___cancelTrust(this, in, __current);
            }
            case 3:
            {
                return ___clearCd(this, in, __current);
            }
            case 4:
            {
                return ___endChallenge(this, in, __current);
            }
            case 5:
            {
                return ___getCountRank(this, in, __current);
            }
            case 6:
            {
                return ___getHarmRank(this, in, __current);
            }
            case 7:
            {
                return ___getTailAward(this, in, __current);
            }
            case 8:
            {
                return ___getWorldBossView(this, in, __current);
            }
            case 9:
            {
                return ___ice_id(this, in, __current);
            }
            case 10:
            {
                return ___ice_ids(this, in, __current);
            }
            case 11:
            {
                return ___ice_isA(this, in, __current);
            }
            case 12:
            {
                return ___ice_ping(this, in, __current);
            }
            case 13:
            {
                return ___trust(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
