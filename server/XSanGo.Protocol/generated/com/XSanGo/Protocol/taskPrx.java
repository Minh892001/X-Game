// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Task.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.XSanGo.Protocol;

public interface taskPrx extends Ice.ObjectPrx
{
    public String selectTask()
        throws NoteException;

    public String selectTask(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_selectTask();

    public Ice.AsyncResult begin_selectTask(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectTask(Ice.Callback __cb);

    public Ice.AsyncResult begin_selectTask(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectTask(Callback_task_selectTask __cb);

    public Ice.AsyncResult begin_selectTask(java.util.Map<String, String> __ctx, Callback_task_selectTask __cb);

    public String end_selectTask(Ice.AsyncResult __result)
        throws NoteException;

    public boolean selectTask_async(AMI_task_selectTask __cb);

    public boolean selectTask_async(AMI_task_selectTask __cb, java.util.Map<String, String> __ctx);

    public String finishTask(int taskId, int type)
        throws NotEnoughMoneyException,
               NoteException;

    public String finishTask(int taskId, int type, java.util.Map<String, String> __ctx)
        throws NotEnoughMoneyException,
               NoteException;

    public Ice.AsyncResult begin_finishTask(int taskId, int type);

    public Ice.AsyncResult begin_finishTask(int taskId, int type, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_finishTask(int taskId, int type, Ice.Callback __cb);

    public Ice.AsyncResult begin_finishTask(int taskId, int type, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_finishTask(int taskId, int type, Callback_task_finishTask __cb);

    public Ice.AsyncResult begin_finishTask(int taskId, int type, java.util.Map<String, String> __ctx, Callback_task_finishTask __cb);

    public String end_finishTask(Ice.AsyncResult __result)
        throws NotEnoughMoneyException,
               NoteException;

    public boolean finishTask_async(AMI_task_finishTask __cb, int taskId, int type);

    public boolean finishTask_async(AMI_task_finishTask __cb, int taskId, int type, java.util.Map<String, String> __ctx);

    public void receiveActAward(int awardId)
        throws NoteException;

    public void receiveActAward(int awardId, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_receiveActAward(int awardId);

    public Ice.AsyncResult begin_receiveActAward(int awardId, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_receiveActAward(int awardId, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveActAward(int awardId, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveActAward(int awardId, Callback_task_receiveActAward __cb);

    public Ice.AsyncResult begin_receiveActAward(int awardId, java.util.Map<String, String> __ctx, Callback_task_receiveActAward __cb);

    public void end_receiveActAward(Ice.AsyncResult __result)
        throws NoteException;

    public boolean receiveActAward_async(AMI_task_receiveActAward __cb, int awardId);

    public boolean receiveActAward_async(AMI_task_receiveActAward __cb, int awardId, java.util.Map<String, String> __ctx);

    public void receiveStarAward(int star)
        throws NoteException;

    public void receiveStarAward(int star, java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_receiveStarAward(int star);

    public Ice.AsyncResult begin_receiveStarAward(int star, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_receiveStarAward(int star, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveStarAward(int star, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveStarAward(int star, Callback_task_receiveStarAward __cb);

    public Ice.AsyncResult begin_receiveStarAward(int star, java.util.Map<String, String> __ctx, Callback_task_receiveStarAward __cb);

    public void end_receiveStarAward(Ice.AsyncResult __result)
        throws NoteException;

    public boolean receiveStarAward_async(AMI_task_receiveStarAward __cb, int star);

    public boolean receiveStarAward_async(AMI_task_receiveStarAward __cb, int star, java.util.Map<String, String> __ctx);

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     **/
    public String receiveTodayAward(int index)
        throws NoteException;

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __ctx The Context map to send with the invocation.
     **/
    public String receiveTodayAward(int index, java.util.Map<String, String> __ctx)
        throws NoteException;

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveTodayAward(int index);

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveTodayAward(int index, java.util.Map<String, String> __ctx);

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveTodayAward(int index, Ice.Callback __cb);

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveTodayAward(int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveTodayAward(int index, Callback_task_receiveTodayAward __cb);

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receiveTodayAward(int index, java.util.Map<String, String> __ctx, Callback_task_receiveTodayAward __cb);

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __result The asynchronous result object.
     **/
    public String end_receiveTodayAward(Ice.AsyncResult __result)
        throws NoteException;

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __cb The callback object for the operation.
     **/
    public boolean receiveTodayAward_async(AMI_task_receiveTodayAward __cb, int index);

    /**
     * 七日目标-领取每日目标奖励, 返回 SevenTargetView
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean receiveTodayAward_async(AMI_task_receiveTodayAward __cb, int index, java.util.Map<String, String> __ctx);

    public void receiveThreeStarAward()
        throws NoteException;

    public void receiveThreeStarAward(java.util.Map<String, String> __ctx)
        throws NoteException;

    public Ice.AsyncResult begin_receiveThreeStarAward();

    public Ice.AsyncResult begin_receiveThreeStarAward(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_receiveThreeStarAward(Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveThreeStarAward(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_receiveThreeStarAward(Callback_task_receiveThreeStarAward __cb);

    public Ice.AsyncResult begin_receiveThreeStarAward(java.util.Map<String, String> __ctx, Callback_task_receiveThreeStarAward __cb);

    public void end_receiveThreeStarAward(Ice.AsyncResult __result)
        throws NoteException;

    public boolean receiveThreeStarAward_async(AMI_task_receiveThreeStarAward __cb);

    public boolean receiveThreeStarAward_async(AMI_task_receiveThreeStarAward __cb, java.util.Map<String, String> __ctx);
}
